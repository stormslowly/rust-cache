/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 3191:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(857));
const utils_1 = __nccwpck_require__(6283);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return (0, utils_1.toCommandValue)(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return (0, utils_1.toCommandValue)(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 9999:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platform = exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = exports.markdownSummary = exports.summary = exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(3191);
const file_command_1 = __nccwpck_require__(9058);
const utils_1 = __nccwpck_require__(6283);
const os = __importStar(__nccwpck_require__(857));
const path = __importStar(__nccwpck_require__(6928));
const oidc_utils_1 = __nccwpck_require__(3549);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode || (exports.ExitCode = ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = (0, utils_1.toCommandValue)(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        return (0, file_command_1.issueFileCommand)('ENV', (0, file_command_1.prepareKeyValueMessage)(name, val));
    }
    (0, command_1.issueCommand)('set-env', { name }, convertedVal);
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    (0, command_1.issueCommand)('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        (0, file_command_1.issueFileCommand)('PATH', inputPath);
    }
    else {
        (0, command_1.issueCommand)('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    if (options && options.trimWhitespace === false) {
        return inputs;
    }
    return inputs.map(input => input.trim());
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    const filePath = process.env['GITHUB_OUTPUT'] || '';
    if (filePath) {
        return (0, file_command_1.issueFileCommand)('OUTPUT', (0, file_command_1.prepareKeyValueMessage)(name, value));
    }
    process.stdout.write(os.EOL);
    (0, command_1.issueCommand)('set-output', { name }, (0, utils_1.toCommandValue)(value));
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    (0, command_1.issue)('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    (0, command_1.issueCommand)('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    (0, command_1.issueCommand)('error', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    (0, command_1.issueCommand)('warning', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    (0, command_1.issueCommand)('notice', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    (0, command_1.issue)('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    (0, command_1.issue)('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    const filePath = process.env['GITHUB_STATE'] || '';
    if (filePath) {
        return (0, file_command_1.issueFileCommand)('STATE', (0, file_command_1.prepareKeyValueMessage)(name, value));
    }
    (0, command_1.issueCommand)('save-state', { name }, (0, utils_1.toCommandValue)(value));
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(1638);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(1638);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(539);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
/**
 * Platform utilities exports
 */
exports.platform = __importStar(__nccwpck_require__(2563));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 9058:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const crypto = __importStar(__nccwpck_require__(6982));
const fs = __importStar(__nccwpck_require__(9896));
const os = __importStar(__nccwpck_require__(857));
const utils_1 = __nccwpck_require__(6283);
function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${(0, utils_1.toCommandValue)(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${crypto.randomUUID()}`;
    const convertedValue = (0, utils_1.toCommandValue)(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
}
exports.prepareKeyValueMessage = prepareKeyValueMessage;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 3549:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(787);
const auth_1 = __nccwpck_require__(3673);
const core_1 = __nccwpck_require__(9999);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                (0, core_1.debug)(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                (0, core_1.setSecret)(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 539:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(6928));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 2563:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDetails = exports.isLinux = exports.isMacOS = exports.isWindows = exports.arch = exports.platform = void 0;
const os_1 = __importDefault(__nccwpck_require__(857));
const exec = __importStar(__nccwpck_require__(8872));
const getWindowsInfo = () => __awaiter(void 0, void 0, void 0, function* () {
    const { stdout: version } = yield exec.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Version"', undefined, {
        silent: true
    });
    const { stdout: name } = yield exec.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Caption"', undefined, {
        silent: true
    });
    return {
        name: name.trim(),
        version: version.trim()
    };
});
const getMacOsInfo = () => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    const { stdout } = yield exec.getExecOutput('sw_vers', undefined, {
        silent: true
    });
    const version = (_b = (_a = stdout.match(/ProductVersion:\s*(.+)/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : '';
    const name = (_d = (_c = stdout.match(/ProductName:\s*(.+)/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : '';
    return {
        name,
        version
    };
});
const getLinuxInfo = () => __awaiter(void 0, void 0, void 0, function* () {
    const { stdout } = yield exec.getExecOutput('lsb_release', ['-i', '-r', '-s'], {
        silent: true
    });
    const [name, version] = stdout.trim().split('\n');
    return {
        name,
        version
    };
});
exports.platform = os_1.default.platform();
exports.arch = os_1.default.arch();
exports.isWindows = exports.platform === 'win32';
exports.isMacOS = exports.platform === 'darwin';
exports.isLinux = exports.platform === 'linux';
function getDetails() {
    return __awaiter(this, void 0, void 0, function* () {
        return Object.assign(Object.assign({}, (yield (exports.isWindows
            ? getWindowsInfo()
            : exports.isMacOS
                ? getMacOsInfo()
                : getLinuxInfo()))), { platform: exports.platform,
            arch: exports.arch,
            isWindows: exports.isWindows,
            isMacOS: exports.isMacOS,
            isLinux: exports.isLinux });
    });
}
exports.getDetails = getDetails;
//# sourceMappingURL=platform.js.map

/***/ }),

/***/ 1638:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(857);
const fs_1 = __nccwpck_require__(9896);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 6283:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 8872:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getExecOutput = exports.exec = void 0;
const string_decoder_1 = __nccwpck_require__(3193);
const tr = __importStar(__nccwpck_require__(3725));
/**
 * Exec a command.
 * Output will be streamed to the live console.
 * Returns promise with return code
 *
 * @param     commandLine        command to execute (can include additional args). Must be correctly escaped.
 * @param     args               optional arguments for tool. Escaping is handled by the lib.
 * @param     options            optional exec options.  See ExecOptions
 * @returns   Promise<number>    exit code
 */
function exec(commandLine, args, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const commandArgs = tr.argStringToArray(commandLine);
        if (commandArgs.length === 0) {
            throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
        }
        // Path to tool to execute should be first arg
        const toolPath = commandArgs[0];
        args = commandArgs.slice(1).concat(args || []);
        const runner = new tr.ToolRunner(toolPath, args, options);
        return runner.exec();
    });
}
exports.exec = exec;
/**
 * Exec a command and get the output.
 * Output will be streamed to the live console.
 * Returns promise with the exit code and collected stdout and stderr
 *
 * @param     commandLine           command to execute (can include additional args). Must be correctly escaped.
 * @param     args                  optional arguments for tool. Escaping is handled by the lib.
 * @param     options               optional exec options.  See ExecOptions
 * @returns   Promise<ExecOutput>   exit code, stdout, and stderr
 */
function getExecOutput(commandLine, args, options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        let stdout = '';
        let stderr = '';
        //Using string decoder covers the case where a mult-byte character is split
        const stdoutDecoder = new string_decoder_1.StringDecoder('utf8');
        const stderrDecoder = new string_decoder_1.StringDecoder('utf8');
        const originalStdoutListener = (_a = options === null || options === void 0 ? void 0 : options.listeners) === null || _a === void 0 ? void 0 : _a.stdout;
        const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;
        const stdErrListener = (data) => {
            stderr += stderrDecoder.write(data);
            if (originalStdErrListener) {
                originalStdErrListener(data);
            }
        };
        const stdOutListener = (data) => {
            stdout += stdoutDecoder.write(data);
            if (originalStdoutListener) {
                originalStdoutListener(data);
            }
        };
        const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), { stdout: stdOutListener, stderr: stdErrListener });
        const exitCode = yield exec(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
        //flush any remaining characters
        stdout += stdoutDecoder.end();
        stderr += stderrDecoder.end();
        return {
            exitCode,
            stdout,
            stderr
        };
    });
}
exports.getExecOutput = getExecOutput;
//# sourceMappingURL=exec.js.map

/***/ }),

/***/ 3725:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.argStringToArray = exports.ToolRunner = void 0;
const os = __importStar(__nccwpck_require__(857));
const events = __importStar(__nccwpck_require__(4434));
const child = __importStar(__nccwpck_require__(5317));
const path = __importStar(__nccwpck_require__(6928));
const io = __importStar(__nccwpck_require__(3357));
const ioUtil = __importStar(__nccwpck_require__(2746));
const timers_1 = __nccwpck_require__(3557);
/* eslint-disable @typescript-eslint/unbound-method */
const IS_WINDOWS = process.platform === 'win32';
/*
 * Class for running command line tools. Handles quoting and arg parsing in a platform agnostic way.
 */
class ToolRunner extends events.EventEmitter {
    constructor(toolPath, args, options) {
        super();
        if (!toolPath) {
            throw new Error("Parameter 'toolPath' cannot be null or empty.");
        }
        this.toolPath = toolPath;
        this.args = args || [];
        this.options = options || {};
    }
    _debug(message) {
        if (this.options.listeners && this.options.listeners.debug) {
            this.options.listeners.debug(message);
        }
    }
    _getCommandString(options, noPrefix) {
        const toolPath = this._getSpawnFileName();
        const args = this._getSpawnArgs(options);
        let cmd = noPrefix ? '' : '[command]'; // omit prefix when piped to a second tool
        if (IS_WINDOWS) {
            // Windows + cmd file
            if (this._isCmdFile()) {
                cmd += toolPath;
                for (const a of args) {
                    cmd += ` ${a}`;
                }
            }
            // Windows + verbatim
            else if (options.windowsVerbatimArguments) {
                cmd += `"${toolPath}"`;
                for (const a of args) {
                    cmd += ` ${a}`;
                }
            }
            // Windows (regular)
            else {
                cmd += this._windowsQuoteCmdArg(toolPath);
                for (const a of args) {
                    cmd += ` ${this._windowsQuoteCmdArg(a)}`;
                }
            }
        }
        else {
            // OSX/Linux - this can likely be improved with some form of quoting.
            // creating processes on Unix is fundamentally different than Windows.
            // on Unix, execvp() takes an arg array.
            cmd += toolPath;
            for (const a of args) {
                cmd += ` ${a}`;
            }
        }
        return cmd;
    }
    _processLineBuffer(data, strBuffer, onLine) {
        try {
            let s = strBuffer + data.toString();
            let n = s.indexOf(os.EOL);
            while (n > -1) {
                const line = s.substring(0, n);
                onLine(line);
                // the rest of the string ...
                s = s.substring(n + os.EOL.length);
                n = s.indexOf(os.EOL);
            }
            return s;
        }
        catch (err) {
            // streaming lines to console is best effort.  Don't fail a build.
            this._debug(`error processing line. Failed with error ${err}`);
            return '';
        }
    }
    _getSpawnFileName() {
        if (IS_WINDOWS) {
            if (this._isCmdFile()) {
                return process.env['COMSPEC'] || 'cmd.exe';
            }
        }
        return this.toolPath;
    }
    _getSpawnArgs(options) {
        if (IS_WINDOWS) {
            if (this._isCmdFile()) {
                let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
                for (const a of this.args) {
                    argline += ' ';
                    argline += options.windowsVerbatimArguments
                        ? a
                        : this._windowsQuoteCmdArg(a);
                }
                argline += '"';
                return [argline];
            }
        }
        return this.args;
    }
    _endsWith(str, end) {
        return str.endsWith(end);
    }
    _isCmdFile() {
        const upperToolPath = this.toolPath.toUpperCase();
        return (this._endsWith(upperToolPath, '.CMD') ||
            this._endsWith(upperToolPath, '.BAT'));
    }
    _windowsQuoteCmdArg(arg) {
        // for .exe, apply the normal quoting rules that libuv applies
        if (!this._isCmdFile()) {
            return this._uvQuoteCmdArg(arg);
        }
        // otherwise apply quoting rules specific to the cmd.exe command line parser.
        // the libuv rules are generic and are not designed specifically for cmd.exe
        // command line parser.
        //
        // for a detailed description of the cmd.exe command line parser, refer to
        // http://stackoverflow.com/questions/4094699/how-does-the-windows-command-interpreter-cmd-exe-parse-scripts/7970912#7970912
        // need quotes for empty arg
        if (!arg) {
            return '""';
        }
        // determine whether the arg needs to be quoted
        const cmdSpecialChars = [
            ' ',
            '\t',
            '&',
            '(',
            ')',
            '[',
            ']',
            '{',
            '}',
            '^',
            '=',
            ';',
            '!',
            "'",
            '+',
            ',',
            '`',
            '~',
            '|',
            '<',
            '>',
            '"'
        ];
        let needsQuotes = false;
        for (const char of arg) {
            if (cmdSpecialChars.some(x => x === char)) {
                needsQuotes = true;
                break;
            }
        }
        // short-circuit if quotes not needed
        if (!needsQuotes) {
            return arg;
        }
        // the following quoting rules are very similar to the rules that by libuv applies.
        //
        // 1) wrap the string in quotes
        //
        // 2) double-up quotes - i.e. " => ""
        //
        //    this is different from the libuv quoting rules. libuv replaces " with \", which unfortunately
        //    doesn't work well with a cmd.exe command line.
        //
        //    note, replacing " with "" also works well if the arg is passed to a downstream .NET console app.
        //    for example, the command line:
        //          foo.exe "myarg:""my val"""
        //    is parsed by a .NET console app into an arg array:
        //          [ "myarg:\"my val\"" ]
        //    which is the same end result when applying libuv quoting rules. although the actual
        //    command line from libuv quoting rules would look like:
        //          foo.exe "myarg:\"my val\""
        //
        // 3) double-up slashes that precede a quote,
        //    e.g.  hello \world    => "hello \world"
        //          hello\"world    => "hello\\""world"
        //          hello\\"world   => "hello\\\\""world"
        //          hello world\    => "hello world\\"
        //
        //    technically this is not required for a cmd.exe command line, or the batch argument parser.
        //    the reasons for including this as a .cmd quoting rule are:
        //
        //    a) this is optimized for the scenario where the argument is passed from the .cmd file to an
        //       external program. many programs (e.g. .NET console apps) rely on the slash-doubling rule.
        //
        //    b) it's what we've been doing previously (by deferring to node default behavior) and we
        //       haven't heard any complaints about that aspect.
        //
        // note, a weakness of the quoting rules chosen here, is that % is not escaped. in fact, % cannot be
        // escaped when used on the command line directly - even though within a .cmd file % can be escaped
        // by using %%.
        //
        // the saving grace is, on the command line, %var% is left as-is if var is not defined. this contrasts
        // the line parsing rules within a .cmd file, where if var is not defined it is replaced with nothing.
        //
        // one option that was explored was replacing % with ^% - i.e. %var% => ^%var^%. this hack would
        // often work, since it is unlikely that var^ would exist, and the ^ character is removed when the
        // variable is used. the problem, however, is that ^ is not removed when %* is used to pass the args
        // to an external program.
        //
        // an unexplored potential solution for the % escaping problem, is to create a wrapper .cmd file.
        // % can be escaped within a .cmd file.
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
            // walk the string in reverse
            reverse += arg[i - 1];
            if (quoteHit && arg[i - 1] === '\\') {
                reverse += '\\'; // double the slash
            }
            else if (arg[i - 1] === '"') {
                quoteHit = true;
                reverse += '"'; // double the quote
            }
            else {
                quoteHit = false;
            }
        }
        reverse += '"';
        return reverse
            .split('')
            .reverse()
            .join('');
    }
    _uvQuoteCmdArg(arg) {
        // Tool runner wraps child_process.spawn() and needs to apply the same quoting as
        // Node in certain cases where the undocumented spawn option windowsVerbatimArguments
        // is used.
        //
        // Since this function is a port of quote_cmd_arg from Node 4.x (technically, lib UV,
        // see https://github.com/nodejs/node/blob/v4.x/deps/uv/src/win/process.c for details),
        // pasting copyright notice from Node within this function:
        //
        //      Copyright Joyent, Inc. and other Node contributors. All rights reserved.
        //
        //      Permission is hereby granted, free of charge, to any person obtaining a copy
        //      of this software and associated documentation files (the "Software"), to
        //      deal in the Software without restriction, including without limitation the
        //      rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
        //      sell copies of the Software, and to permit persons to whom the Software is
        //      furnished to do so, subject to the following conditions:
        //
        //      The above copyright notice and this permission notice shall be included in
        //      all copies or substantial portions of the Software.
        //
        //      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        //      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        //      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        //      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        //      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
        //      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
        //      IN THE SOFTWARE.
        if (!arg) {
            // Need double quotation for empty argument
            return '""';
        }
        if (!arg.includes(' ') && !arg.includes('\t') && !arg.includes('"')) {
            // No quotation needed
            return arg;
        }
        if (!arg.includes('"') && !arg.includes('\\')) {
            // No embedded double quotes or backslashes, so I can just wrap
            // quote marks around the whole thing.
            return `"${arg}"`;
        }
        // Expected input/output:
        //   input : hello"world
        //   output: "hello\"world"
        //   input : hello""world
        //   output: "hello\"\"world"
        //   input : hello\world
        //   output: hello\world
        //   input : hello\\world
        //   output: hello\\world
        //   input : hello\"world
        //   output: "hello\\\"world"
        //   input : hello\\"world
        //   output: "hello\\\\\"world"
        //   input : hello world\
        //   output: "hello world\\" - note the comment in libuv actually reads "hello world\"
        //                             but it appears the comment is wrong, it should be "hello world\\"
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
            // walk the string in reverse
            reverse += arg[i - 1];
            if (quoteHit && arg[i - 1] === '\\') {
                reverse += '\\';
            }
            else if (arg[i - 1] === '"') {
                quoteHit = true;
                reverse += '\\';
            }
            else {
                quoteHit = false;
            }
        }
        reverse += '"';
        return reverse
            .split('')
            .reverse()
            .join('');
    }
    _cloneExecOptions(options) {
        options = options || {};
        const result = {
            cwd: options.cwd || process.cwd(),
            env: options.env || process.env,
            silent: options.silent || false,
            windowsVerbatimArguments: options.windowsVerbatimArguments || false,
            failOnStdErr: options.failOnStdErr || false,
            ignoreReturnCode: options.ignoreReturnCode || false,
            delay: options.delay || 10000
        };
        result.outStream = options.outStream || process.stdout;
        result.errStream = options.errStream || process.stderr;
        return result;
    }
    _getSpawnOptions(options, toolPath) {
        options = options || {};
        const result = {};
        result.cwd = options.cwd;
        result.env = options.env;
        result['windowsVerbatimArguments'] =
            options.windowsVerbatimArguments || this._isCmdFile();
        if (options.windowsVerbatimArguments) {
            result.argv0 = `"${toolPath}"`;
        }
        return result;
    }
    /**
     * Exec a tool.
     * Output will be streamed to the live console.
     * Returns promise with return code
     *
     * @param     tool     path to tool to exec
     * @param     options  optional exec options.  See ExecOptions
     * @returns   number
     */
    exec() {
        return __awaiter(this, void 0, void 0, function* () {
            // root the tool path if it is unrooted and contains relative pathing
            if (!ioUtil.isRooted(this.toolPath) &&
                (this.toolPath.includes('/') ||
                    (IS_WINDOWS && this.toolPath.includes('\\')))) {
                // prefer options.cwd if it is specified, however options.cwd may also need to be rooted
                this.toolPath = path.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
            }
            // if the tool is only a file name, then resolve it from the PATH
            // otherwise verify it exists (add extension on Windows if necessary)
            this.toolPath = yield io.which(this.toolPath, true);
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this._debug(`exec tool: ${this.toolPath}`);
                this._debug('arguments:');
                for (const arg of this.args) {
                    this._debug(`   ${arg}`);
                }
                const optionsNonNull = this._cloneExecOptions(this.options);
                if (!optionsNonNull.silent && optionsNonNull.outStream) {
                    optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);
                }
                const state = new ExecState(optionsNonNull, this.toolPath);
                state.on('debug', (message) => {
                    this._debug(message);
                });
                if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) {
                    return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
                }
                const fileName = this._getSpawnFileName();
                const cp = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
                let stdbuffer = '';
                if (cp.stdout) {
                    cp.stdout.on('data', (data) => {
                        if (this.options.listeners && this.options.listeners.stdout) {
                            this.options.listeners.stdout(data);
                        }
                        if (!optionsNonNull.silent && optionsNonNull.outStream) {
                            optionsNonNull.outStream.write(data);
                        }
                        stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
                            if (this.options.listeners && this.options.listeners.stdline) {
                                this.options.listeners.stdline(line);
                            }
                        });
                    });
                }
                let errbuffer = '';
                if (cp.stderr) {
                    cp.stderr.on('data', (data) => {
                        state.processStderr = true;
                        if (this.options.listeners && this.options.listeners.stderr) {
                            this.options.listeners.stderr(data);
                        }
                        if (!optionsNonNull.silent &&
                            optionsNonNull.errStream &&
                            optionsNonNull.outStream) {
                            const s = optionsNonNull.failOnStdErr
                                ? optionsNonNull.errStream
                                : optionsNonNull.outStream;
                            s.write(data);
                        }
                        errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
                            if (this.options.listeners && this.options.listeners.errline) {
                                this.options.listeners.errline(line);
                            }
                        });
                    });
                }
                cp.on('error', (err) => {
                    state.processError = err.message;
                    state.processExited = true;
                    state.processClosed = true;
                    state.CheckComplete();
                });
                cp.on('exit', (code) => {
                    state.processExitCode = code;
                    state.processExited = true;
                    this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
                    state.CheckComplete();
                });
                cp.on('close', (code) => {
                    state.processExitCode = code;
                    state.processExited = true;
                    state.processClosed = true;
                    this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
                    state.CheckComplete();
                });
                state.on('done', (error, exitCode) => {
                    if (stdbuffer.length > 0) {
                        this.emit('stdline', stdbuffer);
                    }
                    if (errbuffer.length > 0) {
                        this.emit('errline', errbuffer);
                    }
                    cp.removeAllListeners();
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(exitCode);
                    }
                });
                if (this.options.input) {
                    if (!cp.stdin) {
                        throw new Error('child process missing stdin');
                    }
                    cp.stdin.end(this.options.input);
                }
            }));
        });
    }
}
exports.ToolRunner = ToolRunner;
/**
 * Convert an arg string to an array of args. Handles escaping
 *
 * @param    argString   string of arguments
 * @returns  string[]    array of arguments
 */
function argStringToArray(argString) {
    const args = [];
    let inQuotes = false;
    let escaped = false;
    let arg = '';
    function append(c) {
        // we only escape double quotes.
        if (escaped && c !== '"') {
            arg += '\\';
        }
        arg += c;
        escaped = false;
    }
    for (let i = 0; i < argString.length; i++) {
        const c = argString.charAt(i);
        if (c === '"') {
            if (!escaped) {
                inQuotes = !inQuotes;
            }
            else {
                append(c);
            }
            continue;
        }
        if (c === '\\' && escaped) {
            append(c);
            continue;
        }
        if (c === '\\' && inQuotes) {
            escaped = true;
            continue;
        }
        if (c === ' ' && !inQuotes) {
            if (arg.length > 0) {
                args.push(arg);
                arg = '';
            }
            continue;
        }
        append(c);
    }
    if (arg.length > 0) {
        args.push(arg.trim());
    }
    return args;
}
exports.argStringToArray = argStringToArray;
class ExecState extends events.EventEmitter {
    constructor(options, toolPath) {
        super();
        this.processClosed = false; // tracks whether the process has exited and stdio is closed
        this.processError = '';
        this.processExitCode = 0;
        this.processExited = false; // tracks whether the process has exited
        this.processStderr = false; // tracks whether stderr was written to
        this.delay = 10000; // 10 seconds
        this.done = false;
        this.timeout = null;
        if (!toolPath) {
            throw new Error('toolPath must not be empty');
        }
        this.options = options;
        this.toolPath = toolPath;
        if (options.delay) {
            this.delay = options.delay;
        }
    }
    CheckComplete() {
        if (this.done) {
            return;
        }
        if (this.processClosed) {
            this._setResult();
        }
        else if (this.processExited) {
            this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);
        }
    }
    _debug(message) {
        this.emit('debug', message);
    }
    _setResult() {
        // determine whether there is an error
        let error;
        if (this.processExited) {
            if (this.processError) {
                error = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
            }
            else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {
                error = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
            }
            else if (this.processStderr && this.options.failOnStdErr) {
                error = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
            }
        }
        // clear the timeout
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
        }
        this.done = true;
        this.emit('done', error, this.processExitCode);
    }
    static HandleTimeout(state) {
        if (state.done) {
            return;
        }
        if (!state.processClosed && state.processExited) {
            const message = `The STDIO streams did not close within ${state.delay /
                1000} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
            state._debug(message);
        }
        state._setResult();
    }
}
//# sourceMappingURL=toolrunner.js.map

/***/ }),

/***/ 8505:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hashFiles = exports.create = void 0;
const internal_globber_1 = __nccwpck_require__(2460);
const internal_hash_files_1 = __nccwpck_require__(7233);
/**
 * Constructs a globber
 *
 * @param patterns  Patterns separated by newlines
 * @param options   Glob options
 */
function create(patterns, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield internal_globber_1.DefaultGlobber.create(patterns, options);
    });
}
exports.create = create;
/**
 * Computes the sha256 hash of a glob
 *
 * @param patterns  Patterns separated by newlines
 * @param currentWorkspace  Workspace used when matching files
 * @param options   Glob options
 * @param verbose   Enables verbose logging
 */
function hashFiles(patterns, currentWorkspace = '', options, verbose = false) {
    return __awaiter(this, void 0, void 0, function* () {
        let followSymbolicLinks = true;
        if (options && typeof options.followSymbolicLinks === 'boolean') {
            followSymbolicLinks = options.followSymbolicLinks;
        }
        const globber = yield create(patterns, { followSymbolicLinks });
        return (0, internal_hash_files_1.hashFiles)(globber, currentWorkspace, verbose);
    });
}
exports.hashFiles = hashFiles;
//# sourceMappingURL=glob.js.map

/***/ }),

/***/ 9911:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getOptions = void 0;
const core = __importStar(__nccwpck_require__(9999));
/**
 * Returns a copy with defaults filled in.
 */
function getOptions(copy) {
    const result = {
        followSymbolicLinks: true,
        implicitDescendants: true,
        matchDirectories: true,
        omitBrokenSymbolicLinks: true,
        excludeHiddenFiles: false
    };
    if (copy) {
        if (typeof copy.followSymbolicLinks === 'boolean') {
            result.followSymbolicLinks = copy.followSymbolicLinks;
            core.debug(`followSymbolicLinks '${result.followSymbolicLinks}'`);
        }
        if (typeof copy.implicitDescendants === 'boolean') {
            result.implicitDescendants = copy.implicitDescendants;
            core.debug(`implicitDescendants '${result.implicitDescendants}'`);
        }
        if (typeof copy.matchDirectories === 'boolean') {
            result.matchDirectories = copy.matchDirectories;
            core.debug(`matchDirectories '${result.matchDirectories}'`);
        }
        if (typeof copy.omitBrokenSymbolicLinks === 'boolean') {
            result.omitBrokenSymbolicLinks = copy.omitBrokenSymbolicLinks;
            core.debug(`omitBrokenSymbolicLinks '${result.omitBrokenSymbolicLinks}'`);
        }
        if (typeof copy.excludeHiddenFiles === 'boolean') {
            result.excludeHiddenFiles = copy.excludeHiddenFiles;
            core.debug(`excludeHiddenFiles '${result.excludeHiddenFiles}'`);
        }
    }
    return result;
}
exports.getOptions = getOptions;
//# sourceMappingURL=internal-glob-options-helper.js.map

/***/ }),

/***/ 2460:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultGlobber = void 0;
const core = __importStar(__nccwpck_require__(9999));
const fs = __importStar(__nccwpck_require__(9896));
const globOptionsHelper = __importStar(__nccwpck_require__(9911));
const path = __importStar(__nccwpck_require__(6928));
const patternHelper = __importStar(__nccwpck_require__(9238));
const internal_match_kind_1 = __nccwpck_require__(6401);
const internal_pattern_1 = __nccwpck_require__(8109);
const internal_search_state_1 = __nccwpck_require__(6187);
const IS_WINDOWS = process.platform === 'win32';
class DefaultGlobber {
    constructor(options) {
        this.patterns = [];
        this.searchPaths = [];
        this.options = globOptionsHelper.getOptions(options);
    }
    getSearchPaths() {
        // Return a copy
        return this.searchPaths.slice();
    }
    glob() {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            try {
                for (var _d = true, _e = __asyncValues(this.globGenerator()), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const itemPath = _c;
                    result.push(itemPath);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return result;
        });
    }
    globGenerator() {
        return __asyncGenerator(this, arguments, function* globGenerator_1() {
            // Fill in defaults options
            const options = globOptionsHelper.getOptions(this.options);
            // Implicit descendants?
            const patterns = [];
            for (const pattern of this.patterns) {
                patterns.push(pattern);
                if (options.implicitDescendants &&
                    (pattern.trailingSeparator ||
                        pattern.segments[pattern.segments.length - 1] !== '**')) {
                    patterns.push(new internal_pattern_1.Pattern(pattern.negate, true, pattern.segments.concat('**')));
                }
            }
            // Push the search paths
            const stack = [];
            for (const searchPath of patternHelper.getSearchPaths(patterns)) {
                core.debug(`Search path '${searchPath}'`);
                // Exists?
                try {
                    // Intentionally using lstat. Detection for broken symlink
                    // will be performed later (if following symlinks).
                    yield __await(fs.promises.lstat(searchPath));
                }
                catch (err) {
                    if (err.code === 'ENOENT') {
                        continue;
                    }
                    throw err;
                }
                stack.unshift(new internal_search_state_1.SearchState(searchPath, 1));
            }
            // Search
            const traversalChain = []; // used to detect cycles
            while (stack.length) {
                // Pop
                const item = stack.pop();
                // Match?
                const match = patternHelper.match(patterns, item.path);
                const partialMatch = !!match || patternHelper.partialMatch(patterns, item.path);
                if (!match && !partialMatch) {
                    continue;
                }
                // Stat
                const stats = yield __await(DefaultGlobber.stat(item, options, traversalChain)
                // Broken symlink, or symlink cycle detected, or no longer exists
                );
                // Broken symlink, or symlink cycle detected, or no longer exists
                if (!stats) {
                    continue;
                }
                // Hidden file or directory?
                if (options.excludeHiddenFiles && path.basename(item.path).match(/^\./)) {
                    continue;
                }
                // Directory
                if (stats.isDirectory()) {
                    // Matched
                    if (match & internal_match_kind_1.MatchKind.Directory && options.matchDirectories) {
                        yield yield __await(item.path);
                    }
                    // Descend?
                    else if (!partialMatch) {
                        continue;
                    }
                    // Push the child items in reverse
                    const childLevel = item.level + 1;
                    const childItems = (yield __await(fs.promises.readdir(item.path))).map(x => new internal_search_state_1.SearchState(path.join(item.path, x), childLevel));
                    stack.push(...childItems.reverse());
                }
                // File
                else if (match & internal_match_kind_1.MatchKind.File) {
                    yield yield __await(item.path);
                }
            }
        });
    }
    /**
     * Constructs a DefaultGlobber
     */
    static create(patterns, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = new DefaultGlobber(options);
            if (IS_WINDOWS) {
                patterns = patterns.replace(/\r\n/g, '\n');
                patterns = patterns.replace(/\r/g, '\n');
            }
            const lines = patterns.split('\n').map(x => x.trim());
            for (const line of lines) {
                // Empty or comment
                if (!line || line.startsWith('#')) {
                    continue;
                }
                // Pattern
                else {
                    result.patterns.push(new internal_pattern_1.Pattern(line));
                }
            }
            result.searchPaths.push(...patternHelper.getSearchPaths(result.patterns));
            return result;
        });
    }
    static stat(item, options, traversalChain) {
        return __awaiter(this, void 0, void 0, function* () {
            // Note:
            // `stat` returns info about the target of a symlink (or symlink chain)
            // `lstat` returns info about a symlink itself
            let stats;
            if (options.followSymbolicLinks) {
                try {
                    // Use `stat` (following symlinks)
                    stats = yield fs.promises.stat(item.path);
                }
                catch (err) {
                    if (err.code === 'ENOENT') {
                        if (options.omitBrokenSymbolicLinks) {
                            core.debug(`Broken symlink '${item.path}'`);
                            return undefined;
                        }
                        throw new Error(`No information found for the path '${item.path}'. This may indicate a broken symbolic link.`);
                    }
                    throw err;
                }
            }
            else {
                // Use `lstat` (not following symlinks)
                stats = yield fs.promises.lstat(item.path);
            }
            // Note, isDirectory() returns false for the lstat of a symlink
            if (stats.isDirectory() && options.followSymbolicLinks) {
                // Get the realpath
                const realPath = yield fs.promises.realpath(item.path);
                // Fixup the traversal chain to match the item level
                while (traversalChain.length >= item.level) {
                    traversalChain.pop();
                }
                // Test for a cycle
                if (traversalChain.some((x) => x === realPath)) {
                    core.debug(`Symlink cycle detected for path '${item.path}' and realpath '${realPath}'`);
                    return undefined;
                }
                // Update the traversal chain
                traversalChain.push(realPath);
            }
            return stats;
        });
    }
}
exports.DefaultGlobber = DefaultGlobber;
//# sourceMappingURL=internal-globber.js.map

/***/ }),

/***/ 7233:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hashFiles = void 0;
const crypto = __importStar(__nccwpck_require__(6982));
const core = __importStar(__nccwpck_require__(9999));
const fs = __importStar(__nccwpck_require__(9896));
const stream = __importStar(__nccwpck_require__(2203));
const util = __importStar(__nccwpck_require__(9023));
const path = __importStar(__nccwpck_require__(6928));
function hashFiles(globber, currentWorkspace, verbose = false) {
    var _a, e_1, _b, _c;
    var _d;
    return __awaiter(this, void 0, void 0, function* () {
        const writeDelegate = verbose ? core.info : core.debug;
        let hasMatch = false;
        const githubWorkspace = currentWorkspace
            ? currentWorkspace
            : (_d = process.env['GITHUB_WORKSPACE']) !== null && _d !== void 0 ? _d : process.cwd();
        const result = crypto.createHash('sha256');
        let count = 0;
        try {
            for (var _e = true, _f = __asyncValues(globber.globGenerator()), _g; _g = yield _f.next(), _a = _g.done, !_a; _e = true) {
                _c = _g.value;
                _e = false;
                const file = _c;
                writeDelegate(file);
                if (!file.startsWith(`${githubWorkspace}${path.sep}`)) {
                    writeDelegate(`Ignore '${file}' since it is not under GITHUB_WORKSPACE.`);
                    continue;
                }
                if (fs.statSync(file).isDirectory()) {
                    writeDelegate(`Skip directory '${file}'.`);
                    continue;
                }
                const hash = crypto.createHash('sha256');
                const pipeline = util.promisify(stream.pipeline);
                yield pipeline(fs.createReadStream(file), hash);
                result.write(hash.digest());
                count++;
                if (!hasMatch) {
                    hasMatch = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_e && !_a && (_b = _f.return)) yield _b.call(_f);
            }
            finally { if (e_1) throw e_1.error; }
        }
        result.end();
        if (hasMatch) {
            writeDelegate(`Found ${count} files to hash.`);
            return result.digest('hex');
        }
        else {
            writeDelegate(`No matches found for glob`);
            return '';
        }
    });
}
exports.hashFiles = hashFiles;
//# sourceMappingURL=internal-hash-files.js.map

/***/ }),

/***/ 6401:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MatchKind = void 0;
/**
 * Indicates whether a pattern matches a path
 */
var MatchKind;
(function (MatchKind) {
    /** Not matched */
    MatchKind[MatchKind["None"] = 0] = "None";
    /** Matched if the path is a directory */
    MatchKind[MatchKind["Directory"] = 1] = "Directory";
    /** Matched if the path is a regular file */
    MatchKind[MatchKind["File"] = 2] = "File";
    /** Matched */
    MatchKind[MatchKind["All"] = 3] = "All";
})(MatchKind || (exports.MatchKind = MatchKind = {}));
//# sourceMappingURL=internal-match-kind.js.map

/***/ }),

/***/ 9445:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.safeTrimTrailingSeparator = exports.normalizeSeparators = exports.hasRoot = exports.hasAbsoluteRoot = exports.ensureAbsoluteRoot = exports.dirname = void 0;
const path = __importStar(__nccwpck_require__(6928));
const assert_1 = __importDefault(__nccwpck_require__(2613));
const IS_WINDOWS = process.platform === 'win32';
/**
 * Similar to path.dirname except normalizes the path separators and slightly better handling for Windows UNC paths.
 *
 * For example, on Linux/macOS:
 * - `/               => /`
 * - `/hello          => /`
 *
 * For example, on Windows:
 * - `C:\             => C:\`
 * - `C:\hello        => C:\`
 * - `C:              => C:`
 * - `C:hello         => C:`
 * - `\               => \`
 * - `\hello          => \`
 * - `\\hello         => \\hello`
 * - `\\hello\world   => \\hello\world`
 */
function dirname(p) {
    // Normalize slashes and trim unnecessary trailing slash
    p = safeTrimTrailingSeparator(p);
    // Windows UNC root, e.g. \\hello or \\hello\world
    if (IS_WINDOWS && /^\\\\[^\\]+(\\[^\\]+)?$/.test(p)) {
        return p;
    }
    // Get dirname
    let result = path.dirname(p);
    // Trim trailing slash for Windows UNC root, e.g. \\hello\world\
    if (IS_WINDOWS && /^\\\\[^\\]+\\[^\\]+\\$/.test(result)) {
        result = safeTrimTrailingSeparator(result);
    }
    return result;
}
exports.dirname = dirname;
/**
 * Roots the path if not already rooted. On Windows, relative roots like `\`
 * or `C:` are expanded based on the current working directory.
 */
function ensureAbsoluteRoot(root, itemPath) {
    (0, assert_1.default)(root, `ensureAbsoluteRoot parameter 'root' must not be empty`);
    (0, assert_1.default)(itemPath, `ensureAbsoluteRoot parameter 'itemPath' must not be empty`);
    // Already rooted
    if (hasAbsoluteRoot(itemPath)) {
        return itemPath;
    }
    // Windows
    if (IS_WINDOWS) {
        // Check for itemPath like C: or C:foo
        if (itemPath.match(/^[A-Z]:[^\\/]|^[A-Z]:$/i)) {
            let cwd = process.cwd();
            (0, assert_1.default)(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
            // Drive letter matches cwd? Expand to cwd
            if (itemPath[0].toUpperCase() === cwd[0].toUpperCase()) {
                // Drive only, e.g. C:
                if (itemPath.length === 2) {
                    // Preserve specified drive letter case (upper or lower)
                    return `${itemPath[0]}:\\${cwd.substr(3)}`;
                }
                // Drive + path, e.g. C:foo
                else {
                    if (!cwd.endsWith('\\')) {
                        cwd += '\\';
                    }
                    // Preserve specified drive letter case (upper or lower)
                    return `${itemPath[0]}:\\${cwd.substr(3)}${itemPath.substr(2)}`;
                }
            }
            // Different drive
            else {
                return `${itemPath[0]}:\\${itemPath.substr(2)}`;
            }
        }
        // Check for itemPath like \ or \foo
        else if (normalizeSeparators(itemPath).match(/^\\$|^\\[^\\]/)) {
            const cwd = process.cwd();
            (0, assert_1.default)(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
            return `${cwd[0]}:\\${itemPath.substr(1)}`;
        }
    }
    (0, assert_1.default)(hasAbsoluteRoot(root), `ensureAbsoluteRoot parameter 'root' must have an absolute root`);
    // Otherwise ensure root ends with a separator
    if (root.endsWith('/') || (IS_WINDOWS && root.endsWith('\\'))) {
        // Intentionally empty
    }
    else {
        // Append separator
        root += path.sep;
    }
    return root + itemPath;
}
exports.ensureAbsoluteRoot = ensureAbsoluteRoot;
/**
 * On Linux/macOS, true if path starts with `/`. On Windows, true for paths like:
 * `\\hello\share` and `C:\hello` (and using alternate separator).
 */
function hasAbsoluteRoot(itemPath) {
    (0, assert_1.default)(itemPath, `hasAbsoluteRoot parameter 'itemPath' must not be empty`);
    // Normalize separators
    itemPath = normalizeSeparators(itemPath);
    // Windows
    if (IS_WINDOWS) {
        // E.g. \\hello\share or C:\hello
        return itemPath.startsWith('\\\\') || /^[A-Z]:\\/i.test(itemPath);
    }
    // E.g. /hello
    return itemPath.startsWith('/');
}
exports.hasAbsoluteRoot = hasAbsoluteRoot;
/**
 * On Linux/macOS, true if path starts with `/`. On Windows, true for paths like:
 * `\`, `\hello`, `\\hello\share`, `C:`, and `C:\hello` (and using alternate separator).
 */
function hasRoot(itemPath) {
    (0, assert_1.default)(itemPath, `isRooted parameter 'itemPath' must not be empty`);
    // Normalize separators
    itemPath = normalizeSeparators(itemPath);
    // Windows
    if (IS_WINDOWS) {
        // E.g. \ or \hello or \\hello
        // E.g. C: or C:\hello
        return itemPath.startsWith('\\') || /^[A-Z]:/i.test(itemPath);
    }
    // E.g. /hello
    return itemPath.startsWith('/');
}
exports.hasRoot = hasRoot;
/**
 * Removes redundant slashes and converts `/` to `\` on Windows
 */
function normalizeSeparators(p) {
    p = p || '';
    // Windows
    if (IS_WINDOWS) {
        // Convert slashes on Windows
        p = p.replace(/\//g, '\\');
        // Remove redundant slashes
        const isUnc = /^\\\\+[^\\]/.test(p); // e.g. \\hello
        return (isUnc ? '\\' : '') + p.replace(/\\\\+/g, '\\'); // preserve leading \\ for UNC
    }
    // Remove redundant slashes
    return p.replace(/\/\/+/g, '/');
}
exports.normalizeSeparators = normalizeSeparators;
/**
 * Normalizes the path separators and trims the trailing separator (when safe).
 * For example, `/foo/ => /foo` but `/ => /`
 */
function safeTrimTrailingSeparator(p) {
    // Short-circuit if empty
    if (!p) {
        return '';
    }
    // Normalize separators
    p = normalizeSeparators(p);
    // No trailing slash
    if (!p.endsWith(path.sep)) {
        return p;
    }
    // Check '/' on Linux/macOS and '\' on Windows
    if (p === path.sep) {
        return p;
    }
    // On Windows check if drive root. E.g. C:\
    if (IS_WINDOWS && /^[A-Z]:\\$/i.test(p)) {
        return p;
    }
    // Otherwise trim trailing slash
    return p.substr(0, p.length - 1);
}
exports.safeTrimTrailingSeparator = safeTrimTrailingSeparator;
//# sourceMappingURL=internal-path-helper.js.map

/***/ }),

/***/ 5588:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Path = void 0;
const path = __importStar(__nccwpck_require__(6928));
const pathHelper = __importStar(__nccwpck_require__(9445));
const assert_1 = __importDefault(__nccwpck_require__(2613));
const IS_WINDOWS = process.platform === 'win32';
/**
 * Helper class for parsing paths into segments
 */
class Path {
    /**
     * Constructs a Path
     * @param itemPath Path or array of segments
     */
    constructor(itemPath) {
        this.segments = [];
        // String
        if (typeof itemPath === 'string') {
            (0, assert_1.default)(itemPath, `Parameter 'itemPath' must not be empty`);
            // Normalize slashes and trim unnecessary trailing slash
            itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
            // Not rooted
            if (!pathHelper.hasRoot(itemPath)) {
                this.segments = itemPath.split(path.sep);
            }
            // Rooted
            else {
                // Add all segments, while not at the root
                let remaining = itemPath;
                let dir = pathHelper.dirname(remaining);
                while (dir !== remaining) {
                    // Add the segment
                    const basename = path.basename(remaining);
                    this.segments.unshift(basename);
                    // Truncate the last segment
                    remaining = dir;
                    dir = pathHelper.dirname(remaining);
                }
                // Remainder is the root
                this.segments.unshift(remaining);
            }
        }
        // Array
        else {
            // Must not be empty
            (0, assert_1.default)(itemPath.length > 0, `Parameter 'itemPath' must not be an empty array`);
            // Each segment
            for (let i = 0; i < itemPath.length; i++) {
                let segment = itemPath[i];
                // Must not be empty
                (0, assert_1.default)(segment, `Parameter 'itemPath' must not contain any empty segments`);
                // Normalize slashes
                segment = pathHelper.normalizeSeparators(itemPath[i]);
                // Root segment
                if (i === 0 && pathHelper.hasRoot(segment)) {
                    segment = pathHelper.safeTrimTrailingSeparator(segment);
                    (0, assert_1.default)(segment === pathHelper.dirname(segment), `Parameter 'itemPath' root segment contains information for multiple segments`);
                    this.segments.push(segment);
                }
                // All other segments
                else {
                    // Must not contain slash
                    (0, assert_1.default)(!segment.includes(path.sep), `Parameter 'itemPath' contains unexpected path separators`);
                    this.segments.push(segment);
                }
            }
        }
    }
    /**
     * Converts the path to it's string representation
     */
    toString() {
        // First segment
        let result = this.segments[0];
        // All others
        let skipSlash = result.endsWith(path.sep) || (IS_WINDOWS && /^[A-Z]:$/i.test(result));
        for (let i = 1; i < this.segments.length; i++) {
            if (skipSlash) {
                skipSlash = false;
            }
            else {
                result += path.sep;
            }
            result += this.segments[i];
        }
        return result;
    }
}
exports.Path = Path;
//# sourceMappingURL=internal-path.js.map

/***/ }),

/***/ 9238:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.partialMatch = exports.match = exports.getSearchPaths = void 0;
const pathHelper = __importStar(__nccwpck_require__(9445));
const internal_match_kind_1 = __nccwpck_require__(6401);
const IS_WINDOWS = process.platform === 'win32';
/**
 * Given an array of patterns, returns an array of paths to search.
 * Duplicates and paths under other included paths are filtered out.
 */
function getSearchPaths(patterns) {
    // Ignore negate patterns
    patterns = patterns.filter(x => !x.negate);
    // Create a map of all search paths
    const searchPathMap = {};
    for (const pattern of patterns) {
        const key = IS_WINDOWS
            ? pattern.searchPath.toUpperCase()
            : pattern.searchPath;
        searchPathMap[key] = 'candidate';
    }
    const result = [];
    for (const pattern of patterns) {
        // Check if already included
        const key = IS_WINDOWS
            ? pattern.searchPath.toUpperCase()
            : pattern.searchPath;
        if (searchPathMap[key] === 'included') {
            continue;
        }
        // Check for an ancestor search path
        let foundAncestor = false;
        let tempKey = key;
        let parent = pathHelper.dirname(tempKey);
        while (parent !== tempKey) {
            if (searchPathMap[parent]) {
                foundAncestor = true;
                break;
            }
            tempKey = parent;
            parent = pathHelper.dirname(tempKey);
        }
        // Include the search pattern in the result
        if (!foundAncestor) {
            result.push(pattern.searchPath);
            searchPathMap[key] = 'included';
        }
    }
    return result;
}
exports.getSearchPaths = getSearchPaths;
/**
 * Matches the patterns against the path
 */
function match(patterns, itemPath) {
    let result = internal_match_kind_1.MatchKind.None;
    for (const pattern of patterns) {
        if (pattern.negate) {
            result &= ~pattern.match(itemPath);
        }
        else {
            result |= pattern.match(itemPath);
        }
    }
    return result;
}
exports.match = match;
/**
 * Checks whether to descend further into the directory
 */
function partialMatch(patterns, itemPath) {
    return patterns.some(x => !x.negate && x.partialMatch(itemPath));
}
exports.partialMatch = partialMatch;
//# sourceMappingURL=internal-pattern-helper.js.map

/***/ }),

/***/ 8109:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Pattern = void 0;
const os = __importStar(__nccwpck_require__(857));
const path = __importStar(__nccwpck_require__(6928));
const pathHelper = __importStar(__nccwpck_require__(9445));
const assert_1 = __importDefault(__nccwpck_require__(2613));
const minimatch_1 = __nccwpck_require__(6274);
const internal_match_kind_1 = __nccwpck_require__(6401);
const internal_path_1 = __nccwpck_require__(5588);
const IS_WINDOWS = process.platform === 'win32';
class Pattern {
    constructor(patternOrNegate, isImplicitPattern = false, segments, homedir) {
        /**
         * Indicates whether matches should be excluded from the result set
         */
        this.negate = false;
        // Pattern overload
        let pattern;
        if (typeof patternOrNegate === 'string') {
            pattern = patternOrNegate.trim();
        }
        // Segments overload
        else {
            // Convert to pattern
            segments = segments || [];
            (0, assert_1.default)(segments.length, `Parameter 'segments' must not empty`);
            const root = Pattern.getLiteral(segments[0]);
            (0, assert_1.default)(root && pathHelper.hasAbsoluteRoot(root), `Parameter 'segments' first element must be a root path`);
            pattern = new internal_path_1.Path(segments).toString().trim();
            if (patternOrNegate) {
                pattern = `!${pattern}`;
            }
        }
        // Negate
        while (pattern.startsWith('!')) {
            this.negate = !this.negate;
            pattern = pattern.substr(1).trim();
        }
        // Normalize slashes and ensures absolute root
        pattern = Pattern.fixupPattern(pattern, homedir);
        // Segments
        this.segments = new internal_path_1.Path(pattern).segments;
        // Trailing slash indicates the pattern should only match directories, not regular files
        this.trailingSeparator = pathHelper
            .normalizeSeparators(pattern)
            .endsWith(path.sep);
        pattern = pathHelper.safeTrimTrailingSeparator(pattern);
        // Search path (literal path prior to the first glob segment)
        let foundGlob = false;
        const searchSegments = this.segments
            .map(x => Pattern.getLiteral(x))
            .filter(x => !foundGlob && !(foundGlob = x === ''));
        this.searchPath = new internal_path_1.Path(searchSegments).toString();
        // Root RegExp (required when determining partial match)
        this.rootRegExp = new RegExp(Pattern.regExpEscape(searchSegments[0]), IS_WINDOWS ? 'i' : '');
        this.isImplicitPattern = isImplicitPattern;
        // Create minimatch
        const minimatchOptions = {
            dot: true,
            nobrace: true,
            nocase: IS_WINDOWS,
            nocomment: true,
            noext: true,
            nonegate: true
        };
        pattern = IS_WINDOWS ? pattern.replace(/\\/g, '/') : pattern;
        this.minimatch = new minimatch_1.Minimatch(pattern, minimatchOptions);
    }
    /**
     * Matches the pattern against the specified path
     */
    match(itemPath) {
        // Last segment is globstar?
        if (this.segments[this.segments.length - 1] === '**') {
            // Normalize slashes
            itemPath = pathHelper.normalizeSeparators(itemPath);
            // Append a trailing slash. Otherwise Minimatch will not match the directory immediately
            // preceding the globstar. For example, given the pattern `/foo/**`, Minimatch returns
            // false for `/foo` but returns true for `/foo/`. Append a trailing slash to handle that quirk.
            if (!itemPath.endsWith(path.sep) && this.isImplicitPattern === false) {
                // Note, this is safe because the constructor ensures the pattern has an absolute root.
                // For example, formats like C: and C:foo on Windows are resolved to an absolute root.
                itemPath = `${itemPath}${path.sep}`;
            }
        }
        else {
            // Normalize slashes and trim unnecessary trailing slash
            itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        }
        // Match
        if (this.minimatch.match(itemPath)) {
            return this.trailingSeparator ? internal_match_kind_1.MatchKind.Directory : internal_match_kind_1.MatchKind.All;
        }
        return internal_match_kind_1.MatchKind.None;
    }
    /**
     * Indicates whether the pattern may match descendants of the specified path
     */
    partialMatch(itemPath) {
        // Normalize slashes and trim unnecessary trailing slash
        itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        // matchOne does not handle root path correctly
        if (pathHelper.dirname(itemPath) === itemPath) {
            return this.rootRegExp.test(itemPath);
        }
        return this.minimatch.matchOne(itemPath.split(IS_WINDOWS ? /\\+/ : /\/+/), this.minimatch.set[0], true);
    }
    /**
     * Escapes glob patterns within a path
     */
    static globEscape(s) {
        return (IS_WINDOWS ? s : s.replace(/\\/g, '\\\\')) // escape '\' on Linux/macOS
            .replace(/(\[)(?=[^/]+\])/g, '[[]') // escape '[' when ']' follows within the path segment
            .replace(/\?/g, '[?]') // escape '?'
            .replace(/\*/g, '[*]'); // escape '*'
    }
    /**
     * Normalizes slashes and ensures absolute root
     */
    static fixupPattern(pattern, homedir) {
        // Empty
        (0, assert_1.default)(pattern, 'pattern cannot be empty');
        // Must not contain `.` segment, unless first segment
        // Must not contain `..` segment
        const literalSegments = new internal_path_1.Path(pattern).segments.map(x => Pattern.getLiteral(x));
        (0, assert_1.default)(literalSegments.every((x, i) => (x !== '.' || i === 0) && x !== '..'), `Invalid pattern '${pattern}'. Relative pathing '.' and '..' is not allowed.`);
        // Must not contain globs in root, e.g. Windows UNC path \\foo\b*r
        (0, assert_1.default)(!pathHelper.hasRoot(pattern) || literalSegments[0], `Invalid pattern '${pattern}'. Root segment must not contain globs.`);
        // Normalize slashes
        pattern = pathHelper.normalizeSeparators(pattern);
        // Replace leading `.` segment
        if (pattern === '.' || pattern.startsWith(`.${path.sep}`)) {
            pattern = Pattern.globEscape(process.cwd()) + pattern.substr(1);
        }
        // Replace leading `~` segment
        else if (pattern === '~' || pattern.startsWith(`~${path.sep}`)) {
            homedir = homedir || os.homedir();
            (0, assert_1.default)(homedir, 'Unable to determine HOME directory');
            (0, assert_1.default)(pathHelper.hasAbsoluteRoot(homedir), `Expected HOME directory to be a rooted path. Actual '${homedir}'`);
            pattern = Pattern.globEscape(homedir) + pattern.substr(1);
        }
        // Replace relative drive root, e.g. pattern is C: or C:foo
        else if (IS_WINDOWS &&
            (pattern.match(/^[A-Z]:$/i) || pattern.match(/^[A-Z]:[^\\]/i))) {
            let root = pathHelper.ensureAbsoluteRoot('C:\\dummy-root', pattern.substr(0, 2));
            if (pattern.length > 2 && !root.endsWith('\\')) {
                root += '\\';
            }
            pattern = Pattern.globEscape(root) + pattern.substr(2);
        }
        // Replace relative root, e.g. pattern is \ or \foo
        else if (IS_WINDOWS && (pattern === '\\' || pattern.match(/^\\[^\\]/))) {
            let root = pathHelper.ensureAbsoluteRoot('C:\\dummy-root', '\\');
            if (!root.endsWith('\\')) {
                root += '\\';
            }
            pattern = Pattern.globEscape(root) + pattern.substr(1);
        }
        // Otherwise ensure absolute root
        else {
            pattern = pathHelper.ensureAbsoluteRoot(Pattern.globEscape(process.cwd()), pattern);
        }
        return pathHelper.normalizeSeparators(pattern);
    }
    /**
     * Attempts to unescape a pattern segment to create a literal path segment.
     * Otherwise returns empty string.
     */
    static getLiteral(segment) {
        let literal = '';
        for (let i = 0; i < segment.length; i++) {
            const c = segment[i];
            // Escape
            if (c === '\\' && !IS_WINDOWS && i + 1 < segment.length) {
                literal += segment[++i];
                continue;
            }
            // Wildcard
            else if (c === '*' || c === '?') {
                return '';
            }
            // Character set
            else if (c === '[' && i + 1 < segment.length) {
                let set = '';
                let closed = -1;
                for (let i2 = i + 1; i2 < segment.length; i2++) {
                    const c2 = segment[i2];
                    // Escape
                    if (c2 === '\\' && !IS_WINDOWS && i2 + 1 < segment.length) {
                        set += segment[++i2];
                        continue;
                    }
                    // Closed
                    else if (c2 === ']') {
                        closed = i2;
                        break;
                    }
                    // Otherwise
                    else {
                        set += c2;
                    }
                }
                // Closed?
                if (closed >= 0) {
                    // Cannot convert
                    if (set.length > 1) {
                        return '';
                    }
                    // Convert to literal
                    if (set) {
                        literal += set;
                        i = closed;
                        continue;
                    }
                }
                // Otherwise fall thru
            }
            // Append
            literal += c;
        }
        return literal;
    }
    /**
     * Escapes regexp special characters
     * https://javascript.info/regexp-escaping
     */
    static regExpEscape(s) {
        return s.replace(/[[\\^$.|?*+()]/g, '\\$&');
    }
}
exports.Pattern = Pattern;
//# sourceMappingURL=internal-pattern.js.map

/***/ }),

/***/ 6187:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SearchState = void 0;
class SearchState {
    constructor(path, level) {
        this.path = path;
        this.level = level;
    }
}
exports.SearchState = SearchState;
//# sourceMappingURL=internal-search-state.js.map

/***/ }),

/***/ 3673:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 787:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(8611));
const https = __importStar(__nccwpck_require__(5692));
const pm = __importStar(__nccwpck_require__(7407));
const tunnel = __importStar(__nccwpck_require__(6124));
const undici_1 = __nccwpck_require__(298);
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes || (exports.HttpCodes = HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers || (exports.Headers = Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes || (exports.MediaTypes = MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
    readBodyBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                const chunks = [];
                this.message.on('data', (chunk) => {
                    chunks.push(chunk);
                });
                this.message.on('end', () => {
                    resolve(Buffer.concat(chunks));
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    getAgentDispatcher(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (!useProxy) {
            return;
        }
        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (!useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if tunneling agent isn't assigned create a new agent
        if (!agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
        let proxyAgent;
        if (this._keepAlive) {
            proxyAgent = this._proxyAgentDispatcher;
        }
        // if agent is already assigned use that agent.
        if (proxyAgent) {
            return proxyAgent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        proxyAgent = new undici_1.ProxyAgent(Object.assign({ uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 }, ((proxyUrl.username || proxyUrl.password) && {
            token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString('base64')}`
        })));
        this._proxyAgentDispatcher = proxyAgent;
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
                rejectUnauthorized: false
            });
        }
        return proxyAgent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7407:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        try {
            return new DecodedURL(proxyVar);
        }
        catch (_a) {
            if (!proxyVar.startsWith('http://') && !proxyVar.startsWith('https://'))
                return new DecodedURL(`http://${proxyVar}`);
        }
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const reqHost = reqUrl.hostname;
    if (isLoopbackAddress(reqHost)) {
        return true;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperNoProxyItem === '*' ||
            upperReqHosts.some(x => x === upperNoProxyItem ||
                x.endsWith(`.${upperNoProxyItem}`) ||
                (upperNoProxyItem.startsWith('.') &&
                    x.endsWith(`${upperNoProxyItem}`)))) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
function isLoopbackAddress(host) {
    const hostLower = host.toLowerCase();
    return (hostLower === 'localhost' ||
        hostLower.startsWith('127.') ||
        hostLower.startsWith('[::1]') ||
        hostLower.startsWith('[0:0:0:0:0:0:0:1]'));
}
class DecodedURL extends URL {
    constructor(url, base) {
        super(url, base);
        this._decodedUsername = decodeURIComponent(super.username);
        this._decodedPassword = decodeURIComponent(super.password);
    }
    get username() {
        return this._decodedUsername;
    }
    get password() {
        return this._decodedPassword;
    }
}
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 2746:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.READONLY = exports.UV_FS_O_EXLOCK = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rm = exports.rename = exports.readlink = exports.readdir = exports.open = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;
const fs = __importStar(__nccwpck_require__(9896));
const path = __importStar(__nccwpck_require__(6928));
_a = fs.promises
// export const {open} = 'fs'
, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, exports.mkdir = _a.mkdir, exports.open = _a.open, exports.readdir = _a.readdir, exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rm = _a.rm, exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, exports.unlink = _a.unlink;
// export const {open} = 'fs'
exports.IS_WINDOWS = process.platform === 'win32';
// See https://github.com/nodejs/node/blob/d0153aee367422d0858105abec186da4dff0a0c5/deps/uv/include/uv/win.h#L691
exports.UV_FS_O_EXLOCK = 0x10000000;
exports.READONLY = fs.constants.O_RDONLY;
function exists(fsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield exports.stat(fsPath);
        }
        catch (err) {
            if (err.code === 'ENOENT') {
                return false;
            }
            throw err;
        }
        return true;
    });
}
exports.exists = exists;
function isDirectory(fsPath, useStat = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
        return stats.isDirectory();
    });
}
exports.isDirectory = isDirectory;
/**
 * On OSX/Linux, true if path starts with '/'. On Windows, true for paths like:
 * \, \hello, \\hello\share, C:, and C:\hello (and corresponding alternate separator cases).
 */
function isRooted(p) {
    p = normalizeSeparators(p);
    if (!p) {
        throw new Error('isRooted() parameter "p" cannot be empty');
    }
    if (exports.IS_WINDOWS) {
        return (p.startsWith('\\') || /^[A-Z]:/i.test(p) // e.g. \ or \hello or \\hello
        ); // e.g. C: or C:\hello
    }
    return p.startsWith('/');
}
exports.isRooted = isRooted;
/**
 * Best effort attempt to determine whether a file exists and is executable.
 * @param filePath    file path to check
 * @param extensions  additional file extensions to try
 * @return if file exists and is executable, returns the file path. otherwise empty string.
 */
function tryGetExecutablePath(filePath, extensions) {
    return __awaiter(this, void 0, void 0, function* () {
        let stats = undefined;
        try {
            // test file exists
            stats = yield exports.stat(filePath);
        }
        catch (err) {
            if (err.code !== 'ENOENT') {
                // eslint-disable-next-line no-console
                console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
            }
        }
        if (stats && stats.isFile()) {
            if (exports.IS_WINDOWS) {
                // on Windows, test for valid extension
                const upperExt = path.extname(filePath).toUpperCase();
                if (extensions.some(validExt => validExt.toUpperCase() === upperExt)) {
                    return filePath;
                }
            }
            else {
                if (isUnixExecutable(stats)) {
                    return filePath;
                }
            }
        }
        // try each extension
        const originalFilePath = filePath;
        for (const extension of extensions) {
            filePath = originalFilePath + extension;
            stats = undefined;
            try {
                stats = yield exports.stat(filePath);
            }
            catch (err) {
                if (err.code !== 'ENOENT') {
                    // eslint-disable-next-line no-console
                    console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
                }
            }
            if (stats && stats.isFile()) {
                if (exports.IS_WINDOWS) {
                    // preserve the case of the actual file (since an extension was appended)
                    try {
                        const directory = path.dirname(filePath);
                        const upperName = path.basename(filePath).toUpperCase();
                        for (const actualName of yield exports.readdir(directory)) {
                            if (upperName === actualName.toUpperCase()) {
                                filePath = path.join(directory, actualName);
                                break;
                            }
                        }
                    }
                    catch (err) {
                        // eslint-disable-next-line no-console
                        console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
                    }
                    return filePath;
                }
                else {
                    if (isUnixExecutable(stats)) {
                        return filePath;
                    }
                }
            }
        }
        return '';
    });
}
exports.tryGetExecutablePath = tryGetExecutablePath;
function normalizeSeparators(p) {
    p = p || '';
    if (exports.IS_WINDOWS) {
        // convert slashes on Windows
        p = p.replace(/\//g, '\\');
        // remove redundant slashes
        return p.replace(/\\\\+/g, '\\');
    }
    // remove redundant slashes
    return p.replace(/\/\/+/g, '/');
}
// on Mac/Linux, test the execute bit
//     R   W  X  R  W X R W X
//   256 128 64 32 16 8 4 2 1
function isUnixExecutable(stats) {
    return ((stats.mode & 1) > 0 ||
        ((stats.mode & 8) > 0 && stats.gid === process.getgid()) ||
        ((stats.mode & 64) > 0 && stats.uid === process.getuid()));
}
// Get the path of cmd.exe in windows
function getCmdPath() {
    var _a;
    return (_a = process.env['COMSPEC']) !== null && _a !== void 0 ? _a : `cmd.exe`;
}
exports.getCmdPath = getCmdPath;
//# sourceMappingURL=io-util.js.map

/***/ }),

/***/ 3357:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;
const assert_1 = __nccwpck_require__(2613);
const path = __importStar(__nccwpck_require__(6928));
const ioUtil = __importStar(__nccwpck_require__(2746));
/**
 * Copies a file or folder.
 * Based off of shelljs - https://github.com/shelljs/shelljs/blob/9237f66c52e5daa40458f94f9565e18e8132f5a6/src/cp.js
 *
 * @param     source    source path
 * @param     dest      destination path
 * @param     options   optional. See CopyOptions.
 */
function cp(source, dest, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { force, recursive, copySourceDirectory } = readCopyOptions(options);
        const destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;
        // Dest is an existing file, but not forcing
        if (destStat && destStat.isFile() && !force) {
            return;
        }
        // If dest is an existing directory, should copy inside.
        const newDest = destStat && destStat.isDirectory() && copySourceDirectory
            ? path.join(dest, path.basename(source))
            : dest;
        if (!(yield ioUtil.exists(source))) {
            throw new Error(`no such file or directory: ${source}`);
        }
        const sourceStat = yield ioUtil.stat(source);
        if (sourceStat.isDirectory()) {
            if (!recursive) {
                throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
            }
            else {
                yield cpDirRecursive(source, newDest, 0, force);
            }
        }
        else {
            if (path.relative(source, newDest) === '') {
                // a file cannot be copied to itself
                throw new Error(`'${newDest}' and '${source}' are the same file`);
            }
            yield copyFile(source, newDest, force);
        }
    });
}
exports.cp = cp;
/**
 * Moves a path.
 *
 * @param     source    source path
 * @param     dest      destination path
 * @param     options   optional. See MoveOptions.
 */
function mv(source, dest, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield ioUtil.exists(dest)) {
            let destExists = true;
            if (yield ioUtil.isDirectory(dest)) {
                // If dest is directory copy src into dest
                dest = path.join(dest, path.basename(source));
                destExists = yield ioUtil.exists(dest);
            }
            if (destExists) {
                if (options.force == null || options.force) {
                    yield rmRF(dest);
                }
                else {
                    throw new Error('Destination already exists');
                }
            }
        }
        yield mkdirP(path.dirname(dest));
        yield ioUtil.rename(source, dest);
    });
}
exports.mv = mv;
/**
 * Remove a path recursively with force
 *
 * @param inputPath path to remove
 */
function rmRF(inputPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (ioUtil.IS_WINDOWS) {
            // Check for invalid characters
            // https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
            if (/[*"<>|]/.test(inputPath)) {
                throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');
            }
        }
        try {
            // note if path does not exist, error is silent
            yield ioUtil.rm(inputPath, {
                force: true,
                maxRetries: 3,
                recursive: true,
                retryDelay: 300
            });
        }
        catch (err) {
            throw new Error(`File was unable to be removed ${err}`);
        }
    });
}
exports.rmRF = rmRF;
/**
 * Make a directory.  Creates the full path with folders in between
 * Will throw if it fails
 *
 * @param   fsPath        path to create
 * @returns Promise<void>
 */
function mkdirP(fsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        assert_1.ok(fsPath, 'a path argument must be provided');
        yield ioUtil.mkdir(fsPath, { recursive: true });
    });
}
exports.mkdirP = mkdirP;
/**
 * Returns path of a tool had the tool actually been invoked.  Resolves via paths.
 * If you check and the tool does not exist, it will throw.
 *
 * @param     tool              name of the tool
 * @param     check             whether to check if tool exists
 * @returns   Promise<string>   path to tool
 */
function which(tool, check) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!tool) {
            throw new Error("parameter 'tool' is required");
        }
        // recursive when check=true
        if (check) {
            const result = yield which(tool, false);
            if (!result) {
                if (ioUtil.IS_WINDOWS) {
                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
                }
                else {
                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
                }
            }
            return result;
        }
        const matches = yield findInPath(tool);
        if (matches && matches.length > 0) {
            return matches[0];
        }
        return '';
    });
}
exports.which = which;
/**
 * Returns a list of all occurrences of the given tool on the system path.
 *
 * @returns   Promise<string[]>  the paths of the tool
 */
function findInPath(tool) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!tool) {
            throw new Error("parameter 'tool' is required");
        }
        // build the list of extensions to try
        const extensions = [];
        if (ioUtil.IS_WINDOWS && process.env['PATHEXT']) {
            for (const extension of process.env['PATHEXT'].split(path.delimiter)) {
                if (extension) {
                    extensions.push(extension);
                }
            }
        }
        // if it's rooted, return it if exists. otherwise return empty.
        if (ioUtil.isRooted(tool)) {
            const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);
            if (filePath) {
                return [filePath];
            }
            return [];
        }
        // if any path separators, return empty
        if (tool.includes(path.sep)) {
            return [];
        }
        // build the list of directories
        //
        // Note, technically "where" checks the current directory on Windows. From a toolkit perspective,
        // it feels like we should not do this. Checking the current directory seems like more of a use
        // case of a shell, and the which() function exposed by the toolkit should strive for consistency
        // across platforms.
        const directories = [];
        if (process.env.PATH) {
            for (const p of process.env.PATH.split(path.delimiter)) {
                if (p) {
                    directories.push(p);
                }
            }
        }
        // find all matches
        const matches = [];
        for (const directory of directories) {
            const filePath = yield ioUtil.tryGetExecutablePath(path.join(directory, tool), extensions);
            if (filePath) {
                matches.push(filePath);
            }
        }
        return matches;
    });
}
exports.findInPath = findInPath;
function readCopyOptions(options) {
    const force = options.force == null ? true : options.force;
    const recursive = Boolean(options.recursive);
    const copySourceDirectory = options.copySourceDirectory == null
        ? true
        : Boolean(options.copySourceDirectory);
    return { force, recursive, copySourceDirectory };
}
function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
    return __awaiter(this, void 0, void 0, function* () {
        // Ensure there is not a run away recursive copy
        if (currentDepth >= 255)
            return;
        currentDepth++;
        yield mkdirP(destDir);
        const files = yield ioUtil.readdir(sourceDir);
        for (const fileName of files) {
            const srcFile = `${sourceDir}/${fileName}`;
            const destFile = `${destDir}/${fileName}`;
            const srcFileStat = yield ioUtil.lstat(srcFile);
            if (srcFileStat.isDirectory()) {
                // Recurse
                yield cpDirRecursive(srcFile, destFile, currentDepth, force);
            }
            else {
                yield copyFile(srcFile, destFile, force);
            }
        }
        // Change the mode for the newly created directory
        yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);
    });
}
// Buffered file copy
function copyFile(srcFile, destFile, force) {
    return __awaiter(this, void 0, void 0, function* () {
        if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {
            // unlink/re-link it
            try {
                yield ioUtil.lstat(destFile);
                yield ioUtil.unlink(destFile);
            }
            catch (e) {
                // Try to override file permission
                if (e.code === 'EPERM') {
                    yield ioUtil.chmod(destFile, '0666');
                    yield ioUtil.unlink(destFile);
                }
                // other errors = it doesn't exist, no work to do
            }
            // Copy over symlink
            const symlinkFull = yield ioUtil.readlink(srcFile);
            yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? 'junction' : null);
        }
        else if (!(yield ioUtil.exists(destFile)) || force) {
            yield ioUtil.copyFile(srcFile, destFile);
        }
    });
}
//# sourceMappingURL=io.js.map

/***/ }),

/***/ 7516:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";



if (process.env.NODE_ENV === 'production') {
  module.exports = __nccwpck_require__(375)
} else {
  module.exports = __nccwpck_require__(7525)
}


/***/ }),

/***/ 7525:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;


__webpack_unused_export__ = ({ value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(__nccwpck_require__(6029));
var stream = __nccwpck_require__(2203);
var get = _interopDefault(__nccwpck_require__(1579));
var set = _interopDefault(__nccwpck_require__(4287));
var qs = _interopDefault(__nccwpck_require__(9));
var fs = _interopDefault(__nccwpck_require__(9896));
var fsPromises = _interopDefault(__nccwpck_require__(1943));
var util = __nccwpck_require__(9023);
var tosCrc64Js = __nccwpck_require__(2373);
var createDebug = _interopDefault(__nccwpck_require__(1541));
var cryptoHashMd5 = _interopDefault(__nccwpck_require__(8554));
var cryptoEncBase64 = _interopDefault(__nccwpck_require__(1400));
var cryptoEncHex = _interopDefault(__nccwpck_require__(5314));
var cryptoEncUtf8 = _interopDefault(__nccwpck_require__(7784));
var crypto$1 = _interopDefault(__nccwpck_require__(6982));
var path = _interopDefault(__nccwpck_require__(6928));
var cloneDeep = _interopDefault(__nccwpck_require__(1020));
var http = _interopDefault(__nccwpck_require__(8611));
var https = _interopDefault(__nccwpck_require__(5692));
var os = _interopDefault(__nccwpck_require__(857));

class TosServerError extends Error {
  /**
   * is original from backend, equals `data.Code`
   */

  /**
   * the body when backend errors
   */

  /**
   * status code
   */

  /**
   * response headers
   */

  /**
   * identifies the errored request, equals to headers['x-tos-request-id'].
   * If you has any question about the request, please send the requestId and id2 to TOS worker.
   */

  /**
   * identifies the errored request, equals to headers['x-tos-id-2'].
   * If you has any question about the request, please send the requestId and id2 to TOS worker.
   */
  constructor(response) {
    const {
      data
    } = response;
    super(data.Message); // https://www.dannyguo.com/blog/how-to-fix-instanceof-not-working-for-custom-errors-in-typescript/

    this.code = void 0;
    this.data = void 0;
    this.statusCode = void 0;
    this.headers = void 0;
    this.requestId = void 0;
    this.id2 = void 0;
    Object.setPrototypeOf(this, TosServerError.prototype);
    this.data = data;
    this.code = data.Code;
    this.statusCode = response.status;
    this.headers = response.headers;
    this.requestId = response.headers['x-tos-request-id'];
    this.id2 = response.headers['x-tos-id-2'];
  }

}

(function (TosServerCode) {
  TosServerCode["NoSuchBucket"] = "NoSuchBucket";
  TosServerCode["NoSuchKey"] = "NoSuchKey";
  TosServerCode["AccessDenied"] = "AccessDenied";
  TosServerCode["MalformedAcl"] = "MalformedAclError";
  TosServerCode["UnexpectedContent"] = "UnexpectedContent";
  TosServerCode["InvalidRequest"] = "InvalidRequest";
  TosServerCode["MissingSecurityHeader"] = "MissingSecurityHeader";
  TosServerCode["InvalidArgument"] = "InvalidArgument";
  TosServerCode["EntityTooSmall"] = "EntityTooSmall";
  TosServerCode["InvalidBucketName"] = "InvalidBucketName";
  TosServerCode["BucketNotEmpty"] = "BucketNotEmpty";
  TosServerCode["TooManyBuckets"] = "TooManyBuckets";
  TosServerCode["BucketAlreadyExists"] = "BucketAlreadyExists";
  TosServerCode["MalformedBody"] = "MalformedBody";
  TosServerCode["NoSuchLifecycleConfiguration"] = "NoSuchLifecycleConfiguration";
  TosServerCode["ReplicationConfigurationNotFound"] = "ReplicationConfigurationNotFoundError";
  TosServerCode["InvalidLocationConstraint"] = "InvalidLocationConstraint";
  TosServerCode["AuthorizationQueryParametersError"] = "AuthorizationQueryParametersError";
  TosServerCode["RequestTimeTooSkewed"] = "RequestTimeTooSkewed";
  TosServerCode["SignatureDoesNotMatch"] = "SignatureDoesNotMatch";
  TosServerCode["RequestedRangeNotSatisfiable"] = "Requested Range Not Satisfiable";
  TosServerCode["PreconditionFailed"] = "PreconditionFailed";
  TosServerCode["BadDigest"] = "BadDigest";
  TosServerCode["InvalidDigest"] = "InvalidDigest";
  TosServerCode["EntityTooLarge"] = "EntityTooLarge";
  TosServerCode["UnImplemented"] = "UnImplemented";
  TosServerCode["MethodNotAllowed"] = "MethodNotAllowed";
  TosServerCode["InvalidAccessKeyId"] = "InvalidAccessKeyId";
  TosServerCode["InvalidSecurityToken"] = "InvalidSecurityToken";
  TosServerCode["ContentSHA256Mismatch"] = "ContentSHA256Mismatch";
  TosServerCode["ExceedQPSLimit"] = "ExceedQPSLimit";
  TosServerCode["ExceedRateLimit"] = "ExceedRateLimit";
  TosServerCode["NoSuchCORSConfiguration"] = "NoSuchCORSConfiguration";
  TosServerCode["NoSuchMirrorConfiguration"] = "NoSuchMirrorConfiguration";
  TosServerCode["NoSuchWebsiteConfiguration"] = "NoSuchWebsiteConfiguration";
  TosServerCode["MissingRequestBody"] = "MissingRequestBodyError";
  TosServerCode["BucketAlreadyOwnedByYou"] = "BucketAlreadyOwnedByYou";
  TosServerCode["NoSuchBucketPolicy"] = "NoSuchBucketPolicy";
  TosServerCode["PolicyTooLarge"] = "PolicyTooLarge";
  TosServerCode["MalformedPolicy"] = "MalformedPolicy";
  TosServerCode["InvalidKey"] = "InvalidKey";
  TosServerCode["MirrorFailed"] = "MirrorFailed";
  TosServerCode["Timeout"] = "Timeout";
  TosServerCode["OffsetNotMatched"] = "OffsetNotMatched";
  TosServerCode["NotAppendable"] = "NotAppendable";
  TosServerCode["ContextCanceled"] = "ContextCanceled";
  TosServerCode["InternalError"] = "InternalError";
  TosServerCode["TooManyRequests"] = "TooManyRequests";
  TosServerCode["TimeOut"] = "TimeOut";
  TosServerCode["ConcurrencyUpdateObjectLimit"] = "ConcurrencyUpdateObjectLimit";
  TosServerCode["DuplicateUpload"] = "DuplicateUpload";
  TosServerCode["DuplicateObject"] = "DuplicateObject";
  TosServerCode["InvalidVersionId"] = "InvalidVersionId";
  TosServerCode["StorageClassNotMatch"] = "StorageClassNotMatch";
  TosServerCode["UploadStatusNotUploading"] = "UploadStatusNotUploading";
  TosServerCode["PartSizeNotMatch"] = "PartSizeNotMatch";
  TosServerCode["NoUploadPart"] = "NoUploadPart";
  TosServerCode["PartsLenInvalid"] = "PartsLenInvalid";
  TosServerCode["PartsIdxSmall"] = "PartsIdxSmall";
  TosServerCode["PartSizeSmall"] = "PartSizeSmall";
  TosServerCode["PrefixNotNextKeyPrefix"] = "PrefixNotNextKeyPrefix";
  TosServerCode["InvalidPart"] = "InvalidPart";
  TosServerCode["InvalidPartOffset"] = "InvalidPartOffset";
  TosServerCode["MismatchObject"] = "MismatchObject";
  TosServerCode["UploadStatusMismatch"] = "UploadStatusMismatch";
  TosServerCode["CompletingStatusNoExpiration"] = "CompletingStatusNoExpiration";
  TosServerCode["Found"] = "Found";
  TosServerCode["InvalidRedirectLocation"] = "InvalidRedirectLocation";
})(exports.Lm || (exports.Lm = {}));

class TosClientError extends Error {
  constructor(message) {
    super(message); // https://www.dannyguo.com/blog/how-to-fix-instanceof-not-working-for-custom-errors-in-typescript/

    Object.setPrototypeOf(this, TosClientError.prototype);
  }

}

class CancelError extends Error {
  constructor(message) {
    super(message); // https://www.dannyguo.com/blog/how-to-fix-instanceof-not-working-for-custom-errors-in-typescript/

    Object.setPrototypeOf(this, CancelError.prototype);
  }

}

/**
 * since fs/promises exist after nodejs@14, so we make own fs/promises
 */
const createWriteStream = fs.createWriteStream;
const createReadStream = fs.createReadStream;
const rename = /*#__PURE__*/util.promisify(fs.rename);
const stat = /*#__PURE__*/util.promisify(fs.stat);
const writeFile = /*#__PURE__*/util.promisify(fs.writeFile);

const rm = /*#__PURE__*/util.promisify(fs.unlink);
const readFile = /*#__PURE__*/util.promisify(fs.readFile);
const safeMkdirRecursive = async dirName => {
  try {
    await fsPromises.access(dirName);
  } catch (e) {
    await fsPromises.mkdir(dirName, {
      recursive: true
    });
  }
};

const makeArrayProp = obj => key => {
  if (obj == null || typeof obj !== 'object') {
    return;
  }

  const value = get(obj, key);

  if (!Array.isArray(value)) {
    set(obj, key, value == null ? [] : [value]);
  }
};

const makeConvertProp = convertMethod => {
  const finalMethod = target => {
    if (Array.isArray(target)) {
      return target.map(it => finalMethod(it));
    }

    if (typeof target === 'string') {
      return convertMethod(target);
    }

    if (typeof target === 'object' && target != null) {
      const ret = Object.keys(target).reduce((acc, key) => {
        const nextKey = finalMethod(key);
        acc[nextKey] = target[key];
        return acc;
      }, {});
      return ret;
    }

    return target;
  };

  return finalMethod;
};

const covertCamelCase2Kebab = /*#__PURE__*/makeConvertProp(camelCase => {
  return camelCase.replace(/[A-Z]/g, '-$&').toLowerCase();
});
const convertNormalCamelCase2Upper = /*#__PURE__*/makeConvertProp(normalCamelCase => {
  return normalCamelCase[0].toUpperCase() + normalCamelCase.slice(1);
});
const getSortedQueryString = query => {
  const searchParts = [];
  Object.keys(query).sort().forEach(key => {
    searchParts.push(`${encodeURIComponent(key)}=${encodeURIComponent(query[key])}`);
  });
  return searchParts.join('&');
};
const normalizeHeadersKey = headers => {
  const headers1 = headers || {};
  const headers2 = {};
  Object.keys(headers1).forEach(key => {
    if (headers1[key] != null) {
      headers2[key] = headers1[key];
    }
  });
  const headers3 = {};
  Object.keys(headers2).forEach(key => {
    const newKey = key.toLowerCase();
    headers3[newKey] = headers2[key];
  });
  return headers3;
};
const encodeHeadersValue = headers => {
  const header2 = {};
  Object.entries(headers).forEach(([key, value]) => {
    header2[key] = `${value}` // reference:
    //  https://stackoverflow.com/questions/38345372/why-is-length-2
    .match(/./gu).map(ch => {
      if (ch.length > 1 || ch.charCodeAt(0) >= 128) {
        return encodeURIComponent(ch);
      }

      return ch;
    }).join('');
  });
  return header2;
}; // TODO: getRegion from endpoint, maybe user passes it is better.
const getEndpoint = region => {
  return `tos-${region}.volces.com`;
};
const normalizeProxy = proxy => {
  var _proxy;

  if (typeof proxy === 'string') {
    proxy = {
      url: proxy
    };
  }

  if (proxy && ((_proxy = proxy) == null ? void 0 : _proxy.needProxyParams) == null && 'node' === 'browser') {}

  return proxy;
};
async function safeAwait(p) {
  try {
    const v = await p;
    return [null, v];
  } catch (err) {
    return [err, null];
  }
}
function safeSync(func) {
  try {
    const ret = func();
    return [null, ret];
  } catch (err) {
    return [err, null];
  }
}
function isBlob(obj) {
  return typeof Blob !== 'undefined' && obj instanceof Blob;
}
function isBuffer(obj) {
  return typeof Buffer !== 'undefined' && obj instanceof Buffer;
}
function isReadable(obj) {

  return obj instanceof stream.Readable;
}
function obj2QueryStr(v) {
  if (!v) {
    return '';
  }

  return Object.keys(v).map(key => {
    const vStr = `${v[key]}`;
    return `${encodeURIComponent(key)}=${encodeURIComponent(vStr)}`;
  }).join('&');
}
function isCancelError(err) {
  return err instanceof CancelError;
}
const DEFAULT_PART_SIZE = 20 * 1024 * 1024; // 20 MB

const getGMTDateStr = v => {
  return v.toUTCString();
};

const gmtDateOrStr = v => {
  if (typeof v === 'string') {
    return v;
  }

  return v.toUTCString();
};

const requestHeadersMap = {
  projectName: 'x-tos-project-name',
  encodingType: 'encoding-type',
  cacheControl: 'cache-control',
  contentDisposition: 'content-disposition',
  contentLength: 'content-length',
  contentMD5: 'content-md5',
  contentSHA256: 'x-tos-content-sha256',
  contentEncoding: 'content-encoding',
  contentLanguage: 'content-language',
  contentType: 'content-type',
  expires: ['expires', getGMTDateStr],
  range: 'range',
  ifMatch: 'if-match',
  ifModifiedSince: ['if-modified-since', gmtDateOrStr],
  ifNoneMatch: 'if-none-match',
  ifUnmodifiedSince: ['if-unmodified-since', gmtDateOrStr],
  acl: 'x-tos-acl',
  grantFullControl: 'x-tos-grant-full-control',
  grantRead: 'x-tos-grant-read',
  grantReadAcp: 'x-tos-grant-read-acp',
  grantWrite: 'x-tos-grant-write',
  grantWriteAcp: 'x-tos-grant-write-acp',
  serverSideEncryption: 'x-tos-server-side-encryption',
  serverSideDataEncryption: 'x-tos-server-side-data-encryption',
  ssecAlgorithm: 'x-tos-server-side-encryption-customer-algorithm',
  ssecKey: 'x-tos-server-side-encryption-customer-key',
  ssecKeyMD5: 'x-tos-server-side-encryption-customer-key-md5',
  copySourceRange: 'x-tos-copy-source-range',
  copySourceIfMatch: 'x-tos-copy-source-if-match',
  copySourceIfModifiedSince: ['x-tos-copy-source-if-modified-since', gmtDateOrStr],
  copySourceIfNoneMatch: 'x-tos-copy-source-if-none-match',
  copySourceIfUnmodifiedSince: 'x-tos-copy-source-if-unmodified-since',
  copySourceSSECAlgorithm: 'x-tos-copy-source-server-side-encryption-customer-algorithm',
  copySourceSSECKey: 'x-tos-copy-source-server-side-encryption-customer-key',
  copySourceSSECKeyMD5: 'x-tos-copy-source-server-side-encryption-customer-key-MD5',
  metadataDirective: 'x-tos-metadata-directive',
  meta: v => {
    return Object.keys(v).reduce((prev, key) => {
      prev[`x-tos-meta-${key}`] = `${v[key]}`;
      return prev;
    }, {});
  },
  websiteRedirectLocation: 'x-tos-website-redirect-location',
  storageClass: 'x-tos-storage-class',
  azRedundancy: 'x-tos-az-redundancy',
  trafficLimit: 'x-tos-traffic-limit',
  callback: 'x-tos-callback',
  callbackVar: 'x-tos-callback-var',
  allowSameActionOverlap: ['x-tos-allow-same-action-overlap', v => String(v)],
  symLinkTargetKey: 'x-tos-symlink-target',
  symLinkTargetBucket: 'x-tos-symlink-bucket',
  forbidOverwrite: 'x-tos-forbid-overwrite',
  bucketType: 'x-tos-bucket-type',
  recursiveMkdir: 'x-tos-recursive-mkdir'
}; // type RequestHeadersMapKeys = keyof typeof requestHeadersMap;

const requestQueryMap = {
  versionId: 'versionId',
  process: 'x-tos-process',
  saveBucket: 'x-tos-save-bucket',
  saveObject: 'x-tos-save-object',
  responseCacheControl: 'response-cache-control',
  responseContentDisposition: 'response-content-disposition',
  responseContentEncoding: 'response-content-encoding',
  responseContentLanguage: 'response-content-language',
  responseContentType: 'response-content-type',
  responseExpires: ['response-expires', v => v.toUTCString()]
};
function fillRequestHeaders(v, // keys: (keyof T & RequestHeadersMapKeys)[]
keys) {
  if (!keys.length) {
    return;
  }

  const headers = v.headers || {};
  v.headers = headers;

  function setOneHeader(k, v) {
    if (headers[k] == null) {
      headers[k] = v;
    }
  }

  keys.forEach(k => {
    const confV = requestHeadersMap[k];

    if (!confV) {
      // maybe warning
      throw new TosClientError(`\`${k}\` isn't in keys of \`requestHeadersMap\``);
    }

    const oriValue = v[k];

    if (oriValue == null) {
      return;
    }

    const oriValueStr = `${oriValue}`;

    if (typeof confV === 'string') {
      return setOneHeader(confV, oriValueStr);
    }

    if (Array.isArray(confV)) {
      const newKey = confV[0];
      const newValue = confV[1](oriValue);
      return setOneHeader(newKey, newValue);
    }

    const obj = confV(oriValue);
    Object.entries(obj).forEach(([k, v]) => {
      setOneHeader(k, v);
    });
  });
}
function fillRequestQuery(v, query, keys) {
  if (!keys.length) {
    return;
  }

  function setOneKey(k, v) {
    if (query[k] == null) {
      query[k] = v;
    }
  }

  keys.forEach(k => {
    const confV = requestQueryMap[k];

    if (!confV) {
      // maybe warning
      throw new TosClientError(`\`${k}\` isn't in keys of \`requestQueryMap\``);
    }

    const oriValue = v[k];

    if (oriValue == null) {
      return;
    }

    const oriValueStr = `${oriValue}`;

    if (typeof confV === 'string') {
      return setOneKey(confV, oriValueStr);
    }

    if (Array.isArray(confV)) {
      const newKey = confV[0];
      const newValue = confV[1](oriValue);
      return setOneKey(newKey, newValue);
    }

    const obj = confV(oriValue);
    Object.entries(obj).forEach(([k, v]) => {
      setOneKey(k, v);
    });
  });
}
const paramsSerializer = params => {
  return qs.stringify(params);
};
function getNormalDataFromError(data, err) {
  return {
    data,
    statusCode: err.statusCode,
    headers: err.headers,
    requestId: err.requestId,
    id2: err.id2
  };
}
const streamToBuf = async stream => {
  let buf = Buffer.from([]);
  return new Promise((resolve, reject) => {
    stream.on('data', data => {
      buf = Buffer.concat([buf, data]);
    });
    stream.on('end', () => {
      resolve(buf);
    });
    stream.on('error', err => {
      reject(err);
    });
  });
};
function checkCRC64WithHeaders(crc, headers) {
  const serverCRC64 = headers['x-tos-hash-crc64ecma'];

  if (serverCRC64 == null) {

    return;
  }

  const crcStr = typeof crc === 'string' ? crc : crc.getCrc64();

  if (crcStr !== serverCRC64) {
    throw new TosClientError(`validate file crc64 failed. Expect crc64 ${serverCRC64}, actual crc64 ${crcStr}. Please try again.`);
  }
}
const makeStreamErrorHandler = prefix => err => {
  console.log(`${prefix || ''} stream error:`, err);
};
var HttpHeader;

(function (HttpHeader) {
  HttpHeader["LastModified"] = "last-modified";
  HttpHeader["ContentLength"] = "content-length";
  HttpHeader["AcceptEncoding"] = "accept-encoding";
  HttpHeader["ContentEncoding"] = "content-encoding";
  HttpHeader["ContentMD5"] = "content-md5";
  HttpHeader["TosRawContentLength"] = "x-tos-raw-content-length";
  HttpHeader["TosTrailer"] = "x-tos-trailer";
  HttpHeader["TosHashCrc64ecma"] = "x-tos-hash-crc64ecma";
  HttpHeader["TosContentSha256"] = "x-tos-content-sha256";
  HttpHeader["TosDecodedContentLength"] = "x-tos-decoded-content-length";
  HttpHeader["TosEc"] = "x-tos-ec";
  HttpHeader["TosRequestId"] = "x-tos-request-id";
})(HttpHeader || (HttpHeader = {}));
/**
 * make async tasks serial
 * @param makeTask
 * @returns
 */


const makeSerialAsyncTask = makeTask => {
  let lastTask = Promise.resolve();
  return async () => {
    lastTask = lastTask.then(() => makeTask());
    return lastTask;
  };
};
const safeParseCheckpointFile = async filePath => {
  try {
    return JSON.parse(await readFile(filePath, 'utf-8'));
  } catch (err) {
    console.warn("checkpoint's content is not a valid JSON");
    return undefined;
  }
};
const makeRetryStreamAutoClose = makeStream => {
  let lastStream = null;

  const makeRetryStream = () => {
    if (lastStream) {
      tryDestroy(lastStream, new Error('retry new stream by makeRetryStreamAutoClose'));
    }

    lastStream = makeStream();
    return lastStream;
  };

  return {
    getLastStream: () => lastStream,
    make: makeRetryStream
  };
};
const tryDestroy = (stream, err) => {
  if (stream && 'destroy' in stream && typeof stream.destroy === 'function') {
    if ('destroyed' in stream && !stream.destroyed) {
      stream.destroy(err);
    }
  }
};
const pipeStreamWithErrorHandle = (src, dest, label) => {
  dest.on('error', makeStreamErrorHandler(label));
  src.on('error', err => tryDestroy(dest, err));
  dest.on('error', err => tryDestroy(src, err));
  return src.pipe(dest);
};

async function createMultipartUpload(input) {
  input = this.normalizeObjectInput(input);
  const headers = normalizeHeadersKey(input.headers);
  input.headers = headers;
  fillRequestHeaders(input, ['encodingType', 'cacheControl', 'contentDisposition', 'contentEncoding', 'contentLanguage', 'contentType', 'expires', 'acl', 'grantFullControl', 'grantRead', 'grantReadAcp', 'grantWriteAcp', 'ssecAlgorithm', 'ssecKey', 'ssecKeyMD5', 'serverSideEncryption', 'serverSideDataEncryption', 'meta', 'websiteRedirectLocation', 'storageClass', 'forbidOverwrite']);
  this.setObjectContentTypeHeader(input, headers);
  return this._fetchObject(input, 'POST', {
    uploads: ''
  }, headers, '');
}

// the last part is no size limit

const MIN_PART_SIZE_EXCEPT_LAST_ONE = 5 * 1024 * 1024;
const MAX_PART_NUMBER = 10000;
const calculateSafePartSize = (totalSize, expectPartSize, showWarning = false) => {
  let partSize = expectPartSize;

  if (expectPartSize < MIN_PART_SIZE_EXCEPT_LAST_ONE) {
    partSize = MIN_PART_SIZE_EXCEPT_LAST_ONE;

    if (showWarning) {
      console.warn(`partSize has been set to ${partSize}, because the partSize you provided is less than the minimal size of multipart`);
    }
  }

  const minSize = Math.ceil(totalSize / MAX_PART_NUMBER);

  if (expectPartSize < minSize) {
    partSize = minSize;

    if (showWarning) {
      console.warn(`partSize has been set to ${partSize}, because the partSize you provided causes the number of part excesses 10,000`);
    }
  }

  return partSize;
};
async function listParts(input) {
  const {
    bucket,
    key,
    uploadId,
    ...nextQuery
  } = input;
  const ret = await this._fetchObject(input, 'GET', {
    uploadId,
    ...covertCamelCase2Kebab(nextQuery)
  }, {});
  const arrayProp = makeArrayProp(ret.data);
  arrayProp('Parts');
  return ret;
}

// alias with GoSDK
// refer https://github.com/volcengine/ve-tos-golang-sdk/blob/main/tos/mime.go
const mimeTypes = {
  '3gp': 'video/3gpp',
  '7z': 'application/x-7z-compressed',
  abw: 'application/x-abiword',
  ai: 'application/postscript',
  aif: 'audio/x-aiff',
  aifc: 'audio/x-aiff',
  aiff: 'audio/x-aiff',
  alc: 'chemical/x-alchemy',
  amr: 'audio/amr',
  anx: 'application/annodex',
  apk: 'application/vnd.android.package-archive',
  appcache: 'text/cache-manifest',
  art: 'image/x-jg',
  asc: 'text/plain',
  asf: 'video/x-ms-asf',
  aso: 'chemical/x-ncbi-asn1-binary',
  asx: 'video/x-ms-asf',
  atom: 'application/atom+xml',
  atomcat: 'application/atomcat+xml',
  atomsrv: 'application/atomserv+xml',
  au: 'audio/basic',
  avi: 'video/x-msvideo',
  awb: 'audio/amr-wb',
  axa: 'audio/annodex',
  axv: 'video/annodex',
  b: 'chemical/x-molconn-Z',
  bak: 'application/x-trash',
  bat: 'application/x-msdos-program',
  bcpio: 'application/x-bcpio',
  bib: 'text/x-bibtex',
  bin: 'application/octet-stream',
  bmp: 'image/x-ms-bmp',
  boo: 'text/x-boo',
  book: 'application/x-maker',
  brf: 'text/plain',
  bsd: 'chemical/x-crossfire',
  c: 'text/x-csrc',
  'c++': 'text/x-c++src',
  c3d: 'chemical/x-chem3d',
  cab: 'application/x-cab',
  cac: 'chemical/x-cache',
  cache: 'chemical/x-cache',
  cap: 'application/vnd.tcpdump.pcap',
  cascii: 'chemical/x-cactvs-binary',
  cat: 'application/vnd.ms-pki.seccat',
  cbin: 'chemical/x-cactvs-binary',
  cbr: 'application/x-cbr',
  cbz: 'application/x-cbz',
  cc: 'text/x-c++src',
  cda: 'application/x-cdf',
  cdf: 'application/x-cdf',
  cdr: 'image/x-coreldraw',
  cdt: 'image/x-coreldrawtemplate',
  cdx: 'chemical/x-cdx',
  cdy: 'application/vnd.cinderella',
  cef: 'chemical/x-cxf',
  cer: 'chemical/x-cerius',
  chm: 'chemical/x-chemdraw',
  chrt: 'application/x-kchart',
  cif: 'chemical/x-cif',
  class: 'application/java-vm',
  cls: 'text/x-tex',
  cmdf: 'chemical/x-cmdf',
  cml: 'chemical/x-cml',
  cod: 'application/vnd.rim.cod',
  com: 'application/x-msdos-program',
  cpa: 'chemical/x-compass',
  cpio: 'application/x-cpio',
  cpp: 'text/x-c++src',
  cpt: 'application/mac-compactpro',
  cr2: 'image/x-canon-cr2',
  crl: 'application/x-pkcs7-crl',
  crt: 'application/x-x509-ca-cert',
  crw: 'image/x-canon-crw',
  csd: 'audio/csound',
  csf: 'chemical/x-cache-csf',
  csh: 'application/x-csh',
  csm: 'chemical/x-csml',
  csml: 'chemical/x-csml',
  css: 'text/css',
  csv: 'text/csv',
  ctab: 'chemical/x-cactvs-binary',
  ctx: 'chemical/x-ctx',
  cu: 'application/cu-seeme',
  cub: 'chemical/x-gaussian-cube',
  cxf: 'chemical/x-cxf',
  cxx: 'text/x-c++src',
  d: 'text/x-dsrc',
  davmount: 'application/davmount+xml',
  dcm: 'application/dicom',
  dcr: 'application/x-director',
  ddeb: 'application/vnd.debian.binary-package',
  dif: 'video/dv',
  diff: 'text/x-diff',
  dir: 'application/x-director',
  djv: 'image/vnd.djvu',
  djvu: 'image/vnd.djvu',
  dl: 'video/dl',
  dll: 'application/x-msdos-program',
  dmg: 'application/x-apple-diskimage',
  dms: 'application/x-dms',
  doc: 'application/msword',
  docm: 'application/vnd.ms-word.document.macroEnabled.12',
  docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  dot: 'application/msword',
  dotm: 'application/vnd.ms-word.template.macroEnabled.12',
  dotx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
  dv: 'video/dv',
  dvi: 'application/x-dvi',
  dx: 'chemical/x-jcamp-dx',
  dxr: 'application/x-director',
  emb: 'chemical/x-embl-dl-nucleotide',
  embl: 'chemical/x-embl-dl-nucleotide',
  eml: 'message/rfc822',
  eot: 'application/vnd.ms-fontobject',
  eps: 'application/postscript',
  eps2: 'application/postscript',
  eps3: 'application/postscript',
  epsf: 'application/postscript',
  epsi: 'application/postscript',
  erf: 'image/x-epson-erf',
  es: 'application/ecmascript',
  etx: 'text/x-setext',
  exe: 'application/x-msdos-program',
  ez: 'application/andrew-inset',
  fb: 'application/x-maker',
  fbdoc: 'application/x-maker',
  fch: 'chemical/x-gaussian-checkpoint',
  fchk: 'chemical/x-gaussian-checkpoint',
  fig: 'application/x-xfig',
  flac: 'audio/flac',
  fli: 'video/fli',
  flv: 'video/x-flv',
  fm: 'application/x-maker',
  frame: 'application/x-maker',
  frm: 'application/x-maker',
  gal: 'chemical/x-gaussian-log',
  gam: 'chemical/x-gamess-input',
  gamin: 'chemical/x-gamess-input',
  gan: 'application/x-ganttproject',
  gau: 'chemical/x-gaussian-input',
  gcd: 'text/x-pcs-gcd',
  gcf: 'application/x-graphing-calculator',
  gcg: 'chemical/x-gcg8-sequence',
  gen: 'chemical/x-genbank',
  gf: 'application/x-tex-gf',
  gif: 'image/gif',
  gjc: 'chemical/x-gaussian-input',
  gjf: 'chemical/x-gaussian-input',
  gl: 'video/gl',
  gnumeric: 'application/x-gnumeric',
  gpt: 'chemical/x-mopac-graph',
  gsf: 'application/x-font',
  gsm: 'audio/x-gsm',
  gtar: 'application/x-gtar',
  gz: 'application/gzip',
  h: 'text/x-chdr',
  'h++': 'text/x-c++hdr',
  hdf: 'application/x-hdf',
  hh: 'text/x-c++hdr',
  hin: 'chemical/x-hin',
  hpp: 'text/x-c++hdr',
  hqx: 'application/mac-binhex40',
  hs: 'text/x-haskell',
  hta: 'application/hta',
  htc: 'text/x-component',
  htm: 'text/html',
  html: 'text/html',
  hwp: 'application/x-hwp',
  hxx: 'text/x-c++hdr',
  ica: 'application/x-ica',
  ice: 'x-conference/x-cooltalk',
  ico: 'image/vnd.microsoft.icon',
  ics: 'text/calendar',
  icz: 'text/calendar',
  ief: 'image/ief',
  iges: 'model/iges',
  igs: 'model/iges',
  iii: 'application/x-iphone',
  info: 'application/x-info',
  inp: 'chemical/x-gamess-input',
  ins: 'application/x-internet-signup',
  iso: 'application/x-iso9660-image',
  isp: 'application/x-internet-signup',
  ist: 'chemical/x-isostar',
  istr: 'chemical/x-isostar',
  jad: 'text/vnd.sun.j2me.app-descriptor',
  jam: 'application/x-jam',
  jar: 'application/java-archive',
  java: 'text/x-java',
  jdx: 'chemical/x-jcamp-dx',
  jmz: 'application/x-jmol',
  jng: 'image/x-jng',
  jnlp: 'application/x-java-jnlp-file',
  jp2: 'image/jp2',
  jpe: 'image/jpeg',
  jpeg: 'image/jpeg',
  jpf: 'image/jpx',
  jpg: 'image/jpeg',
  jpg2: 'image/jp2',
  jpm: 'image/jpm',
  jpx: 'image/jpx',
  js: 'application/javascript',
  json: 'application/json',
  kar: 'audio/midi',
  key: 'application/pgp-keys',
  kil: 'application/x-killustrator',
  kin: 'chemical/x-kinemage',
  kml: 'application/vnd.google-earth.kml+xml',
  kmz: 'application/vnd.google-earth.kmz',
  kpr: 'application/x-kpresenter',
  kpt: 'application/x-kpresenter',
  ksp: 'application/x-kspread',
  kwd: 'application/x-kword',
  kwt: 'application/x-kword',
  latex: 'application/x-latex',
  lha: 'application/x-lha',
  lhs: 'text/x-literate-haskell',
  lin: 'application/bbolin',
  lsf: 'video/x-la-asf',
  lsx: 'video/x-la-asf',
  ltx: 'text/x-tex',
  ly: 'text/x-lilypond',
  lyx: 'application/x-lyx',
  lzh: 'application/x-lzh',
  lzx: 'application/x-lzx',
  m3g: 'application/m3g',
  m3u: 'audio/x-mpegurl',
  m3u8: 'application/x-mpegURL',
  m4a: 'audio/mpeg',
  maker: 'application/x-maker',
  man: 'application/x-troff-man',
  mbox: 'application/mbox',
  mcif: 'chemical/x-mmcif',
  mcm: 'chemical/x-macmolecule',
  mdb: 'application/msaccess',
  me: 'application/x-troff-me',
  mesh: 'model/mesh',
  mid: 'audio/midi',
  midi: 'audio/midi',
  mif: 'application/x-mif',
  mkv: 'video/x-matroska',
  mm: 'application/x-freemind',
  mmd: 'chemical/x-macromodel-input',
  mmf: 'application/vnd.smaf',
  mml: 'text/mathml',
  mmod: 'chemical/x-macromodel-input',
  mng: 'video/x-mng',
  moc: 'text/x-moc',
  mol: 'chemical/x-mdl-molfile',
  mol2: 'chemical/x-mol2',
  moo: 'chemical/x-mopac-out',
  mop: 'chemical/x-mopac-input',
  mopcrt: 'chemical/x-mopac-input',
  mov: 'video/quicktime',
  movie: 'video/x-sgi-movie',
  mp2: 'audio/mpeg',
  mp3: 'audio/mpeg',
  mp4: 'video/mp4',
  mpc: 'chemical/x-mopac-input',
  mpe: 'video/mpeg',
  mpeg: 'video/mpeg',
  mpega: 'audio/mpeg',
  mpg: 'video/mpeg',
  mpga: 'audio/mpeg',
  mph: 'application/x-comsol',
  mpv: 'video/x-matroska',
  ms: 'application/x-troff-ms',
  msh: 'model/mesh',
  msi: 'application/x-msi',
  mvb: 'chemical/x-mopac-vib',
  mxf: 'application/mxf',
  mxu: 'video/vnd.mpegurl',
  nb: 'application/mathematica',
  nbp: 'application/mathematica',
  nc: 'application/x-netcdf',
  nef: 'image/x-nikon-nef',
  nwc: 'application/x-nwc',
  o: 'application/x-object',
  oda: 'application/oda',
  odb: 'application/vnd.oasis.opendocument.database',
  odc: 'application/vnd.oasis.opendocument.chart',
  odf: 'application/vnd.oasis.opendocument.formula',
  odg: 'application/vnd.oasis.opendocument.graphics',
  odi: 'application/vnd.oasis.opendocument.image',
  odm: 'application/vnd.oasis.opendocument.text-master',
  odp: 'application/vnd.oasis.opendocument.presentation',
  ods: 'application/vnd.oasis.opendocument.spreadsheet',
  odt: 'application/vnd.oasis.opendocument.text',
  oga: 'audio/ogg',
  ogg: 'audio/ogg',
  ogv: 'video/ogg',
  ogx: 'application/ogg',
  old: 'application/x-trash',
  one: 'application/onenote',
  onepkg: 'application/onenote',
  onetmp: 'application/onenote',
  onetoc2: 'application/onenote',
  opf: 'application/oebps-package+xml',
  opus: 'audio/ogg',
  orc: 'audio/csound',
  orf: 'image/x-olympus-orf',
  otf: 'application/font-sfnt',
  otg: 'application/vnd.oasis.opendocument.graphics-template',
  oth: 'application/vnd.oasis.opendocument.text-web',
  otp: 'application/vnd.oasis.opendocument.presentation-template',
  ots: 'application/vnd.oasis.opendocument.spreadsheet-template',
  ott: 'application/vnd.oasis.opendocument.text-template',
  oza: 'application/x-oz-application',
  p: 'text/x-pascal',
  p7r: 'application/x-pkcs7-certreqresp',
  pac: 'application/x-ns-proxy-autoconfig',
  pas: 'text/x-pascal',
  pat: 'image/x-coreldrawpattern',
  patch: 'text/x-diff',
  pbm: 'image/x-portable-bitmap',
  pcap: 'application/vnd.tcpdump.pcap',
  pcf: 'application/x-font-pcf',
  'pcf.Z': 'application/x-font-pcf',
  pcx: 'image/pcx',
  pdb: 'chemical/x-pdb',
  pdf: 'application/pdf',
  pfa: 'application/x-font',
  pfb: 'application/x-font',
  pfr: 'application/font-tdpfr',
  pgm: 'image/x-portable-graymap',
  pgn: 'application/x-chess-pgn',
  pgp: 'application/pgp-encrypted',
  php: '#application/x-httpd-php',
  php3: '#application/x-httpd-php3',
  php3p: '#application/x-httpd-php3-preprocessed',
  php4: '#application/x-httpd-php4',
  php5: '#application/x-httpd-php5',
  phps: '#application/x-httpd-php-source',
  pht: '#application/x-httpd-php',
  phtml: '#application/x-httpd-php',
  pk: 'application/x-tex-pk',
  pl: 'text/x-perl',
  pls: 'audio/x-scpls',
  pm: 'text/x-perl',
  png: 'image/png',
  pnm: 'image/x-portable-anymap',
  pot: 'text/plain',
  potm: 'application/vnd.ms-powerpoint.template.macroEnabled.12',
  potx: 'application/vnd.openxmlformats-officedocument.presentationml.template',
  ppam: 'application/vnd.ms-powerpoint.addin.macroEnabled.12',
  ppm: 'image/x-portable-pixmap',
  pps: 'application/vnd.ms-powerpoint',
  ppsm: 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12',
  ppsx: 'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
  ppt: 'application/vnd.ms-powerpoint',
  pptm: 'application/vnd.ms-powerpoint.presentation.macroEnabled.12',
  pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
  prf: 'application/pics-rules',
  prt: 'chemical/x-ncbi-asn1-ascii',
  ps: 'application/postscript',
  psd: 'image/x-photoshop',
  py: 'text/x-python',
  pyc: 'application/x-python-code',
  pyo: 'application/x-python-code',
  qgs: 'application/x-qgis',
  qt: 'video/quicktime',
  qtl: 'application/x-quicktimeplayer',
  ra: 'audio/x-pn-realaudio',
  ram: 'audio/x-pn-realaudio',
  rar: 'application/rar',
  ras: 'image/x-cmu-raster',
  rb: 'application/x-ruby',
  rd: 'chemical/x-mdl-rdfile',
  rdf: 'application/rdf+xml',
  rdp: 'application/x-rdp',
  rgb: 'image/x-rgb',
  rhtml: '#application/x-httpd-eruby',
  rm: 'audio/x-pn-realaudio',
  roff: 'application/x-troff',
  ros: 'chemical/x-rosdal',
  rpm: 'application/x-redhat-package-manager',
  rss: 'application/x-rss+xml',
  rtf: 'application/rtf',
  rtx: 'text/richtext',
  rxn: 'chemical/x-mdl-rxnfile',
  scala: 'text/x-scala',
  sce: 'application/x-scilab',
  sci: 'application/x-scilab',
  sco: 'audio/csound',
  scr: 'application/x-silverlight',
  sct: 'text/scriptlet',
  sd: 'chemical/x-mdl-sdfile',
  sd2: 'audio/x-sd2',
  sda: 'application/vnd.stardivision.draw',
  sdc: 'application/vnd.stardivision.calc',
  sdd: 'application/vnd.stardivision.impress',
  sds: 'application/vnd.stardivision.chart',
  sdw: 'application/vnd.stardivision.writer',
  ser: 'application/java-serialized-object',
  sfd: 'application/vnd.font-fontforge-sfd',
  sfv: 'text/x-sfv',
  sgf: 'application/x-go-sgf',
  sgl: 'application/vnd.stardivision.writer-global',
  sh: 'application/x-sh',
  shar: 'application/x-shar',
  shp: 'application/x-qgis',
  shtml: 'text/html',
  shx: 'application/x-qgis',
  sid: 'audio/prs.sid',
  sig: 'application/pgp-signature',
  sik: 'application/x-trash',
  silo: 'model/mesh',
  sis: 'application/vnd.symbian.install',
  sisx: 'x-epoc/x-sisx-app',
  sit: 'application/x-stuffit',
  sitx: 'application/x-stuffit',
  skd: 'application/x-koan',
  skm: 'application/x-koan',
  skp: 'application/x-koan',
  skt: 'application/x-koan',
  sldm: 'application/vnd.ms-powerpoint.slide.macroEnabled.12',
  sldx: 'application/vnd.openxmlformats-officedocument.presentationml.slide',
  smi: 'application/smil+xml',
  smil: 'application/smil+xml',
  snd: 'audio/basic',
  spc: 'chemical/x-galactic-spc',
  spl: 'application/x-futuresplash',
  spx: 'audio/ogg',
  sql: 'application/x-sql',
  src: 'application/x-wais-source',
  srt: 'text/plain',
  stc: 'application/vnd.sun.xml.calc.template',
  std: 'application/vnd.sun.xml.draw.template',
  sti: 'application/vnd.sun.xml.impress.template',
  stw: 'application/vnd.sun.xml.writer.template',
  sty: 'text/x-tex',
  sv4cpio: 'application/x-sv4cpio',
  sv4crc: 'application/x-sv4crc',
  svg: 'image/svg+xml',
  svgz: 'image/svg+xml',
  sw: 'chemical/x-swissprot',
  swf: 'application/x-shockwave-flash',
  swfl: 'application/x-shockwave-flash',
  sxc: 'application/vnd.sun.xml.calc',
  sxd: 'application/vnd.sun.xml.draw',
  sxg: 'application/vnd.sun.xml.writer.global',
  sxi: 'application/vnd.sun.xml.impress',
  sxm: 'application/vnd.sun.xml.math',
  sxw: 'application/vnd.sun.xml.writer',
  t: 'application/x-troff',
  tar: 'application/x-tar',
  taz: 'application/x-gtar-compressed',
  tcl: 'application/x-tcl',
  tex: 'text/x-tex',
  texi: 'application/x-texinfo',
  texinfo: 'application/x-texinfo',
  text: 'text/plain',
  tgf: 'chemical/x-mdl-tgf',
  tgz: 'application/x-gtar-compressed',
  thmx: 'application/vnd.ms-officetheme',
  tif: 'image/tiff',
  tiff: 'image/tiff',
  tk: 'text/x-tcl',
  tm: 'text/texmacs',
  torrent: 'application/x-bittorrent',
  tr: 'application/x-troff',
  ts: 'video/MP2T',
  tsp: 'application/dsptype',
  tsv: 'text/tab-separated-values',
  ttf: 'application/font-sfnt',
  ttl: 'text/turtle',
  txt: 'text/plain',
  uls: 'text/iuls',
  ustar: 'application/x-ustar',
  val: 'chemical/x-ncbi-asn1-binary',
  vcard: 'text/vcard',
  vcd: 'application/x-cdlink',
  vcf: 'text/vcard',
  vcs: 'text/x-vcalendar',
  vmd: 'chemical/x-vmd',
  vms: 'chemical/x-vamas-iso14976',
  vrm: 'x-world/x-vrml',
  vrml: 'model/vrml',
  vsd: 'application/vnd.visio',
  vss: 'application/vnd.visio',
  vst: 'application/vnd.visio',
  vsw: 'application/vnd.visio',
  wad: 'application/x-doom',
  wasm: 'application/wasm',
  wav: 'audio/wav',
  wax: 'audio/x-ms-wax',
  wbmp: 'image/vnd.wap.wbmp',
  wbxml: 'application/vnd.wap.wbxml',
  webm: 'video/webm',
  wk: 'application/x-123',
  wm: 'video/x-ms-wm',
  wma: 'audio/x-ms-wma',
  wmd: 'application/x-ms-wmd',
  wml: 'text/vnd.wap.wml',
  wmlc: 'application/vnd.wap.wmlc',
  wmls: 'text/vnd.wap.wmlscript',
  wmlsc: 'application/vnd.wap.wmlscriptc',
  wmv: 'video/x-ms-wmv',
  wmx: 'video/x-ms-wmx',
  wmz: 'application/x-ms-wmz',
  woff: 'application/font-woff',
  wp5: 'application/vnd.wordperfect5.1',
  wpd: 'application/vnd.wordperfect',
  wrl: 'model/vrml',
  wsc: 'text/scriptlet',
  wvx: 'video/x-ms-wvx',
  wz: 'application/x-wingz',
  x3d: 'model/x3d+xml',
  x3db: 'model/x3d+binary',
  x3dv: 'model/x3d+vrml',
  xbm: 'image/x-xbitmap',
  xcf: 'application/x-xcf',
  xcos: 'application/x-scilab-xcos',
  xht: 'application/xhtml+xml',
  xhtml: 'application/xhtml+xml',
  xlam: 'application/vnd.ms-excel.addin.macroEnabled.12',
  xlb: 'application/vnd.ms-excel',
  xls: 'application/vnd.ms-excel',
  xlsb: 'application/vnd.ms-excel.sheet.binary.macroEnabled.12',
  xlsm: 'application/vnd.ms-excel.sheet.macroEnabled.12',
  xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
  xlt: 'application/vnd.ms-excel',
  xltm: 'application/vnd.ms-excel.template.macroEnabled.12',
  xltx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
  xml: 'application/xml',
  xpi: 'application/x-xpinstall',
  xpm: 'image/x-xpixmap',
  xsd: 'application/xml',
  xsl: 'application/xslt+xml',
  xslt: 'application/xslt+xml',
  xspf: 'application/xspf+xml',
  xtel: 'chemical/x-xtel',
  xul: 'application/vnd.mozilla.xul+xml',
  xwd: 'image/x-xwindowdump',
  xyz: 'chemical/x-xyz',
  xz: 'application/x-xz',
  zip: 'application/zip'
};

function createReadNCbTransformer(readCb) {
  return new stream.Transform({
    async transform(chunk, _encoding, callback) {
      const chunkSize = chunk.length;
      readCb(chunkSize);
      this.push(chunk);
      callback();
    }

  });
}

function createReadNReadStream(stream, readCb) {
  const readCbTransformer = createReadNCbTransformer(readCb);
  return pipeStreamWithErrorHandle(stream, readCbTransformer, 'createReadNReadStream');
  /**
   * Don't use the below code.
   *
   * 1. The readable stream will be flowing mode after adding a 'data' event listener to it.
   * 2. The stream will be paused after calling `pause()` method.
   * 3. The stream will not change to flowing mode when adding a 'data' event listener to it.
   */
  // stream.on('data', (d) => {
  //   readCb(d.length);
  // });
  // stream.pause();
}

class CRC {
  constructor() {
    this.value = '0';
  }

  reset() {
    this.value = '0';
  }

  async updateBlob() {
    throw new TosClientError('Not implemented in node.js environment.');
  }

  update(value) {
    this.value = tosCrc64Js.crc64(value, this.value);
    return this.value;
  }

  getCrc64() {
    return this.value;
  }

}

var nodejsCRC = {
  __proto__: null,
  CRC: CRC,
  combineCrc64: tosCrc64Js.combineCrc64
};

let crcModule = null;

{
  crcModule = nodejsCRC;
}

const {
  CRC: CRC$1,
  combineCrc64
} = crcModule;

const minRate = 1024;
const minCapacity = 10 * 1024;
/**
 *
 * @param capacity  minValue 10KB. unit byte
 * @param rate   minValue 1KB. unit byte/s
 * @returns
 */

function createDefaultRateLimiter(capacity, rate) {
  const realCapacity = Math.max(minCapacity, capacity);
  const realRate = Math.max(minRate, rate);
  const d = {
    rate: realRate,
    capacity: realCapacity,
    currentAmount: realCapacity,
    lastConsumeTime: Date.now()
  };
  return {
    Acquire: async want => {
      if (want > d.capacity) {
        want = d.capacity;
      }

      const now = Date.now();
      const increment = Math.floor((now - d.lastConsumeTime) / 1000 * d.rate);

      if (increment + d.currentAmount > d.capacity) {
        d.currentAmount = d.capacity;
      } else {
        d.currentAmount += increment;
      }

      if (want > d.currentAmount) {
        const timeToWaitSec = (want - d.currentAmount) / d.rate;
        return {
          ok: false,
          timeToWait: Math.ceil(timeToWaitSec * 1000)
        };
      }

      d.lastConsumeTime = now;
      d.currentAmount = d.currentAmount - want;
      return {
        ok: true,
        timeToWait: 0
      };
    }
  };
}

function createRateLimiterTransform(rateLimiter) {
  return new stream.Transform({
    async transform(chunk, _encoding, callback) {
      try {
        const chunkSize = chunk.length;
        let finished = false;

        while (!finished) {
          const {
            ok,
            timeToWait
          } = await rateLimiter.Acquire(chunkSize);

          if (!ok) {
            await wait(timeToWait);
          }

          finished = ok;
        }

        this.push(chunk);
        callback();
      } catch (error) {
        callback(error);
      }
    }

  });
}

function createRateLimiterStream(stream, rateLimiter) {
  const pipeRateLimit = createRateLimiterTransform(rateLimiter);
  return pipeStreamWithErrorHandle(stream, pipeRateLimit, 'createRateLimiterStream');
}
function wait(milliseconds) {
  return new Promise(r => {
    setTimeout(() => r(''), milliseconds);
  });
}

var moduleNode = {
  __proto__: null,
  createDefaultRateLimiter: createDefaultRateLimiter,
  createRateLimiterStream: createRateLimiterStream,
  wait: wait
};

let rateLimiter = null;

{
  rateLimiter = moduleNode;
}

const {
  createDefaultRateLimiter: createDefaultRateLimiter$1,
  createRateLimiterStream: createRateLimiterStream$1
} = rateLimiter;

class Buffer2Stream extends stream.Readable {
  constructor(buf) {
    super();
    this.buf = void 0;
    this.lastPos = 0;
    this.buf = buf;
  }

  _read(n) {
    const totalSize = this.buf.length;
    let actualN = Math.min(n, totalSize - this.lastPos);

    if (this.lastPos >= totalSize) {
      this.push(null);
      return;
    }

    this.push(this.buf.slice(this.lastPos, this.lastPos + actualN));
    this.lastPos += actualN;
  }

}

function createReadCbTransformer(readCb) {
  return new stream.Transform({
    async transform(chunk, _encoding, callback) {
      readCb(chunk);
      this.push(chunk);
      callback();
    }

  });
}

function createCrcReadStream(stream, crc) {
  const readCbTransformer = createReadCbTransformer(chunk => crc.update(chunk));
  return pipeStreamWithErrorHandle(stream, readCbTransformer, 'createCrcReadStream');
}

var TosHeader;

(function (TosHeader) {
  TosHeader["HeaderRestore"] = "x-tos-restore";
  TosHeader["HeaderRestoreExpiryDays"] = "x-tos-restore-expiry-days";
  TosHeader["HeaderRestoreRequestDate"] = "x-tos-restore-request-date";
  TosHeader["HeaderRestoreTier"] = "x-tos-restore-tier";
  TosHeader["HeaderProjectName"] = "x-tos-project-name";
  TosHeader["HeaderReplicationStatus"] = "x-tos-replication-status";
})(TosHeader || (TosHeader = {}));

const RestoreOngoingRequestTrueStr = 'ongoing-request="true"';

const getObjectInputKey = input => {
  return typeof input === 'string' ? input : input.key;
};
const DEFAULT_CONTENT_TYPE = 'application/octet-stream';
function lookupMimeType(key) {
  const lastDotIndex = key.lastIndexOf('.');

  if (lastDotIndex <= 0) {
    return undefined;
  }

  const extName = key.slice(lastDotIndex + 1).toLowerCase();
  return mimeTypes[extName];
} // for all object methods

function validateObjectName(input) {
  const key = typeof input === 'string' ? input : input.key;

  if (key.length < 1) {
    throw new TosClientError('invalid object name, the length must be greater than 1');
  }
}
function getSize(body, headers) {
  if (isBuffer(body)) {
    return body.length;
  }

  if (isBlob(body)) {
    return body.size;
  }

  if (headers && headers['content-length']) {
    const v = +headers['content-length'];

    if (v >= 0) {
      return v;
    }
  }

  return null;
}
function getEmitReadBodyConfig({
  body,
  dataTransferCallback,
  makeRetryStream,
  rateLimiter
}) {
  let newBody = body;

  const getDefaultRet = () => ({
    body: newBody,
    makeRetryStream: undefined
  });

  if (isBuffer(newBody)) {
    const bodyBuf = newBody;

    makeRetryStream = () => new Buffer2Stream(bodyBuf);

    newBody = new Buffer2Stream(bodyBuf);
  }

  if (isReadable(newBody)) {
    if (rateLimiter && isValidRateLimiter(rateLimiter)) {
      newBody = createRateLimiterStream$1(newBody, rateLimiter);
    }

    newBody = createReadNReadStream(newBody, dataTransferCallback);

    if (makeRetryStream) {
      const oriMakeRetryStream = makeRetryStream;
      return {
        body: newBody,
        makeRetryStream: () => {
          let stream = oriMakeRetryStream();

          if (!stream) {
            return stream;
          }

          if (rateLimiter && isValidRateLimiter(rateLimiter)) {
            stream = createRateLimiterStream$1(stream, rateLimiter);
          }

          stream = createReadNReadStream(stream, dataTransferCallback);
          return stream;
        }
      };
    }
  }

  return getDefaultRet();
}
async function getCRCBodyConfig({
  body,
  beforeRetry,
  makeRetryStream,
  enableCRC
}) {
  if ( !enableCRC) {
    return {
      body,
      beforeRetry,
      makeRetryStream
    };
  }

  let newBody = body;
  const crc = new CRC$1();

  if (isReadable(body)) {
    newBody = createCrcReadStream(body, crc);

    if (makeRetryStream) {
      const oriMakeRetryStream = makeRetryStream;

      makeRetryStream = () => {
        const stream = oriMakeRetryStream();

        if (!stream) {
          return stream;
        }

        return createCrcReadStream(stream, crc);
      };
    }
  }

  return {
    body: newBody,
    beforeRetry: () => {
      crc.reset();
      beforeRetry == null ? void 0 : beforeRetry();
    },
    makeRetryStream,
    crc
  };
}
async function getNewBodyConfig(input) {
  const config1 = getEmitReadBodyConfig(input);
  input = { ...input,
    ...config1
  };
  const config2 = getCRCBodyConfig(input);
  return config2;
}
function getCopySourceHeaderValue(srcBucket, srcKey) {
  return `/${srcBucket}/${encodeURIComponent(srcKey)}`;
}
function isValidRateLimiter(rateLimiter) {
  if (!(rateLimiter != null && rateLimiter.Acquire) || !((rateLimiter == null ? void 0 : rateLimiter.Acquire) instanceof Function)) {
    throw new TosClientError(`The rateLimiter is not valid function`);
  }

  return true;
}
function validateCheckpoint(cp) {
  if ( typeof cp === 'object') {
    console.warn(`The \`checkpoint\` parameter should be passed as a string in node.js environment, representing a file or directory.` + `Passing a checkpoint object to it will be removed in the future.`);
  }
}
const getRestoreInfoFromHeaders = headers => {
  if (!headers) return;
  const headerStoreValue = headers == null ? void 0 : headers[TosHeader.HeaderRestore];

  if (headerStoreValue) {
    var _split$1$split$, _split$, _split$$split;

    /**
     * value example:
     * X-Tos-Restore: ongoing-request="false", expiry-date="Fri, 19 Apr 2024 00:00:00 GMT"
     */
    const ExpiryDate = (_split$1$split$ = (_split$ = (headerStoreValue != null ? headerStoreValue : '').split('",')[1]) == null ? void 0 : _split$.split == null ? void 0 : (_split$$split = _split$.split('=')) == null ? void 0 : _split$$split[1]) != null ? _split$1$split$ : '';
    const OngoingRequest = (headerStoreValue == null ? void 0 : headerStoreValue.trim()) === RestoreOngoingRequestTrueStr ? true : false;
    const restoreInfo = {
      RestoreStatus: {
        OngoingRequest,
        ExpiryDate
      }
    };

    if (OngoingRequest) {
      var _headers$TosHeader$He;

      restoreInfo.RestoreParam = {
        ExpiryDays: headers[TosHeader.HeaderRestoreExpiryDays] ? Number(headers[TosHeader.HeaderRestoreExpiryDays]) : 0,
        RequestDate: (_headers$TosHeader$He = headers[TosHeader.HeaderRestoreRequestDate]) != null ? _headers$TosHeader$He : '',
        Tier: headers[TosHeader.HeaderRestoreTier]
      };
    }

    return restoreInfo;
  }

  return;
};

(function (DataTransferType) {
  DataTransferType[DataTransferType["Started"] = 1] = "Started";
  DataTransferType[DataTransferType["Rw"] = 2] = "Rw";
  DataTransferType[DataTransferType["Succeed"] = 3] = "Succeed";
  DataTransferType[DataTransferType["Failed"] = 4] = "Failed";
})(exports.aB || (exports.aB = {}));

const TOS = /*#__PURE__*/createDebug('TOS');

const retryNamespace = '__retryConfig__';
const retrySignatureNamespace = '__retrySignature__';

function isNetworkError(error) {
  var _error$response$heade;

  // no response or no requestId, ignore no network(error.code is undefined)
  return !error.response && Boolean(error.code) || error.response && !((_error$response$heade = error.response.headers) != null && _error$response$heade['x-tos-request-id']);
}

function isCanRetryStatusCode(error) {
  if (!error.response) {
    return false;
  }

  const {
    status
  } = error.response;

  if (status === 429 || status >= 500) {
    return true;
  }

  return false;
}
const makeAxiosInst = maxRetryCount => {
  const axiosInst = axios.create(); // set `axiosInst` default values to avoid being affected by the global default values of axios

  axiosInst.defaults.auth = undefined;
  axiosInst.defaults.responseType = 'json';
  axiosInst.defaults.params = undefined;
  axiosInst.defaults.headers = {};
  axiosInst.defaults.withCredentials = false;
  axiosInst.defaults.maxContentLength = -1;
  axiosInst.defaults.maxBodyLength = -1;
  axiosInst.defaults.maxRedirects = 0;

  axiosInst.defaults.validateStatus = function (status) {
    return status >= 200 && status < 300; // default
  };

  axiosInst.defaults.decompress = false;
  axiosInst.defaults.transitional = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  }; // delete browser headers


  const ensureHeaders = v => {
    var _v$response;

    v.headers = v.headers || v.header || (v == null ? void 0 : (_v$response = v.response) == null ? void 0 : _v$response.headers) || {};
    return v;
  };

  axiosInst.interceptors.response.use(ensureHeaders, error => {
    ensureHeaders(error);
    return Promise.reject(error);
  }); // decode header. Encode headers' value by encodeHeadersValue method before calling axios

  function handleResponseHeader(headers) {
    Object.entries(headers).forEach(([key, value]) => {
      const [err, decodedValue] = safeSync(() => decodeURI(value));

      if (err || decodedValue == null || decodedValue === value) {
        return;
      }

      let sArr = [];
      const valueArr = `${value}`.match(/./gu);
      const decodedValueArr = decodedValue.match(/./gu);

      for (let i = 0, j = 0; i < decodedValueArr.length;) {
        const ch = decodedValueArr[i];

        if (ch === valueArr[j]) {
          sArr.push(ch);
          ++i;
          ++j;
          continue;
        }

        const encodedCh = encodeURIComponent(ch);

        if (ch.length > 1 || ch.charCodeAt(0) >= 128) {
          sArr.push(ch);
        } else {
          sArr.push(encodedCh);
        }

        ++i;
        j += encodedCh.length;
      }

      headers[key] = sArr.join('');
    });
  }

  axiosInst.interceptors.response.use(res => {
    if (!res.headers) {
      return res;
    }

    handleResponseHeader(res.headers);
    return res;
  }, async error => {
    var _error$response;

    if (!axios.isAxiosError(error)) {
      return Promise.reject(error);
    }

    const headers = (_error$response = error.response) == null ? void 0 : _error$response.headers;

    if (!headers) {
      return Promise.reject(error);
    }

    handleResponseHeader(headers);
    return Promise.reject(error);
  }); // retry

  axiosInst.interceptors.response.use(undefined, async error => {
    var _retryConfig$retryCou;

    const {
      config
    } = error;

    if (!config) {
      return Promise.reject(error);
    }

    if (!config[retryNamespace]) {
      config[retryNamespace] = {};
    }

    const retryConfig = config[retryNamespace];
    const retryCount = (_retryConfig$retryCou = retryConfig.retryCount) != null ? _retryConfig$retryCou : 0;
    let newData = config.data;

    const canRetryData = (() => {
      {
        if (config.data && config.data instanceof stream.Readable) {
          const v = retryConfig.makeRetryStream == null ? void 0 : retryConfig.makeRetryStream();

          if (!v) {
            return false;
          }

          newData = v;
        }
      }

      return true;
    })();

    const canRetry = (isNetworkError(error) || isCanRetryStatusCode(error)) && retryCount < maxRetryCount && canRetryData;

    if (!canRetry) {
      return Promise.reject(error);
    }

    const retrySignature = config[retrySignatureNamespace];

    if (retrySignature) {
      const {
        signOpt,
        sigInst
      } = retrySignature;
      const signatureHeaders = sigInst.signatureHeader(signOpt);
      signatureHeaders.forEach((value, key) => {
        config.headers[key] = value;
      });
    } //console.log('config: ', config)


    TOS('retryConfig: ', config);
    const nextConfig = { ...config,
      data: newData,
      [retryNamespace]: { ...retryConfig,
        retryCount: retryCount + 1
      }
    };
    retryConfig.beforeRetry == null ? void 0 : retryConfig.beforeRetry();
    return axiosInst(nextConfig);
  });
  return axiosInst;
};

function getEnc(coding) {
  switch (coding) {
    case 'utf-8':
      return cryptoEncUtf8;

    case 'base64':
      return cryptoEncBase64;

    case 'hex':
      return cryptoEncHex;

    default:
      throw new TosClientError('The coding is not supported');
  }
}

function decode(v, decoding) {
  if (!decoding) {
    return v;
  }

  return v.toString(getEnc(decoding));
}
const hashMd5 = function hashMd5(message, decoding) {
  if (isBuffer(message)) {
    throw new TosClientError('not support buffer in browser environment');
  }

  return decode(cryptoHashMd5(message), decoding);
};

function digest(v, decoding) {
  if (!decoding) {
    return v.digest();
  }

  return v.digest(decoding);
}

const hmacSha256 = function hmacSha256(key, message, decoding) {
  return digest(crypto$1.createHmac('sha256', key).update(message), decoding);
};
const hashSha256 = function hashSha256(message, decoding) {
  return digest(crypto$1.createHash('sha256').update(message), decoding);
};
const hashMd5$1 = function hashMd5(message, decoding) {
  return digest(crypto$1.createHash('md5').update(message), decoding);
};
const parse = function parse(str, encoding) {
  return Buffer.from(str, encoding);
};
const stringify = function stringify(str, decoding) {
  return str.toString(decoding);
};

var cryptoNode = {
  __proto__: null,
  hmacSha256: hmacSha256,
  hashSha256: hashSha256,
  hashMd5: hashMd5$1,
  parse: parse,
  stringify: stringify
};

let crypto = null;

{
  crypto = cryptoNode;
}

const {
  hmacSha256: hmacSha256$1,
  hashSha256: hashSha256$1,
  hashMd5: hashMd5$2,
  parse: parse$1,
  stringify: stringify$1
} = crypto;

async function _uploadPart(input) {
  const {
    uploadId,
    partNumber,
    body,
    enableContentMD5 = false
  } = input;
  const headers = normalizeHeadersKey(input.headers);
  input.headers = headers;
  fillRequestHeaders(input, ['trafficLimit', 'ssecAlgorithm', 'ssecKey', 'ssecKeyMD5']);
  const size = getSize(body);

  if (size && headers['content-length'] == null) {
    headers['content-length'] = size.toFixed(0);
  }

  if (enableContentMD5 && headers['content-md5'] == null) {
    // current only support in nodejs
    if ( isReadable(body) && input.makeRetryStream) {
      const newStream = input.makeRetryStream();

      if (newStream) {
        let allContent = Buffer.from([]);

        for await (const chunk of newStream) {
          allContent = Buffer.concat([allContent, typeof chunk === 'string' ? Buffer.from(chunk) : chunk]);
        }

        const md5 = hashMd5$2(allContent, 'base64');
        headers['content-md5'] = md5;
      }
    } else {
      console.warn(`current not support enableMD5Checksum`);
    }
  }

  const totalSize = getSize(input.body, headers);
  const totalSizeValid = totalSize != null;

  if (!totalSizeValid && (input.dataTransferStatusChange || input.progress)) {
    console.warn(`Don't get totalSize of uploadPart's body, the \`dataTransferStatusChange\` callback will not trigger. You can use \`uploadPartFromFile\` instead`);
  }

  let consumedBytes = 0;
  const {
    dataTransferStatusChange,
    progress
  } = input;

  const triggerDataTransfer = (type, rwOnceBytes = 0) => {
    // request cancel will make rwOnceBytes < 0 in browser
    if (!totalSizeValid || rwOnceBytes < 0) {
      return;
    }

    if (!dataTransferStatusChange && !progress) {
      return;
    }

    consumedBytes += rwOnceBytes;
    dataTransferStatusChange == null ? void 0 : dataTransferStatusChange({
      type,
      rwOnceBytes,
      consumedBytes,
      totalBytes: totalSize
    });

    const progressValue = (() => {
      if (totalSize === 0) {
        if (type === exports.aB.Succeed) {
          return 1;
        }

        return 0;
      }

      return consumedBytes / totalSize;
    })();

    if (progressValue === 1) {
      if (type === exports.aB.Succeed) {
        progress == null ? void 0 : progress(progressValue);
      }
    } else {
      progress == null ? void 0 : progress(progressValue);
    }
  };

  const bodyConfig = await getNewBodyConfig({
    body: input.body,
    dataTransferCallback: n => triggerDataTransfer(exports.aB.Rw, n),
    beforeRetry: input.beforeRetry,
    makeRetryStream: input.makeRetryStream,
    enableCRC: this.opts.enableCRC,
    rateLimiter: input.rateLimiter
  });
  triggerDataTransfer(exports.aB.Started);

  const task = async () => {
    const res = await this._fetchObject(input, 'PUT', {
      partNumber,
      uploadId
    }, headers, bodyConfig.body, {
      handleResponse: res => ({
        partNumber,
        ETag: res.headers.etag,
        serverSideEncryption: res.headers['x-tos-server-side-encryption'],
        serverSideDataEncryption: res.headers['x-tos-server-side-data-encryption'],
        serverSideEncryptionKeyId: res.headers['x-tos-server-side-encryption-kms-key-id'],
        ssecAlgorithm: res.headers['x-tos-server-side-encryption-customer-algorithm'],
        ssecKeyMD5: res.headers['x-tos-server-side-encryption-customer-key-MD5'],
        hashCrc64ecma: res.headers['x-tos-hash-crc64ecma']
      }),
      axiosOpts: {
        [retryNamespace]: {
          beforeRetry: () => {
            consumedBytes = 0;
            bodyConfig.beforeRetry == null ? void 0 : bodyConfig.beforeRetry();
          },
          makeRetryStream: bodyConfig.makeRetryStream
        },
        onUploadProgress: event => {
          triggerDataTransfer(exports.aB.Rw, event.loaded - consumedBytes);
        }
      }
    });

    if (this.opts.enableCRC && bodyConfig.crc) {
      checkCRC64WithHeaders(bodyConfig.crc, res.headers);
    }

    return res;
  };

  const [err, res] = await safeAwait(task()); // FAQ: no etag

  if (err || !res) {
    triggerDataTransfer(exports.aB.Failed);
    throw err;
  }

  triggerDataTransfer(exports.aB.Succeed);
  return res;
}
async function uploadPart(input) {
  return _uploadPart.call(this, input);
}
async function uploadPartFromFile(input) {
  var _input$offset, _input$partSize;

  const stats = await stat(input.filePath);
  const start = (_input$offset = input.offset) != null ? _input$offset : 0;
  const end = Math.min(stats.size, start + ((_input$partSize = input.partSize) != null ? _input$partSize : stats.size));
  const makeRetryStream = makeRetryStreamAutoClose(() => createReadStream(input.filePath, {
    start,
    end: end - 1
  }));

  try {
    return await _uploadPart.call(this, { ...input,
      body: makeRetryStream.make(),
      headers: { ...(input.headers || {}),
        ['content-length']: `${end - start}`
      },
      makeRetryStream: makeRetryStream.make
    });
  } catch (err) {
    tryDestroy(makeRetryStream.getLastStream(), err);
    throw err;
  }
}

async function completeMultipartUpload(input) {
  var _input$headers;

  input.headers = (_input$headers = input.headers) != null ? _input$headers : {};
  fillRequestHeaders(input, ['callback', 'callbackVar', 'forbidOverwrite']);

  const handleResponse = response => {
    const bucket = input.bucket || this.opts.bucket || '';
    const headers = response.headers;
    const result = { ...{
        VersionID: headers['x-tos-version-id'],
        ETag: headers['etag'],
        Bucket: bucket,
        Location: headers['location'],
        HashCrc64ecma: headers['x-tos-hash-crc64ecma'],
        Key: input.key
      },
      ...response.data
    };

    if (input.callback) {
      result.CallbackResult = `${JSON.stringify(response.data)}`;
    }

    return result;
  };

  if (input.completeAll) {
    var _input$parts;

    if (((_input$parts = input.parts) == null ? void 0 : _input$parts.length) > 0) {
      throw new TosClientError(`Should not specify both 'completeAll' and 'parts' params.`);
    }

    return this._fetchObject(input, 'POST', {
      uploadId: input.uploadId
    }, { ...input.headers,
      'x-tos-complete-all': 'yes'
    }, undefined, {
      handleResponse
    });
  }

  return this._fetchObject(input, 'POST', {
    uploadId: input.uploadId
  }, { ...input.headers
  }, {
    Parts: input.parts.map(it => ({
      ETag: it.eTag,
      PartNumber: it.partNumber
    }))
  }, {
    handleResponse
  });
}

class EmptyReadStream extends stream.Readable {
  _read() {
    this.push(null);
  }

}

(function (UploadEventType) {
  UploadEventType[UploadEventType["CreateMultipartUploadSucceed"] = 1] = "CreateMultipartUploadSucceed";
  UploadEventType[UploadEventType["CreateMultipartUploadFailed"] = 2] = "CreateMultipartUploadFailed";
  UploadEventType[UploadEventType["UploadPartSucceed"] = 3] = "UploadPartSucceed";
  UploadEventType[UploadEventType["UploadPartFailed"] = 4] = "UploadPartFailed";
  UploadEventType[UploadEventType["UploadPartAborted"] = 5] = "UploadPartAborted";
  UploadEventType[UploadEventType["CompleteMultipartUploadSucceed"] = 6] = "CompleteMultipartUploadSucceed";
  UploadEventType[UploadEventType["CompleteMultipartUploadFailed"] = 7] = "CompleteMultipartUploadFailed";
})(exports.KW || (exports.KW = {}));

const CHECKPOINT_FILE_NAME_PLACEHOLDER = '@@checkpoint-file-placeholder@@';
const FILE_PARAM_CHECK_MSG = '`file` must be string, Buffer, File or Blob';
const ABORT_ERROR_STATUS_CODE = [403, 404, 405];
async function uploadFile(input) {
  var _checkpointRichInfo$r3, _checkpointRichInfo$r4, _checkpointRichInfo$r5;

  const {
    cancelToken,
    enableContentMD5 = false
  } = input;
  const headers = normalizeHeadersKey(input.headers);
  input.headers = headers;
  fillRequestHeaders(input, ['encodingType', 'cacheControl', 'contentDisposition', 'contentEncoding', 'contentLanguage', 'contentType', 'expires', 'acl', 'grantFullControl', 'grantRead', 'grantReadAcp', 'grantWriteAcp', 'ssecAlgorithm', 'ssecKey', 'ssecKeyMD5', 'serverSideEncryption', 'serverSideDataEncryption', 'meta', 'websiteRedirectLocation', 'storageClass']);

  const isCancel = () => cancelToken && !!cancelToken.reason;

  validateCheckpoint(input.checkpoint);
  const fileStats = await (async () => {
    if ( typeof input.file === 'string') {
      return stat(input.file);
    }

    return null;
  })();
  const fileSize = await (async () => {
    const {
      file
    } = input;

    if (fileStats) {
      return fileStats.size;
    }

    if (isBuffer(file)) {
      return file.length;
    }

    if (isBlob(file)) {
      return file.size;
    }

    throw new TosClientError(FILE_PARAM_CHECK_MSG);
  })();
  const checkpointRichInfo = await (async () => {
    {
      if (typeof input.checkpoint === 'string') {
        const {
          checkpoint
        } = input; // file doesn't exist when stat is null

        let checkpointStat = null;

        try {
          checkpointStat = await stat(checkpoint);
        } catch (_err) {
          // TODO: remove any
          const err = _err;

          if (err.code === 'ENOENT') ; else {
            throw err;
          }
        }

        const isDirectory = (() => {
          if (checkpointStat) {
            return checkpointStat.isDirectory();
          }

          return checkpoint.endsWith('/');
        })(); // TODO: this is not a right decision
        // filePath will generated by uploadId, use placeholder temporarily


        const filePath = isDirectory ? path.resolve(checkpoint, CHECKPOINT_FILE_NAME_PLACEHOLDER) : // ensure relative path require
        path.resolve(checkpoint);
        const dirPath = path.dirname(filePath); // ensure directory exist

        await safeMkdirRecursive(dirPath);

        if (isDirectory) {
          return {
            filePath,
            filePathIsPlaceholder: true
          };
        }

        try {
          const record = checkpointStat ? await safeParseCheckpointFile(filePath) : undefined;
          return {
            filePath,
            filePathIsPlaceholder: false,
            // filePath is json file
            // TODO: validate json schema
            record
          };
        } catch (error) {
          console.warn('the checkpoint file is invalid JSON format. please check checkpoint file');
          throw error;
        }
      }
    }

    if (typeof input.checkpoint === 'object') {
      return {
        record: input.checkpoint
      };
    }

    return {};
  })(); // check if file info is matched

  await (async () => {
    var _checkpointRichInfo$r;

    if (fileStats && (_checkpointRichInfo$r = checkpointRichInfo.record) != null && _checkpointRichInfo$r.file_info) {
      var _checkpointRichInfo$r2;

      const {
        last_modified,
        file_size
      } = (_checkpointRichInfo$r2 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r2.file_info;

      if (fileStats.mtimeMs !== last_modified || fileStats.size !== file_size) {
        console.warn(`The file has been modified since ${new Date(last_modified)}, so the checkpoint file is invalid, and specified file will be uploaded again.`);
        delete checkpointRichInfo.record;
      }
    }
  })();
  const partSize = calculateSafePartSize(fileSize, input.partSize || ((_checkpointRichInfo$r3 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r3.part_size) || DEFAULT_PART_SIZE, true); // check partSize is matched

  if (checkpointRichInfo.record && checkpointRichInfo.record.part_size !== partSize) {
    console.warn('The partSize param does not equal the partSize in checkpoint file, ' + 'so the checkpoint file is invalid, and specified file will be uploaded again.');
    delete checkpointRichInfo.record;
  }

  let bucket = input.bucket || this.opts.bucket || '';
  const key = input.key;
  let uploadId = '';
  let tasks = [];
  const allTasks = getAllTasks(fileSize, partSize);
  const initConsumedBytes = (((_checkpointRichInfo$r4 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r4.parts_info) || []).filter(it => it.is_completed).reduce((prev, it) => prev + it.part_size, 0);
  let consumedBytesForProgress = initConsumedBytes; // recorded tasks

  const recordedTasks = ((_checkpointRichInfo$r5 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r5.parts_info) || [];
  const recordedTaskMap = new Map();
  recordedTasks.forEach(it => recordedTaskMap.set(it.part_number, it));

  const getCheckpointContent = () => {
    const checkpointContent = {
      bucket,
      key,
      part_size: partSize,
      upload_id: uploadId,
      parts_info: recordedTasks
    };

    if (fileStats) {
      checkpointContent.file_info = {
        last_modified: fileStats.mtimeMs,
        file_size: fileStats.size
      };
    }

    return checkpointContent;
  };

  const triggerUploadEvent = e => {
    if (!input.uploadEventChange) {
      return;
    }

    const event = {
      bucket,
      uploadId,
      key,
      ...e
    };

    if (checkpointRichInfo.filePath) {
      event.checkpointFile = checkpointRichInfo.filePath;
    }

    input.uploadEventChange(event);
  };

  let TriggerProgressEventType;

  (function (TriggerProgressEventType) {
    TriggerProgressEventType[TriggerProgressEventType["start"] = 1] = "start";
    TriggerProgressEventType[TriggerProgressEventType["uploadPartSucceed"] = 2] = "uploadPartSucceed";
    TriggerProgressEventType[TriggerProgressEventType["completeMultipartUploadSucceed"] = 3] = "completeMultipartUploadSucceed";
  })(TriggerProgressEventType || (TriggerProgressEventType = {}));

  const triggerProgressEvent = type => {
    if (!input.progress) {
      return;
    }

    const percent = (() => {
      if (type === TriggerProgressEventType.start && fileSize === 0) {
        return 0;
      }

      return !fileSize ? 1 : consumedBytesForProgress / fileSize;
    })();

    if (consumedBytesForProgress === fileSize && type === TriggerProgressEventType.uploadPartSucceed) ; else {
      input.progress(percent, getCheckpointContent());
    }
  };

  let consumedBytes = initConsumedBytes;
  const {
    dataTransferStatusChange
  } = input;

  const triggerDataTransfer = (type, rwOnceBytes = 0) => {
    if (!dataTransferStatusChange) {
      return;
    }

    consumedBytes += rwOnceBytes;
    dataTransferStatusChange == null ? void 0 : dataTransferStatusChange({
      type,
      rwOnceBytes,
      consumedBytes,
      totalBytes: fileSize
    });
  };

  const writeCheckpointFile = makeSerialAsyncTask(async () => {
    if ( checkpointRichInfo.filePath) {
      const content = JSON.stringify(getCheckpointContent(), null, 2);
      const dirPath = path.dirname(checkpointRichInfo.filePath); // ensure directory exist

      await safeMkdirRecursive(dirPath);
      await writeFile(checkpointRichInfo.filePath, content, 'utf-8');
    }
  });

  const rmCheckpointFile = async () => {
    if ( checkpointRichInfo.filePath) {
      await rm(checkpointRichInfo.filePath).catch(err => {
        // eat err
        console.warn('remove checkpoint file failure, you can remove it by hand.\n', `checkpoint file path: ${checkpointRichInfo.filePath}\n`, err.message);
      });
    }
  };
  /**
   *
   * @param task one part task
   * @param uploadPartRes upload part failed if `uploadPartRes` is Error
   */


  const updateAfterUploadPart = async (task, uploadPartRes) => {
    let existRecordTask = recordedTaskMap.get(task.partNumber);

    if (!existRecordTask) {
      existRecordTask = {
        part_number: task.partNumber,
        offset: task.offset,
        part_size: task.partSize,
        is_completed: false,
        etag: '',
        hash_crc64ecma: ''
      };
      recordedTasks.push(existRecordTask);
      recordedTaskMap.set(existRecordTask.part_number, existRecordTask);
    }

    if (!uploadPartRes.err) {
      existRecordTask.is_completed = true;
      existRecordTask.etag = uploadPartRes.res.ETag;
      existRecordTask.hash_crc64ecma = uploadPartRes.res.hashCrc64ecma;
    }

    await writeCheckpointFile();
    const uploadPartInfo = {
      partNumber: existRecordTask.part_number,
      partSize: existRecordTask.part_size,
      offset: existRecordTask.offset
    };

    if (uploadPartRes.err) {
      const err = uploadPartRes.err;
      let type = exports.KW.UploadPartFailed;

      if (err instanceof TosServerError) {
        if (ABORT_ERROR_STATUS_CODE.includes(err.statusCode)) {
          type = exports.KW.UploadPartAborted;
        }
      }

      triggerUploadEvent({
        type,
        err,
        uploadPartInfo
      });
      return;
    }

    uploadPartInfo.etag = uploadPartRes.res.ETag;
    consumedBytesForProgress += uploadPartInfo.partSize;
    triggerUploadEvent({
      type: exports.KW.UploadPartSucceed,
      uploadPartInfo
    });
    triggerProgressEvent(TriggerProgressEventType.uploadPartSucceed);
  };

  if (checkpointRichInfo.record) {
    bucket = checkpointRichInfo.record.bucket;
    uploadId = checkpointRichInfo.record.upload_id; // checkpoint info exists, so need to calculate remain tasks

    const uploadedPartSet = new Set((checkpointRichInfo.record.parts_info || []).filter(it => it.is_completed).map(it => it.part_number));
    tasks = allTasks.filter(it => !uploadedPartSet.has(it.partNumber));
  } else {
    // createMultipartUpload will check bucket
    try {
      const {
        data: multipartRes
      } = await createMultipartUpload.call(this, input);

      if (isCancel()) {
        throw new CancelError('cancel uploadFile');
      }

      bucket = multipartRes.Bucket;
      uploadId = multipartRes.UploadId;

      if (checkpointRichInfo.filePathIsPlaceholder) {
        var _checkpointRichInfo$f;

        checkpointRichInfo.filePath = (_checkpointRichInfo$f = checkpointRichInfo.filePath) == null ? void 0 : _checkpointRichInfo$f.replace(`${CHECKPOINT_FILE_NAME_PLACEHOLDER}`, getDefaultCheckpointFilePath(bucket, key));
      }

      triggerUploadEvent({
        type: exports.KW.CreateMultipartUploadSucceed
      });
    } catch (_err) {
      const err = _err;
      triggerUploadEvent({
        type: exports.KW.CreateMultipartUploadFailed,
        err
      });
      throw err;
    }

    tasks = allTasks;
  }

  triggerProgressEvent(TriggerProgressEventType.start);

  const handleTasks = async () => {
    let firstErr = null;
    let index = 0; // TODO: how to test parallel does work, measure time is not right

    await Promise.all(Array.from({
      length: input.taskNum || 1
    }).map(async () => {
      while (true) {
        const currentIndex = index++;

        if (currentIndex >= tasks.length) {
          return;
        }

        const curTask = tasks[currentIndex];
        let consumedBytesThisTask = 0;
        const makeRetryStream = getMakeRetryStream(input.file, curTask);

        try {
          function getBody(file, task) {
            const {
              offset: start,
              partSize
            } = task;
            const end = start + partSize;

            if (makeRetryStream) {
              return makeRetryStream.make();
            }

            if (isBlob(file)) {
              return file.slice(start, end);
            }

            if (isBuffer(file)) {
              return file.slice(start, end);
            }

            throw new TosClientError(FILE_PARAM_CHECK_MSG);
          }

          const {
            data: uploadPartRes
          } = await _uploadPart.call(this, {
            bucket,
            key,
            uploadId,
            body: getBody(input.file, curTask),
            enableContentMD5,
            makeRetryStream: makeRetryStream == null ? void 0 : makeRetryStream.make,
            beforeRetry: () => {
              consumedBytes -= consumedBytesThisTask;
              consumedBytesThisTask = 0;
            },
            partNumber: curTask.partNumber,
            headers: {
              ['content-length']: `${curTask.partSize}`,
              ['x-tos-server-side-encryption-customer-algorithm']: headers['x-tos-server-side-encryption-customer-algorithm'],
              ['x-tos-server-side-encryption-customer-key']: headers['x-tos-server-side-encryption-customer-key'],
              ['x-tos-server-side-encryption-customer-key-md5']: headers['x-tos-server-side-encryption-customer-key-md5']
            },

            dataTransferStatusChange(status) {
              if (status.type !== exports.aB.Rw) {
                return;
              }

              if (isCancel()) {
                return;
              }

              consumedBytesThisTask += status.rwOnceBytes;
              triggerDataTransfer(status.type, status.rwOnceBytes);
            },

            trafficLimit: input.trafficLimit,
            rateLimiter: input.rateLimiter
          });

          if (isCancel()) {
            throw new CancelError('cancel uploadFile');
          }

          await updateAfterUploadPart(curTask, {
            res: uploadPartRes
          });
        } catch (_err) {
          tryDestroy(makeRetryStream == null ? void 0 : makeRetryStream.getLastStream(), _err);
          const err = _err;
          consumedBytes -= consumedBytesThisTask;
          consumedBytesThisTask = 0;

          if (isCancelError(err)) {
            throw err;
          }

          if (isCancel()) {
            throw new CancelError('cancel uploadFile');
          }

          if (!firstErr) {
            firstErr = err;
          }

          await updateAfterUploadPart(curTask, {
            err
          });
        }
      }
    }));

    if (firstErr) {
      throw firstErr;
    }

    const parts = (getCheckpointContent().parts_info || []).map(it => ({
      eTag: it.etag,
      partNumber: it.part_number
    }));
    const [err, res] = await safeAwait(completeMultipartUpload.call(this, {
      bucket,
      key,
      uploadId,
      parts
    }));

    if (err || !res) {
      triggerUploadEvent({
        type: exports.KW.CompleteMultipartUploadFailed
      });
      throw err;
    }

    triggerUploadEvent({
      type: exports.KW.CompleteMultipartUploadSucceed
    });
    triggerProgressEvent(TriggerProgressEventType.completeMultipartUploadSucceed);
    await rmCheckpointFile();

    if (this.opts.enableCRC && res.data.HashCrc64ecma && combineCRCInParts(getCheckpointContent()) !== res.data.HashCrc64ecma) {
      throw new TosClientError('crc of entire file mismatch.');
    }

    return res;
  };

  triggerDataTransfer(exports.aB.Started);
  const [err, res] = await safeAwait(handleTasks());

  if (err || !res) {
    triggerDataTransfer(exports.aB.Failed);
    throw err;
  }

  triggerDataTransfer(exports.aB.Succeed);
  return res;
}
/**
 * 即使 totalSize 是 0，也需要一个 Part，否则 Server 端会报错 read request body failed
 */

function getAllTasks(totalSize, partSize) {
  const tasks = [];

  for (let i = 0;; ++i) {
    const offset = i * partSize;
    const currPartSize = Math.min(partSize, totalSize - offset);
    tasks.push({
      offset,
      partSize: currPartSize,
      partNumber: i + 1
    });

    if ((i + 1) * partSize >= totalSize) {
      break;
    }
  }

  return tasks;
}

function getMakeRetryStream(file, task) {
  const {
    offset: start,
    partSize
  } = task;
  const end = start + partSize;

  if ( typeof file === 'string') {
    return makeRetryStreamAutoClose(() => {
      if (!partSize) {
        return new EmptyReadStream();
      }

      return createReadStream(file, {
        start,
        end: end - 1
      });
    });
  }

  return undefined;
}

function getDefaultCheckpointFilePath(bucket, key) {
  const originPath = `${key}.${hashMd5$2(`${bucket}.${key}`, 'hex')}.upload`;
  const normalizePath = originPath.replace(/[\\/]/g, '');
  return normalizePath;
}

function combineCRCInParts(cp) {
  var _cp$file_info, _cp$parts_info$sort, _cp$parts_info;

  const size = ((_cp$file_info = cp.file_info) == null ? void 0 : _cp$file_info.file_size) || 0;
  let res = '0';
  const sortedPartsInfo = (_cp$parts_info$sort = (_cp$parts_info = cp.parts_info) == null ? void 0 : _cp$parts_info.sort == null ? void 0 : _cp$parts_info.sort((a, b) => a.part_number - b.part_number)) != null ? _cp$parts_info$sort : [];

  for (const part of sortedPartsInfo) {
    res = combineCrc64(res, part.hash_crc64ecma, Math.min(part.part_size, size - part.offset));
  }

  return res;
}

(function (ACLType) {
  ACLType["ACLPrivate"] = "private";
  ACLType["ACLPublicRead"] = "public-read";
  ACLType["ACLPublicReadWrite"] = "public-read-write";
  ACLType["ACLAuthenticatedRead"] = "authenticated-read";
  ACLType["ACLBucketOwnerRead"] = "bucket-owner-read";
  ACLType["ACLBucketOwnerFullControl"] = "bucket-owner-full-control"; // only works for object ACL

  ACLType["ACLBucketOwnerEntrusted"] = "bucket-owner-entrusted";
  /**
   * @private unstable value for object ACL
   */

  ACLType["ACLDefault"] = "default";
})(exports.ze || (exports.ze = {}));

(function (StorageClassType) {
  // storage-class will inherit from bucket if uploading object without `x-tos-storage-class` header
  StorageClassType["StorageClassStandard"] = "STANDARD";
  StorageClassType["StorageClassIa"] = "IA";
  StorageClassType["StorageClassArchiveFr"] = "ARCHIVE_FR";
  StorageClassType["StorageClassColdArchive"] = "COLD_ARCHIVE";
  StorageClassType["StorageClassIntelligentTiering"] = "INTELLIGENT_TIERING";
  StorageClassType["StorageClassArchive"] = "ARCHIVE";
})(exports.uT || (exports.uT = {}));

(function (MetadataDirectiveType) {
  MetadataDirectiveType["MetadataDirectiveCopy"] = "COPY";
  MetadataDirectiveType["MetadataDirectiveReplace"] = "REPLACE";
})(exports.FW || (exports.FW = {}));

(function (AzRedundancyType) {
  AzRedundancyType["AzRedundancySingleAz"] = "single-az";
  AzRedundancyType["AzRedundancyMultiAz"] = "multi-az";
})(exports.zj || (exports.zj = {}));

(function (PermissionType) {
  PermissionType["PermissionRead"] = "READ";
  PermissionType["PermissionWrite"] = "WRITE";
  PermissionType["PermissionReadAcp"] = "READ_ACP";
  PermissionType["PermissionWriteAcp"] = "WRITE_ACP";
  PermissionType["PermissionFullControl"] = "FULL_CONTROL";
  /**
   * @private unstable value for ACL
   */

  PermissionType["PermissionReadNONLIST"] = "READ_NON_LIST";
})(exports.eZ || (exports.eZ = {}));

(function (GranteeType) {
  GranteeType["GranteeGroup"] = "Group";
  GranteeType["GranteeUser"] = "CanonicalUser";
})(exports.dh || (exports.dh = {}));

(function (CannedType) {
  CannedType["CannedAllUsers"] = "AllUsers";
  CannedType["CannedAuthenticatedUsers"] = "AuthenticatedUsers";
})(exports.a4 || (exports.a4 = {}));

(function (HttpMethodType) {
  HttpMethodType["HttpMethodGet"] = "GET";
  HttpMethodType["HttpMethodPut"] = "PUT";
  HttpMethodType["HttpMethodPost"] = "POST";
  HttpMethodType["HttpMethodDelete"] = "DELETE";
  HttpMethodType["HttpMethodHead"] = "HEAD";
})(exports.ug || (exports.ug = {}));

(function (StorageClassInheritDirectiveType) {
  StorageClassInheritDirectiveType["StorageClassInheritDirectiveDestinationBucket"] = "DESTINATION_BUCKET";
  StorageClassInheritDirectiveType["StorageClassInheritDirectiveSourceObject"] = "SOURCE_OBJECT";
})(exports.g || (exports.g = {}));

(function (ReplicationStatusType) {
  ReplicationStatusType["Complete"] = "COMPLETE";
  ReplicationStatusType["Pending"] = "PENDING";
  ReplicationStatusType["Failed"] = "FAILED";
  ReplicationStatusType["Replica"] = "REPLICA";
})(exports.Z5 || (exports.Z5 = {}));

(function (LifecycleStatusType) {
  LifecycleStatusType["Enabled"] = "Enabled";
  LifecycleStatusType["Disabled"] = "Disabled";
})(exports.fL || (exports.fL = {}));

(function (RedirectType) {
  RedirectType["Mirror"] = "Mirror";
  RedirectType["Async"] = "Async";
})(exports.zB || (exports.zB = {}));

(function (StatusType) {
  StatusType["Enabled"] = "Enabled";
  StatusType["Disabled"] = "Disabled";
})(exports.XU || (exports.XU = {}));

(function (TierType) {
  TierType["TierStandard"] = "Standard";
  TierType["TierExpedited"] = "Expedited";
  TierType["TierBulk"] = "Bulk";
})(exports.Z4 || (exports.Z4 = {}));

(function (VersioningStatusType) {
  VersioningStatusType["Enabled"] = "Enabled";
  VersioningStatusType["Suspended"] = "Suspended";
  VersioningStatusType["NotSet"] = "";
  /**
   * @deprecated use `Enabled` instead
   */

  VersioningStatusType["Enable"] = "Enabled";
  /**
   * @deprecated use `NotSet` instead
   */

  VersioningStatusType["Disable"] = "";
})(exports.Do || (exports.Do = {}));

(function (AccessPointStatusType) {
  AccessPointStatusType["Ready"] = "READY";
  AccessPointStatusType["Creating"] = "CREATING";
  AccessPointStatusType["Created"] = "CREATED";
  AccessPointStatusType["Deleting"] = "DELETING";
})(exports.zL || (exports.zL = {}));

(function (TransferAccelerationStatusType) {
  TransferAccelerationStatusType["Activating"] = "AccelerationActivating";
  TransferAccelerationStatusType["Activated"] = "AccelerationActivated";
  TransferAccelerationStatusType["Terminated"] = "AccelerationTerminated";
})(exports.gN || (exports.gN = {}));

(function (MRAPMirrorBackRedirectPolicyType) {
  MRAPMirrorBackRedirectPolicyType["ClosestFirst"] = "Closest-First";
  MRAPMirrorBackRedirectPolicyType["LatestFirst"] = "Latest-First";
})(exports.VI || (exports.VI = {}));

async function headObject(input) {
  const normalizedInput = typeof input === 'string' ? {
    key: input
  } : input;
  const headers = normalizeHeadersKey(normalizedInput.headers);
  normalizedInput.headers = headers;
  const query = {};

  if (normalizedInput.versionId) {
    query.versionId = normalizedInput.versionId;
  }

  fillRequestHeaders(normalizedInput, ['ifMatch', 'ifModifiedSince', 'ifNoneMatch', 'ifUnmodifiedSince', 'ssecAlgorithm', 'ssecKey', 'ssecKeyMD5']);
  return this._fetchObject(input, 'HEAD', query, (normalizedInput == null ? void 0 : normalizedInput.headers) || {}, undefined, {
    handleResponse: res => {
      const result = { ...res.headers,
        ReplicationStatus: res.headers[TosHeader.HeaderReplicationStatus]
      };
      const info = getRestoreInfoFromHeaders(res.headers);

      if (info) {
        result.RestoreInfo = info;
      }

      return result;
    }
  });
}

async function uploadPartCopy(input) {
  const {
    uploadId,
    partNumber
  } = input;
  const headers = normalizeHeadersKey(input.headers);
  input.headers = headers;
  fillRequestHeaders(input, ['copySourceRange', 'copySourceSSECAlgorithm', 'copySourceSSECKey', 'copySourceSSECKeyMD5', 'ssecAlgorithm', 'ssecKey', 'ssecKeyMD5', 'trafficLimit']);

  if (input.srcBucket && input.srcKey) {
    var _headers$xTosCopyS;

    let copySource = getCopySourceHeaderValue(input.srcBucket, input.srcKey);

    if (input.srcVersionID) {
      copySource += `?versionId=${input.srcVersionID}`;
    }

    headers['x-tos-copy-source'] = (_headers$xTosCopyS = headers['x-tos-copy-source']) != null ? _headers$xTosCopyS : copySource;
  }

  if (input.copySourceRange == null && (input.copySourceRangeStart != null || input.copySourceRangeEnd != null)) {
    var _headers$xTosCopyS2;

    const start = input.copySourceRangeStart != null ? `${input.copySourceRangeStart}` : '';
    const end = input.copySourceRangeEnd != null ? `${input.copySourceRangeEnd}` : '';
    const copyRange = `bytes=${start}-${end}`;
    headers['x-tos-copy-source-range'] = (_headers$xTosCopyS2 = headers['x-tos-copy-source-range']) != null ? _headers$xTosCopyS2 : copyRange;
  }

  const [err, res] = await safeAwait(this._fetchObject(input, 'PUT', {
    partNumber,
    uploadId
  }, headers, undefined, {
    handleResponse(response) {
      return { ...response.data,
        SSECAlgorithm: response.headers[requestHeadersMap['ssecAlgorithm']],
        SSECKeyMD5: response.headers[requestHeadersMap['ssecKeyMD5']]
      };
    }

  }));

  if (err || !res || !res.data.ETag) {
    // TODO: throw TosServerErr
    throw err;
  }

  return res;
}

async function copyObject(input) {
  const headers = normalizeHeadersKey(input.headers);
  input.headers = headers;
  fillRequestHeaders(input, ['cacheControl', 'contentDisposition', 'contentEncoding', 'contentLanguage', 'contentType', 'expires', 'copySourceIfMatch', 'copySourceIfModifiedSince', 'copySourceIfNoneMatch', 'copySourceIfUnmodifiedSince', 'copySourceSSECAlgorithm', 'copySourceSSECKey', 'copySourceSSECKeyMD5', 'acl', 'grantFullControl', 'grantRead', 'grantReadAcp', 'grantWriteAcp', 'ssecAlgorithm', 'ssecKey', 'ssecKeyMD5', 'serverSideEncryption', 'metadataDirective', 'meta', 'websiteRedirectLocation', 'storageClass', 'trafficLimit', 'forbidOverwrite', 'ifMatch']);

  if (input.srcBucket && input.srcKey) {
    var _headers$xTosCopyS;

    let copySource = getCopySourceHeaderValue(input.srcBucket, input.srcKey);

    if (input.srcVersionID) {
      copySource += `?versionId=${input.srcVersionID}`;
    }

    headers['x-tos-copy-source'] = (_headers$xTosCopyS = headers['x-tos-copy-source']) != null ? _headers$xTosCopyS : copySource;
  }

  const [err, res] = await safeAwait(this._fetchObject(input, 'PUT', {}, headers));

  if (err || !res || !res.data.ETag) {
    // TODO: throw TosServerErr
    throw err;
  }

  return res;
}

(function (ResumableCopyEventType) {
  ResumableCopyEventType[ResumableCopyEventType["CreateMultipartUploadSucceed"] = 1] = "CreateMultipartUploadSucceed";
  ResumableCopyEventType[ResumableCopyEventType["CreateMultipartUploadFailed"] = 2] = "CreateMultipartUploadFailed";
  ResumableCopyEventType[ResumableCopyEventType["UploadPartCopySucceed"] = 3] = "UploadPartCopySucceed";
  ResumableCopyEventType[ResumableCopyEventType["UploadPartCopyFailed"] = 4] = "UploadPartCopyFailed";
  ResumableCopyEventType[ResumableCopyEventType["UploadPartCopyAborted"] = 5] = "UploadPartCopyAborted";
  ResumableCopyEventType[ResumableCopyEventType["CompleteMultipartUploadSucceed"] = 6] = "CompleteMultipartUploadSucceed";
  ResumableCopyEventType[ResumableCopyEventType["CompleteMultipartUploadFailed"] = 7] = "CompleteMultipartUploadFailed";
})(exports.IU || (exports.IU = {}));

const CHECKPOINT_FILE_NAME_PLACEHOLDER$1 = '@@checkpoint-file-placeholder@@';
const ABORT_ERROR_STATUS_CODE$1 = [403, 404, 405];
const DEFAULT_PART_SIZE$1 = 20 * 1024 * 1024; // 20 MB

async function resumableCopyObject(input) {
  var _checkpointRichInfo$r3, _checkpointRichInfo$r4, _checkpointRichInfo$r5;

  const {
    cancelToken
  } = input;

  const isCancel = () => cancelToken && !!cancelToken.reason;

  validateCheckpoint(input.checkpoint);
  const {
    data: objectStats
  } = await headObject.call(this, {
    bucket: input.srcBucket,
    key: input.srcKey,
    versionId: input.srcVersionId
  });
  const etag = objectStats['etag'];
  const objectSize = +objectStats['content-length'];
  const checkpointRichInfo = await (async () => {
    {
      if (typeof input.checkpoint === 'string') {
        const {
          checkpoint
        } = input; // file doesn't exist when stat is null

        let checkpointStat = null;

        try {
          checkpointStat = await stat(checkpoint);
        } catch (_err) {
          // TODO: remove any
          const err = _err;

          if (err.code === 'ENOENT') ; else {
            throw err;
          }
        }

        const isDirectory = (() => {
          if (checkpointStat) {
            return checkpointStat.isDirectory();
          }

          return checkpoint.endsWith('/');
        })(); // filePath will generated by uploadId, use placeholder temporarily


        const filePath = isDirectory ? path.resolve(checkpoint, CHECKPOINT_FILE_NAME_PLACEHOLDER$1) : path.resolve(checkpoint);
        const dirPath = path.dirname(filePath); // ensure directory exist

        await safeMkdirRecursive(dirPath);

        if (isDirectory) {
          return {
            filePath,
            filePathIsPlaceholder: true
          };
        }

        return {
          filePath,
          filePathIsPlaceholder: false,
          // filePath is json file
          // TODO: validate json schema
          record: checkpointStat ? await safeParseCheckpointFile(filePath) : undefined
        };
      }
    }

    if (typeof input.checkpoint === 'object') {
      return {
        record: input.checkpoint
      };
    }

    return {};
  })(); // check if file info is matched

  await (async () => {
    var _checkpointRichInfo$r;

    if ((_checkpointRichInfo$r = checkpointRichInfo.record) != null && _checkpointRichInfo$r.copy_source_object_info) {
      var _checkpointRichInfo$r2;

      const {
        last_modified,
        object_size
      } = (_checkpointRichInfo$r2 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r2.copy_source_object_info;

      if ( // TODO: `last-modified` aligns to number
      objectStats['last-modified'] !== last_modified || +objectStats['content-length'] !== object_size) {
        console.warn(`The file has been modified since ${new Date(last_modified)}, so the checkpoint file is invalid, and specified file will be uploaded again.`);
        delete checkpointRichInfo.record;
      }
    }
  })();
  const partSize = calculateSafePartSize(objectSize, input.partSize || ((_checkpointRichInfo$r3 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r3.part_size) || DEFAULT_PART_SIZE$1, true); // check partSize is matched

  if (checkpointRichInfo.record && checkpointRichInfo.record.part_size !== partSize) {
    console.warn('The partSize param does not equal the partSize in checkpoint file, ' + 'so the checkpoint file is invalid, and specified file will be uploaded again.');
    delete checkpointRichInfo.record;
  }

  let bucket = input.bucket || this.opts.bucket || '';
  const key = input.key;
  let uploadId = '';
  let tasks = [];
  const allTasks = getAllTasks$1(objectSize, partSize);
  const initConsumedBytes = (((_checkpointRichInfo$r4 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r4.parts_info) || []).filter(it => it.is_completed).reduce((prev, it) => prev + it.copy_source_range_end - it.copy_source_range_start + 1, 0);
  let consumedBytesForProgress = initConsumedBytes; // recorded tasks

  const recordedTasks = ((_checkpointRichInfo$r5 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r5.parts_info) || [];
  const recordedTaskMap = new Map();
  recordedTasks.forEach(it => recordedTaskMap.set(it.part_number, it));

  const getCheckpointContent = () => {
    const checkpointContent = {
      bucket,
      key,
      part_size: partSize,
      upload_id: uploadId,
      parts_info: recordedTasks,
      copy_source_object_info: {
        last_modified: objectStats['last-modified'],
        etag: objectStats.etag,
        hash_crc64ecma: objectStats['x-tos-hash-crc64ecma'] || '',
        object_size: +objectStats['content-length']
      }
    };
    return checkpointContent;
  };

  const triggerUploadEvent = e => {
    if (!input.copyEventListener) {
      return;
    }

    const event = {
      bucket,
      uploadId,
      key,
      ...e
    };

    if (checkpointRichInfo.filePath) {
      event.checkpointFile = checkpointRichInfo.filePath;
    }

    input.copyEventListener(event);
  };

  let TriggerProgressEventType;

  (function (TriggerProgressEventType) {
    TriggerProgressEventType[TriggerProgressEventType["start"] = 1] = "start";
    TriggerProgressEventType[TriggerProgressEventType["uploadPartSucceed"] = 2] = "uploadPartSucceed";
    TriggerProgressEventType[TriggerProgressEventType["completeMultipartUploadSucceed"] = 3] = "completeMultipartUploadSucceed";
  })(TriggerProgressEventType || (TriggerProgressEventType = {}));

  const triggerProgressEvent = type => {
    if (!input.progress) {
      return;
    }

    const percent = (() => {
      if (type === TriggerProgressEventType.start && objectSize === 0) {
        return 0;
      }

      return !objectSize ? 1 : consumedBytesForProgress / objectSize;
    })();

    if (consumedBytesForProgress === objectSize && type === TriggerProgressEventType.uploadPartSucceed) ; else {
      input.progress(percent, getCheckpointContent());
    }
  };

  const writeCheckpointFile = makeSerialAsyncTask(async () => {
    if ( checkpointRichInfo.filePath) {
      const content = JSON.stringify(getCheckpointContent(), null, 2);
      const dirPath = path.dirname(checkpointRichInfo.filePath); // ensure directory exist

      await safeMkdirRecursive(dirPath);
      await writeFile(checkpointRichInfo.filePath, content, 'utf-8');
    }
  });

  const rmCheckpointFile = async () => {
    if ( checkpointRichInfo.filePath) {
      await rm(checkpointRichInfo.filePath).catch(err => {
        // eat err
        console.warn('remove checkpoint file failure, you can remove it by hand.\n', `checkpoint file path: ${checkpointRichInfo.filePath}\n`, err.message);
      });
    }
  };
  /**
   *
   * @param task one part task
   * @param uploadPartRes upload part failed if `uploadPartRes` is Error
   */


  const updateAfterUploadPart = async (task, uploadPartRes) => {
    let existRecordTask = recordedTaskMap.get(task.partNumber);
    const rangeStart = task.offset;
    const rangeEnd = Math.min(task.offset + partSize - 1, objectSize - 1);

    if (!existRecordTask) {
      existRecordTask = {
        part_number: task.partNumber,
        copy_source_range_start: rangeStart,
        copy_source_range_end: rangeEnd,
        is_completed: false,
        etag: ''
      };
      recordedTasks.push(existRecordTask);
      recordedTaskMap.set(existRecordTask.part_number, existRecordTask);
    }

    if (!uploadPartRes.err) {
      existRecordTask.is_completed = true;
      existRecordTask.etag = uploadPartRes.res.ETag;
    }

    await writeCheckpointFile();
    const copyPartInfo = {
      partNumber: existRecordTask.part_number,
      copySourceRangeEnd: existRecordTask.copy_source_range_end,
      copySourceRangeStart: existRecordTask.copy_source_range_start
    };

    if (uploadPartRes.err) {
      const err = uploadPartRes.err;
      let type = exports.IU.UploadPartCopyFailed;

      if (err instanceof TosServerError) {
        if (ABORT_ERROR_STATUS_CODE$1.includes(err.statusCode)) {
          type = exports.IU.UploadPartCopyAborted;
        }
      }

      triggerUploadEvent({
        type,
        err,
        copyPartInfo
      });
      return;
    }

    copyPartInfo.etag = uploadPartRes.res.ETag;
    consumedBytesForProgress += copyPartInfo.copySourceRangeEnd - copyPartInfo.copySourceRangeStart + 1;
    triggerUploadEvent({
      type: exports.IU.UploadPartCopySucceed,
      copyPartInfo
    });
    triggerProgressEvent(TriggerProgressEventType.uploadPartSucceed);
  };

  if (checkpointRichInfo.record) {
    bucket = checkpointRichInfo.record.bucket;
    uploadId = checkpointRichInfo.record.upload_id; // checkpoint info exists, so need to calculate remain tasks

    const uploadedPartSet = new Set((checkpointRichInfo.record.parts_info || []).filter(it => it.is_completed).map(it => it.part_number));
    tasks = allTasks.filter(it => !uploadedPartSet.has(it.partNumber));
  } else {
    // createMultipartUpload will check bucket
    try {
      const {
        data: multipartRes
      } = await createMultipartUpload.call(this, cloneDeep(input));

      if (isCancel()) {
        throw new CancelError('cancel uploadFile');
      }

      bucket = multipartRes.Bucket;
      uploadId = multipartRes.UploadId;

      if (checkpointRichInfo.filePathIsPlaceholder) {
        var _checkpointRichInfo$f;

        checkpointRichInfo.filePath = (_checkpointRichInfo$f = checkpointRichInfo.filePath) == null ? void 0 : _checkpointRichInfo$f.replace(`${CHECKPOINT_FILE_NAME_PLACEHOLDER$1}`, getDefaultCheckpointFilePath$1({ ...input,
          bucket
        }));
      }

      triggerUploadEvent({
        type: exports.IU.CreateMultipartUploadSucceed
      });
    } catch (_err) {
      const err = _err;
      triggerUploadEvent({
        type: exports.IU.CreateMultipartUploadFailed,
        err
      });
      throw err;
    }

    tasks = allTasks;
  }

  const handleTasks = async () => {
    let firstErr = null;
    let index = 0; // TODO: how to test parallel does work, measure time is not right

    await Promise.all(Array.from({
      length: input.taskNum || 1
    }).map(async () => {
      while (true) {
        const currentIndex = index++;

        if (currentIndex >= tasks.length) {
          return;
        }

        const curTask = tasks[currentIndex];

        try {
          let copySource = getCopySourceHeaderValue(input.srcBucket, input.srcKey);

          if (input.srcVersionId) {
            copySource += `?versionId=${input.srcVersionId}`;
          }

          const copyRange = `bytes=${curTask.offset}-${curTask.offset + curTask.partSize - 1}`;
          const headers = { ...input.headers,
            ['x-tos-copy-source']: copySource,
            ['x-tos-copy-source-if-match']: etag,
            ['x-tos-copy-source-range']: copyRange
          };

          if (!curTask.partSize) {
            delete headers['x-tos-copy-source-range'];
          }

          const {
            data: uploadPartRes
          } = await uploadPartCopy.call(this, {
            bucket,
            key,
            uploadId,
            partNumber: curTask.partNumber,
            headers,
            trafficLimit: input.trafficLimit
          });

          if (isCancel()) {
            throw new CancelError('cancel resumableCopyObject');
          }

          await updateAfterUploadPart(curTask, {
            res: uploadPartRes
          });
        } catch (_err) {
          const err = _err;

          if (isCancelError$1(err)) {
            throw err;
          }

          if (isCancel()) {
            throw new CancelError('cancel resumableCopyObject');
          }

          if (!firstErr) {
            firstErr = err;
          }

          await updateAfterUploadPart(curTask, {
            err
          });
        }
      }
    }));

    if (firstErr) {
      throw firstErr;
    }

    const parts = (getCheckpointContent().parts_info || []).map(it => ({
      eTag: it.etag,
      partNumber: it.part_number
    }));
    const [err, res] = await safeAwait(completeMultipartUpload.call(this, {
      bucket,
      key,
      uploadId,
      parts
    }));

    if (err || !res) {
      triggerUploadEvent({
        type: exports.IU.CompleteMultipartUploadFailed
      });
      throw err;
    }

    triggerUploadEvent({
      type: exports.IU.CompleteMultipartUploadSucceed
    });
    triggerProgressEvent(TriggerProgressEventType.completeMultipartUploadSucceed);
    const sourceCRC64 = getCheckpointContent().copy_source_object_info.hash_crc64ecma;
    const actualCrc64 = res.data.HashCrc64ecma;

    if (this.opts.enableCRC && sourceCRC64 && actualCrc64 && sourceCRC64 !== actualCrc64) {
      throw new TosClientError(`validate file crc64 failed. Expect crc64 ${sourceCRC64}, actual crc64 ${actualCrc64}. Please try again.`);
    }

    await rmCheckpointFile();
    return res;
  };

  const handleEmptyObj = async () => {
    let copySource = getCopySourceHeaderValue(input.srcBucket, input.srcKey);

    if (input.srcVersionId) {
      copySource += `?versionId=${input.srcVersionId}`;
    }

    const headers = { ...input.headers,
      ['x-tos-copy-source']: copySource,
      ['x-tos-copy-source-if-match']: etag
    };
    const [err, res] = await safeAwait(copyObject.call(this, {
      bucket: input.bucket,
      key: input.key,
      headers,
      trafficLimit: input.trafficLimit
    }));

    if (err || !res) {
      triggerUploadEvent({
        type: exports.IU.UploadPartCopyFailed
      });
      throw err;
    }

    triggerProgressEvent(TriggerProgressEventType.completeMultipartUploadSucceed);
    triggerUploadEvent({
      type: exports.IU.UploadPartCopySucceed,
      copyPartInfo: {
        partNumber: 0,
        copySourceRangeStart: 0,
        copySourceRangeEnd: 0
      }
    });
    triggerUploadEvent({
      type: exports.IU.CompleteMultipartUploadSucceed
    });
    return { ...res,
      data: {
        ETag: res.headers['etag'] || '',
        Bucket: bucket,
        Key: key,
        Location: `http${this.opts.secure ? 's' : ''}://${bucket}.${this.opts.endpoint}/${key}`,
        VersionID: res.headers['x-tos-version-id'],
        HashCrc64ecma: res.headers['x-tos-hash-crc64ecma']
      }
    };
  };

  triggerProgressEvent(TriggerProgressEventType.start);
  return objectSize === 0 ? handleEmptyObj() : handleTasks();
}
function isCancelError$1(err) {
  return err instanceof CancelError;
}
/**
 * 即使 totalSize 是 0，也需要一个 Part，否则 Server 端会报错 read request body failed
 */

function getAllTasks$1(totalSize, partSize) {
  const tasks = [];

  for (let i = 0;; ++i) {
    const offset = i * partSize;
    const currPartSize = Math.min(partSize, totalSize - offset);
    tasks.push({
      offset,
      partSize: currPartSize,
      partNumber: i + 1
    });

    if ((i + 1) * partSize >= totalSize) {
      break;
    }
  }

  return tasks;
}

function getDefaultCheckpointFilePath$1(opts) {
  const originPath = [opts.srcBucket, opts.srcKey, opts.srcVersionId, opts.bucket, opts.key, 'copy'].filter(Boolean).join('.');
  const normalizePath = originPath.replace(/[\\/]/g, '');
  return normalizePath;
}

/**
 * @deprecated use getObjectV2 instead
 * @returns arraybuffer
 */

async function getObject(input) {
  const normalizedInput = typeof input === 'string' ? {
    key: input
  } : input;
  const query = {};

  if (normalizedInput.versionId) {
    query.versionId = normalizedInput.versionId;
  }

  const headers = normalizeHeadersKey(normalizedInput == null ? void 0 : normalizedInput.headers);
  const response = (normalizedInput == null ? void 0 : normalizedInput.response) || {};
  Object.keys(response).forEach(key => {
    const v = response[key];

    if (v != null) {
      query[`response-${key}`] = v;
    }
  }); // TODO: maybe need to return response's headers

  return this._fetchObject(input, 'GET', query, headers, undefined, {
    axiosOpts: {
      responseType: 'arraybuffer'
    }
  });
}
const NODEJS_DATATYPE = ['stream', 'buffer'];

function checkSupportDataType(dataType) {
  let environment = 'node';
  let supportDataTypes = [];

  {
    environment = 'node';
    supportDataTypes = NODEJS_DATATYPE;
  }

  if (!supportDataTypes.includes(dataType)) {
    throw new TosClientError(`The value of \`dataType\` only supports \`${supportDataTypes.join(' | ')}\` in ${environment} environment`);
  }
}

async function getObjectV2(input) {
  const normalizedInput = typeof input === 'string' ? {
    key: input
  } : input;
  const headers = normalizeHeadersKey(normalizedInput.headers);
  normalizedInput.headers = headers;
  const dataType = normalizedInput.dataType || 'stream';
  normalizedInput.dataType = dataType;
  checkSupportDataType(dataType);
  const query = {};
  const response = (normalizedInput == null ? void 0 : normalizedInput.response) || {};
  Object.keys(response).forEach(key => {
    const v = response[key];

    if (v != null) {
      query[`response-${key}`] = v;
    }
  });
  fillRequestQuery(normalizedInput, query, ['versionId', 'process', 'saveBucket', 'saveObject', 'responseCacheControl', 'responseContentDisposition', 'responseContentEncoding', 'responseContentLanguage', 'responseContentType', 'responseExpires']);
  fillRequestHeaders(normalizedInput, ['ifMatch', 'ifModifiedSince', 'ifNoneMatch', 'ifUnmodifiedSince', 'ssecAlgorithm', 'ssecKey', 'ssecKeyMD5', 'range', 'trafficLimit']);

  if (normalizedInput.range == null && (normalizedInput.rangeStart != null || normalizedInput.rangeEnd != null)) {
    var _headers$range;

    const start = normalizedInput.rangeStart != null ? `${normalizedInput.rangeStart}` : '';
    const end = normalizedInput.rangeEnd != null ? `${normalizedInput.rangeEnd}` : '';
    const range = `bytes=${start}-${end}`;
    headers['range'] = (_headers$range = headers['range']) != null ? _headers$range : range;
  }

  const responseType = (() => {
    {
      return 'stream';
    }
  })();

  let consumedBytes = 0; // totalSize is unknown when start download

  let totalSize = -1;
  const {
    dataTransferStatusChange,
    progress
  } = normalizedInput;

  const triggerDataTransfer = (type, rwOnceBytes = 0) => {
    // request cancel will make rwOnceBytes < 0 in browser
    if (rwOnceBytes < 0) {
      return;
    }

    if (!dataTransferStatusChange && !progress) {
      return;
    }

    consumedBytes += rwOnceBytes;
    dataTransferStatusChange == null ? void 0 : dataTransferStatusChange({
      type,
      rwOnceBytes,
      consumedBytes,
      totalBytes: totalSize
    });

    const progressValue = (() => {
      // `totalSize` is unknown if it's in start or fail
      if (totalSize < 0) {
        return 0;
      }

      if (totalSize === 0) {
        if (type === exports.aB.Succeed) {
          return 1;
        }

        return 0;
      }

      return consumedBytes / totalSize;
    })();

    if (progressValue === 1) {
      if (type === exports.aB.Succeed) {
        progress == null ? void 0 : progress(progressValue);
      }
    } else {
      progress == null ? void 0 : progress(progressValue);
    }
  };

  triggerDataTransfer(exports.aB.Started);
  const [err, res] = await safeAwait(this._fetchObject(input, 'GET', query, headers, undefined, {
    axiosOpts: {
      responseType,
      onDownloadProgress: event => {
        totalSize = event.total;
        triggerDataTransfer(exports.aB.Rw, event.loaded - consumedBytes);
      }
    }
  }));

  if (err || !res) {
    triggerDataTransfer(exports.aB.Failed);
    throw err;
  }

  let resHeaders = res.headers;
  let newData = res.data;
  totalSize = +(resHeaders['content-length'] || 0);

  {
    // res.data must be a stream in nodejs environment
    if (isReadable(newData)) {
      if (normalizedInput.rateLimiter && isValidRateLimiter(normalizedInput.rateLimiter)) {
        newData = createRateLimiterStream$1(newData, normalizedInput.rateLimiter);
      }

      newData = createReadNReadStream(newData, n => triggerDataTransfer(exports.aB.Rw, n));
      newData.on('end', () => triggerDataTransfer(exports.aB.Succeed));

      if (dataType === 'buffer') {
        // consume stream after `createRateLimiterStream`
        newData = await streamToBuf(newData);
      }
    }
  }

  const actualRes = { ...res,
    data: {
      content: newData,
      etag: resHeaders['etag'] || '',
      lastModified: resHeaders['last-modified'] || '',
      hashCrc64ecma: resHeaders['x-tos-hash-crc64ecma'] || '',
      ReplicationStatus: resHeaders[TosHeader.HeaderReplicationStatus]
    }
  };
  const info = getRestoreInfoFromHeaders(resHeaders);

  if (info) {
    actualRes.data.RestoreInfo = info;
  }

  return actualRes;
}

async function getObjectToFile(input) {

  return new Promise(async (resolve, reject) => {
    const getObjectRes = await getObjectV2.call(this, input);
    const stream = getObjectRes.data.content;
    const fsWriteStream = createWriteStream(input.filePath);
    stream.pipe(fsWriteStream);
    stream.on('error', err => fsWriteStream.destroy(err));
    fsWriteStream.on('error', err => reject(err));
    fsWriteStream.on('finish', () => {
      const newData = { ...getObjectRes.data
      };
      delete newData.content;
      resolve({ ...getObjectRes,
        data: { ...newData
        }
      });
    });
  });
}

(function (DownloadEventType) {
  DownloadEventType[DownloadEventType["CreateTempFileSucceed"] = 1] = "CreateTempFileSucceed";
  DownloadEventType[DownloadEventType["CreateTempFileFailed"] = 2] = "CreateTempFileFailed";
  DownloadEventType[DownloadEventType["DownloadPartSucceed"] = 3] = "DownloadPartSucceed";
  DownloadEventType[DownloadEventType["DownloadPartFailed"] = 4] = "DownloadPartFailed";
  DownloadEventType[DownloadEventType["DownloadPartAborted"] = 5] = "DownloadPartAborted";
  DownloadEventType[DownloadEventType["RenameTempFileSucceed"] = 6] = "RenameTempFileSucceed";
  DownloadEventType[DownloadEventType["RenameTempFileFailed"] = 7] = "RenameTempFileFailed";
})(exports.Lk || (exports.Lk = {}));

const CHECKPOINT_FILE_NAME_PLACEHOLDER$2 = '@@checkpoint-file-placeholder@@';
const ABORT_ERROR_STATUS_CODE$2 = [403, 404, 405];
async function downloadFile(input) {
  var _objectStats$xTosSy, _checkpointRichInfo$r3, _checkpointRichInfo$r4, _checkpointRichInfo$r5;

  const {
    cancelToken,
    versionId
  } = input;

  const isCancel = () => cancelToken && !!cancelToken.reason;

  validateCheckpoint(input.checkpoint);
  const headObjectRes = await headObject.call(this, {
    bucket: input.bucket,
    key: input.key,
    versionId
  });
  const {
    data: objectStats
  } = headObjectRes;
  const etag = objectStats['etag'];
  const symlinkTargetSize = (_objectStats$xTosSy = objectStats['x-tos-symlink-target-size']) != null ? _objectStats$xTosSy : 0;
  const objectSize = objectStats['x-tos-object-type'] === 'Symlink' ? +symlinkTargetSize : +objectStats['content-length'];
  const checkpointRichInfo = await (async () => {
    {
      if (typeof input.checkpoint === 'string') {
        const {
          checkpoint
        } = input; // file doesn't exist when stat is null

        let checkpointStat = null;

        try {
          checkpointStat = await stat(checkpoint);
        } catch (_err) {
          // TODO: remove any
          const err = _err;

          if (err.code === 'ENOENT') ; else {
            throw err;
          }
        }

        const isDirectory = (() => {
          if (checkpointStat) {
            return checkpointStat.isDirectory();
          }

          return checkpoint.endsWith('/');
        })(); // filePath will generated by uploadId, use placeholder temporarily


        const filePath = isDirectory ? path.resolve(checkpoint, CHECKPOINT_FILE_NAME_PLACEHOLDER$2) : checkpoint;
        const dirPath = path.dirname(filePath); // ensure directory exist

        await safeMkdirRecursive(dirPath);

        if (isDirectory) {
          return {
            filePath,
            filePathIsPlaceholder: true
          };
        }

        return {
          filePath,
          filePathIsPlaceholder: false,
          // filePath is json file
          // TODO: validate json schema
          record: checkpointStat ? await safeParseCheckpointFile(filePath) : undefined
        };
      }
    }

    if (typeof input.checkpoint === 'object') {
      return {
        record: input.checkpoint
      };
    }

    return {};
  })(); // check if file info is matched

  await (async () => {
    var _checkpointRichInfo$r;

    if ((_checkpointRichInfo$r = checkpointRichInfo.record) != null && _checkpointRichInfo$r.object_info) {
      var _checkpointRichInfo$r2;

      const {
        last_modified,
        object_size
      } = (_checkpointRichInfo$r2 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r2.object_info;

      if ( // TODO: `last-modified` aligns to number
      objectStats['last-modified'] !== last_modified || objectSize !== object_size) {
        console.warn(`The file has been modified since ${new Date(last_modified)}, so the checkpoint file is invalid, and specified object will be downloaded again.`);
        delete checkpointRichInfo.record;
      }
    }
  })();
  const partSize = input.partSize || ((_checkpointRichInfo$r3 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r3.part_size) || DEFAULT_PART_SIZE; // check partSize is matched

  if (checkpointRichInfo.record && checkpointRichInfo.record.part_size !== partSize) {
    console.warn('The partSize param does not equal the partSize in checkpoint file, ' + 'so the checkpoint file is invalid, and specified object will be downloaded again.');
    delete checkpointRichInfo.record;
  }

  let bucket = input.bucket || this.opts.bucket || '';
  const key = input.key;
  const filePath = await (async () => {
    let filePathStats = null;

    try {
      filePathStats = await stat(input.filePath);
    } catch (_err) {
      const err = _err;

      if (err.code === 'ENOENT') ; else {
        throw err;
      }
    }

    const isDirectory = (() => {
      if (filePathStats) {
        return filePathStats.isDirectory();
      }

      return input.filePath.endsWith('/');
    })();

    const filePath = isDirectory ? path.resolve(input.filePath, key) : input.filePath;
    const dirPath = path.dirname(filePath);
    await safeMkdirRecursive(dirPath);
    return filePath;
  })();
  const [tempFilePath, isExist] = await (async () => {
    const tempFilePath = input.tempFilePath ? input.tempFilePath : filePath + '.temp';
    let isExist = true;

    try {
      await stat(tempFilePath);
    } catch (_err) {
      const err = _err;

      if (err.code === 'ENOENT') {
        isExist = false; // file doesn't exist
      } else {
        throw err;
      }
    }

    return [tempFilePath, isExist];
  })();

  if (checkpointRichInfo.record) {
    if (!isExist) {
      console.warn("The temp file doesn't not exist " + 'so the checkpoint file is invalid, and specified object will be downloaded again.');
      delete checkpointRichInfo.record;
    }
  }

  let tasks = [];
  const allTasks = getAllTasks$2(objectSize, partSize);
  const initConsumedBytes = (((_checkpointRichInfo$r4 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r4.parts_info) || []).filter(it => it.is_completed).reduce((prev, it) => prev + (it.range_end - it.range_start + 1), 0); // recorded tasks

  const recordedTasks = ((_checkpointRichInfo$r5 = checkpointRichInfo.record) == null ? void 0 : _checkpointRichInfo$r5.parts_info) || [];
  const recordedTaskMap = new Map();
  recordedTasks.forEach(it => recordedTaskMap.set(it.part_number, it));

  const nextEnsureCloseFd = async () => {
    const getCheckpointContent = () => {
      const checkpointContent = {
        bucket,
        key,
        version_id: versionId,
        part_size: partSize,
        parts_info: recordedTasks,
        file_info: {
          file_path: filePath,
          temp_file_path: tempFilePath
        },
        object_info: {
          last_modified: objectStats['last-modified'],
          etag: etag,
          hash_crc64ecma: objectStats['x-tos-hash-crc64ecma'] || '',
          object_size: objectSize
        }
      };
      return checkpointContent;
    };

    const triggerDownloadEvent = e => {
      if (!input.downloadEventChange) {
        return;
      }

      const event = {
        bucket,
        versionId,
        key,
        filePath,
        ...e
      };

      if (checkpointRichInfo.filePath) {
        event.checkpointFile = checkpointRichInfo.filePath;
      }

      input.downloadEventChange(event);
    };

    let consumedBytesForProgress = initConsumedBytes;
    let TriggerProgressEventType;

    (function (TriggerProgressEventType) {
      TriggerProgressEventType[TriggerProgressEventType["start"] = 0] = "start";
      TriggerProgressEventType[TriggerProgressEventType["downloadPartSucceed"] = 1] = "downloadPartSucceed";
      TriggerProgressEventType[TriggerProgressEventType["renameTempFileSucceed"] = 2] = "renameTempFileSucceed";
    })(TriggerProgressEventType || (TriggerProgressEventType = {}));

    const triggerProgressEvent = type => {
      if (!input.progress) {
        return;
      }

      const percent = (() => {
        if (type === TriggerProgressEventType.start && objectSize === 0) {
          return 0;
        }

        return !objectSize ? 1 : consumedBytesForProgress / objectSize;
      })();

      if (consumedBytesForProgress === objectSize && type === TriggerProgressEventType.downloadPartSucceed) ; else {
        input.progress(percent, getCheckpointContent());
      }
    };

    let consumedBytes = initConsumedBytes;
    const {
      dataTransferStatusChange
    } = input;

    const triggerDataTransfer = (type, rwOnceBytes = 0) => {
      if (!dataTransferStatusChange) {
        return;
      }

      consumedBytes += rwOnceBytes;
      dataTransferStatusChange == null ? void 0 : dataTransferStatusChange({
        type,
        rwOnceBytes,
        consumedBytes,
        totalBytes: objectSize
      });
    };

    const writeCheckpointFile = makeSerialAsyncTask(async () => {
      if ( checkpointRichInfo.filePath) {
        const content = JSON.stringify(getCheckpointContent(), null, 2);
        const dirPath = path.dirname(checkpointRichInfo.filePath); // ensure directory exist

        await safeMkdirRecursive(dirPath);
        await writeFile(checkpointRichInfo.filePath, content, 'utf-8');
      }
    });

    const rmCheckpointFile = async () => {
      if ( checkpointRichInfo.filePath) {
        await rm(checkpointRichInfo.filePath).catch(err => {
          // eat err
          console.warn('remove checkpoint file failure, you can remove it by hand.\n', `checkpoint file path: ${checkpointRichInfo.filePath}\n`, err.message);
        });
      }
    };
    /**
     *
     * @param task one part task
     * @param downloadPartRes upload part failed if `downloadPartRes` is Error
     */


    const updateAfterDownloadPart = async (task, downloadPartRes) => {
      let existRecordTask = recordedTaskMap.get(task.partNumber);
      const rangeStart = task.offset;
      const rangeEnd = Math.min(task.offset + partSize - 1, objectSize - 1);

      if (!existRecordTask) {
        existRecordTask = {
          part_number: task.partNumber,
          range_start: rangeStart,
          range_end: rangeEnd,
          hash_crc64ecma: '',
          is_completed: false
        };
        recordedTasks.push(existRecordTask);
        recordedTaskMap.set(existRecordTask.part_number, existRecordTask);
      }

      if (!downloadPartRes.err) {
        existRecordTask.is_completed = true;
        existRecordTask.hash_crc64ecma = downloadPartRes.res.rangeHashCrc64ecma;
      }

      await writeCheckpointFile();
      const downloadPartInfo = {
        partNumber: existRecordTask.part_number,
        rangeStart,
        rangeEnd
      };

      if (downloadPartRes.err) {
        const err = downloadPartRes.err;
        let type = exports.Lk.DownloadPartFailed;

        if (err instanceof TosServerError) {
          if (ABORT_ERROR_STATUS_CODE$2.includes(err.statusCode)) {
            type = exports.Lk.DownloadPartAborted;
          }
        }

        triggerDownloadEvent({
          type,
          err,
          downloadPartInfo: downloadPartInfo
        });
        return;
      }

      consumedBytesForProgress += downloadPartInfo.rangeEnd - downloadPartInfo.rangeStart + 1;
      triggerDownloadEvent({
        type: exports.Lk.DownloadPartSucceed,
        downloadPartInfo: downloadPartInfo
      });
      triggerProgressEvent(TriggerProgressEventType.downloadPartSucceed);
    };

    if (checkpointRichInfo.record) {
      bucket = checkpointRichInfo.record.bucket; // checkpoint info exists, so need to calculate remain tasks

      const uploadedPartSet = new Set((checkpointRichInfo.record.parts_info || []).filter(it => it.is_completed).map(it => it.part_number));
      tasks = allTasks.filter(it => !uploadedPartSet.has(it.partNumber));
    } else {
      try {
        // create temp file
        await writeFile(tempFilePath, '', {
          flag: 'w+'
        });
      } catch (_err) {
        const err = _err;
        triggerDownloadEvent({
          type: exports.Lk.CreateTempFileFailed,
          err
        });
        throw err;
      }

      if (checkpointRichInfo.filePathIsPlaceholder) {
        var _checkpointRichInfo$f;

        checkpointRichInfo.filePath = (_checkpointRichInfo$f = checkpointRichInfo.filePath) == null ? void 0 : _checkpointRichInfo$f.replace(`${CHECKPOINT_FILE_NAME_PLACEHOLDER$2}`, getDefaultCheckpointFilePath$2(bucket, key, versionId));
      }

      triggerDownloadEvent({
        type: exports.Lk.CreateTempFileSucceed
      });
      triggerDataTransfer(exports.aB.Started);
      tasks = allTasks;
    }

    const handleTasks = async () => {
      let firstErr = null;
      let index = 0; // TODO: how to test parallel does work, measure time is not right

      await Promise.all(Array.from({
        length: input.taskNum || 1
      }).map(async () => {
        while (true) {
          const currentIndex = index++;

          if (currentIndex >= tasks.length) {
            return;
          }

          const curTask = tasks[currentIndex];
          let consumedBytesThisTask = 0;

          try {
            const res = await getObjectV2.call(this, {
              bucket,
              key,
              versionId,
              headers: {
                'if-match': etag,
                range: `bytes=${curTask.offset}-${Math.min(curTask.offset + curTask.partSize - 1, objectSize - 1)}`
              },
              trafficLimit: input.trafficLimit,
              rateLimiter: input.rateLimiter,

              dataTransferStatusChange(status) {
                if (status.type !== exports.aB.Rw) {
                  return;
                }

                if (isCancel()) {
                  return;
                }

                consumedBytesThisTask += status.rwOnceBytes;
                triggerDataTransfer(exports.aB.Rw, status.rwOnceBytes);
              }

            }); // need to handle stream's error event before throw a error
            // if (isCancel()) {
            //   throw new CancelError('cancel downloadFile');
            // }

            let dataStream = res.data.content;
            const crcInst = new CRC$1();

            if ( true && this.opts.enableCRC) {
              dataStream = createCrcReadStream(dataStream, crcInst);
            }

            await new Promise((resolve, reject) => {
              const writeStream = createWriteStream(tempFilePath, {
                start: curTask.offset,
                flags: 'r+'
              });
              let isErr = false;
              let err = null;
              writeStream.on('close', () => {
                if (isErr) {
                  reject(err);
                } else {
                  resolve(undefined);
                }
              });
              writeStream.on('error', _err => {
                isErr = true;
                err = _err;
              });
              dataStream.pipe(writeStream);
              dataStream.on('error', err => writeStream.destroy(err));

              function handleOnceCancel() {
                if (isCancel()) {
                  reject(new CancelError('cancel downloadFile')); // fix windows

                  writeStream.end();
                  dataStream.unpipe(writeStream);
                  dataStream.off('data', handleOnceCancel);
                }
              }

              dataStream.on('data', handleOnceCancel);
            });

            if (isCancel()) {
              throw new CancelError('cancel downloadFile');
            }

            await updateAfterDownloadPart(curTask, {
              res: { ...res.data,
                rangeHashCrc64ecma: crcInst.getCrc64()
              }
            });
          } catch (_err) {
            const err = _err;
            consumedBytes -= consumedBytesThisTask;
            consumedBytesThisTask = 0;

            if (isCancelError(err)) {
              throw err;
            }

            if (isCancel()) {
              throw new CancelError('cancel downloadFile');
            }

            if (!firstErr) {
              firstErr = err;
            }

            await updateAfterDownloadPart(curTask, {
              err
            });
          }
        }
      }));

      if (firstErr) {
        throw firstErr;
      }

      const serverCRC64 = headObjectRes.data['x-tos-hash-crc64ecma'];

      if (this.opts.enableCRC && serverCRC64) {
        const actualCrc64 = combineCRCInParts$1(getCheckpointContent());

        if (actualCrc64 !== serverCRC64) {
          throw new TosClientError(`validate file crc64 failed. Expect crc64 ${serverCRC64}, actual crc64 ${actualCrc64}. Please try again.`);
        }
      }
    };

    const handleEmptyObj = async () => {};

    triggerProgressEvent(TriggerProgressEventType.start);
    objectSize === 0 ? await handleEmptyObj() : await handleTasks();

    try {
      if (typeof input.customRenameFileAfterDownloadCompleted === 'function') {
        await input.customRenameFileAfterDownloadCompleted(tempFilePath, filePath);
      } else {
        await rename(tempFilePath, filePath);
      }
    } catch (_err) {
      const err = _err;
      triggerDownloadEvent({
        type: exports.Lk.RenameTempFileFailed,
        err
      });
      triggerDataTransfer(exports.aB.Failed);
      throw err;
    }

    triggerDownloadEvent({
      type: exports.Lk.RenameTempFileSucceed
    });
    triggerProgressEvent(TriggerProgressEventType.renameTempFileSucceed);
    triggerDataTransfer(exports.aB.Succeed);
    await rmCheckpointFile();
    return headObjectRes;
  };

  try {
    return await nextEnsureCloseFd();
  } finally {// there is no global fd, don't need to close fd
  }
}
/**
 * 即使 totalSize 是 0，也需要一个 Part，否则 Server 端会报错 read request body failed
 */

function getAllTasks$2(totalSize, partSize) {
  const tasks = [];

  for (let i = 0;; ++i) {
    const offset = i * partSize;
    const currPartSize = Math.min(partSize, totalSize - offset);
    tasks.push({
      offset,
      partSize: currPartSize,
      partNumber: i + 1
    });

    if ((i + 1) * partSize >= totalSize) {
      break;
    }
  }

  return tasks;
}

function getDefaultCheckpointFilePath$2(bucket, key, versionId) {
  const originPath = `${bucket}_${key}.${versionId}.json`;
  const normalizePath = originPath.replace(/[\\/]/g, '');
  return normalizePath;
}

function combineCRCInParts$1(cp) {
  var _cp$parts_info$sort, _cp$parts_info;

  let res = '0';
  const sortedPartsInfo = (_cp$parts_info$sort = (_cp$parts_info = cp.parts_info) == null ? void 0 : _cp$parts_info.sort == null ? void 0 : _cp$parts_info.sort((a, b) => a.part_number - b.part_number)) != null ? _cp$parts_info$sort : [];

  for (const part of sortedPartsInfo) {
    res = combineCrc64(res, part.hash_crc64ecma, part.range_end - part.range_start + 1);
  }

  return res;
}

// @ts-nocheck
const SIG_QUERY = {
  algorithm: 'tos-algorithm',
  expiration: 'tos-expiration',
  signame: 'tos-signame',
  signature: 'tos-signature',
  v4_algorithm: 'X-Tos-Algorithm',
  v4_credential: 'X-Tos-Credential',
  v4_date: 'X-Tos-Date',
  v4_expires: 'X-Tos-Expires',
  v4_signedHeaders: 'X-Tos-SignedHeaders',
  v4_security_token: 'X-Tos-Security-Token',
  v4_signature: 'X-Tos-Signature',
  v4_content_sha: 'X-Tos-Content-Sha256',
  v4_policy: 'X-Tos-Policy'
};
function isDefaultPort(port) {
  if (port && port !== 80 && port !== 443) {
    return false;
  }

  return true;
}
/**
 * @api private
 */

const v4Identifier = 'request';
/**
 * @api private
 */

class SignersV4 {
  constructor(_opt, _credentials) {
    this.options = void 0;
    this.credentials = void 0;

    this.signature = (opt, expiredAt, credentials) => {
      if (!credentials) {
        credentials = this.credentials;
      }

      const parts = [];
      const datatime = opt.datetime;
      const credString = this.credentialString(datatime);
      parts.push(this.options.algorithm + ' Credential=' + credentials.GetAccessKey() + '/' + credString); // console.log(this.algorithm + ' Credential=' +
      //   credentials.accessKeyId + '/' + credString)

      parts.push('SignedHeaders=' + this.signedHeaders(opt));
      parts.push('Signature=' + this.authorization(opt, credentials, 0));
      return parts.join(', ');
    };

    this.signatureHeader = (opt, expiredAt, credentials) => {
      // const datetime = (new Date(new Date().toUTCString())).Format("yyyyMMddTHHmmssZ")
      opt.datetime = this.getDateTime();
      const header = new Map();
      /* istanbul ignore if */

      if (!opt.headers) {
        const h = {};
        opt.headers = h;
      }

      opt.headers.host = `${opt.host}`;
      /* istanbul ignore if */

      if (!isDefaultPort(opt.port)) {
        opt.headers.host += ':' + opt.port;
      }
      /* istanbul ignore if */


      if (opt.endpoints) {
        opt.headers.host = `${this.options.bucket}.${opt.endpoints}`;
      }

      header.set('host', opt.headers.host); // opt.endpoints as string)

      header.set('x-tos-date', opt.datetime); // opt.datetime)

      /* istanbul ignore if
        if (opt.endpoints) {
            let bucket = this.options.bucket;
            if (opt.bucket) {
                bucket = opt.bucket;
            }
            if (!opt.path || opt.path === '/' || opt.path === `/${bucket}`) {
                opt.path = '/' + bucket;
            } else {
                opt.path = '/' + bucket + opt.path;
            }
        }
        */

      header.set('x-tos-content-sha256', this.hexEncodedBodyHash());

      if (this.options.securityToken) {
        header.set('x-tos-security-token', this.options.securityToken);
      } // x-tos- must to be signatured


      header.forEach((value, key) => {
        if (key.startsWith('x-tos')) {
          opt.headers[key] = value;
        }
      });
      opt.path = this.getEncodePath(opt.path);
      const sign = this.signature(opt, 0, credentials);
      header.set('authorization', sign);
      return header;
    };

    this.gnrCopySig = (opt, credentials) => {
      return {
        key: '',
        value: ''
      };
    };

    this.getSignature = (opt, expiredAt) => {
      return {
        key: '',
        value: ''
      };
    };

    this.getSignatureQuery = (opt, expiredAt) => {
      opt.datetime = this.getDateTime();

      if (!opt.headers) {
        const h = {};
        opt.headers = h;
      }

      opt.headers.host = `${opt.host}`;

      if (!isDefaultPort(opt.port)) {
        opt.headers.host += ':' + opt.port;
      }

      opt.path = this.getEncodePath(opt.path);

      if (opt.endpoints) {
        opt.headers.host = `${this.options.bucket}.${opt.endpoints}`; // opt.path = `${opt.path}`;
      }

      opt.headers[SIG_QUERY.v4_date] = opt.datetime;
      const credString = this.credentialString(opt.datetime);
      const res = { ...(opt.query || {}),
        [SIG_QUERY.v4_algorithm]: this.options.algorithm,
        [SIG_QUERY.v4_content_sha]: this.hexEncodedBodyHash(),
        [SIG_QUERY.v4_credential]: this.credentials.GetAccessKey() + '/' + credString,
        [SIG_QUERY.v4_date]: opt.datetime,
        [SIG_QUERY.v4_expires]: '' + expiredAt,
        [SIG_QUERY.v4_signedHeaders]: this.signedHeaders(opt)
      };

      if (this.options.securityToken) {
        res[SIG_QUERY.v4_security_token] = this.options.securityToken;
      }

      opt.query = getSortedQueryString(res);
      res[SIG_QUERY.v4_signature] = this.authorization(opt, this.credentials, expiredAt);
      return res;
    };

    this.getSignaturePolicyQuery = (opt, expiredAt) => {
      opt.datetime = this.getDateTime();
      const credString = this.credentialString(opt.datetime);
      const res = {
        [SIG_QUERY.v4_algorithm]: this.options.algorithm,
        [SIG_QUERY.v4_credential]: this.credentials.GetAccessKey() + '/' + credString,
        [SIG_QUERY.v4_date]: opt.datetime,
        [SIG_QUERY.v4_expires]: '' + expiredAt,
        [SIG_QUERY.v4_policy]: stringify$1(parse$1(JSON.stringify(opt.policy), 'utf-8'), 'base64')
      };

      if (this.options.securityToken) {
        res[SIG_QUERY.v4_security_token] = this.options.securityToken;
      }

      opt.query = getSortedQueryString(res);
      res[SIG_QUERY.v4_signature] = this.authorization(opt, this.credentials, expiredAt);
      return res;
    };

    this.hexEncodedBodyHash = () => {
      return 'UNSIGNED-PAYLOAD'; // return this.hexEncodedHash('');
    };

    this.authorization = (opt, credentials, expiredAt) => {
      /* istanbul ignore if */
      if (!opt.datetime) {
        return '';
      }

      const signingKey = this.getSigningKey(credentials, opt.datetime.substr(0, 8)); // console.log(
      // 'signingKey:',
      //  signingKey,
      //  'sign:',
      //  this.stringToSign(opt.datetime, opt)
      //  );

      return hmacSha256$1(signingKey, this.stringToSign(opt.datetime, opt), 'hex');
    };

    this.getDateTime = () => {
      const date = new Date(new Date().toUTCString());
      const datetime = date.toISOString().replace(/\..+/, '').replace(/-/g, '').replace(/:/g, '') + 'Z';
      return datetime;
    };

    this.credentialString = datetime => {
      return this.createScope(datetime.substr(0, 8), this.options.region, this.options.serviceName);
    };

    this.createScope = (date, region, serviceName) => {
      return [date.substr(0, 8), region, serviceName, v4Identifier].join('/');
    };

    this.getSigningKey = (credentials, date) => {
      const kDate = hmacSha256$1(credentials.GetSecretKey(), date);
      const kRegion = hmacSha256$1(kDate, this.options.region);
      const kService = hmacSha256$1(kRegion, this.options.serviceName);
      const signingKey = hmacSha256$1(kService, v4Identifier);
      return signingKey;
    };

    this.stringToSign = (datetime, opt) => {
      /* istanbul ignore if */
      if (!this.options.algorithm) {
        return '';
      }

      const parts = [];
      parts.push(this.options.algorithm);
      parts.push(datetime);
      parts.push(this.credentialString(datetime));
      const canonicalString = 'policy' in opt ? this.canonicalStringPolicy(opt) : this.canonicalString(opt); // console.log('canonicalString',this.canonicalString(opt),' code:',this.hexEncodedHash(this.canonicalString(opt)));

      parts.push(this.hexEncodedHash(canonicalString));
      return parts.join('\n');
    };

    this.hexEncodedHash = string => {
      return hashSha256$1(string, 'hex');
    };

    this.canonicalString = opt => {
      const parts = [];
      parts.push(opt.method);
      parts.push(opt.path);
      parts.push(this.getEncodePath(opt.query, false));
      parts.push(this.canonicalHeaders(opt) + '\n');
      parts.push(this.signedHeaders(opt));
      parts.push(this.hexEncodedBodyHash());
      return parts.join('\n');
    };

    this.canonicalStringPolicy = opt => {
      const parts = [];
      parts.push(this.getEncodePath(opt.query, false));
      parts.push(this.hexEncodedBodyHash());
      return parts.join('\n');
    };

    this.canonicalHeaders = opt => {
      const parts = [];
      const needSignHeaders = getNeedSignedHeaders(opt.headers);

      for (let key of needSignHeaders) {
        const value = opt.headers[key];
        key = key.toLowerCase();
        parts.push(key + ':' + this.canonicalHeaderValues(value.toString()));
      }

      return parts.join('\n');
    };

    this.canonicalHeaderValues = values => {
      return values.replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '');
    };

    this.signedHeaders = opt => {
      const keys = [];
      const needSignHeaders = getNeedSignedHeaders(opt.headers);

      for (let key of needSignHeaders) {
        key = key.toLowerCase();
        keys.push(key);
      }

      return keys.sort().join(';');
    };

    this.options = _opt;
    this.credentials = _credentials;
  }
  /*
   * normal v4 signature
   * */


  /**
   * ! * ' () aren't transformed by encodeUrl, so they need be handled
   */
  getEncodePath(path, encodeAll = true) {
    if (!path) {
      return '';
    }

    let tmpPath = path;

    if (encodeAll) {
      tmpPath = path.replace(/%2F/g, '/');
    }

    tmpPath = tmpPath.replace(/\(/g, '%28');
    tmpPath = tmpPath.replace(/\)/g, '%29');
    tmpPath = tmpPath.replace(/!/g, '%21');
    tmpPath = tmpPath.replace(/\*/g, '%2A');
    tmpPath = tmpPath.replace(/\'/g, '%27');
    return tmpPath;
  }

}
class ISigV4Credentials {
  constructor(securityToken, secretAccessKey, accessKeyId) {
    this.securityToken = void 0;
    this.secretAccessKey = void 0;
    this.accessKeyId = void 0;
    this.accessKeyId = accessKeyId;
    this.secretAccessKey = secretAccessKey;
    this.securityToken = securityToken;
  }

  GetAccessKey() {
    return this.accessKeyId;
  }

  GetSecretKey() {
    return this.secretAccessKey;
  }

}

function getNeedSignedHeaders(headers) {
  const needSignHeaders = [];
  Object.keys(headers || {}).forEach(key => {
    if (key === 'host' || key.startsWith('x-tos-')) {
      if (headers[key] != null) {
        needSignHeaders.push(key);
      }
    }
  });
  return needSignHeaders.sort();
}

// auto generated by scripts/build.js
var version = '2.7.4';

function TosAgent(opts) {
  const {
    tosOpts,
    ...agentOpts
  } = opts;
  const Agent = tosOpts.isHttps ? https.Agent : http.Agent;
  const agent = new Agent({ ...agentOpts,
    keepAlive: true,
    rejectUnauthorized: tosOpts.enableVerifySSL,
    timeout: tosOpts.idleConnectionTime
  });
  agent.maxFreeSockets = Infinity;
  agent.maxTotalSockets = tosOpts.maxConnections;
  const oriCreateConnection = agent.createConnection;

  agent.createConnection = function (...args) {
    const socket = oriCreateConnection.call(this, ...args);
    let isTimeout = false;
    let isConnected = false;
    let connectTimer = null; // Place `setTimeout` in `process.nextTick` to avoid to
    // trigger "Connect timeout" when debug

    process.nextTick(() => {
      if (isConnected) {
        return;
      }

      connectTimer = setTimeout(() => {
        isTimeout = true;
      }, tosOpts.connectionTimeout);
    });
    socket.on('connect', () => {
      isConnected = true;

      if (connectTimer) {
        clearTimeout(connectTimer);
      }

      if (isTimeout) {
        socket.destroy(new Error('Connect timeout'));
      }
    });
    return socket;
  };

  return agent;
}

class TOSBase {
  constructor(_opts) {
    this.opts = void 0;
    this.axiosInst = void 0;
    this.userAgent = void 0;
    this.httpAgent = void 0;
    this.httpsAgent = void 0;

    this.getObjectPath = opts => {
      const actualBucket = typeof opts !== 'string' && opts.bucket || this.opts.bucket;
      const actualKey = typeof opts === 'string' ? opts : opts.key;

      if (!actualBucket) {
        throw new TosClientError('Must provide bucket param');
      }

      return `/${actualBucket}/${encodeURIComponent(actualKey)}`;
    };

    this.setObjectContentTypeHeader = (input, headers) => {
      if (headers['content-type'] != null) {
        return;
      }

      let mimeType = DEFAULT_CONTENT_TYPE;
      const key = getObjectInputKey(input);

      if (this.opts.autoRecognizeContentType) {
        mimeType = lookupMimeType(key) || mimeType;
      }

      if (mimeType) {
        headers['content-type'] = mimeType;
      }
    };

    this.getNormalDataFromError = getNormalDataFromError;
    this.opts = this.normalizeOpts(_opts);

    {
      this.httpAgent = TosAgent({
        tosOpts: { ...this.opts,
          isHttps: false
        }
      }); // fix axios issue, it uses `httpsAgent` although http proxy is enabled.

      const isProxy = !!this.opts.proxyHost;
      this.httpsAgent = TosAgent({
        tosOpts: { ...this.opts,
          isHttps: !isProxy
        }
      });
    }

    this.userAgent = this.getUserAgent();
    this.axiosInst = makeAxiosInst(this.opts.maxRetryCount);
  }

  normalizeOpts(_opts) {
    var _opts$enableCRC, _opts$enableCRC2;

    // 对字符串参数做 trim 操作
    const trimKeys = ['accessKeyId', 'accessKeySecret', 'stsToken', 'region', 'endpoint'];
    trimKeys.forEach(key => {
      const value = _opts[key];

      if (typeof value === 'string') {
        // maybe undefined
        _opts[key] = value.trim();
      }
    });
    const mustKeys = ['accessKeyId', 'accessKeySecret', 'region'];
    const mustKeysErrorStr = mustKeys.filter(key => !_opts[key]).join(', ');

    if (mustKeysErrorStr) {
      throw new TosClientError(`lack params: ${mustKeysErrorStr}.`);
    }

    const endpoint = _opts.endpoint || getEndpoint(_opts.region);

    if (!endpoint) {
      throw new TosClientError(`the value of param region is invalid, correct values are cn-beijing, cn-nantong etc.`);
    }

    if (endpoint.includes('s3')) {
      throw new TosClientError(`do not support s3 endpoint, please use tos endpoint.`);
    }

    const secure = _opts.secure == null ? true : !!_opts.secure;

    const _default = (v, defaultValue) => v == null ? defaultValue : v;

    const enableCRC = (_opts$enableCRC = _opts.enableCRC) != null ? _opts$enableCRC : false;

    if (enableCRC && 'node' === 'browser') {}

    return { ..._opts,
      endpoint,
      secure,
      enableVerifySSL: _default(_opts.enableVerifySSL, true),
      autoRecognizeContentType: _default(_opts.autoRecognizeContentType, true),
      requestTimeout: _default(_opts.requestTimeout, 120000),
      connectionTimeout: _default(_opts.connectionTimeout, 10000),
      maxConnections: _default(_opts.maxConnections, 1024),
      idleConnectionTime: _default(_opts.idleConnectionTime, 30000),
      maxRetryCount: _default(_opts.maxRetryCount, 3),
      enableCRC: (_opts$enableCRC2 = _opts.enableCRC) != null ? _opts$enableCRC2 : false,
      requestAdapter: getAdapter()
    };
  }

  getUserAgent() {
    // ve-tos-go-sdk/v2.0.0 (linux/amd64;go1.17.0)
    const language =  'nodejs';
    const sdkVersion = `ve-tos-${language}-sdk/v${version}`;

    const osType = (() => {
      const oriType = os.type();
      const aliasType = {
        Linux: 'linux',
        Darwin: 'darwin',
        Windows_NT: 'windows'
      };
      return aliasType[oriType] || oriType;
    })();

    const nodeVersion = (() => {
      return process.version.replaceAll('v', '');
    })();

    const stdStr = `${sdkVersion} (${osType}/${process.arch};nodejs${nodeVersion})`;

    const moreStr = (() => {
      const {
        userAgentProductName,
        userAgentSoftName,
        userAgentSoftVersion
      } = this.opts;
      let customStr = Object.entries(this.opts.userAgentCustomizedKeyValues || {}).map(([k, v]) => {
        return `${k}/${v}`;
      }).join(';');
      customStr = customStr ? `(${customStr})` : '';

      if (!userAgentProductName && !userAgentSoftName && !userAgentSoftVersion && !customStr) {
        return '';
      }

      const defaultValue = 'undefined';
      const productSoftStr = [userAgentProductName, userAgentSoftName, userAgentSoftVersion].map(it => it || defaultValue).join('/');
      return [productSoftStr, customStr].filter(Boolean).join(' ');
    })();

    return [stdStr, moreStr].filter(Boolean).join(' -- ');
  }

  async fetch(method, path, query, headers, body, opts) {
    const handleResponse = (opts == null ? void 0 : opts.handleResponse) || (res => res.data);

    const needMd5 = (opts == null ? void 0 : opts.needMd5) || false;

    if (body && needMd5) {
      const md5String = hashMd5$2(JSON.stringify(body), 'base64');
      headers['content-md5'] = md5String;
    }

    const [endpoint, newPath] = (() => {
      if (opts != null && opts.subdomainBucket && this.opts.forcePathStyle) {
        return [this.opts.endpoint, `/${opts.subdomainBucket}${path}`];
      } // if isCustomDomain true, not add subdomainBucket


      if (opts != null && opts.subdomainBucket && !this.opts.isCustomDomain) {
        // endpoint is ip address
        if (/^(\d|:)/.test(this.opts.endpoint)) {
          return [this.opts.endpoint, `/${opts.subdomainBucket}${path}`];
        }

        return [`${opts == null ? void 0 : opts.subdomainBucket}.${this.opts.endpoint}`, path];
      }

      return [this.opts.endpoint, path];
    })();

    path = newPath;
    headers = encodeHeadersValue(headers);
    const signOpt = {
      // TODO: delete endpoints and buckets
      endpoints: undefined,
      bucket: '',
      method,
      headers: { ...headers
      },
      path,
      query: getSortedQueryString(query),
      host: endpoint
    };
    const signv4 = new ISigV4Credentials(this.opts.stsToken, this.opts.accessKeySecret, this.opts.accessKeyId);
    const sig = new SignersV4({
      algorithm: 'TOS4-HMAC-SHA256',
      region: this.opts.region,
      serviceName: 'tos',
      bucket: '',
      securityToken: this.opts.stsToken
    }, signv4);
    const signatureHeaders = sig.signatureHeader(signOpt);
    const reqHeaders = { ...headers
    };
    const reqOpts = {
      method,
      baseURL: `http${this.opts.secure ? 's' : ''}://${endpoint}`,
      url: path,
      params: query,
      headers: reqHeaders,
      data: body
    };
    signatureHeaders.forEach((value, key) => {
      reqOpts.headers[key] = value;
    });
    const normalizedProxy = normalizeProxy(this.opts.proxy);

    if (normalizedProxy != null && normalizedProxy.url && !this.opts.proxyHost) {
      // proxy for nodejs middleware server
      reqOpts.baseURL = normalizedProxy.url;

      if (normalizedProxy != null && normalizedProxy.needProxyParams) {
        reqOpts.params['x-proxy-tos-host'] = endpoint;
        delete reqHeaders['host'];
      }
    } else if (this.opts.proxyHost) {
      if (!this.opts.proxyPort) {
        throw new TosClientError('The `proxyPort` is required if `proxyHost` is truly.');
      } // proxy for general proxy server


      reqOpts.proxy = {
        host: this.opts.proxyHost,
        port: this.opts.proxyPort,
        protocol: 'http'
      };
    }

    reqHeaders['user-agent'] = this.userAgent;

    if (this.opts.requestTimeout > 0 && this.opts.requestTimeout !== Infinity) {
      reqOpts.timeout = this.opts.requestTimeout;
    }

    {
      reqOpts.httpAgent = this.httpAgent;
      reqOpts.httpsAgent = this.httpsAgent;
    }

    try {
      const logReqOpts = { ...reqOpts
      };
      delete logReqOpts.httpAgent;
      delete logReqOpts.httpsAgent;
      TOS('reqOpts: ', logReqOpts);
      const res = await this.axiosInst({ ...{
          maxBodyLength: Infinity,
          maxContentLength: Infinity,
          adapter: this.opts.requestAdapter
        },
        ...reqOpts,
        ...((opts == null ? void 0 : opts.axiosOpts) || {}),
        [retrySignatureNamespace]: {
          signOpt,
          sigInst: sig
        }
      });
      const data = handleResponse(res);
      return {
        data,
        statusCode: res.status,
        headers: res.headers,
        requestId: res.headers['x-tos-request-id'],
        id2: res.headers['x-tos-id-2']
      };
    } catch (err) {
      var _err$response, _err$response$headers;

      if (axios.isAxiosError(err) && (_err$response = err.response) != null && (_err$response$headers = _err$response.headers) != null && _err$response$headers['x-tos-request-id']) {
        // it's ServerError only if `RequestId` exists
        const response = err.response;
        TOS('TosServerError response: ', response);
        const err2 = new TosServerError(response);
        throw err2;
      } // it is neither ServerError nor ClientError, it's other error


      TOS('err: ', err);
      throw err;
    }
  }

  async fetchBucket(bucket, method, query, headers, body, opts) {
    const actualBucket = bucket || this.opts.bucket;

    if (!actualBucket) {
      throw new TosClientError('Must provide bucket param');
    }

    return this.fetch(method, '/', query, headers, body, { ...opts,
      subdomainBucket: actualBucket
    });
  }

  async _fetchObject(input, method, query, headers, body, opts) {
    const actualBucket = typeof input !== 'string' && input.bucket || this.opts.bucket;
    const actualKey = typeof input === 'string' ? input : input.key;

    if (!actualBucket) {
      throw new TosClientError('Must provide bucket param');
    }

    validateObjectName(actualKey);
    return this.fetch(method, `/${encodeURIComponent(actualKey)}`, query, headers, body, { ...opts,
      subdomainBucket: actualBucket
    });
  }

  getSignatureQuery(input) {
    const signv4 = new ISigV4Credentials(this.opts.stsToken, this.opts.accessKeySecret, this.opts.accessKeyId);
    const sig = new SignersV4({
      algorithm: 'TOS4-HMAC-SHA256',
      region: this.opts.endpoint,
      serviceName: 'tos',
      // SignV4 uses this.options.bucket, so set it here
      bucket: input.bucket,
      securityToken: this.opts.stsToken
    }, signv4);

    if ('policy' in input) {
      return sig.getSignaturePolicyQuery({
        policy: input.policy
      }, input.expires);
    } else {
      return sig.getSignatureQuery({
        method: input.method,
        path: input.path,
        endpoints: input.subdomain ? input.endpoint : undefined,
        host: input.endpoint,
        query: input.query
      }, input.expires);
    }
  }

  normalizeBucketInput(input) {
    return typeof input === 'string' ? {
      bucket: input
    } : input;
  }

  normalizeObjectInput(input) {
    return typeof input === 'string' ? {
      key: input
    } : input;
  }

}

function getAdapter() {
  {
    // nodejs env
    return undefined;
  }
}

/**
 *
 * @deprecated use listObjectsType2 instead
 * @returns
 */


async function listObjects(input = {}) {
  const {
    bucket,
    ...nextQuery
  } = input;
  const ret = await this.fetchBucket(input.bucket, 'GET', covertCamelCase2Kebab(nextQuery), {});
  const arrayProp = makeArrayProp(ret.data);
  arrayProp('CommonPrefixes');
  arrayProp('Contents');
  arrayProp('Versions');
  arrayProp('DeleteMarkers');
  return ret;
}
async function listObjectVersions(input = {}) {
  const {
    bucket,
    ...nextQuery
  } = input;
  const ret = await this.fetchBucket(input.bucket, 'GET', covertCamelCase2Kebab({
    versions: '',
    ...nextQuery
  }), {});
  const arrayProp = makeArrayProp(ret.data);
  arrayProp('CommonPrefixes');
  arrayProp('Versions');
  arrayProp('DeleteMarkers');
  return ret;
}

const DefaultListMaxKeys = 1000;
async function listObjectsType2(input = {}) {
  const {
    listOnlyOnce = false
  } = input;
  let output;

  if (!input.maxKeys) {
    input.maxKeys = DefaultListMaxKeys;
  }

  if (listOnlyOnce) {
    output = await listObjectsType2Once.call(this, input);
  } else {
    const maxKeys = input.maxKeys;
    let params = { ...input,
      maxKeys
    };

    while (true) {
      const res = await listObjectsType2Once.call(this, params);

      if (output == null) {
        output = res;
      } else {
        output = { ...res,
          data: output.data
        };
        output.data.KeyCount += res.data.KeyCount;
        output.data.IsTruncated = res.data.IsTruncated;
        output.data.NextContinuationToken = res.data.NextContinuationToken;
        output.data.Contents = output.data.Contents.concat(res.data.Contents);
        output.data.CommonPrefixes = output.data.CommonPrefixes.concat(res.data.CommonPrefixes);
      }

      if (!res.data.IsTruncated || output.data.KeyCount >= maxKeys) {
        break;
      }

      params.continuationToken = res.data.NextContinuationToken;
      params.maxKeys = params.maxKeys - res.data.KeyCount;
    }
  }

  return output;
}

async function listObjectsType2Once(input) {
  const {
    bucket,
    ...nextQuery
  } = input;
  const ret = await this.fetchBucket(input.bucket, 'GET', {
    'list-type': 2,
    ...covertCamelCase2Kebab(nextQuery)
  }, {});
  const arrayProp = makeArrayProp(ret.data);
  arrayProp('CommonPrefixes');
  arrayProp('Contents');
  return ret;
}

/** @private unstable */

class ShareLinkClient extends TOSBase {
  modifyAxiosInst() {
    const axiosInst = this.axiosInst;
    axiosInst.interceptors.request.use(config => {
      const headers = config.headers || {};
      delete headers['authorization'];
      headers['host'] = this.parsedPolicyUrlVal.host;
      config.baseURL = this.parsedPolicyUrlVal.origin;

      config.paramsSerializer = params => {
        const addQueryStr = paramsSerializer(params);
        return [this.parsedPolicyUrlVal.search, addQueryStr].filter(it => it.trim()).join('&');
      };

      return config;
    });
  }

  constructor(_opts) {
    super({ ..._opts,
      bucket: 'fake-bucket',
      region: 'fake-region',
      accessKeyId: 'fake-accessKeyId',
      accessKeySecret: 'fake-accessKeySecret',
      endpoint: 'fake-endpoint.com'
    });
    this.shareLinkClientOpts = void 0;
    this.parsedPolicyUrlVal = void 0;
    this.headObject = headObject;
    this.getObjectV2 = getObjectV2;
    this.listObjects = listObjects;
    this.listObjectsType2 = listObjectsType2;
    this.listObjectVersions = listObjectVersions;
    this.downloadFile = downloadFile;
    this.shareLinkClientOpts = _opts;
    this.parsedPolicyUrlVal = this.initParsedPolicyUrlVal();
    this.modifyAxiosInst();
  }

  initParsedPolicyUrlVal() {
    const reg = /(https?:\/\/(?:[^@]+@)?([^/?]+))[^?]*\?(.+)/;
    const matched = this.shareLinkClientOpts.policyUrl.match(reg);

    if (!matched) {
      throw new TosClientError('the `policyUrl` param is invalid');
    }

    return {
      origin: matched[1],
      host: matched[2],
      search: matched[3]
    };
  }

}

async function listBuckets(input = {}) {
  const headers = {};
  /**
   * empty string is invalid value
   */

  (input == null ? void 0 : input.projectName) && fillRequestHeaders({ ...input,
    headers
  }, ['projectName']);
  const res = await this.fetch('GET', '/', {}, headers);
  const arrayProp = makeArrayProp(res.data);
  arrayProp('Buckets');
  return res;
}
async function createBucket(input) {
  const actualBucket = input.bucket || this.opts.bucket; // these errors are only for creating bucket

  if (actualBucket) {
    if (actualBucket.length < 3 || actualBucket.length > 63) {
      throw new TosClientError('invalid bucket name, the length must be [3, 63]');
    }

    if (!/^([a-z]|-|\d)+$/.test(actualBucket)) {
      throw new TosClientError('invalid bucket name, the character set is illegal');
    }

    if (/^-/.test(actualBucket) || /-$/.test(actualBucket)) {
      throw new TosClientError(`invalid bucket name, the bucket name can be neither starting with '-' nor ending with '-'`);
    }
  }

  const headers = input.headers = normalizeHeadersKey(input.headers);
  fillRequestHeaders(input, ['acl', 'grantFullControl', 'grantRead', 'grantReadAcp', 'grantWrite', 'grantWriteAcp', 'storageClass', 'azRedundancy', 'bucketType']);
  /**
   * empty string is invalid value
   */

  (input == null ? void 0 : input.projectName) && fillRequestHeaders(input, ['projectName']);
  const res = await this.fetchBucket(input.bucket, 'PUT', {}, headers);
  return res;
}
async function deleteBucket(bucket) {
  return this.fetchBucket(bucket, 'DELETE', {}, {});
}
async function headBucket(bucket) {
  return this.fetchBucket(bucket, 'HEAD', {}, {}, undefined, {
    handleResponse: res => {
      return { ...res.headers,
        ProjectName: res.headers[TosHeader.HeaderProjectName]
      };
    }
  });
}
async function putBucketStorageClass(input) {
  const {
    bucket,
    storageClass
  } = input;
  return this.fetchBucket(bucket, 'PUT', {
    storageClass: ''
  }, {
    'x-tos-storage-class': storageClass
  });
}

async function putBucketAcl(input) {
  const headers = {};
  if (input.acl) headers['x-tos-acl'] = input.acl;
  const res = await this.fetchBucket(input.bucket, 'PUT', {
    acl: ''
  }, headers, input.aclBody, {
    needMd5: true
  });
  return res;
}
async function getBucketAcl(bucket) {
  const res = await this.fetchBucket(bucket, 'GET', {
    acl: ''
  }, {});
  const arrayProp = makeArrayProp(res.data);
  arrayProp('Grants');
  return res;
}

async function putObject(input) {
  return _putObject.call(this, input);
}
async function _putObject(input) {
  input = this.normalizeObjectInput(input);
  const headers = input.headers = normalizeHeadersKey(input.headers);
  fillRequestHeaders(input, ['contentLength', 'contentMD5', 'contentSHA256', 'cacheControl', 'contentDisposition', 'contentEncoding', 'contentLanguage', 'contentType', 'expires', 'acl', 'grantFullControl', 'grantRead', 'grantReadAcp', 'grantWrite', 'grantWriteAcp', 'ssecAlgorithm', 'ssecKey', 'ssecKeyMD5', 'serverSideEncryption', 'serverSideDataEncryption', 'meta', 'websiteRedirectLocation', 'storageClass', 'trafficLimit', 'callback', 'callbackVar', 'forbidOverwrite', 'ifMatch']);
  this.setObjectContentTypeHeader(input, headers);
  const totalSize = getSize(input.body, headers);
  const totalSizeValid = totalSize != null;

  if (!totalSizeValid && (input.dataTransferStatusChange || input.progress)) {
    console.warn(`Don't get totalSize of putObject's body, the \`dataTransferStatusChange\` and \`progress\` callback will not trigger. You can use \`putObjectFromFile\` instead`);
  }

  let consumedBytes = 0;
  const {
    dataTransferStatusChange,
    progress
  } = input;

  const triggerDataTransfer = (type, rwOnceBytes = 0) => {
    // request cancel will make rwOnceBytes < 0 in browser
    if (!totalSizeValid || rwOnceBytes < 0) {
      return;
    }

    if (!dataTransferStatusChange && !progress) {
      return;
    }

    consumedBytes += rwOnceBytes;
    dataTransferStatusChange == null ? void 0 : dataTransferStatusChange({
      type,
      rwOnceBytes,
      consumedBytes,
      totalBytes: totalSize
    });

    const progressValue = (() => {
      if (totalSize === 0) {
        if (type === exports.aB.Succeed) {
          return 1;
        }

        return 0;
      }

      return consumedBytes / totalSize;
    })();

    if (progressValue === 1) {
      if (type === exports.aB.Succeed) {
        progress == null ? void 0 : progress(progressValue);
      }
    } else {
      progress == null ? void 0 : progress(progressValue);
    }
  };

  const bodyConfig = await getNewBodyConfig({
    body: input.body,
    dataTransferCallback: n => triggerDataTransfer(exports.aB.Rw, n),
    makeRetryStream: input.makeRetryStream,
    enableCRC: this.opts.enableCRC,
    rateLimiter: input.rateLimiter
  });
  triggerDataTransfer(exports.aB.Started);

  const task = async () => {
    const res = await this._fetchObject(input, 'PUT', {}, headers, bodyConfig.body || '', {
      handleResponse: res => {
        var _input;

        const result = { ...res.headers
        };

        if ((_input = input) != null && _input.callback && res.data) {
          result.CallbackResult = `${JSON.stringify(res.data)}`;
        }

        return result;
      },
      axiosOpts: {
        [retryNamespace]: {
          beforeRetry: () => {
            consumedBytes = 0;
            bodyConfig.beforeRetry == null ? void 0 : bodyConfig.beforeRetry();
          },
          makeRetryStream: bodyConfig.makeRetryStream
        },
        onUploadProgress: event => {
          triggerDataTransfer(exports.aB.Rw, event.loaded - consumedBytes);
        }
      }
    });

    if (this.opts.enableCRC && bodyConfig.crc) {
      checkCRC64WithHeaders(bodyConfig.crc, res.headers);
    }

    return res;
  };

  const [err, res] = await safeAwait(task());

  if (err || !res) {
    triggerDataTransfer(exports.aB.Failed);
    throw err;
  }

  triggerDataTransfer(exports.aB.Succeed);
  return res;
}
async function putObjectFromFile(input) {
  const normalizedHeaders = normalizeHeadersKey(input.headers);

  if (!normalizedHeaders['content-length']) {
    const stats = await stat(input.filePath);
    normalizedHeaders['content-length'] = `${stats.size}`;
  }

  const makeRetryStream = makeRetryStreamAutoClose(() => createReadStream(input.filePath));

  try {
    return await _putObject.call(this, { ...input,
      body: makeRetryStream.make(),
      headers: normalizedHeaders,
      makeRetryStream: makeRetryStream.make
    });
  } catch (err) {
    tryDestroy(makeRetryStream.getLastStream(), err);
    throw err;
  }
}

async function fetchObject(input) {
  const headers = input.headers = normalizeHeadersKey(input.headers);
  fillRequestHeaders(input, ['acl', 'grantFullControl', 'grantRead', 'grantReadAcp', 'grantWriteAcp', 'ssecAlgorithm', 'ssecKey', 'ssecKeyMD5', 'meta', 'storageClass']);
  const res = await this._fetchObject(input, 'POST', {
    fetch: ''
  }, headers, {
    URL: input.url,
    IgnoreSameKey: input.ignoreSameKey,
    ContentMD5: input.contentMD5
  }, {
    needMd5: true
  });
  return res;
}
async function putFetchTask(input) {
  const headers = input.headers = normalizeHeadersKey(input.headers);
  fillRequestHeaders(input, ['acl', 'grantFullControl', 'grantRead', 'grantReadAcp', 'grantWriteAcp', 'ssecAlgorithm', 'ssecKey', 'ssecKeyMD5', 'meta', 'storageClass']);
  const res = await this._fetchObject(input, 'POST', {
    fetchTask: ''
  }, headers, {
    URL: input.url,
    IgnoreSameKey: input.ignoreSameKey,
    ContentMD5: input.contentMD5,
    Object: input.key
  }, {
    needMd5: true
  });
  return res;
}

function getPreSignedUrl(input) {
  validateObjectName(input);
  const normalizedInput = typeof input === 'string' ? {
    key: input
  } : input;
  const endpoint = normalizedInput.alternativeEndpoint || this.opts.endpoint;
  const subdomain = normalizedInput.alternativeEndpoint || normalizedInput.isCustomDomain ? false : true;
  const bucket = normalizedInput.bucket || this.opts.bucket || '';

  if (subdomain && !bucket) {
    throw new TosClientError('Must provide bucket param');
  }

  const [newHost, newPath, signingPath] = (() => {
    const encodedKey = encodeURIComponent(normalizedInput.key);
    const objectKeyPath = normalizedInput.key.split('/').map(it => encodeURIComponent(it)).join('/');

    if (subdomain) {
      return [`${bucket}.${endpoint}`, `/${objectKeyPath}`, `/${encodedKey}`];
    }

    return [endpoint, `/${objectKeyPath}`, `/${encodedKey}`];
  })();

  const nextQuery = normalizedInput.query || {};

  const setOneQuery = (k, v) => {
    if (nextQuery[k] == null && v != null) {
      nextQuery[k] = v;
    }
  };

  const response = normalizedInput.response || {};
  Object.keys(response).forEach(_key => {
    const key = _key;
    const kebabKey = covertCamelCase2Kebab(key);
    setOneQuery(`response-${kebabKey}`, response[key]);
  });

  if (normalizedInput.versionId) {
    setOneQuery('versionId', normalizedInput.versionId);
  }

  const query = this.getSignatureQuery({
    bucket,
    method: normalizedInput.method || 'GET',
    path: signingPath,
    endpoint,
    subdomain,
    expires: normalizedInput.expires || 1800,
    query: nextQuery
  });
  const normalizedProxy = normalizeProxy(this.opts.proxy);
  let baseURL = `http${this.opts.secure ? 's' : ''}://${newHost}`;

  if (normalizedProxy != null && normalizedProxy.url) {
    // if `baseURL` ends with '/'，we filter it.
    // because `newPath` starts with '/'
    baseURL = normalizedProxy.url.replace(/\/+$/g, '');

    if (normalizedProxy != null && normalizedProxy.needProxyParams) {
      query['x-proxy-tos-host'] = newHost;
    }
  }

  const queryStr = Object.keys(query).map(key => {
    return `${encodeURIComponent(key)}=${encodeURIComponent(query[key])}`;
  }).join('&');
  return `${baseURL}${newPath}?${queryStr}`;
}

async function deleteObject(input) {
  const normalizedInput = typeof input === 'string' ? {
    key: input
  } : input;
  const query = {};

  if (normalizedInput.versionId) {
    query.versionId = normalizedInput.versionId;
  }

  if (normalizedInput.skipTrash) {
    query.skipTrash = normalizedInput.skipTrash;
  }

  if (normalizedInput.recursive) {
    query.recursive = normalizedInput.recursive;
  }

  const res = await this._fetchObject(input, 'DELETE', query, {}, {}, {
    handleResponse: res => res.headers
  });
  return res;
}

async function renameObject(input) {
  input.headers = input.headers || {};
  fillRequestHeaders(input, ['recursiveMkdir', 'forbidOverwrite']);
  return this._fetchObject(input, 'PUT', {
    rename: '',
    name: input.newKey
  }, input.headers, '');
}

async function deleteMultiObjects(input) {
  const body = {
    Quiet: input.quiet,
    Objects: input.objects.map(it => ({
      Key: it.key,
      VersionId: it.versionId
    }))
  };
  const query = {
    delete: ''
  };

  if (input.skipTrash) {
    query.skipTrash = input.skipTrash;
  }

  if (input.recursive) {
    query.recursive = input.recursive;
  }

  const res = await this.fetchBucket(input.bucket, 'POST', query, {}, body);
  const arrayProp = makeArrayProp(res.data);
  arrayProp('Deleted');
  arrayProp('Error');
  return res;
}

async function getObjectAcl(input) {
  const normalizedInput = typeof input === 'string' ? {
    key: input
  } : input;
  const query = {
    acl: ''
  };

  if (normalizedInput.versionId) {
    query.versionId = normalizedInput.versionId;
  }

  const res = await this._fetchObject(input, 'GET', query, {});
  const arrayProp = makeArrayProp(res.data);
  arrayProp('Grants');
  return res;
}
async function putObjectAcl(input) {
  const headers = input.headers = normalizeHeadersKey(input.headers);
  const query = {
    acl: ''
  };

  if (input.versionId) {
    query.versionId = input.versionId;
  }

  fillRequestHeaders(input, ['acl']);
  return this._fetchObject(input, 'PUT', query, headers, input.aclBody);
}

async function abortMultipartUpload(input) {
  return this._fetchObject(input, 'DELETE', {
    uploadId: input.uploadId
  }, {});
}

async function listMultipartUploads(input = {}) {
  const {
    bucket,
    ...nextQuery
  } = input;
  const ret = await this.fetchBucket(input.bucket, 'GET', {
    uploads: '',
    ...covertCamelCase2Kebab(nextQuery)
  }, {});
  const arrayProp = makeArrayProp(ret.data);
  arrayProp('Uploads');
  arrayProp('CommonPrefixes');
  return ret;
}

async function appendObject(input) {
  const normalizedInput = input = this.normalizeObjectInput(input);
  const headers = input.headers = normalizeHeadersKey(input.headers);
  fillRequestHeaders(input, ['contentLength', 'cacheControl', 'contentDisposition', 'contentEncoding', 'contentLanguage', 'contentType', 'expires', 'acl', 'grantFullControl', 'grantRead', 'grantReadAcp', 'grantWriteAcp', 'meta', 'websiteRedirectLocation', 'storageClass', 'trafficLimit']);
  this.setObjectContentTypeHeader(input, headers);
  const totalSize = getSize(input.body, headers);
  const totalSizeValid = totalSize != null;

  if (!totalSizeValid) {
    throw new TosClientError(`appendObject needs to know the content length in advance`);
  }

  headers['content-length'] = headers['content-length'] || `${totalSize}`;

  if (this.opts.enableCRC && input.offset !== 0 && !input.preHashCrc64ecma) {
    throw new TosClientError('must provide preHashCrc64ecma if enableCRC is true and offset is non-zero');
  }

  let consumedBytes = 0;
  const {
    dataTransferStatusChange,
    progress
  } = input;

  const triggerDataTransfer = (type, rwOnceBytes = 0) => {
    // request cancel will make rwOnceBytes < 0 in browser
    if (!totalSizeValid || rwOnceBytes < 0) {
      return;
    }

    if (!dataTransferStatusChange && !progress) {
      return;
    }

    consumedBytes += rwOnceBytes;
    dataTransferStatusChange == null ? void 0 : dataTransferStatusChange({
      type,
      rwOnceBytes,
      consumedBytes,
      totalBytes: totalSize
    });

    const progressValue = (() => {
      if (totalSize === 0) {
        if (type === exports.aB.Succeed) {
          return 1;
        }

        return 0;
      }

      return consumedBytes / totalSize;
    })();

    if (progressValue === 1) {
      if (type === exports.aB.Succeed) {
        progress == null ? void 0 : progress(progressValue);
      }
    } else {
      progress == null ? void 0 : progress(progressValue);
    }
  };

  const bodyConfig = await getNewBodyConfig({
    body: input.body,
    dataTransferCallback: n => triggerDataTransfer(exports.aB.Rw, n),
    makeRetryStream: undefined,
    enableCRC: this.opts.enableCRC,
    rateLimiter: input.rateLimiter
  });
  triggerDataTransfer(exports.aB.Started);

  const task = async () => {
    const res = await this._fetchObject(input, 'POST', {
      append: '',
      offset: normalizedInput.offset
    }, headers, bodyConfig.body || '', {
      handleResponse: res => ({ ...res.headers,
        nextAppendOffset: +res.headers['x-tos-next-append-offset'],
        hashCrc64ecma: res.headers['x-tos-hash-crc64ecma']
      }),
      axiosOpts: {
        [retryNamespace]: {
          beforeRetry: () => {
            consumedBytes = 0;
            bodyConfig.beforeRetry == null ? void 0 : bodyConfig.beforeRetry();
          },
          makeRetryStream: bodyConfig.makeRetryStream
        },
        onUploadProgress: event => {
          triggerDataTransfer(exports.aB.Rw, event.loaded - consumedBytes);
        }
      }
    });

    if (this.opts.enableCRC && bodyConfig.crc) {
      const appendObjectCrc = combineCrc64(normalizedInput.preHashCrc64ecma || '0', bodyConfig.crc.getCrc64(), totalSize);
      checkCRC64WithHeaders(appendObjectCrc, res.headers);
    }

    return res;
  };

  const [err, res] = await safeAwait(task());

  if (err || !res) {
    triggerDataTransfer(exports.aB.Failed);
    throw err;
  }

  triggerDataTransfer(exports.aB.Succeed);
  return res;
}

async function setObjectMeta(input) {
  const normalizedInput = typeof input === 'string' ? {
    key: input
  } : input;
  const headers = normalizedInput.headers = normalizeHeadersKey(normalizedInput.headers);
  fillRequestHeaders(normalizedInput, ['cacheControl', 'contentDisposition', 'contentEncoding', 'contentLanguage', 'contentType', 'expires', 'meta']);
  const query = {
    metadata: ''
  };

  if (normalizedInput.versionId) {
    query.versionId = normalizedInput.versionId;
  }

  return this._fetchObject(input, 'POST', query, headers);
}

async function calculatePostSignature(input) {
  validateObjectName(input);
  input = this.normalizeObjectInput(input);
  const {
    expiresIn = 3600,
    key
  } = input;
  const bucket = input.bucket || this.opts.bucket;
  const fields = { ...input.fields
  };
  const conditions = [...(input.conditions || [])];

  if (!bucket) {
    throw new TosClientError('Must provide bucket param');
  }

  const accessKeySecret = this.opts.accessKeySecret;
  const date = new Date();
  const expirationDateStr = getDateTimeStr({
    date: new Date(date.valueOf() + expiresIn * 1000),
    type: 'ISO'
  });
  const dateStr = getDateTimeStr();
  const date8Str = dateStr.substring(0, 8);
  const service = 'tos';
  const requestStr = 'request';
  const kDate = hmacSha256$1(accessKeySecret, date8Str);
  const kRegion = hmacSha256$1(kDate, this.opts.region);
  const kService = hmacSha256$1(kRegion, service);
  const signingKey = hmacSha256$1(kService, requestStr);
  const credential = [this.opts.accessKeyId, date8Str, this.opts.region, service, requestStr].join('/');
  const addedInForm = {
    key,
    'x-tos-algorithm': 'TOS4-HMAC-SHA256',
    'x-tos-date': dateStr,
    'x-tos-credential': credential
  };

  if (this.opts.stsToken) {
    addedInForm['x-tos-security-token'] = this.opts.stsToken;
  }

  conditions.push({
    bucket
  });
  Object.entries(addedInForm).forEach(([key, value]) => {
    fields[key] = value;
  });
  Object.entries(fields).forEach(([key, value]) => {
    conditions.push({
      [key]: `${value}`
    });
  });
  const policy = {
    expiration: expirationDateStr,
    conditions
  };
  const policyStr = JSON.stringify(policy);
  const policyBase64 = stringify$1(parse$1(policyStr, 'utf-8'), 'base64');
  const signature = hmacSha256$1(signingKey, policyBase64, 'hex');
  fields.policy = policyBase64;
  fields['x-tos-signature'] = signature;
  return fields;
}
/**
 *
 * Z for 20130728T000000Z
 * ISO for 2007-12-01T12:00:00.000Z
 * @param opt
 * @returns
 */

function getDateTimeStr(opt) {
  const {
    date = new Date(),
    type = 'Z'
  } = opt || {};

  if (type === 'ISO') {
    return date.toISOString();
  }

  const dateTime = date.toISOString().replace(/\..+/, '').replace(/-/g, '').replace(/:/g, '') + 'Z';
  return dateTime;
}

const defaultEmptyMethodMap = {
  getBucketCustomDomain: true,
  getBucketIntelligenttiering: true,
  getBucketInventory: true,
  listBucketInventory: true,
  getBucketMirrorBack: true,
  getBucketNotification: true,
  getBucketPolicy: true,
  getBucketRealTimeLog: true,
  getBucketReplication: true,
  getBucketTagging: true,
  getBucketWebsite: true
};
function handleEmptyServerError(err, opts) {
  const {
    enableCatchEmptyServerError,
    methodKey,
    defaultResponse
  } = opts;

  if (err instanceof TosServerError) {
    if (enableCatchEmptyServerError) {
      if (err.statusCode === 404) {
        return getNormalDataFromError(defaultResponse, err);
      }
    } // 在本次更改前已经有一些接口对404做了catch处理，在不显式声明enableCatchEmptyServerError的情况下，保持原样，不做break change
    else if (enableCatchEmptyServerError === undefined) {
      if (err.statusCode === 404 && defaultEmptyMethodMap[methodKey]) {
        return getNormalDataFromError(defaultResponse, err);
      }
    }
  }

  throw err;
}

async function putBucketPolicy(input) {
  if ((this.opts.enableOptimizeMethodBehavior || this.opts.enableOptimizeMethodBehavior === undefined) && !input.policy.Statement.length) {
    return deleteBucketPolicy.call(this, input.bucket);
  }

  const res = await this.fetchBucket(input.bucket, 'PUT', {
    policy: ''
  }, {}, input.policy, {
    needMd5: true
  });
  return res;
}
async function getBucketPolicy(bucket) {
  try {
    const res = await this.fetchBucket(bucket, 'GET', {
      policy: ''
    }, {});
    res.data.Statement.forEach(it => {
      const arrayProp = makeArrayProp(it);
      Object.keys(it.Condition || {}).forEach(key => {
        Object.keys(it.Condition[key]).forEach(key2 => {
          arrayProp(`Condition["${key}"]["${key2}"]`);
        });
      });
    });
    return res;
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketPolicy',
      defaultResponse: {
        Statement: [],
        Version: '2012-10-17'
      }
    });
  }
}
async function deleteBucketPolicy(bucket) {
  return this.fetchBucket(bucket, 'DELETE', {
    policy: ''
  }, {});
}

async function getBucketVersioning(bucket) {
  return this.fetchBucket(bucket, 'GET', {
    versioning: ''
  }, {});
}
async function putBucketVersioning(input) {
  return this.fetchBucket(input.bucket, 'PUT', {
    versioning: ''
  }, {}, {
    Status: input.status
  });
}

function preSignedPolicyURL(input) {
  const normalizedInput = normalizeInput.call(this, input);
  validateConditions(input.conditions);
  const endpoint = input.alternativeEndpoint || (input.isCustomDomain ? this.opts.endpoint : `${normalizedInput.bucket}.${this.opts.endpoint}`);
  const baseURL = `http${this.opts.secure ? 's' : ''}://${endpoint}`;
  const query = this.getSignatureQuery({
    bucket: normalizedInput.bucket,
    expires: normalizedInput.expires,
    policy: {
      conditions: normalizedInput.conditions
    }
  });
  const queryStr = obj2QueryStr(query);

  const getSignedURLForList = additionalQuery => {
    const str2 = obj2QueryStr(additionalQuery);
    const q = [queryStr, str2].filter(Boolean).join('&');
    return `${baseURL}?${q}`;
  };

  const getSignedURLForGetOrHead = (key, additionalQuery) => {
    const str2 = obj2QueryStr(additionalQuery);
    const q = [queryStr, str2].filter(Boolean).join('&'); // keep   '/'

    const keyPath = key.split('/').map(it => encodeURIComponent(it)).join('/');
    return `${baseURL}/${keyPath}?${q}`;
  };

  return {
    getSignedURLForList,
    getSignedURLForGetOrHead,
    signedQuery: queryStr
  };
}

function normalizeInput(input) {
  const actualBucket = input.bucket || this.opts.bucket;
  const defaultExpires = 3600;

  if (!actualBucket) {
    throw new TosClientError('Must provide bucket param');
  }

  validateConditions(input.conditions);
  const normalizedConditions = input.conditions.map(it => [it.operator || 'eq', '$key', it.value]);
  normalizedConditions.push(['eq', '$bucket', actualBucket]);
  return {
    bucket: actualBucket,
    expires: input.expires || defaultExpires,
    conditions: normalizedConditions
  };
}

function validateConditions(conditions) {
  if (conditions.length < 1) {
    throw new TosClientError('The `conditions` field of `PreSignedPolicyURLInput` must has one item at least');
  }

  for (const it of conditions) {
    if (it.key !== 'key') {
      throw new TosClientError("The `key` field of `PolicySignatureCondition` must be `'key'`");
    }

    if (it.operator && it.operator !== 'eq' && it.operator !== 'starts-with') {
      throw new TosClientError("The `operator` field of `PolicySignatureCondition` must be `'eq'` or `'starts-with'`");
    }
  }
}

async function getBucketLocation(input) {
  const {
    bucket
  } = input;
  return this.fetchBucket(bucket, 'GET', {
    location: ''
  }, {});
}

async function getBucketCORS(input) {
  try {
    const {
      bucket
    } = input;
    return await this.fetchBucket(bucket, 'GET', {
      cors: ''
    }, {});
  } catch (error) {
    return handleEmptyServerError(error, {
      defaultResponse: {
        CORSRules: []
      },
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketCORS'
    });
  }
}
async function putBucketCORS(input) {
  const {
    bucket,
    CORSRules
  } = input;

  if (this.opts.enableOptimizeMethodBehavior && !CORSRules.length) {
    return deleteBucketCORS.call(this, {
      bucket
    });
  }

  return this.fetchBucket(bucket, 'PUT', {
    cors: ''
  }, {}, {
    CORSRules
  });
}
async function deleteBucketCORS(input) {
  const {
    bucket
  } = input;
  return this.fetchBucket(bucket, 'DELETE', {
    cors: ''
  }, {});
}

async function putBucketLifecycle(input) {
  const {
    bucket,
    rules
  } = input;

  if (this.opts.enableOptimizeMethodBehavior && !rules.length) {
    return deleteBucketLifecycle.call(this, {
      bucket
    });
  }

  const headers = {};
  fillRequestHeaders({ ...input,
    headers
  }, ['allowSameActionOverlap']);
  return this.fetchBucket(bucket, 'PUT', {
    lifecycle: ''
  }, headers, {
    Rules: rules
  });
}
async function getBucketLifecycle(input) {
  try {
    const {
      bucket
    } = input;
    return await this.fetchBucket(bucket, 'GET', {
      lifecycle: ''
    }, {}, {}, {
      handleResponse: res => {
        return {
          AllowSameActionOverlap: res.headers['x-tos-allow-same-action-overlap'],
          Rules: res.data.Rules
        };
      }
    });
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketLifecycle',
      defaultResponse: {
        Rules: []
      }
    });
  }
}
async function deleteBucketLifecycle(input) {
  const {
    bucket
  } = input;
  return this.fetchBucket(bucket, 'DELETE', {
    lifecycle: ''
  }, {});
}

async function putBucketEncryption(input) {
  const {
    bucket,
    rule
  } = input;
  return this.fetchBucket(bucket, 'PUT', {
    encryption: ''
  }, {
    'Content-MD5': hashMd5(JSON.stringify({
      Rule: rule
    }), 'base64')
  }, {
    Rule: rule
  });
}
async function getBucketEncryption(input) {
  const {
    bucket
  } = input;
  return this.fetchBucket(bucket, 'GET', {
    encryption: ''
  }, {});
}
async function deleteBucketEncryption(input) {
  const {
    bucket
  } = input;
  return this.fetchBucket(bucket, 'DELETE', {
    encryption: ''
  }, {});
}

const CommonQueryKey = 'mirror';
async function putBucketMirrorBack(input) {
  const {
    bucket,
    rules
  } = input;

  if (this.opts.enableOptimizeMethodBehavior && !rules.length) {
    return deleteBucketMirrorBack.call(this, {
      bucket
    });
  }

  return this.fetchBucket(bucket, 'PUT', {
    [CommonQueryKey]: ''
  }, {}, {
    Rules: rules
  });
}
async function getBucketMirrorBack(input) {
  const {
    bucket
  } = input;

  try {
    return await this.fetchBucket(bucket, 'GET', {
      [CommonQueryKey]: ''
    }, {});
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketMirrorBack',
      defaultResponse: {
        Rules: []
      }
    });
  }
}
async function deleteBucketMirrorBack(input) {
  const {
    bucket
  } = input;
  return this.fetchBucket(bucket, 'DELETE', {
    [CommonQueryKey]: ''
  }, {});
}

const CommonQueryKey$1 = 'tagging';
async function putObjectTagging(input) {
  const {
    tagSet,
    versionId
  } = input;
  const headers = normalizeHeadersKey({
    versionId
  });
  return this._fetchObject(input, 'PUT', {
    [CommonQueryKey$1]: '',
    ...headers
  }, {}, {
    TagSet: tagSet
  });
}
async function getObjectTagging(input) {
  const {
    versionId
  } = input;
  const headers = normalizeHeadersKey({
    versionId
  });
  const res = await this._fetchObject(input, 'GET', {
    [CommonQueryKey$1]: '',
    ...headers
  }, {});
  makeArrayProp(res.data.TagSet)('Tags');
  return res;
}
async function deleteObjectTagging(input) {
  const {
    versionId
  } = input;
  const headers = normalizeHeadersKey({
    versionId
  });
  return this._fetchObject(input, 'DELETE', {
    [CommonQueryKey$1]: '',
    ...headers
  }, {});
}

const CommonQueryKey$2 = 'replication';
async function putBucketReplication(input) {
  const {
    bucket,
    rules,
    role
  } = input;

  if (this.opts.enableOptimizeMethodBehavior && !rules.length) {
    return deleteBucketReplication.call(this, {
      bucket
    });
  }

  return this.fetchBucket(bucket, 'PUT', {
    [CommonQueryKey$2]: ''
  }, {}, {
    Role: role,
    Rules: rules
  });
}
async function getBucketReplication(input) {
  const {
    bucket,
    progress,
    ruleId
  } = input;
  const query = {
    [CommonQueryKey$2]: '',
    progress: progress || ''
  };

  if (ruleId != null) {
    query['rule-id'] = `${ruleId}`;
  }

  try {
    return await this.fetchBucket(bucket, 'GET', query, {});
  } catch (err) {
    return handleEmptyServerError(err, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketReplication',
      defaultResponse: {
        Rules: [],
        Role: ''
      }
    });
  }
}
async function deleteBucketReplication(input) {
  const {
    bucket
  } = input;
  return this.fetchBucket(bucket, 'DELETE', {
    [CommonQueryKey$2]: ''
  }, {});
}

const CommonQueryKey$3 = 'website';
async function putBucketWebsite(input) {
  const {
    bucket,
    ...otherProps
  } = input;
  const body = convertNormalCamelCase2Upper(otherProps);
  return this.fetchBucket(bucket, 'PUT', {
    [CommonQueryKey$3]: ''
  }, {}, { ...body
  });
}
async function getBucketWebsite(input) {
  const {
    bucket
  } = input;

  try {
    return this.fetchBucket(bucket, 'GET', {
      [CommonQueryKey$3]: ''
    }, {});
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketWebsite',
      defaultResponse: {
        RoutingRules: []
      }
    });
  }
}
async function deleteBucketWebsite(input) {
  const {
    bucket
  } = input;
  return this.fetchBucket(bucket, 'DELETE', {
    [CommonQueryKey$3]: ''
  }, {});
}

const CommonQueryKey$4 = 'notification';
/**
 * @deprecated use PutBucketNotificationType2 instead
 */

async function putBucketNotification(input) {
  const {
    bucket,
    ...otherProps
  } = input;
  const body = convertNormalCamelCase2Upper(otherProps);
  return this.fetchBucket(bucket, 'PUT', {
    [CommonQueryKey$4]: ''
  }, {}, { ...body
  });
}
/**
 * @deprecated use GetBucketNotificationType2 instead
 */

async function getBucketNotification(input) {
  const {
    bucket
  } = input;

  try {
    return await this.fetchBucket(bucket, 'GET', {
      [CommonQueryKey$4]: ''
    }, {});
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketNotification',
      defaultResponse: {
        CloudFunctionConfigurations: [],
        RocketMQConfigurations: []
      }
    });
  }
}

const CommonQueryKey$5 = 'customdomain';
async function putBucketCustomDomain(input) {
  const {
    bucket,
    ...otherProps
  } = input;
  const body = convertNormalCamelCase2Upper(otherProps);
  return this.fetchBucket(bucket, 'PUT', {
    [CommonQueryKey$5]: ''
  }, {}, { ...body
  });
}
async function getBucketCustomDomain(input) {
  try {
    const {
      bucket
    } = input;
    return await this.fetchBucket(bucket, 'GET', {
      [CommonQueryKey$5]: ''
    }, {});
  } catch (error) {
    return handleEmptyServerError(error, {
      defaultResponse: {
        CustomDomainRules: []
      },
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketCustomDomain'
    });
  }
}
async function deleteBucketCustomDomain(input) {
  const {
    bucket,
    customDomain
  } = input;
  return this.fetchBucket(bucket, 'DELETE', {
    customdomain: customDomain
  }, {});
}

const CommonQueryKey$6 = 'realtimeLog';
async function putBucketRealTimeLog(input) {
  const {
    bucket,
    ...otherProps
  } = input;
  const body = convertNormalCamelCase2Upper(otherProps);
  return this.fetchBucket(bucket, 'PUT', {
    [CommonQueryKey$6]: ''
  }, {}, { ...body
  });
}
async function getBucketRealTimeLog(input) {
  const {
    bucket
  } = input;

  try {
    return await this.fetchBucket(bucket, 'GET', {
      [CommonQueryKey$6]: ''
    }, {});
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketRealTimeLog',
      defaultResponse: {}
    });
  }
}
async function deleteBucketRealTimeLog(input) {
  const {
    bucket
  } = input;
  return this.fetchBucket(bucket, 'DELETE', {
    [CommonQueryKey$6]: ''
  }, {});
}

/**
 * 清单文件导出周期
 */

var ScheduleFrequency;

(function (ScheduleFrequency) {
  /** 按天 */
  ScheduleFrequency["Daily"] = "Daily";
  /** 按周 */

  ScheduleFrequency["Weekly"] = "Weekly";
})(ScheduleFrequency || (ScheduleFrequency = {}));
/**
 * 清单包含Object版本信息值
 */


var IncludedObjectVersions;

(function (IncludedObjectVersions) {
  /** 全部 */
  IncludedObjectVersions["All"] = "All";
  /** 当前版本 */

  IncludedObjectVersions["Current"] = "Current";
})(IncludedObjectVersions || (IncludedObjectVersions = {}));
/**
 * 清单配置项
 */


var InventoryOptionalFields;

(function (InventoryOptionalFields) {
  /** Object的大小 */
  InventoryOptionalFields["Size"] = "Size";
  /** Object的最后修改时间 */

  InventoryOptionalFields["LastModifiedDat"] = "LastModifiedDate";
  /** 标识Object的内容 */

  InventoryOptionalFields["ETag"] = "ETag";
  /** Object的存储类型 */

  InventoryOptionalFields["StorageClass"] = "StorageClass";
  /** 是否为通过分片上传的Object */

  InventoryOptionalFields["IsMultipartUploaded"] = "IsMultipartUploaded";
  /** Object是否加密 */

  InventoryOptionalFields["EncryptionStatus"] = "EncryptionStatus";
  InventoryOptionalFields["CRC64"] = "CRC64";
  /** crr复制状态 */

  InventoryOptionalFields["ReplicationStatus"] = "ReplicationStatus";
})(InventoryOptionalFields || (InventoryOptionalFields = {}));
/**
 * 获取桶清单详情信息
 */


async function getBucketInventory(req) {
  try {
    const res = await this.fetchBucket(req.bucket, 'GET', {
      inventory: '',
      id: req.id
    }, {});
    return res;
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketInventory',
      defaultResponse: undefined
    });
  }
}
/**
 * 分页获取桶清单信息
 */

async function listBucketInventory(req) {
  const params = {
    inventory: '',
    ...(req.continuationToken ? {
      'continuation-token': req.continuationToken
    } : null)
  };

  try {
    const res = await this.fetchBucket(req.bucket, 'GET', params, {});
    return res;
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'listBucketInventory',
      defaultResponse: {
        InventoryConfigurations: []
      }
    });
  }
}
/**
 * 删除桶清单
 */

async function deleteBucketInventory(req) {
  return this.fetchBucket(req.bucket, 'DELETE', {
    inventory: '',
    id: req.id
  }, {});
}
/**
 * 更新桶清单
 */

function putBucketInventory(req) {
  return this.fetchBucket(req.bucket, 'PUT', {
    inventory: '',
    id: req.inventoryConfiguration.Id
  }, {}, req.inventoryConfiguration);
}

/**
 *
 * @private unstable method
 * @description 创建批量任务
 * @param params
 * @returns
 */

async function createJob(params) {
  const {
    accountId,
    ...reset
  } = params;
  const data = convertNormalCamelCase2Upper(reset);
  const res = await this.fetch('POST', '/jobs', {}, {
    'x-tos-account-id': accountId
  }, { ...data
  });
  return res;
}
/**
 * @private unstable method
 * @description  获取批量任务列表
 * @param params
 * @returns
 */

async function listJobs(params) {
  const {
    accountId,
    maxResults = 1000,
    ...others
  } = params;
  const res = await this.fetch('GET', '/jobs', {
    maxResults,
    ...others
  }, {
    'x-tos-account-id': accountId
  }, {}, {
    axiosOpts: {
      paramsSerializer
    }
  });
  return res;
}
/**
 *
 * @private unstable method
 * @description 更新批量任务优先级
 * @param params
 * @returns
 */

async function updateJobPriority(params) {
  const {
    accountId,
    jobId: JobId,
    priority
  } = params;
  const res = await this.fetch('POST', `/jobs/${JobId}/priority`, {
    priority
  }, {
    'x-tos-account-id': accountId
  }, {}, {
    needMd5: true
  });
  return res;
}
/**
 *
 * @private unstable method
 * @description 更新批量任务优先级
 * @param params
 * @returns
 */

async function updateJobStatus(params) {
  const {
    accountId,
    jobId: JobId,
    requestedJobStatus,
    statusUpdateReason
  } = params;
  const res = await this.fetch('POST', `/jobs/${JobId}/status`, {
    requestedJobStatus,
    statusUpdateReason
  }, {
    'x-tos-account-id': accountId
  }, {}, {
    needMd5: true
  });
  return res;
}
/**
 *
 * @private unstable method
 * @description 删除批量任务
 * @param params
 * @returns
 */

async function deleteJob(params) {
  const {
    accountId,
    JobId
  } = params;
  const res = await this.fetch('DELETE', `/jobs/${JobId}`, {}, {
    'x-tos-account-id': accountId
  }, {});
  return res;
}
/**
 *
 * @private unstable method
 * @description 获取批量任务详情
 * @param params
 * @returns
 */

async function describeJob(params) {
  const {
    accountId,
    JobId
  } = params;
  const res = await this.fetch('GET', `/jobs/${JobId}`, {}, {
    'x-tos-account-id': accountId
  }, {});
  return res;
}

/**
 * @private unstable method
 */

async function putBucketTagging(input) {
  const res = await this.fetchBucket(input.bucket, 'PUT', {
    tagging: ''
  }, {}, input.tagging, {
    needMd5: true
  });
  return res;
}
/**
 * @private unstable method
 */

async function getBucketTagging({
  bucket
}) {
  try {
    const res = await this.fetchBucket(bucket, 'GET', {
      tagging: ''
    }, {});
    return res;
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketTagging',
      defaultResponse: {
        TagSet: {
          Tags: []
        }
      }
    });
  }
}
/**
 * @private unstable method
 */

async function deleteBucketTagging({
  bucket
}) {
  return this.fetchBucket(bucket, 'DELETE', {
    tagging: ''
  }, {});
}

/**
 * @private unstable method
 */
async function putBucketPayByTraffic(input) {
  const res = await this.fetchBucket(input.bucket, 'PUT', {
    payByTraffic: ''
  }, {}, input.payByTraffic);
  return res;
}
/**
 * @private unstable method
 */

async function getBucketPayByTraffic({
  bucket
}) {
  const res = await this.fetchBucket(bucket, 'GET', {
    payByTraffic: ''
  }, {});
  return res;
}

/**
 * @private unstable method
 */

async function getImageStyleBriefInfo(req) {
  const {
    bucket
  } = req;

  try {
    const res = await this.fetchBucket(bucket, 'GET', {
      imageStyleBriefInfo: ''
    }, {});
    return res;
  } catch (err) {
    if (err instanceof TosServerError) {
      if (err.statusCode === 404) {
        return this.getNormalDataFromError({
          BucketName: bucket,
          ImageStyleBriefInfo: []
        }, err);
      }
    }

    throw err;
  }
}
/**
 * @private unstable method
 */

async function getBucketImageStyleList(bucket) {
  try {
    const res = await this.fetchBucket(bucket, 'GET', {
      imageStyle: ''
    }, {});
    return res;
  } catch (err) {
    if (err instanceof TosServerError) {
      if (err.statusCode === 404) {
        return this.getNormalDataFromError({
          ImageStyles: []
        }, err);
      }
    }

    throw err;
  }
}
/**
 * @private unstable method
 */

async function getBucketImageStyleListByName(req) {
  try {
    const {
      bucket,
      styleName
    } = req;
    const res = await this.fetchBucket(bucket, 'GET', {
      imageStyleContent: '',
      styleName
    }, {});
    return res;
  } catch (err) {
    if (err instanceof TosServerError) {
      if (err.statusCode === 404) {
        return this.getNormalDataFromError({
          ImageStyles: []
        }, err);
      }
    }

    throw err;
  }
}
/**
 * @private unstable method
 */

async function getBucketImageStyle(bucket, styleName) {
  try {
    const res = await this.fetchBucket(bucket, 'GET', {
      imageStyle: '',
      styleName
    }, {});
    return res;
  } catch (err) {
    if (err instanceof TosServerError) {
      if (err.statusCode === 404) {
        return this.getNormalDataFromError(null, err);
      }
    }

    throw err;
  }
}
/**
 * @private unstable method
 */

async function putBucketImageStyle(req) {
  const {
    bucket,
    styleName,
    content,
    styleObjectPrefix
  } = req;

  try {
    const res = await this.fetchBucket(bucket, 'PUT', {
      imageStyle: '',
      styleName,
      styleObjectPrefix
    }, {}, {
      Content: content
    });
    return res;
  } catch (err) {
    if (err instanceof TosServerError) {
      if (err.statusCode === 404) {
        return this.getNormalDataFromError(null, err);
      }
    }

    throw err;
  }
}
/**
 * @private unstable method
 */

async function deleteBucketImageStyle(req) {
  const {
    styleName,
    styleObjectPrefix,
    bucket
  } = req;

  try {
    const res = await this.fetchBucket(bucket, 'DELETE', {
      imageStyle: '',
      styleName,
      styleObjectPrefix
    }, {});
    return res;
  } catch (err) {
    if (err instanceof TosServerError) {
      if (err.statusCode === 404) {
        return this.getNormalDataFromError(null, err);
      }
    }

    throw err;
  }
}
/**
 * @private unstable method
 */

async function putBucketImageProtect(bucket, data) {
  try {
    const res = await this.fetchBucket(bucket, 'PUT', {
      originalImageProtect: ''
    }, {}, data);
    return res;
  } catch (err) {
    if (err instanceof TosServerError) {
      if (err.statusCode === 404) {
        return this.getNormalDataFromError(null, err);
      }
    }

    throw err;
  }
}
/**
 * @private unstable method
 */

async function getBucketImageProtect(bucket) {
  try {
    const res = await this.fetchBucket(bucket, 'GET', {
      originalImageProtect: ''
    }, {});
    return res;
  } catch (err) {
    if (err instanceof TosServerError) {
      if (err.statusCode === 404) {
        return this.getNormalDataFromError(null, err);
      }
    }

    throw err;
  }
}
/**
 * @private unstable method
 */

async function putBucketImageStyleSeparator(req) {
  const {
    bucket,
    Separator,
    SeparatorSuffix
  } = req;

  try {
    const res = await this.fetchBucket(bucket, 'PUT', {
      imageStyleSeparator: ''
    }, {}, {
      Separator,
      SeparatorSuffix
    });
    return res;
  } catch (err) {
    if (err instanceof TosServerError) {
      if (err.statusCode === 404) {
        return this.getNormalDataFromError(null, err);
      }
    }

    throw err;
  }
}
/**
 * @private unstable method
 */

async function getBucketImageStyleSeparator(bucket) {
  try {
    const res = await this.fetchBucket(bucket, 'GET', {
      imageStyleSeparator: ''
    }, {});
    return res;
  } catch (err) {
    if (err instanceof TosServerError) {
      if (err.statusCode === 404) {
        return this.getNormalDataFromError(null, err);
      }
    }

    throw err;
  }
}

async function getBucketIntelligenttiering(bucket) {
  try {
    const res = await this.fetchBucket(bucket, 'GET', {
      intelligenttiering: ''
    }, {});
    return res;
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketIntelligenttiering',
      defaultResponse: {}
    });
  }
}

const CommonQueryKey$7 = 'rename';
async function putBucketRename(input) {
  const {
    bucket,
    ...otherProps
  } = input;
  const body = convertNormalCamelCase2Upper(otherProps);
  return this.fetchBucket(bucket, 'PUT', {
    [CommonQueryKey$7]: ''
  }, {}, { ...body
  });
}
async function getBucketRename(input) {
  const {
    bucket
  } = input;
  return await this.fetchBucket(bucket, 'GET', {
    [CommonQueryKey$7]: ''
  }, {});
}
async function deleteBucketRename(input) {
  const {
    bucket
  } = input;
  return this.fetchBucket(bucket, 'DELETE', {
    [CommonQueryKey$7]: ''
  }, {});
}

async function restoreObject(input) {
  const {
    bucket,
    key,
    versionId,
    ...otherProps
  } = input;
  const query = {
    restore: ''
  };

  if (versionId) {
    query.versionId = versionId;
  }

  const body = convertNormalCamelCase2Upper(otherProps);
  return this._fetchObject(input, 'POST', query, {}, body);
}

/**
 * @private unstable method
 * @description 获取数据透视列表
 * @param params
 * @returns
 */

async function listStorageLens(params) {
  const {
    accountId
  } = params;
  const res = await this.fetch('GET', '/storagelens', {}, {
    'x-tos-account-id': accountId
  }, {}, {
    axiosOpts: {
      paramsSerializer
    }
  });
  return res;
}
/**
 * @private unstable method
 * @description 删除数据透视记录
 * @param params
 * @returns
 */

async function deleteStorageLens(params) {
  const {
    accountId,
    Id
  } = params;
  const res = await this.fetch('DELETE', `/storagelens`, {
    id: Id
  }, {
    'x-tos-account-id': accountId
  }, {}, {
    needMd5: true
  });
  return res;
}
/**
 * @private unstable method
 * @description 获取数据透视详情
 * @param params
 * @returns
 */

async function getStorageLens(params) {
  const {
    accountId,
    Id
  } = params;
  const res = await this.fetch('GET', `/storagelens`, {
    id: Id
  }, {
    'x-tos-account-id': accountId
  }, {}, {
    needMd5: true
  });
  return res;
}
/**
 * @private unstable method
 * @description 提交数据透视记录
 * @param params
 * @returns
 */

async function putStorageLens(params) {
  const {
    accountId,
    Id,
    ...rest
  } = params;
  const res = await this.fetch('PUT', `/storagelens`, {
    id: Id
  }, {
    'x-tos-account-id': accountId
  }, { ...rest,
    Id
  }, {
    needMd5: true
  });
  return res;
}

const CommonQueryKey$8 = 'notification_v2';
async function putBucketNotificationType2(input) {
  const {
    bucket,
    ...otherProps
  } = input;
  const body = convertNormalCamelCase2Upper(otherProps);
  return this.fetchBucket(bucket, 'PUT', {
    [CommonQueryKey$8]: ''
  }, {}, { ...body
  });
}
async function getBucketNotificationType2(input) {
  const {
    bucket
  } = input;

  try {
    return await this.fetchBucket(bucket, 'GET', {
      [CommonQueryKey$8]: ''
    }, {});
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketNotificationType2',
      defaultResponse: {
        Rules: []
      }
    });
  }
}

/**
 * @private unstable method
 */

async function putSymlink(input) {
  return _putSymlink.call(this, input);
}
async function _putSymlink(input) {
  const headers = input.headers = normalizeHeadersKey(input.headers);
  fillRequestHeaders(input, ['symLinkTargetKey', 'symLinkTargetBucket', 'forbidOverwrite', 'acl', 'storageClass', 'meta']);
  return this._fetchObject(input, 'PUT', {
    symlink: ''
  }, headers, undefined, {
    handleResponse(response) {
      const {
        headers
      } = response;
      return {
        VersionID: headers['x-tos-version-id']
      };
    }

  });
}

/**
 * @private unstable method
 */
async function getSymlink(input) {
  return _getSymlink.call(this, input);
}
async function _getSymlink(input) {
  const query = {
    symlink: ''
  };

  if (input.versionId) {
    query.versionId = input.versionId;
  }

  return this._fetchObject(input, 'GET', query, {}, undefined, {
    handleResponse: res => {
      const {
        headers
      } = res;
      return {
        VersionID: headers['x-tos-version-id'],
        SymlinkTargetKey: headers['x-tos-symlink-target'],
        SymlinkTargetBucket: headers['x-tos-symlink-bucket'],
        LastModified: headers['last-modified']
      };
    }
  });
}

const CommonQueryKey$9 = 'transferAcceleration';
/**
 * @private unstable
 */

async function putBucketTransferAcceleration(input) {
  const {
    bucket,
    ...otherProps
  } = input;
  const body = convertNormalCamelCase2Upper(otherProps);
  return this.fetchBucket(bucket, 'PUT', {
    [CommonQueryKey$9]: ''
  }, {}, { ...body
  });
}
/**
 * @private unstable
 */

async function getBucketTransferAcceleration(input) {
  try {
    const {
      bucket
    } = input;
    const headers = {};

    if (input.getStatus) {
      headers['x-tos-get-bucket-acceleration-status'] = 'true';
    }

    const res = await this.fetchBucket(bucket, 'GET', {
      [CommonQueryKey$9]: ''
    }, headers);
    return res;
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketTransferAcceleration',
      defaultResponse: {
        TransferAccelerationConfiguration: {
          Enabled: 'false',
          Status: exports.gN.Terminated
        }
      }
    });
  }
}

/**
 * @private unstable method
 */

async function putBucketAccessMonitor(input) {
  const {
    bucket,
    status
  } = input;
  return this.fetchBucket(bucket, 'PUT', {
    accessmonitor: ''
  }, {}, {
    Status: status
  });
}
/**
 * @private unstable method
 */

async function getBucketAccessMonitor(input) {
  try {
    const {
      bucket
    } = input;
    return await this.fetchBucket(bucket, 'GET', {
      accessmonitor: ''
    }, {});
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketAccessMonitor',
      defaultResponse: {}
    });
  }
}

var StringOp;

(function (StringOp) {
  StringOp["StringEquals"] = "StringEquals";
  StringOp["StringNotEquals"] = "StringNotEquals";
  StringOp["StringEqualsIgnoreCase"] = "StringEqualsIgnoreCase";
  StringOp["StringNotEqualsIgnoreCase"] = "StringNotEqualsIgnoreCase";
  StringOp["StringLike"] = "StringLike";
  StringOp["StringNotLike"] = "StringNotLike";
})(StringOp || (StringOp = {}));

var DateOp;

(function (DateOp) {
  DateOp["DateEquals"] = "DateEquals";
  DateOp["DateNotEquals"] = "DateNotEquals";
  DateOp["DateLessThan"] = "DateLessThan";
  DateOp["DateLessThanEquals"] = "DateLessThanEquals";
  DateOp["DateGreaterThan"] = "DateGreaterThan";
  DateOp["DateGreaterThanEquals"] = "DateGreaterThanEquals";
})(DateOp || (DateOp = {}));

var IpOp;

(function (IpOp) {
  IpOp["IpAddress"] = "IpAddress";
  IpOp["NotIpAddress"] = "NotIpAddress";
})(IpOp || (IpOp = {}));
/** 流控类别 */


var QuotaType;

(function (QuotaType) {
  /** 写Qps */
  QuotaType["WritesQps"] = "WritesQps";
  /** 读Qps */

  QuotaType["ReadsQps"] = "ReadsQps";
  /** list类Qps */

  QuotaType["ListQps"] = "ListQps";
  /** 写带宽 */

  QuotaType["WritesRate"] = "WritesRate";
  /** 读带宽 */

  QuotaType["ReadsRate"] = "ReadsRate";
})(QuotaType || (QuotaType = {}));
/**
 * @private unstable method
 * @description 拉取流控策略列表
 * @param {GetQosPolicyInput}
 * @returns {GetQosPolicyOutput}
 */


async function getQosPolicy(params) {
  const {
    accountId
  } = params;
  const res = await this.fetch('GET', '/qospolicy', {}, {
    'x-tos-account-id': accountId
  }, {}, {});
  return res;
}
/**
 * @private unstable method
 * @description 更新流控策略列表 覆盖全部 QosPolicy
 * @param {PutQosPolicyInput}
 */

async function putQosPolicy(params) {
  const {
    accountId,
    ...restParams
  } = params;
  const res = await this.fetch('PUT', '/qospolicy', {}, {
    'x-tos-account-id': accountId
  }, { ...restParams
  }, {});
  return res;
}
/**
 * @private unstable method
 * @description 拉取流控策略列表
 * @param {DeleteQosPolicyInput}
 */

async function deleteQosPolicy(params) {
  const {
    accountId
  } = params;
  const res = await this.fetch('DELETE', '/qospolicy', {}, {
    'x-tos-account-id': accountId
  }, {}, {});
  return res;
}

/**
 * @private unstable method
 */
async function createMultiRegionAccessPoint(input) {
  const {
    accountId,
    name,
    regions
  } = input;
  const res = await this.fetch('POST', '/mrap', {
    name
  }, {
    'x-tos-account-id': accountId
  }, {
    Name: name,
    Regions: regions
  }, {});
  return res;
}
/**
 * @private unstable method
 */

async function getMultiRegionAccessPoint(input) {
  const {
    name,
    accountId
  } = input;
  const res = await this.fetch('GET', '/mrap', {
    name
  }, {
    'x-tos-account-id': accountId
  }, {}, {});
  return res;
}
/**
 * @private unstable method
 */

async function listMultiRegionAccessPoints(input) {
  const {
    accountId,
    ...nextQuery
  } = input;
  const res = await this.fetch('GET', '/mrap', { ...nextQuery
  }, {
    'x-tos-account-id': accountId
  }, {}, {});
  return res;
}
/**
 * @private unstable method
 */

async function getMultiRegionAccessPointRoutes(input) {
  const {
    accountId,
    alias
  } = input;
  const res = await this.fetch('GET', '/mrap/routes', {
    alias
  }, {
    'x-tos-account-id': accountId
  });
  return res;
}
async function deleteMultiRegionAccessPoint(input) {
  const {
    name,
    accountId
  } = input;
  const res = await this.fetch('DELETE', '/mrap', {
    name
  }, {
    'x-tos-account-id': accountId
  });
  return res;
}
async function submitMultiRegionAccessPointRoutes(input) {
  const {
    routes,
    accountId,
    alias
  } = input;
  const res = await this.fetch('PATCH', '/mrap/routes', {
    alias
  }, {
    'x-tos-account-id': accountId
  }, {
    Routes: routes
  });
  return res;
}

/**
 * @private unstable method
 */

const putMultiRegionAccessPointMirrorBack = async function (input) {
  const {
    accountId,
    alias,
    rules
  } = input;

  if (this.opts.enableOptimizeMethodBehavior && !rules.length) {
    return deleteMultiRegionAccessPointMirrorBack.call(this, {
      accountId,
      alias
    });
  }

  const res = await this.fetch('PUT', '/mrap/mirror', {
    alias
  }, {
    'x-tos-account-id': accountId
  }, {
    Rules: rules
  }, {
    handleResponse() {
      return {};
    }

  });
  return res;
};
/**
 * @private unstable method
 */

const getMultiRegionAccessPointMirrorBack = async function (input) {
  const {
    accountId,
    alias
  } = input;

  try {
    const res = await this.fetch('GET', '/mrap/mirror', {
      alias
    }, {
      'x-tos-account-id': accountId
    }, {}, {});
    const arrayProp = makeArrayProp(res.data);
    arrayProp('Rules');
    return res;
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getMultiRegionAccessPointMirrorBack',
      defaultResponse: {
        Rules: []
      }
    });
  }
};
/**
 * @private unstable method
 */

const deleteMultiRegionAccessPointMirrorBack = async function (input) {
  const {
    accountId,
    alias
  } = input;
  const res = await this.fetch('DELETE', '/mrap/mirror', {
    alias
  }, {
    'x-tos-account-id': accountId
  }, {}, {
    handleResponse() {
      return {};
    }

  });
  return res;
};

/**
 * @private unstable
 */

async function putBucketPrivateM3U8(input) {
  const {
    bucket,
    enable
  } = input;
  return await this.fetchBucket(bucket, 'PUT', {
    privateM3U8: ''
  }, {}, {
    Enable: enable
  });
}
/**
 * @private unstable
 */

async function getBucketPrivateM3U8(input) {
  const {
    bucket
  } = input;

  try {
    return await this.fetchBucket(bucket, 'GET', {
      privateM3U8: ''
    }, {});
  } catch (error) {
    return handleEmptyServerError(error, {
      enableCatchEmptyServerError: this.opts.enableOptimizeMethodBehavior,
      methodKey: 'getBucketPrivateM3U8',
      defaultResponse: {
        Enable: false
      }
    });
  }
}

const CommonQueryKey$a = 'trash';
async function putBucketTrash(input) {
  const {
    bucket,
    ...otherProps
  } = input;
  const body = convertNormalCamelCase2Upper(otherProps);
  return this.fetchBucket(bucket, 'PUT', {
    [CommonQueryKey$a]: ''
  }, {}, { ...body
  });
}
async function getBucketTrash(input) {
  const {
    bucket
  } = input;
  return await this.fetchBucket(bucket, 'GET', {
    [CommonQueryKey$a]: ''
  }, {});
}

class InnerClient extends TOSBase {
  constructor(...args) {
    super(...args);
    this.createBucket = createBucket;
    this.headBucket = headBucket;
    this.deleteBucket = deleteBucket;
    this.listBuckets = listBuckets;
    this.getBucketLocation = getBucketLocation;
    this.putBucketStorageClass = putBucketStorageClass;
    this.getBucketAcl = getBucketAcl;
    this.putBucketAcl = putBucketAcl;
    this.getBucketPolicy = getBucketPolicy;
    this.putBucketPolicy = putBucketPolicy;
    this.deleteBucketPolicy = deleteBucketPolicy;
    this.getBucketVersioning = getBucketVersioning;
    this.putBucketVersioning = putBucketVersioning;
    this.getBucketCORS = getBucketCORS;
    this.putBucketCORS = putBucketCORS;
    this.deleteBucketCORS = deleteBucketCORS;
    this.putBucketLifecycle = putBucketLifecycle;
    this.getBucketLifecycle = getBucketLifecycle;
    this.deleteBucketLifecycle = deleteBucketLifecycle;
    this.putBucketEncryption = putBucketEncryption;
    this.getBucketEncryption = getBucketEncryption;
    this.deleteBucketEncryption = deleteBucketEncryption;
    this.putBucketMirrorBack = putBucketMirrorBack;
    this.getBucketMirrorBack = getBucketMirrorBack;
    this.deleteBucketMirrorBack = deleteBucketMirrorBack;
    this.putBucketReplication = putBucketReplication;
    this.getBucketReplication = getBucketReplication;
    this.deleteBucketReplication = deleteBucketReplication;
    this.putBucketWebsite = putBucketWebsite;
    this.getBucketWebsite = getBucketWebsite;
    this.deleteBucketWebsite = deleteBucketWebsite;
    this.putBucketNotification = putBucketNotification;
    this.getBucketNotification = getBucketNotification;
    this.putBucketCustomDomain = putBucketCustomDomain;
    this.getBucketCustomDomain = getBucketCustomDomain;
    this.deleteBucketCustomDomain = deleteBucketCustomDomain;
    this.putBucketRealTimeLog = putBucketRealTimeLog;
    this.getBucketRealTimeLog = getBucketRealTimeLog;
    this.deleteBucketRealTimeLog = deleteBucketRealTimeLog;
    this.getBucketInventory = getBucketInventory;
    this.listBucketInventory = listBucketInventory;
    this.putBucketInventory = putBucketInventory;
    this.deleteBucketInventory = deleteBucketInventory;
    this.putBucketTagging = putBucketTagging;
    this.getBucketTagging = getBucketTagging;
    this.deleteBucketTagging = deleteBucketTagging;
    this.putBucketPayByTraffic = putBucketPayByTraffic;
    this.getBucketPayByTraffic = getBucketPayByTraffic;
    this.getBucketImageStyle = getBucketImageStyle;
    this.getBucketImageStyleList = getBucketImageStyleList;
    this.getBucketImageStyleListByName = getBucketImageStyleListByName;
    this.getImageStyleBriefInfo = getImageStyleBriefInfo;
    this.deleteBucketImageStyle = deleteBucketImageStyle;
    this.putBucketImageStyle = putBucketImageStyle;
    this.putBucketImageStyleSeparator = putBucketImageStyleSeparator;
    this.putBucketImageProtect = putBucketImageProtect;
    this.getBucketImageProtect = getBucketImageProtect;
    this.getBucketImageStyleSeparator = getBucketImageStyleSeparator;
    this.putBucketRename = putBucketRename;
    this.getBucketRename = getBucketRename;
    this.deleteBucketRename = deleteBucketRename;
    this.putBucketTransferAcceleration = putBucketTransferAcceleration;
    this.getBucketTransferAcceleration = getBucketTransferAcceleration;
    this.copyObject = copyObject;
    this.resumableCopyObject = resumableCopyObject;
    this.deleteObject = deleteObject;
    this.deleteMultiObjects = deleteMultiObjects;
    this.getObject = getObject;
    this.getObjectV2 = getObjectV2;
    this.getObjectToFile = getObjectToFile;
    this.getObjectAcl = getObjectAcl;
    this.headObject = headObject;
    this.appendObject = appendObject;
    this.listObjects = listObjects;
    this.renameObject = renameObject;
    this.fetchObject = fetchObject;
    this.putFetchTask = putFetchTask;
    this.listObjectsType2 = listObjectsType2;
    this.listObjectVersions = listObjectVersions;
    this.putObject = putObject;
    this.putObjectFromFile = putObjectFromFile;
    this.putObjectAcl = putObjectAcl;
    this.setObjectMeta = setObjectMeta;
    this.createMultipartUpload = createMultipartUpload;
    this.uploadPart = uploadPart;
    this.uploadPartFromFile = uploadPartFromFile;
    this.completeMultipartUpload = completeMultipartUpload;
    this.abortMultipartUpload = abortMultipartUpload;
    this.uploadPartCopy = uploadPartCopy;
    this.listMultipartUploads = listMultipartUploads;
    this.listParts = listParts;
    this.downloadFile = downloadFile;
    this.putObjectTagging = putObjectTagging;
    this.getObjectTagging = getObjectTagging;
    this.deleteObjectTagging = deleteObjectTagging;
    this.listJobs = listJobs;
    this.createJob = createJob;
    this.deleteJob = deleteJob;
    this.describeJob = describeJob;
    this.updateJobStatus = updateJobStatus;
    this.updateJobPriority = updateJobPriority;
    this.restoreObject = restoreObject;
    this.uploadFile = uploadFile;
    this.getPreSignedUrl = getPreSignedUrl;
    this.calculatePostSignature = calculatePostSignature;
    this.preSignedPostSignature = calculatePostSignature;
    this.preSignedPolicyURL = preSignedPolicyURL;
    this.getBucketIntelligenttiering = getBucketIntelligenttiering;
    this.listStorageLens = listStorageLens;
    this.deleteStorageLens = deleteStorageLens;
    this.getStorageLens = getStorageLens;
    this.putStorageLens = putStorageLens;
    this.putBucketNotificationType2 = putBucketNotificationType2;
    this.getBucketNotificationType2 = getBucketNotificationType2;
    this.putSymlink = putSymlink;
    this.getSymlink = getSymlink;
    this.putBucketAccessMonitor = putBucketAccessMonitor;
    this.getBucketAccessMonitor = getBucketAccessMonitor;
    this.putQosPolicy = putQosPolicy;
    this.getQosPolicy = getQosPolicy;
    this.deleteQosPolicy = deleteQosPolicy;
    this.createMultiRegionAccessPoint = createMultiRegionAccessPoint;
    this.getMultiRegionAccessPoint = getMultiRegionAccessPoint;
    this.listMultiRegionAccessPoints = listMultiRegionAccessPoints;
    this.getMultiRegionAccessPointRoutes = getMultiRegionAccessPointRoutes;
    this.deleteMultiRegionAccessPoint = deleteMultiRegionAccessPoint;
    this.submitMultiRegionAccessPointRoutes = submitMultiRegionAccessPointRoutes;
    this.putMultiRegionAccessPointMirrorBack = putMultiRegionAccessPointMirrorBack;
    this.getMultiRegionAccessPointMirrorBack = getMultiRegionAccessPointMirrorBack;
    this.deleteMultiRegionAccessPointMirrorBack = deleteMultiRegionAccessPointMirrorBack;
    this.putBucketPrivateM3U8 = putBucketPrivateM3U8;
    this.getBucketPrivateM3U8 = getBucketPrivateM3U8;
    this.putBucketTrash = putBucketTrash;
    this.getBucketTrash = getBucketTrash;
  }

}

const CancelToken = axios.CancelToken; // for export

class TosClient extends InnerClient {}

TosClient.TosServerError = TosServerError;
TosClient.isCancel = isCancelError;
TosClient.CancelError = CancelError;
TosClient.TosServerCode = exports.Lm;
TosClient.TosClientError = TosClientError;
TosClient.CancelToken = CancelToken;
TosClient.ACLType = exports.ze;
TosClient.StorageClassType = exports.uT;
TosClient.MetadataDirectiveType = exports.FW;
TosClient.AzRedundancyType = exports.zj;
TosClient.PermissionType = exports.eZ;
TosClient.GranteeType = exports.dh;
TosClient.CannedType = exports.a4;
TosClient.HttpMethodType = exports.ug;
TosClient.LifecycleStatusType = exports.fL;
TosClient.StatusType = exports.XU;
TosClient.RedirectType = exports.zB;
TosClient.StorageClassInheritDirectiveType = exports.g;
TosClient.TierType = exports.Z4;
TosClient.VersioningStatusType = exports.Do;
TosClient.createDefaultRateLimiter = createDefaultRateLimiter$1;
TosClient.DataTransferType = exports.aB;
TosClient.UploadEventType = exports.KW;
TosClient.DownloadEventType = exports.Lk;
TosClient.ResumableCopyEventType = exports.IU;
TosClient.ReplicationStatusType = exports.Z5;
TosClient.AccessPointStatusType = exports.zL;
TosClient.TransferAccelerationStatusType = exports.gN;
TosClient.MRAPMirrorBackRedirectPolicyType = exports.VI;
TosClient.ShareLinkClient = ShareLinkClient;

__webpack_unused_export__ = CancelError;
__webpack_unused_export__ = CancelToken;
__webpack_unused_export__ = ShareLinkClient;
__webpack_unused_export__ = TosClient;
exports.TosClient = TosClient;
exports.TosClientError = TosClientError;
exports.TosServerError = TosServerError;
__webpack_unused_export__ = createDefaultRateLimiter$1;
__webpack_unused_export__ = TosClient;
__webpack_unused_export__ = isCancelError;
//# sourceMappingURL=tos.cjs.development.js.map


/***/ }),

/***/ 375:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;
function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}__webpack_unused_export__ = ({value:!0});var t,a=e(__nccwpck_require__(6029)),o=__nccwpck_require__(2203),n=e(__nccwpck_require__(1579)),i=e(__nccwpck_require__(4287)),r=e(__nccwpck_require__(9)),s=e(__nccwpck_require__(9896)),c=e(__nccwpck_require__(1943)),l=__nccwpck_require__(9023),p=__nccwpck_require__(2373),u=e(__nccwpck_require__(1541)),d=e(__nccwpck_require__(8554)),h=e(__nccwpck_require__(1400)),m=e(__nccwpck_require__(5314)),f=e(__nccwpck_require__(7784)),y=e(__nccwpck_require__(6982)),g=e(__nccwpck_require__(6928)),x=e(__nccwpck_require__(1020)),b=e(__nccwpck_require__(8611)),k=e(__nccwpck_require__(5692)),v=e(__nccwpck_require__(857));class T extends Error{constructor(e){const{data:t}=e;super(t.Message),this.code=void 0,this.data=void 0,this.statusCode=void 0,this.headers=void 0,this.requestId=void 0,this.id2=void 0,Object.setPrototypeOf(this,T.prototype),this.data=t,this.code=t.Code,this.statusCode=e.status,this.headers=e.headers,this.requestId=e.headers["x-tos-request-id"],this.id2=e.headers["x-tos-id-2"]}}(t=exports.Lm||(exports.Lm={})).NoSuchBucket="NoSuchBucket",t.NoSuchKey="NoSuchKey",t.AccessDenied="AccessDenied",t.MalformedAcl="MalformedAclError",t.UnexpectedContent="UnexpectedContent",t.InvalidRequest="InvalidRequest",t.MissingSecurityHeader="MissingSecurityHeader",t.InvalidArgument="InvalidArgument",t.EntityTooSmall="EntityTooSmall",t.InvalidBucketName="InvalidBucketName",t.BucketNotEmpty="BucketNotEmpty",t.TooManyBuckets="TooManyBuckets",t.BucketAlreadyExists="BucketAlreadyExists",t.MalformedBody="MalformedBody",t.NoSuchLifecycleConfiguration="NoSuchLifecycleConfiguration",t.ReplicationConfigurationNotFound="ReplicationConfigurationNotFoundError",t.InvalidLocationConstraint="InvalidLocationConstraint",t.AuthorizationQueryParametersError="AuthorizationQueryParametersError",t.RequestTimeTooSkewed="RequestTimeTooSkewed",t.SignatureDoesNotMatch="SignatureDoesNotMatch",t.RequestedRangeNotSatisfiable="Requested Range Not Satisfiable",t.PreconditionFailed="PreconditionFailed",t.BadDigest="BadDigest",t.InvalidDigest="InvalidDigest",t.EntityTooLarge="EntityTooLarge",t.UnImplemented="UnImplemented",t.MethodNotAllowed="MethodNotAllowed",t.InvalidAccessKeyId="InvalidAccessKeyId",t.InvalidSecurityToken="InvalidSecurityToken",t.ContentSHA256Mismatch="ContentSHA256Mismatch",t.ExceedQPSLimit="ExceedQPSLimit",t.ExceedRateLimit="ExceedRateLimit",t.NoSuchCORSConfiguration="NoSuchCORSConfiguration",t.NoSuchMirrorConfiguration="NoSuchMirrorConfiguration",t.NoSuchWebsiteConfiguration="NoSuchWebsiteConfiguration",t.MissingRequestBody="MissingRequestBodyError",t.BucketAlreadyOwnedByYou="BucketAlreadyOwnedByYou",t.NoSuchBucketPolicy="NoSuchBucketPolicy",t.PolicyTooLarge="PolicyTooLarge",t.MalformedPolicy="MalformedPolicy",t.InvalidKey="InvalidKey",t.MirrorFailed="MirrorFailed",t.Timeout="Timeout",t.OffsetNotMatched="OffsetNotMatched",t.NotAppendable="NotAppendable",t.ContextCanceled="ContextCanceled",t.InternalError="InternalError",t.TooManyRequests="TooManyRequests",t.TimeOut="TimeOut",t.ConcurrencyUpdateObjectLimit="ConcurrencyUpdateObjectLimit",t.DuplicateUpload="DuplicateUpload",t.DuplicateObject="DuplicateObject",t.InvalidVersionId="InvalidVersionId",t.StorageClassNotMatch="StorageClassNotMatch",t.UploadStatusNotUploading="UploadStatusNotUploading",t.PartSizeNotMatch="PartSizeNotMatch",t.NoUploadPart="NoUploadPart",t.PartsLenInvalid="PartsLenInvalid",t.PartsIdxSmall="PartsIdxSmall",t.PartSizeSmall="PartSizeSmall",t.PrefixNotNextKeyPrefix="PrefixNotNextKeyPrefix",t.InvalidPart="InvalidPart",t.InvalidPartOffset="InvalidPartOffset",t.MismatchObject="MismatchObject",t.UploadStatusMismatch="UploadStatusMismatch",t.CompletingStatusNoExpiration="CompletingStatusNoExpiration",t.Found="Found",t.InvalidRedirectLocation="InvalidRedirectLocation";class S extends Error{constructor(e){super(e),Object.setPrototypeOf(this,S.prototype)}}class w extends Error{constructor(e){super(e),Object.setPrototypeOf(this,w.prototype)}}const C=s.createWriteStream,E=s.createReadStream,R=l.promisify(s.rename),P=l.promisify(s.stat),B=l.promisify(s.writeFile),I=l.promisify(s.unlink),D=l.promisify(s.readFile),M=async e=>{try{await c.access(e)}catch(t){await c.mkdir(e,{recursive:!0})}},O=e=>t=>{if(null==e||"object"!=typeof e)return;const a=n(e,t);Array.isArray(a)||i(e,t,null==a?[]:[a])},A=e=>{const t=a=>Array.isArray(a)?a.map(e=>t(e)):"string"==typeof a?e(a):"object"==typeof a&&null!=a?Object.keys(a).reduce((e,o)=>(e[t(o)]=a[o],e),{}):a;return t},j=A(e=>e.replace(/[A-Z]/g,"-$&").toLowerCase()),_=A(e=>e[0].toUpperCase()+e.slice(1)),L=e=>{const t=[];return Object.keys(e).sort().forEach(a=>{t.push(`${encodeURIComponent(a)}=${encodeURIComponent(e[a])}`)}),t.join("&")},U=e=>{const t=e||{},a={};Object.keys(t).forEach(e=>{null!=t[e]&&(a[e]=t[e])});const o={};return Object.keys(a).forEach(e=>{const t=e.toLowerCase();o[t]=a[e]}),o},N=e=>("string"==typeof e&&(e={url:e}),e);async function z(e){try{return[null,await e]}catch(e){return[e,null]}}function F(e){return"undefined"!=typeof Blob&&e instanceof Blob}function q(e){return"undefined"!=typeof Buffer&&e instanceof Buffer}function K(e){return e instanceof o.Readable}function $(e){return e?Object.keys(e).map(t=>{const a=""+e[t];return`${encodeURIComponent(t)}=${encodeURIComponent(a)}`}).join("&"):""}function H(e){return e instanceof w}const G=e=>"string"==typeof e?e:e.toUTCString(),V={projectName:"x-tos-project-name",encodingType:"encoding-type",cacheControl:"cache-control",contentDisposition:"content-disposition",contentLength:"content-length",contentMD5:"content-md5",contentSHA256:"x-tos-content-sha256",contentEncoding:"content-encoding",contentLanguage:"content-language",contentType:"content-type",expires:["expires",e=>e.toUTCString()],range:"range",ifMatch:"if-match",ifModifiedSince:["if-modified-since",G],ifNoneMatch:"if-none-match",ifUnmodifiedSince:["if-unmodified-since",G],acl:"x-tos-acl",grantFullControl:"x-tos-grant-full-control",grantRead:"x-tos-grant-read",grantReadAcp:"x-tos-grant-read-acp",grantWrite:"x-tos-grant-write",grantWriteAcp:"x-tos-grant-write-acp",serverSideEncryption:"x-tos-server-side-encryption",serverSideDataEncryption:"x-tos-server-side-data-encryption",ssecAlgorithm:"x-tos-server-side-encryption-customer-algorithm",ssecKey:"x-tos-server-side-encryption-customer-key",ssecKeyMD5:"x-tos-server-side-encryption-customer-key-md5",copySourceRange:"x-tos-copy-source-range",copySourceIfMatch:"x-tos-copy-source-if-match",copySourceIfModifiedSince:["x-tos-copy-source-if-modified-since",G],copySourceIfNoneMatch:"x-tos-copy-source-if-none-match",copySourceIfUnmodifiedSince:"x-tos-copy-source-if-unmodified-since",copySourceSSECAlgorithm:"x-tos-copy-source-server-side-encryption-customer-algorithm",copySourceSSECKey:"x-tos-copy-source-server-side-encryption-customer-key",copySourceSSECKeyMD5:"x-tos-copy-source-server-side-encryption-customer-key-MD5",metadataDirective:"x-tos-metadata-directive",meta:e=>Object.keys(e).reduce((t,a)=>(t["x-tos-meta-"+a]=""+e[a],t),{}),websiteRedirectLocation:"x-tos-website-redirect-location",storageClass:"x-tos-storage-class",azRedundancy:"x-tos-az-redundancy",trafficLimit:"x-tos-traffic-limit",callback:"x-tos-callback",callbackVar:"x-tos-callback-var",allowSameActionOverlap:["x-tos-allow-same-action-overlap",e=>String(e)],symLinkTargetKey:"x-tos-symlink-target",symLinkTargetBucket:"x-tos-symlink-bucket",forbidOverwrite:"x-tos-forbid-overwrite",bucketType:"x-tos-bucket-type",recursiveMkdir:"x-tos-recursive-mkdir"},W={versionId:"versionId",process:"x-tos-process",saveBucket:"x-tos-save-bucket",saveObject:"x-tos-save-object",responseCacheControl:"response-cache-control",responseContentDisposition:"response-content-disposition",responseContentEncoding:"response-content-encoding",responseContentLanguage:"response-content-language",responseContentType:"response-content-type",responseExpires:["response-expires",e=>e.toUTCString()]};function J(e,t){if(!t.length)return;const a=e.headers||{};function o(e,t){null==a[e]&&(a[e]=t)}e.headers=a,t.forEach(t=>{const a=V[t];if(!a)throw new S(`\`${t}\` isn't in keys of \`requestHeadersMap\``);const n=e[t];if(null==n)return;if("string"==typeof a)return o(a,""+n);if(Array.isArray(a))return o(a[0],a[1](n));const i=a(n);Object.entries(i).forEach(([e,t])=>{o(e,t)})})}const Q=e=>r.stringify(e);function X(e,t){return{data:e,statusCode:t.statusCode,headers:t.headers,requestId:t.requestId,id2:t.id2}}function Y(e,t){const a=t["x-tos-hash-crc64ecma"];if(null==a)return;const o="string"==typeof e?e:e.getCrc64();if(o!==a)throw new S(`validate file crc64 failed. Expect crc64 ${a}, actual crc64 ${o}. Please try again.`)}var Z;!function(e){e.LastModified="last-modified",e.ContentLength="content-length",e.AcceptEncoding="accept-encoding",e.ContentEncoding="content-encoding",e.ContentMD5="content-md5",e.TosRawContentLength="x-tos-raw-content-length",e.TosTrailer="x-tos-trailer",e.TosHashCrc64ecma="x-tos-hash-crc64ecma",e.TosContentSha256="x-tos-content-sha256",e.TosDecodedContentLength="x-tos-decoded-content-length",e.TosEc="x-tos-ec",e.TosRequestId="x-tos-request-id"}(Z||(Z={}));const ee=e=>{let t=Promise.resolve();return async()=>(t=t.then(()=>e()),t)},te=async e=>{try{return JSON.parse(await D(e,"utf-8"))}catch(e){return void console.warn("checkpoint's content is not a valid JSON")}},ae=e=>{let t=null;return{getLastStream:()=>t,make:()=>(t&&oe(t,new Error("retry new stream by makeRetryStreamAutoClose")),t=e(),t)}},oe=(e,t)=>{e&&"destroy"in e&&"function"==typeof e.destroy&&"destroyed"in e&&!e.destroyed&&e.destroy(t)},ne=(e,t,a)=>{var o;return t.on("error",(o=a,e=>{console.log((o||"")+" stream error:",e)})),e.on("error",e=>oe(t,e)),t.on("error",t=>oe(e,t)),e.pipe(t)};async function ie(e){e=this.normalizeObjectInput(e);const t=U(e.headers);return e.headers=t,J(e,["encodingType","cacheControl","contentDisposition","contentEncoding","contentLanguage","contentType","expires","acl","grantFullControl","grantRead","grantReadAcp","grantWriteAcp","ssecAlgorithm","ssecKey","ssecKeyMD5","serverSideEncryption","serverSideDataEncryption","meta","websiteRedirectLocation","storageClass","forbidOverwrite"]),this.setObjectContentTypeHeader(e,t),this._fetchObject(e,"POST",{uploads:""},t,"")}const re=(e,t,a=!1)=>{let o=t;t<5242880&&(o=5242880,a&&console.warn(`partSize has been set to ${o}, because the partSize you provided is less than the minimal size of multipart`));const n=Math.ceil(e/1e4);return t<n&&(o=n,a&&console.warn(`partSize has been set to ${o}, because the partSize you provided causes the number of part excesses 10,000`)),o};async function se(e){const{uploadId:t,...a}=e,o=await this._fetchObject(e,"GET",{uploadId:t,...j(a)},{});return O(o.data)("Parts"),o}const ce={"3gp":"video/3gpp","7z":"application/x-7z-compressed",abw:"application/x-abiword",ai:"application/postscript",aif:"audio/x-aiff",aifc:"audio/x-aiff",aiff:"audio/x-aiff",alc:"chemical/x-alchemy",amr:"audio/amr",anx:"application/annodex",apk:"application/vnd.android.package-archive",appcache:"text/cache-manifest",art:"image/x-jg",asc:"text/plain",asf:"video/x-ms-asf",aso:"chemical/x-ncbi-asn1-binary",asx:"video/x-ms-asf",atom:"application/atom+xml",atomcat:"application/atomcat+xml",atomsrv:"application/atomserv+xml",au:"audio/basic",avi:"video/x-msvideo",awb:"audio/amr-wb",axa:"audio/annodex",axv:"video/annodex",b:"chemical/x-molconn-Z",bak:"application/x-trash",bat:"application/x-msdos-program",bcpio:"application/x-bcpio",bib:"text/x-bibtex",bin:"application/octet-stream",bmp:"image/x-ms-bmp",boo:"text/x-boo",book:"application/x-maker",brf:"text/plain",bsd:"chemical/x-crossfire",c:"text/x-csrc","c++":"text/x-c++src",c3d:"chemical/x-chem3d",cab:"application/x-cab",cac:"chemical/x-cache",cache:"chemical/x-cache",cap:"application/vnd.tcpdump.pcap",cascii:"chemical/x-cactvs-binary",cat:"application/vnd.ms-pki.seccat",cbin:"chemical/x-cactvs-binary",cbr:"application/x-cbr",cbz:"application/x-cbz",cc:"text/x-c++src",cda:"application/x-cdf",cdf:"application/x-cdf",cdr:"image/x-coreldraw",cdt:"image/x-coreldrawtemplate",cdx:"chemical/x-cdx",cdy:"application/vnd.cinderella",cef:"chemical/x-cxf",cer:"chemical/x-cerius",chm:"chemical/x-chemdraw",chrt:"application/x-kchart",cif:"chemical/x-cif",class:"application/java-vm",cls:"text/x-tex",cmdf:"chemical/x-cmdf",cml:"chemical/x-cml",cod:"application/vnd.rim.cod",com:"application/x-msdos-program",cpa:"chemical/x-compass",cpio:"application/x-cpio",cpp:"text/x-c++src",cpt:"application/mac-compactpro",cr2:"image/x-canon-cr2",crl:"application/x-pkcs7-crl",crt:"application/x-x509-ca-cert",crw:"image/x-canon-crw",csd:"audio/csound",csf:"chemical/x-cache-csf",csh:"application/x-csh",csm:"chemical/x-csml",csml:"chemical/x-csml",css:"text/css",csv:"text/csv",ctab:"chemical/x-cactvs-binary",ctx:"chemical/x-ctx",cu:"application/cu-seeme",cub:"chemical/x-gaussian-cube",cxf:"chemical/x-cxf",cxx:"text/x-c++src",d:"text/x-dsrc",davmount:"application/davmount+xml",dcm:"application/dicom",dcr:"application/x-director",ddeb:"application/vnd.debian.binary-package",dif:"video/dv",diff:"text/x-diff",dir:"application/x-director",djv:"image/vnd.djvu",djvu:"image/vnd.djvu",dl:"video/dl",dll:"application/x-msdos-program",dmg:"application/x-apple-diskimage",dms:"application/x-dms",doc:"application/msword",docm:"application/vnd.ms-word.document.macroEnabled.12",docx:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",dot:"application/msword",dotm:"application/vnd.ms-word.template.macroEnabled.12",dotx:"application/vnd.openxmlformats-officedocument.wordprocessingml.template",dv:"video/dv",dvi:"application/x-dvi",dx:"chemical/x-jcamp-dx",dxr:"application/x-director",emb:"chemical/x-embl-dl-nucleotide",embl:"chemical/x-embl-dl-nucleotide",eml:"message/rfc822",eot:"application/vnd.ms-fontobject",eps:"application/postscript",eps2:"application/postscript",eps3:"application/postscript",epsf:"application/postscript",epsi:"application/postscript",erf:"image/x-epson-erf",es:"application/ecmascript",etx:"text/x-setext",exe:"application/x-msdos-program",ez:"application/andrew-inset",fb:"application/x-maker",fbdoc:"application/x-maker",fch:"chemical/x-gaussian-checkpoint",fchk:"chemical/x-gaussian-checkpoint",fig:"application/x-xfig",flac:"audio/flac",fli:"video/fli",flv:"video/x-flv",fm:"application/x-maker",frame:"application/x-maker",frm:"application/x-maker",gal:"chemical/x-gaussian-log",gam:"chemical/x-gamess-input",gamin:"chemical/x-gamess-input",gan:"application/x-ganttproject",gau:"chemical/x-gaussian-input",gcd:"text/x-pcs-gcd",gcf:"application/x-graphing-calculator",gcg:"chemical/x-gcg8-sequence",gen:"chemical/x-genbank",gf:"application/x-tex-gf",gif:"image/gif",gjc:"chemical/x-gaussian-input",gjf:"chemical/x-gaussian-input",gl:"video/gl",gnumeric:"application/x-gnumeric",gpt:"chemical/x-mopac-graph",gsf:"application/x-font",gsm:"audio/x-gsm",gtar:"application/x-gtar",gz:"application/gzip",h:"text/x-chdr","h++":"text/x-c++hdr",hdf:"application/x-hdf",hh:"text/x-c++hdr",hin:"chemical/x-hin",hpp:"text/x-c++hdr",hqx:"application/mac-binhex40",hs:"text/x-haskell",hta:"application/hta",htc:"text/x-component",htm:"text/html",html:"text/html",hwp:"application/x-hwp",hxx:"text/x-c++hdr",ica:"application/x-ica",ice:"x-conference/x-cooltalk",ico:"image/vnd.microsoft.icon",ics:"text/calendar",icz:"text/calendar",ief:"image/ief",iges:"model/iges",igs:"model/iges",iii:"application/x-iphone",info:"application/x-info",inp:"chemical/x-gamess-input",ins:"application/x-internet-signup",iso:"application/x-iso9660-image",isp:"application/x-internet-signup",ist:"chemical/x-isostar",istr:"chemical/x-isostar",jad:"text/vnd.sun.j2me.app-descriptor",jam:"application/x-jam",jar:"application/java-archive",java:"text/x-java",jdx:"chemical/x-jcamp-dx",jmz:"application/x-jmol",jng:"image/x-jng",jnlp:"application/x-java-jnlp-file",jp2:"image/jp2",jpe:"image/jpeg",jpeg:"image/jpeg",jpf:"image/jpx",jpg:"image/jpeg",jpg2:"image/jp2",jpm:"image/jpm",jpx:"image/jpx",js:"application/javascript",json:"application/json",kar:"audio/midi",key:"application/pgp-keys",kil:"application/x-killustrator",kin:"chemical/x-kinemage",kml:"application/vnd.google-earth.kml+xml",kmz:"application/vnd.google-earth.kmz",kpr:"application/x-kpresenter",kpt:"application/x-kpresenter",ksp:"application/x-kspread",kwd:"application/x-kword",kwt:"application/x-kword",latex:"application/x-latex",lha:"application/x-lha",lhs:"text/x-literate-haskell",lin:"application/bbolin",lsf:"video/x-la-asf",lsx:"video/x-la-asf",ltx:"text/x-tex",ly:"text/x-lilypond",lyx:"application/x-lyx",lzh:"application/x-lzh",lzx:"application/x-lzx",m3g:"application/m3g",m3u:"audio/x-mpegurl",m3u8:"application/x-mpegURL",m4a:"audio/mpeg",maker:"application/x-maker",man:"application/x-troff-man",mbox:"application/mbox",mcif:"chemical/x-mmcif",mcm:"chemical/x-macmolecule",mdb:"application/msaccess",me:"application/x-troff-me",mesh:"model/mesh",mid:"audio/midi",midi:"audio/midi",mif:"application/x-mif",mkv:"video/x-matroska",mm:"application/x-freemind",mmd:"chemical/x-macromodel-input",mmf:"application/vnd.smaf",mml:"text/mathml",mmod:"chemical/x-macromodel-input",mng:"video/x-mng",moc:"text/x-moc",mol:"chemical/x-mdl-molfile",mol2:"chemical/x-mol2",moo:"chemical/x-mopac-out",mop:"chemical/x-mopac-input",mopcrt:"chemical/x-mopac-input",mov:"video/quicktime",movie:"video/x-sgi-movie",mp2:"audio/mpeg",mp3:"audio/mpeg",mp4:"video/mp4",mpc:"chemical/x-mopac-input",mpe:"video/mpeg",mpeg:"video/mpeg",mpega:"audio/mpeg",mpg:"video/mpeg",mpga:"audio/mpeg",mph:"application/x-comsol",mpv:"video/x-matroska",ms:"application/x-troff-ms",msh:"model/mesh",msi:"application/x-msi",mvb:"chemical/x-mopac-vib",mxf:"application/mxf",mxu:"video/vnd.mpegurl",nb:"application/mathematica",nbp:"application/mathematica",nc:"application/x-netcdf",nef:"image/x-nikon-nef",nwc:"application/x-nwc",o:"application/x-object",oda:"application/oda",odb:"application/vnd.oasis.opendocument.database",odc:"application/vnd.oasis.opendocument.chart",odf:"application/vnd.oasis.opendocument.formula",odg:"application/vnd.oasis.opendocument.graphics",odi:"application/vnd.oasis.opendocument.image",odm:"application/vnd.oasis.opendocument.text-master",odp:"application/vnd.oasis.opendocument.presentation",ods:"application/vnd.oasis.opendocument.spreadsheet",odt:"application/vnd.oasis.opendocument.text",oga:"audio/ogg",ogg:"audio/ogg",ogv:"video/ogg",ogx:"application/ogg",old:"application/x-trash",one:"application/onenote",onepkg:"application/onenote",onetmp:"application/onenote",onetoc2:"application/onenote",opf:"application/oebps-package+xml",opus:"audio/ogg",orc:"audio/csound",orf:"image/x-olympus-orf",otf:"application/font-sfnt",otg:"application/vnd.oasis.opendocument.graphics-template",oth:"application/vnd.oasis.opendocument.text-web",otp:"application/vnd.oasis.opendocument.presentation-template",ots:"application/vnd.oasis.opendocument.spreadsheet-template",ott:"application/vnd.oasis.opendocument.text-template",oza:"application/x-oz-application",p:"text/x-pascal",p7r:"application/x-pkcs7-certreqresp",pac:"application/x-ns-proxy-autoconfig",pas:"text/x-pascal",pat:"image/x-coreldrawpattern",patch:"text/x-diff",pbm:"image/x-portable-bitmap",pcap:"application/vnd.tcpdump.pcap",pcf:"application/x-font-pcf","pcf.Z":"application/x-font-pcf",pcx:"image/pcx",pdb:"chemical/x-pdb",pdf:"application/pdf",pfa:"application/x-font",pfb:"application/x-font",pfr:"application/font-tdpfr",pgm:"image/x-portable-graymap",pgn:"application/x-chess-pgn",pgp:"application/pgp-encrypted",php:"#application/x-httpd-php",php3:"#application/x-httpd-php3",php3p:"#application/x-httpd-php3-preprocessed",php4:"#application/x-httpd-php4",php5:"#application/x-httpd-php5",phps:"#application/x-httpd-php-source",pht:"#application/x-httpd-php",phtml:"#application/x-httpd-php",pk:"application/x-tex-pk",pl:"text/x-perl",pls:"audio/x-scpls",pm:"text/x-perl",png:"image/png",pnm:"image/x-portable-anymap",pot:"text/plain",potm:"application/vnd.ms-powerpoint.template.macroEnabled.12",potx:"application/vnd.openxmlformats-officedocument.presentationml.template",ppam:"application/vnd.ms-powerpoint.addin.macroEnabled.12",ppm:"image/x-portable-pixmap",pps:"application/vnd.ms-powerpoint",ppsm:"application/vnd.ms-powerpoint.slideshow.macroEnabled.12",ppsx:"application/vnd.openxmlformats-officedocument.presentationml.slideshow",ppt:"application/vnd.ms-powerpoint",pptm:"application/vnd.ms-powerpoint.presentation.macroEnabled.12",pptx:"application/vnd.openxmlformats-officedocument.presentationml.presentation",prf:"application/pics-rules",prt:"chemical/x-ncbi-asn1-ascii",ps:"application/postscript",psd:"image/x-photoshop",py:"text/x-python",pyc:"application/x-python-code",pyo:"application/x-python-code",qgs:"application/x-qgis",qt:"video/quicktime",qtl:"application/x-quicktimeplayer",ra:"audio/x-pn-realaudio",ram:"audio/x-pn-realaudio",rar:"application/rar",ras:"image/x-cmu-raster",rb:"application/x-ruby",rd:"chemical/x-mdl-rdfile",rdf:"application/rdf+xml",rdp:"application/x-rdp",rgb:"image/x-rgb",rhtml:"#application/x-httpd-eruby",rm:"audio/x-pn-realaudio",roff:"application/x-troff",ros:"chemical/x-rosdal",rpm:"application/x-redhat-package-manager",rss:"application/x-rss+xml",rtf:"application/rtf",rtx:"text/richtext",rxn:"chemical/x-mdl-rxnfile",scala:"text/x-scala",sce:"application/x-scilab",sci:"application/x-scilab",sco:"audio/csound",scr:"application/x-silverlight",sct:"text/scriptlet",sd:"chemical/x-mdl-sdfile",sd2:"audio/x-sd2",sda:"application/vnd.stardivision.draw",sdc:"application/vnd.stardivision.calc",sdd:"application/vnd.stardivision.impress",sds:"application/vnd.stardivision.chart",sdw:"application/vnd.stardivision.writer",ser:"application/java-serialized-object",sfd:"application/vnd.font-fontforge-sfd",sfv:"text/x-sfv",sgf:"application/x-go-sgf",sgl:"application/vnd.stardivision.writer-global",sh:"application/x-sh",shar:"application/x-shar",shp:"application/x-qgis",shtml:"text/html",shx:"application/x-qgis",sid:"audio/prs.sid",sig:"application/pgp-signature",sik:"application/x-trash",silo:"model/mesh",sis:"application/vnd.symbian.install",sisx:"x-epoc/x-sisx-app",sit:"application/x-stuffit",sitx:"application/x-stuffit",skd:"application/x-koan",skm:"application/x-koan",skp:"application/x-koan",skt:"application/x-koan",sldm:"application/vnd.ms-powerpoint.slide.macroEnabled.12",sldx:"application/vnd.openxmlformats-officedocument.presentationml.slide",smi:"application/smil+xml",smil:"application/smil+xml",snd:"audio/basic",spc:"chemical/x-galactic-spc",spl:"application/x-futuresplash",spx:"audio/ogg",sql:"application/x-sql",src:"application/x-wais-source",srt:"text/plain",stc:"application/vnd.sun.xml.calc.template",std:"application/vnd.sun.xml.draw.template",sti:"application/vnd.sun.xml.impress.template",stw:"application/vnd.sun.xml.writer.template",sty:"text/x-tex",sv4cpio:"application/x-sv4cpio",sv4crc:"application/x-sv4crc",svg:"image/svg+xml",svgz:"image/svg+xml",sw:"chemical/x-swissprot",swf:"application/x-shockwave-flash",swfl:"application/x-shockwave-flash",sxc:"application/vnd.sun.xml.calc",sxd:"application/vnd.sun.xml.draw",sxg:"application/vnd.sun.xml.writer.global",sxi:"application/vnd.sun.xml.impress",sxm:"application/vnd.sun.xml.math",sxw:"application/vnd.sun.xml.writer",t:"application/x-troff",tar:"application/x-tar",taz:"application/x-gtar-compressed",tcl:"application/x-tcl",tex:"text/x-tex",texi:"application/x-texinfo",texinfo:"application/x-texinfo",text:"text/plain",tgf:"chemical/x-mdl-tgf",tgz:"application/x-gtar-compressed",thmx:"application/vnd.ms-officetheme",tif:"image/tiff",tiff:"image/tiff",tk:"text/x-tcl",tm:"text/texmacs",torrent:"application/x-bittorrent",tr:"application/x-troff",ts:"video/MP2T",tsp:"application/dsptype",tsv:"text/tab-separated-values",ttf:"application/font-sfnt",ttl:"text/turtle",txt:"text/plain",uls:"text/iuls",ustar:"application/x-ustar",val:"chemical/x-ncbi-asn1-binary",vcard:"text/vcard",vcd:"application/x-cdlink",vcf:"text/vcard",vcs:"text/x-vcalendar",vmd:"chemical/x-vmd",vms:"chemical/x-vamas-iso14976",vrm:"x-world/x-vrml",vrml:"model/vrml",vsd:"application/vnd.visio",vss:"application/vnd.visio",vst:"application/vnd.visio",vsw:"application/vnd.visio",wad:"application/x-doom",wasm:"application/wasm",wav:"audio/wav",wax:"audio/x-ms-wax",wbmp:"image/vnd.wap.wbmp",wbxml:"application/vnd.wap.wbxml",webm:"video/webm",wk:"application/x-123",wm:"video/x-ms-wm",wma:"audio/x-ms-wma",wmd:"application/x-ms-wmd",wml:"text/vnd.wap.wml",wmlc:"application/vnd.wap.wmlc",wmls:"text/vnd.wap.wmlscript",wmlsc:"application/vnd.wap.wmlscriptc",wmv:"video/x-ms-wmv",wmx:"video/x-ms-wmx",wmz:"application/x-ms-wmz",woff:"application/font-woff",wp5:"application/vnd.wordperfect5.1",wpd:"application/vnd.wordperfect",wrl:"model/vrml",wsc:"text/scriptlet",wvx:"video/x-ms-wvx",wz:"application/x-wingz",x3d:"model/x3d+xml",x3db:"model/x3d+binary",x3dv:"model/x3d+vrml",xbm:"image/x-xbitmap",xcf:"application/x-xcf",xcos:"application/x-scilab-xcos",xht:"application/xhtml+xml",xhtml:"application/xhtml+xml",xlam:"application/vnd.ms-excel.addin.macroEnabled.12",xlb:"application/vnd.ms-excel",xls:"application/vnd.ms-excel",xlsb:"application/vnd.ms-excel.sheet.binary.macroEnabled.12",xlsm:"application/vnd.ms-excel.sheet.macroEnabled.12",xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",xlt:"application/vnd.ms-excel",xltm:"application/vnd.ms-excel.template.macroEnabled.12",xltx:"application/vnd.openxmlformats-officedocument.spreadsheetml.template",xml:"application/xml",xpi:"application/x-xpinstall",xpm:"image/x-xpixmap",xsd:"application/xml",xsl:"application/xslt+xml",xslt:"application/xslt+xml",xspf:"application/xspf+xml",xtel:"chemical/x-xtel",xul:"application/vnd.mozilla.xul+xml",xwd:"image/x-xwindowdump",xyz:"chemical/x-xyz",xz:"application/x-xz",zip:"application/zip"};function le(e){return new o.Transform({async transform(t,a,o){e(t.length),this.push(t),o()}})}function pe(e,t){const a=le(t);return ne(e,a,"createReadNReadStream")}let ue=null;ue={__proto__:null,CRC:class{constructor(){this.value="0"}reset(){this.value="0"}async updateBlob(){throw new S("Not implemented in node.js environment.")}update(e){return this.value=p.crc64(e,this.value),this.value}getCrc64(){return this.value}},combineCrc64:p.combineCrc64};const{CRC:de,combineCrc64:he}=ue;function me(e){return new o.Transform({async transform(t,a,o){try{const a=t.length;let n=!1;for(;!n;){const{ok:t,timeToWait:o}=await e.Acquire(a);t||await fe(o),n=t}this.push(t),o()}catch(e){o(e)}}})}function fe(e){return new Promise(t=>{setTimeout(()=>t(""),e)})}var ye={__proto__:null,createDefaultRateLimiter:function(e,t){const a=Math.max(10240,e),o={rate:Math.max(1024,t),capacity:a,currentAmount:a,lastConsumeTime:Date.now()};return{Acquire:async e=>{e>o.capacity&&(e=o.capacity);const t=Date.now(),a=Math.floor((t-o.lastConsumeTime)/1e3*o.rate);return a+o.currentAmount>o.capacity?o.currentAmount=o.capacity:o.currentAmount+=a,e>o.currentAmount?{ok:!1,timeToWait:Math.ceil((e-o.currentAmount)/o.rate*1e3)}:(o.lastConsumeTime=t,o.currentAmount=o.currentAmount-e,{ok:!0,timeToWait:0})}}},createRateLimiterStream:function(e,t){const a=me(t);return ne(e,a,"createRateLimiterStream")},wait:fe};let ge=null;ge=ye;const{createDefaultRateLimiter:xe,createRateLimiterStream:be}=ge;class ke extends o.Readable{constructor(e){super(),this.buf=void 0,this.lastPos=0,this.buf=e}_read(e){const t=this.buf.length;let a=Math.min(e,t-this.lastPos);this.lastPos>=t?this.push(null):(this.push(this.buf.slice(this.lastPos,this.lastPos+a)),this.lastPos+=a)}}function ve(e){return new o.Transform({async transform(t,a,o){e(t),this.push(t),o()}})}function Te(e,t){const a=ve(e=>t.update(e));return ne(e,a,"createCrcReadStream")}var Se;function we(e){if(("string"==typeof e?e:e.key).length<1)throw new S("invalid object name, the length must be greater than 1")}function Ce(e,t){if(q(e))return e.length;if(F(e))return e.size;if(t&&t["content-length"]){const e=+t["content-length"];if(e>=0)return e}return null}async function Ee(e){const t=function({body:e,dataTransferCallback:t,makeRetryStream:a,rateLimiter:o}){let n=e;if(q(n)){const e=n;a=()=>new ke(e),n=new ke(e)}if(K(n)&&(o&&Pe(o)&&(n=be(n,o)),n=pe(n,t),a)){const e=a;return{body:n,makeRetryStream:()=>{let a=e();return a?(o&&Pe(o)&&(a=be(a,o)),a=pe(a,t),a):a}}}return{body:n,makeRetryStream:void 0}}(e);return async function({body:e,beforeRetry:t,makeRetryStream:a,enableCRC:o}){if(!o)return{body:e,beforeRetry:t,makeRetryStream:a};let n=e;const i=new de;if(K(e)&&(n=Te(e,i),a)){const e=a;a=()=>{const t=e();return t?Te(t,i):t}}return{body:n,beforeRetry:()=>{i.reset(),null==t||t()},makeRetryStream:a,crc:i}}(e={...e,...t})}function Re(e,t){return`/${e}/${encodeURIComponent(t)}`}function Pe(e){if(!(null!=e&&e.Acquire&&(null==e?void 0:e.Acquire)instanceof Function))throw new S("The rateLimiter is not valid function");return!0}function Be(e){"object"==typeof e&&console.warn("The `checkpoint` parameter should be passed as a string in node.js environment, representing a file or directory.Passing a checkpoint object to it will be removed in the future.")}!function(e){e.HeaderRestore="x-tos-restore",e.HeaderRestoreExpiryDays="x-tos-restore-expiry-days",e.HeaderRestoreRequestDate="x-tos-restore-request-date",e.HeaderRestoreTier="x-tos-restore-tier",e.HeaderProjectName="x-tos-project-name",e.HeaderReplicationStatus="x-tos-replication-status"}(Se||(Se={}));const Ie=e=>{if(!e)return;const t=null==e?void 0:e[Se.HeaderRestore];if(t){var a,o,n;const r=null!=(a=null==(o=(null!=t?t:"").split('",')[1])||null==o.split||null==(n=o.split("="))?void 0:n[1])?a:"",s='ongoing-request="true"'===(null==t?void 0:t.trim()),c={RestoreStatus:{OngoingRequest:s,ExpiryDate:r}};var i;return s&&(c.RestoreParam={ExpiryDays:e[Se.HeaderRestoreExpiryDays]?Number(e[Se.HeaderRestoreExpiryDays]):0,RequestDate:null!=(i=e[Se.HeaderRestoreRequestDate])?i:"",Tier:e[Se.HeaderRestoreTier]}),c}};var De;(De=exports.aB||(exports.aB={}))[De.Started=1]="Started",De[De.Rw=2]="Rw",De[De.Succeed=3]="Succeed",De[De.Failed=4]="Failed";const Me=u("TOS"),Oe=function(e,t){if(q(e))throw new S("not support buffer in browser environment");return function(e,t){return t?e.toString(function(e){switch(e){case"utf-8":return f;case"base64":return h;case"hex":return m;default:throw new S("The coding is not supported")}}(t)):e}(d(e),t)};function Ae(e,t){return t?e.digest(t):e.digest()}let je=null;je={__proto__:null,hmacSha256:function(e,t,a){return Ae(y.createHmac("sha256",e).update(t),a)},hashSha256:function(e,t){return Ae(y.createHash("sha256").update(e),t)},hashMd5:function(e,t){return Ae(y.createHash("md5").update(e),t)},parse:function(e,t){return Buffer.from(e,t)},stringify:function(e,t){return e.toString(t)}};const{hmacSha256:_e,hashSha256:Le,hashMd5:Ue,parse:Ne,stringify:ze}=je;async function Fe(e){const{uploadId:t,partNumber:a,body:o,enableContentMD5:n=!1}=e,i=U(e.headers);e.headers=i,J(e,["trafficLimit","ssecAlgorithm","ssecKey","ssecKeyMD5"]);const r=Ce(o);if(r&&null==i["content-length"]&&(i["content-length"]=r.toFixed(0)),n&&null==i["content-md5"])if(K(o)&&e.makeRetryStream){const t=e.makeRetryStream();if(t){let e=Buffer.from([]);for await(const a of t)e=Buffer.concat([e,"string"==typeof a?Buffer.from(a):a]);const a=Ue(e,"base64");i["content-md5"]=a}}else console.warn("current not support enableMD5Checksum");const s=Ce(e.body,i),c=null!=s;c||!e.dataTransferStatusChange&&!e.progress||console.warn("Don't get totalSize of uploadPart's body, the `dataTransferStatusChange` callback will not trigger. You can use `uploadPartFromFile` instead");let l=0;const{dataTransferStatusChange:p,progress:u}=e,d=(e,t=0)=>{if(!c||t<0)return;if(!p&&!u)return;l+=t,null==p||p({type:e,rwOnceBytes:t,consumedBytes:l,totalBytes:s});const a=0===s?e===exports.aB.Succeed?1:0:l/s;1===a?e===exports.aB.Succeed&&(null==u||u(a)):null==u||u(a)},h=await Ee({body:e.body,dataTransferCallback:e=>d(exports.aB.Rw,e),beforeRetry:e.beforeRetry,makeRetryStream:e.makeRetryStream,enableCRC:this.opts.enableCRC,rateLimiter:e.rateLimiter});d(exports.aB.Started);const[m,f]=await z((async()=>{const o=await this._fetchObject(e,"PUT",{partNumber:a,uploadId:t},i,h.body,{handleResponse:e=>({partNumber:a,ETag:e.headers.etag,serverSideEncryption:e.headers["x-tos-server-side-encryption"],serverSideDataEncryption:e.headers["x-tos-server-side-data-encryption"],serverSideEncryptionKeyId:e.headers["x-tos-server-side-encryption-kms-key-id"],ssecAlgorithm:e.headers["x-tos-server-side-encryption-customer-algorithm"],ssecKeyMD5:e.headers["x-tos-server-side-encryption-customer-key-MD5"],hashCrc64ecma:e.headers["x-tos-hash-crc64ecma"]}),axiosOpts:{__retryConfig__:{beforeRetry:()=>{l=0,null==h.beforeRetry||h.beforeRetry()},makeRetryStream:h.makeRetryStream},onUploadProgress:e=>{d(exports.aB.Rw,e.loaded-l)}}});return this.opts.enableCRC&&h.crc&&Y(h.crc,o.headers),o})());if(m||!f)throw d(exports.aB.Failed),m;return d(exports.aB.Succeed),f}async function qe(e){return Fe.call(this,e)}async function Ke(e){var t,a;const o=await P(e.filePath),n=null!=(t=e.offset)?t:0,i=Math.min(o.size,n+(null!=(a=e.partSize)?a:o.size)),r=ae(()=>E(e.filePath,{start:n,end:i-1}));try{return await Fe.call(this,{...e,body:r.make(),headers:{...e.headers||{},"content-length":""+(i-n)},makeRetryStream:r.make})}catch(e){throw oe(r.getLastStream(),e),e}}async function $e(e){var t;e.headers=null!=(t=e.headers)?t:{},J(e,["callback","callbackVar","forbidOverwrite"]);const a=t=>{const a=t.headers,o={VersionID:a["x-tos-version-id"],ETag:a.etag,Bucket:e.bucket||this.opts.bucket||"",Location:a.location,HashCrc64ecma:a["x-tos-hash-crc64ecma"],Key:e.key,...t.data};return e.callback&&(o.CallbackResult=""+JSON.stringify(t.data)),o};if(e.completeAll){var o;if((null==(o=e.parts)?void 0:o.length)>0)throw new S("Should not specify both 'completeAll' and 'parts' params.");return this._fetchObject(e,"POST",{uploadId:e.uploadId},{...e.headers,"x-tos-complete-all":"yes"},void 0,{handleResponse:a})}return this._fetchObject(e,"POST",{uploadId:e.uploadId},{...e.headers},{Parts:e.parts.map(e=>({ETag:e.eTag,PartNumber:e.partNumber}))},{handleResponse:a})}class He extends o.Readable{_read(){this.push(null)}}var Ge;(Ge=exports.KW||(exports.KW={}))[Ge.CreateMultipartUploadSucceed=1]="CreateMultipartUploadSucceed",Ge[Ge.CreateMultipartUploadFailed=2]="CreateMultipartUploadFailed",Ge[Ge.UploadPartSucceed=3]="UploadPartSucceed",Ge[Ge.UploadPartFailed=4]="UploadPartFailed",Ge[Ge.UploadPartAborted=5]="UploadPartAborted",Ge[Ge.CompleteMultipartUploadSucceed=6]="CompleteMultipartUploadSucceed",Ge[Ge.CompleteMultipartUploadFailed=7]="CompleteMultipartUploadFailed";const Ve=[403,404,405];async function We(e){var t,a,o;const{cancelToken:n,enableContentMD5:i=!1}=e,r=U(e.headers);e.headers=r,J(e,["encodingType","cacheControl","contentDisposition","contentEncoding","contentLanguage","contentType","expires","acl","grantFullControl","grantRead","grantReadAcp","grantWriteAcp","ssecAlgorithm","ssecKey","ssecKeyMD5","serverSideEncryption","serverSideDataEncryption","meta","websiteRedirectLocation","storageClass"]);const s=()=>n&&!!n.reason;Be(e.checkpoint);const c=await(async()=>"string"==typeof e.file?P(e.file):null)(),l=await(async()=>{const{file:t}=e;if(c)return c.size;if(q(t))return t.length;if(F(t))return t.size;throw new S("`file` must be string, Buffer, File or Blob")})(),p=await(async()=>{if("string"==typeof e.checkpoint){const{checkpoint:t}=e;let a=null;try{a=await P(t)}catch(e){const t=e;if("ENOENT"!==t.code)throw t}const o=a?a.isDirectory():t.endsWith("/"),n=o?g.resolve(t,"@@checkpoint-file-placeholder@@"):g.resolve(t),i=g.dirname(n);if(await M(i),o)return{filePath:n,filePathIsPlaceholder:!0};try{return{filePath:n,filePathIsPlaceholder:!1,record:a?await te(n):void 0}}catch(e){throw console.warn("the checkpoint file is invalid JSON format. please check checkpoint file"),e}}return"object"==typeof e.checkpoint?{record:e.checkpoint}:{}})();await(async()=>{var e;if(c&&null!=(e=p.record)&&e.file_info){var t;const{last_modified:e,file_size:a}=null==(t=p.record)?void 0:t.file_info;c.mtimeMs===e&&c.size===a||(console.warn(`The file has been modified since ${new Date(e)}, so the checkpoint file is invalid, and specified file will be uploaded again.`),delete p.record)}})();const u=re(l,e.partSize||(null==(t=p.record)?void 0:t.part_size)||20971520,!0);p.record&&p.record.part_size!==u&&(console.warn("The partSize param does not equal the partSize in checkpoint file, so the checkpoint file is invalid, and specified file will be uploaded again."),delete p.record);let d=e.bucket||this.opts.bucket||"";const h=e.key;let m="",f=[];const y=function(e,t){const a=[];for(let o=0;;++o){const n=o*t,i=Math.min(t,e-n);if(a.push({offset:n,partSize:i,partNumber:o+1}),(o+1)*t>=e)break}return a}(l,u),x=((null==(a=p.record)?void 0:a.parts_info)||[]).filter(e=>e.is_completed).reduce((e,t)=>e+t.part_size,0);let b=x;const k=(null==(o=p.record)?void 0:o.parts_info)||[],v=new Map;k.forEach(e=>v.set(e.part_number,e));const C=()=>{const e={bucket:d,key:h,part_size:u,upload_id:m,parts_info:k};return c&&(e.file_info={last_modified:c.mtimeMs,file_size:c.size}),e},E=t=>{if(!e.uploadEventChange)return;const a={bucket:d,uploadId:m,key:h,...t};p.filePath&&(a.checkpointFile=p.filePath),e.uploadEventChange(a)};let R;!function(e){e[e.start=1]="start",e[e.uploadPartSucceed=2]="uploadPartSucceed",e[e.completeMultipartUploadSucceed=3]="completeMultipartUploadSucceed"}(R||(R={}));const D=t=>{e.progress&&(b===l&&t===R.uploadPartSucceed||e.progress(t===R.start&&0===l?0:l?b/l:1,C()))};let O=x;const{dataTransferStatusChange:A}=e,j=(e,t=0)=>{A&&(O+=t,null==A||A({type:e,rwOnceBytes:t,consumedBytes:O,totalBytes:l}))},_=ee(async()=>{if(p.filePath){const e=JSON.stringify(C(),null,2),t=g.dirname(p.filePath);await M(t),await B(p.filePath,e,"utf-8")}}),L=async(e,t)=>{let a=v.get(e.partNumber);a||(a={part_number:e.partNumber,offset:e.offset,part_size:e.partSize,is_completed:!1,etag:"",hash_crc64ecma:""},k.push(a),v.set(a.part_number,a)),t.err||(a.is_completed=!0,a.etag=t.res.ETag,a.hash_crc64ecma=t.res.hashCrc64ecma),await _();const o={partNumber:a.part_number,partSize:a.part_size,offset:a.offset};if(t.err){const e=t.err;let a=exports.KW.UploadPartFailed;return e instanceof T&&Ve.includes(e.statusCode)&&(a=exports.KW.UploadPartAborted),void E({type:a,err:e,uploadPartInfo:o})}o.etag=t.res.ETag,b+=o.partSize,E({type:exports.KW.UploadPartSucceed,uploadPartInfo:o}),D(R.uploadPartSucceed)};if(p.record){d=p.record.bucket,m=p.record.upload_id;const e=new Set((p.record.parts_info||[]).filter(e=>e.is_completed).map(e=>e.part_number));f=y.filter(t=>!e.has(t.partNumber))}else{try{const{data:t}=await ie.call(this,e);if(s())throw new w("cancel uploadFile");var N;d=t.Bucket,m=t.UploadId,p.filePathIsPlaceholder&&(p.filePath=null==(N=p.filePath)?void 0:N.replace("@@checkpoint-file-placeholder@@",function(e,t){return`${t}.${Ue(`${e}.${t}`,"hex")}.upload`.replace(/[\\/]/g,"")}(d,h))),E({type:exports.KW.CreateMultipartUploadSucceed})}catch(e){const t=e;throw E({type:exports.KW.CreateMultipartUploadFailed,err:t}),t}f=y}D(R.start),j(exports.aB.Started);const[K,$]=await z((async()=>{let t=null,a=0;if(await Promise.all(Array.from({length:e.taskNum||1}).map(async()=>{for(;;){const n=a++;if(n>=f.length)return;const c=f[n];let l=0;const p=Je(e.file,c);try{function o(e,t){const{offset:a,partSize:o}=t,n=a+o;if(p)return p.make();if(F(e))return e.slice(a,n);if(q(e))return e.slice(a,n);throw new S("`file` must be string, Buffer, File or Blob")}const{data:t}=await Fe.call(this,{bucket:d,key:h,uploadId:m,body:o(e.file,c),enableContentMD5:i,makeRetryStream:null==p?void 0:p.make,beforeRetry:()=>{O-=l,l=0},partNumber:c.partNumber,headers:{"content-length":""+c.partSize,"x-tos-server-side-encryption-customer-algorithm":r["x-tos-server-side-encryption-customer-algorithm"],"x-tos-server-side-encryption-customer-key":r["x-tos-server-side-encryption-customer-key"],"x-tos-server-side-encryption-customer-key-md5":r["x-tos-server-side-encryption-customer-key-md5"]},dataTransferStatusChange(e){e.type===exports.aB.Rw&&(s()||(l+=e.rwOnceBytes,j(e.type,e.rwOnceBytes)))},trafficLimit:e.trafficLimit,rateLimiter:e.rateLimiter});if(s())throw new w("cancel uploadFile");await L(c,{res:t})}catch(e){oe(null==p?void 0:p.getLastStream(),e);const a=e;if(O-=l,l=0,H(a))throw a;if(s())throw new w("cancel uploadFile");t||(t=a),await L(c,{err:a})}}})),t)throw t;const o=(C().parts_info||[]).map(e=>({eTag:e.etag,partNumber:e.part_number})),[n,c]=await z($e.call(this,{bucket:d,key:h,uploadId:m,parts:o}));if(n||!c)throw E({type:exports.KW.CompleteMultipartUploadFailed}),n;if(E({type:exports.KW.CompleteMultipartUploadSucceed}),D(R.completeMultipartUploadSucceed),await(async()=>{p.filePath&&await I(p.filePath).catch(e=>{console.warn("remove checkpoint file failure, you can remove it by hand.\n",`checkpoint file path: ${p.filePath}\n`,e.message)})})(),this.opts.enableCRC&&c.data.HashCrc64ecma&&function(e){var t,a,o;const n=(null==(t=e.file_info)?void 0:t.file_size)||0;let i="0";const r=null!=(a=null==(o=e.parts_info)||null==o.sort?void 0:o.sort((e,t)=>e.part_number-t.part_number))?a:[];for(const e of r)i=he(i,e.hash_crc64ecma,Math.min(e.part_size,n-e.offset));return i}(C())!==c.data.HashCrc64ecma)throw new S("crc of entire file mismatch.");return c})());if(K||!$)throw j(exports.aB.Failed),K;return j(exports.aB.Succeed),$}function Je(e,t){const{offset:a,partSize:o}=t,n=a+o;if("string"==typeof e)return ae(()=>o?E(e,{start:a,end:n-1}):new He)}var Qe,Xe,Ye,Ze,et,tt,at,ot,nt,it,rt,st,ct,lt,pt,ut,dt,ht,mt;async function ft(e){const t="string"==typeof e?{key:e}:e,a=U(t.headers);t.headers=a;const o={};return t.versionId&&(o.versionId=t.versionId),J(t,["ifMatch","ifModifiedSince","ifNoneMatch","ifUnmodifiedSince","ssecAlgorithm","ssecKey","ssecKeyMD5"]),this._fetchObject(e,"HEAD",o,(null==t?void 0:t.headers)||{},void 0,{handleResponse:e=>{const t={...e.headers,ReplicationStatus:e.headers[Se.HeaderReplicationStatus]},a=Ie(e.headers);return a&&(t.RestoreInfo=a),t}})}async function yt(e){const{uploadId:t,partNumber:a}=e,o=U(e.headers);if(e.headers=o,J(e,["copySourceRange","copySourceSSECAlgorithm","copySourceSSECKey","copySourceSSECKeyMD5","ssecAlgorithm","ssecKey","ssecKeyMD5","trafficLimit"]),e.srcBucket&&e.srcKey){var n;let t=Re(e.srcBucket,e.srcKey);e.srcVersionID&&(t+="?versionId="+e.srcVersionID),o["x-tos-copy-source"]=null!=(n=o["x-tos-copy-source"])?n:t}if(null==e.copySourceRange&&(null!=e.copySourceRangeStart||null!=e.copySourceRangeEnd)){var i;const t=`bytes=${null!=e.copySourceRangeStart?""+e.copySourceRangeStart:""}-${null!=e.copySourceRangeEnd?""+e.copySourceRangeEnd:""}`;o["x-tos-copy-source-range"]=null!=(i=o["x-tos-copy-source-range"])?i:t}const[r,s]=await z(this._fetchObject(e,"PUT",{partNumber:a,uploadId:t},o,void 0,{handleResponse:e=>({...e.data,SSECAlgorithm:e.headers[V.ssecAlgorithm],SSECKeyMD5:e.headers[V.ssecKeyMD5]})}));if(r||!s||!s.data.ETag)throw r;return s}async function gt(e){const t=U(e.headers);if(e.headers=t,J(e,["cacheControl","contentDisposition","contentEncoding","contentLanguage","contentType","expires","copySourceIfMatch","copySourceIfModifiedSince","copySourceIfNoneMatch","copySourceIfUnmodifiedSince","copySourceSSECAlgorithm","copySourceSSECKey","copySourceSSECKeyMD5","acl","grantFullControl","grantRead","grantReadAcp","grantWriteAcp","ssecAlgorithm","ssecKey","ssecKeyMD5","serverSideEncryption","metadataDirective","meta","websiteRedirectLocation","storageClass","trafficLimit","forbidOverwrite","ifMatch"]),e.srcBucket&&e.srcKey){var a;let o=Re(e.srcBucket,e.srcKey);e.srcVersionID&&(o+="?versionId="+e.srcVersionID),t["x-tos-copy-source"]=null!=(a=t["x-tos-copy-source"])?a:o}const[o,n]=await z(this._fetchObject(e,"PUT",{},t));if(o||!n||!n.data.ETag)throw o;return n}(Qe=exports.ze||(exports.ze={})).ACLPrivate="private",Qe.ACLPublicRead="public-read",Qe.ACLPublicReadWrite="public-read-write",Qe.ACLAuthenticatedRead="authenticated-read",Qe.ACLBucketOwnerRead="bucket-owner-read",Qe.ACLBucketOwnerFullControl="bucket-owner-full-control",Qe.ACLBucketOwnerEntrusted="bucket-owner-entrusted",Qe.ACLDefault="default",(Xe=exports.uT||(exports.uT={})).StorageClassStandard="STANDARD",Xe.StorageClassIa="IA",Xe.StorageClassArchiveFr="ARCHIVE_FR",Xe.StorageClassColdArchive="COLD_ARCHIVE",Xe.StorageClassIntelligentTiering="INTELLIGENT_TIERING",Xe.StorageClassArchive="ARCHIVE",(Ye=exports.FW||(exports.FW={})).MetadataDirectiveCopy="COPY",Ye.MetadataDirectiveReplace="REPLACE",(Ze=exports.zj||(exports.zj={})).AzRedundancySingleAz="single-az",Ze.AzRedundancyMultiAz="multi-az",(et=exports.eZ||(exports.eZ={})).PermissionRead="READ",et.PermissionWrite="WRITE",et.PermissionReadAcp="READ_ACP",et.PermissionWriteAcp="WRITE_ACP",et.PermissionFullControl="FULL_CONTROL",et.PermissionReadNONLIST="READ_NON_LIST",(tt=exports.dh||(exports.dh={})).GranteeGroup="Group",tt.GranteeUser="CanonicalUser",(at=exports.a4||(exports.a4={})).CannedAllUsers="AllUsers",at.CannedAuthenticatedUsers="AuthenticatedUsers",(ot=exports.ug||(exports.ug={})).HttpMethodGet="GET",ot.HttpMethodPut="PUT",ot.HttpMethodPost="POST",ot.HttpMethodDelete="DELETE",ot.HttpMethodHead="HEAD",(nt=exports.g||(exports.g={})).StorageClassInheritDirectiveDestinationBucket="DESTINATION_BUCKET",nt.StorageClassInheritDirectiveSourceObject="SOURCE_OBJECT",(it=exports.Z5||(exports.Z5={})).Complete="COMPLETE",it.Pending="PENDING",it.Failed="FAILED",it.Replica="REPLICA",(rt=exports.fL||(exports.fL={})).Enabled="Enabled",rt.Disabled="Disabled",(st=exports.zB||(exports.zB={})).Mirror="Mirror",st.Async="Async",(ct=exports.XU||(exports.XU={})).Enabled="Enabled",ct.Disabled="Disabled",(lt=exports.Z4||(exports.Z4={})).TierStandard="Standard",lt.TierExpedited="Expedited",lt.TierBulk="Bulk",(pt=exports.Do||(exports.Do={})).Enabled="Enabled",pt.Suspended="Suspended",pt.NotSet="",pt.Enable="Enabled",pt.Disable="",(ut=exports.zL||(exports.zL={})).Ready="READY",ut.Creating="CREATING",ut.Created="CREATED",ut.Deleting="DELETING",(dt=exports.gN||(exports.gN={})).Activating="AccelerationActivating",dt.Activated="AccelerationActivated",dt.Terminated="AccelerationTerminated",(ht=exports.VI||(exports.VI={})).ClosestFirst="Closest-First",ht.LatestFirst="Latest-First",(mt=exports.IU||(exports.IU={}))[mt.CreateMultipartUploadSucceed=1]="CreateMultipartUploadSucceed",mt[mt.CreateMultipartUploadFailed=2]="CreateMultipartUploadFailed",mt[mt.UploadPartCopySucceed=3]="UploadPartCopySucceed",mt[mt.UploadPartCopyFailed=4]="UploadPartCopyFailed",mt[mt.UploadPartCopyAborted=5]="UploadPartCopyAborted",mt[mt.CompleteMultipartUploadSucceed=6]="CompleteMultipartUploadSucceed",mt[mt.CompleteMultipartUploadFailed=7]="CompleteMultipartUploadFailed";const xt=[403,404,405];async function bt(e){var t,a,o;const{cancelToken:n}=e,i=()=>n&&!!n.reason;Be(e.checkpoint);const{data:r}=await ft.call(this,{bucket:e.srcBucket,key:e.srcKey,versionId:e.srcVersionId}),s=r.etag,c=+r["content-length"],l=await(async()=>{if("string"==typeof e.checkpoint){const{checkpoint:t}=e;let a=null;try{a=await P(t)}catch(e){const t=e;if("ENOENT"!==t.code)throw t}const o=a?a.isDirectory():t.endsWith("/"),n=o?g.resolve(t,"@@checkpoint-file-placeholder@@"):g.resolve(t),i=g.dirname(n);return await M(i),o?{filePath:n,filePathIsPlaceholder:!0}:{filePath:n,filePathIsPlaceholder:!1,record:a?await te(n):void 0}}return"object"==typeof e.checkpoint?{record:e.checkpoint}:{}})();await(async()=>{var e;if(null!=(e=l.record)&&e.copy_source_object_info){var t;const{last_modified:e,object_size:a}=null==(t=l.record)?void 0:t.copy_source_object_info;r["last-modified"]===e&&+r["content-length"]===a||(console.warn(`The file has been modified since ${new Date(e)}, so the checkpoint file is invalid, and specified file will be uploaded again.`),delete l.record)}})();const p=re(c,e.partSize||(null==(t=l.record)?void 0:t.part_size)||20971520,!0);l.record&&l.record.part_size!==p&&(console.warn("The partSize param does not equal the partSize in checkpoint file, so the checkpoint file is invalid, and specified file will be uploaded again."),delete l.record);let u=e.bucket||this.opts.bucket||"";const d=e.key;let h="",m=[];const f=function(e,t){const a=[];for(let o=0;;++o){const n=o*t,i=Math.min(t,e-n);if(a.push({offset:n,partSize:i,partNumber:o+1}),(o+1)*t>=e)break}return a}(c,p);let y=((null==(a=l.record)?void 0:a.parts_info)||[]).filter(e=>e.is_completed).reduce((e,t)=>e+t.copy_source_range_end-t.copy_source_range_start+1,0);const b=(null==(o=l.record)?void 0:o.parts_info)||[],k=new Map;b.forEach(e=>k.set(e.part_number,e));const v=()=>({bucket:u,key:d,part_size:p,upload_id:h,parts_info:b,copy_source_object_info:{last_modified:r["last-modified"],etag:r.etag,hash_crc64ecma:r["x-tos-hash-crc64ecma"]||"",object_size:+r["content-length"]}}),C=t=>{if(!e.copyEventListener)return;const a={bucket:u,uploadId:h,key:d,...t};l.filePath&&(a.checkpointFile=l.filePath),e.copyEventListener(a)};let E;!function(e){e[e.start=1]="start",e[e.uploadPartSucceed=2]="uploadPartSucceed",e[e.completeMultipartUploadSucceed=3]="completeMultipartUploadSucceed"}(E||(E={}));const R=t=>{e.progress&&(y===c&&t===E.uploadPartSucceed||e.progress(t===E.start&&0===c?0:c?y/c:1,v()))},D=ee(async()=>{if(l.filePath){const e=JSON.stringify(v(),null,2),t=g.dirname(l.filePath);await M(t),await B(l.filePath,e,"utf-8")}}),O=async(e,t)=>{let a=k.get(e.partNumber);const o=e.offset,n=Math.min(e.offset+p-1,c-1);a||(a={part_number:e.partNumber,copy_source_range_start:o,copy_source_range_end:n,is_completed:!1,etag:""},b.push(a),k.set(a.part_number,a)),t.err||(a.is_completed=!0,a.etag=t.res.ETag),await D();const i={partNumber:a.part_number,copySourceRangeEnd:a.copy_source_range_end,copySourceRangeStart:a.copy_source_range_start};if(t.err){const e=t.err;let a=exports.IU.UploadPartCopyFailed;return e instanceof T&&xt.includes(e.statusCode)&&(a=exports.IU.UploadPartCopyAborted),void C({type:a,err:e,copyPartInfo:i})}i.etag=t.res.ETag,y+=i.copySourceRangeEnd-i.copySourceRangeStart+1,C({type:exports.IU.UploadPartCopySucceed,copyPartInfo:i}),R(E.uploadPartSucceed)};if(l.record){u=l.record.bucket,h=l.record.upload_id;const e=new Set((l.record.parts_info||[]).filter(e=>e.is_completed).map(e=>e.part_number));m=f.filter(t=>!e.has(t.partNumber))}else{try{const{data:t}=await ie.call(this,x(e));if(i())throw new w("cancel uploadFile");var A;u=t.Bucket,h=t.UploadId,l.filePathIsPlaceholder&&(l.filePath=null==(A=l.filePath)?void 0:A.replace("@@checkpoint-file-placeholder@@",[(j={...e,bucket:u}).srcBucket,j.srcKey,j.srcVersionId,j.bucket,j.key,"copy"].filter(Boolean).join(".").replace(/[\\/]/g,""))),C({type:exports.IU.CreateMultipartUploadSucceed})}catch(e){const t=e;throw C({type:exports.IU.CreateMultipartUploadFailed,err:t}),t}m=f}var j;return R(E.start),0===c?(async()=>{let t=Re(e.srcBucket,e.srcKey);e.srcVersionId&&(t+="?versionId="+e.srcVersionId);const a={...e.headers,"x-tos-copy-source":t,"x-tos-copy-source-if-match":s},[o,n]=await z(gt.call(this,{bucket:e.bucket,key:e.key,headers:a,trafficLimit:e.trafficLimit}));if(o||!n)throw C({type:exports.IU.UploadPartCopyFailed}),o;return R(E.completeMultipartUploadSucceed),C({type:exports.IU.UploadPartCopySucceed,copyPartInfo:{partNumber:0,copySourceRangeStart:0,copySourceRangeEnd:0}}),C({type:exports.IU.CompleteMultipartUploadSucceed}),{...n,data:{ETag:n.headers.etag||"",Bucket:u,Key:d,Location:`http${this.opts.secure?"s":""}://${u}.${this.opts.endpoint}/${d}`,VersionID:n.headers["x-tos-version-id"],HashCrc64ecma:n.headers["x-tos-hash-crc64ecma"]}}})():(async()=>{let t=null,a=0;if(await Promise.all(Array.from({length:e.taskNum||1}).map(async()=>{for(;;){const o=a++;if(o>=m.length)return;const n=m[o];try{let t=Re(e.srcBucket,e.srcKey);e.srcVersionId&&(t+="?versionId="+e.srcVersionId);const a=`bytes=${n.offset}-${n.offset+n.partSize-1}`,o={...e.headers,"x-tos-copy-source":t,"x-tos-copy-source-if-match":s,"x-tos-copy-source-range":a};n.partSize||delete o["x-tos-copy-source-range"];const{data:r}=await yt.call(this,{bucket:u,key:d,uploadId:h,partNumber:n.partNumber,headers:o,trafficLimit:e.trafficLimit});if(i())throw new w("cancel resumableCopyObject");await O(n,{res:r})}catch(e){const a=e;if(kt(a))throw a;if(i())throw new w("cancel resumableCopyObject");t||(t=a),await O(n,{err:a})}}})),t)throw t;const o=(v().parts_info||[]).map(e=>({eTag:e.etag,partNumber:e.part_number})),[n,r]=await z($e.call(this,{bucket:u,key:d,uploadId:h,parts:o}));if(n||!r)throw C({type:exports.IU.CompleteMultipartUploadFailed}),n;C({type:exports.IU.CompleteMultipartUploadSucceed}),R(E.completeMultipartUploadSucceed);const c=v().copy_source_object_info.hash_crc64ecma,p=r.data.HashCrc64ecma;if(this.opts.enableCRC&&c&&p&&c!==p)throw new S(`validate file crc64 failed. Expect crc64 ${c}, actual crc64 ${p}. Please try again.`);return await(async()=>{l.filePath&&await I(l.filePath).catch(e=>{console.warn("remove checkpoint file failure, you can remove it by hand.\n",`checkpoint file path: ${l.filePath}\n`,e.message)})})(),r})()}function kt(e){return e instanceof w}async function vt(e){const t="string"==typeof e?{key:e}:e,a={};t.versionId&&(a.versionId=t.versionId);const o=U(null==t?void 0:t.headers),n=(null==t?void 0:t.response)||{};return Object.keys(n).forEach(e=>{const t=n[e];null!=t&&(a["response-"+e]=t)}),this._fetchObject(e,"GET",a,o,void 0,{axiosOpts:{responseType:"arraybuffer"}})}const Tt=["stream","buffer"];async function St(e){const t="string"==typeof e?{key:e}:e,a=U(t.headers);t.headers=a;const o=t.dataType||"stream";t.dataType=o,function(e){let t="node",a=[];if(t="node",a=Tt,!a.includes(e))throw new S(`The value of \`dataType\` only supports \`${a.join(" | ")}\` in node environment`)}(o);const n={},i=(null==t?void 0:t.response)||{};if(Object.keys(i).forEach(e=>{const t=i[e];null!=t&&(n["response-"+e]=t)}),function(e,t,a){function o(e,a){null==t[e]&&(t[e]=a)}a.length&&a.forEach(t=>{const a=W[t];if(!a)throw new S(`\`${t}\` isn't in keys of \`requestQueryMap\``);const n=e[t];if(null==n)return;if("string"==typeof a)return o(a,""+n);if(Array.isArray(a))return o(a[0],a[1](n));const i=a(n);Object.entries(i).forEach(([e,t])=>{o(e,t)})})}(t,n,["versionId","process","saveBucket","saveObject","responseCacheControl","responseContentDisposition","responseContentEncoding","responseContentLanguage","responseContentType","responseExpires"]),J(t,["ifMatch","ifModifiedSince","ifNoneMatch","ifUnmodifiedSince","ssecAlgorithm","ssecKey","ssecKeyMD5","range","trafficLimit"]),null==t.range&&(null!=t.rangeStart||null!=t.rangeEnd)){var r;const e=`bytes=${null!=t.rangeStart?""+t.rangeStart:""}-${null!=t.rangeEnd?""+t.rangeEnd:""}`;a.range=null!=(r=a.range)?r:e}let s=0,c=-1;const{dataTransferStatusChange:l,progress:p}=t,u=(e,t=0)=>{if(t<0)return;if(!l&&!p)return;s+=t,null==l||l({type:e,rwOnceBytes:t,consumedBytes:s,totalBytes:c});const a=c<0?0:0===c?e===exports.aB.Succeed?1:0:s/c;1===a?e===exports.aB.Succeed&&(null==p||p(a)):null==p||p(a)};u(exports.aB.Started);const[d,h]=await z(this._fetchObject(e,"GET",n,a,void 0,{axiosOpts:{responseType:"stream",onDownloadProgress:e=>{c=e.total,u(exports.aB.Rw,e.loaded-s)}}}));if(d||!h)throw u(exports.aB.Failed),d;let m=h.headers,f=h.data;c=+(m["content-length"]||0),K(f)&&(t.rateLimiter&&Pe(t.rateLimiter)&&(f=be(f,t.rateLimiter)),f=pe(f,e=>u(exports.aB.Rw,e)),f.on("end",()=>u(exports.aB.Succeed)),"buffer"===o&&(f=await(async e=>{let t=Buffer.from([]);return new Promise((a,o)=>{e.on("data",e=>{t=Buffer.concat([t,e])}),e.on("end",()=>{a(t)}),e.on("error",e=>{o(e)})})})(f)));const y={...h,data:{content:f,etag:m.etag||"",lastModified:m["last-modified"]||"",hashCrc64ecma:m["x-tos-hash-crc64ecma"]||"",ReplicationStatus:m[Se.HeaderReplicationStatus]}},g=Ie(m);return g&&(y.data.RestoreInfo=g),y}async function wt(e){return new Promise(async(t,a)=>{const o=await St.call(this,e),n=o.data.content,i=C(e.filePath);n.pipe(i),n.on("error",e=>i.destroy(e)),i.on("error",e=>a(e)),i.on("finish",()=>{const e={...o.data};delete e.content,t({...o,data:{...e}})})})}var Ct;(Ct=exports.Lk||(exports.Lk={}))[Ct.CreateTempFileSucceed=1]="CreateTempFileSucceed",Ct[Ct.CreateTempFileFailed=2]="CreateTempFileFailed",Ct[Ct.DownloadPartSucceed=3]="DownloadPartSucceed",Ct[Ct.DownloadPartFailed=4]="DownloadPartFailed",Ct[Ct.DownloadPartAborted=5]="DownloadPartAborted",Ct[Ct.RenameTempFileSucceed=6]="RenameTempFileSucceed",Ct[Ct.RenameTempFileFailed=7]="RenameTempFileFailed";const Et=[403,404,405];async function Rt(e){var t,a,o,n;const{cancelToken:i,versionId:r}=e,s=()=>i&&!!i.reason;Be(e.checkpoint);const c=await ft.call(this,{bucket:e.bucket,key:e.key,versionId:r}),{data:l}=c,p=l.etag,u=null!=(t=l["x-tos-symlink-target-size"])?t:0,d="Symlink"===l["x-tos-object-type"]?+u:+l["content-length"],h=await(async()=>{if("string"==typeof e.checkpoint){const{checkpoint:t}=e;let a=null;try{a=await P(t)}catch(e){const t=e;if("ENOENT"!==t.code)throw t}const o=a?a.isDirectory():t.endsWith("/"),n=o?g.resolve(t,"@@checkpoint-file-placeholder@@"):t,i=g.dirname(n);return await M(i),o?{filePath:n,filePathIsPlaceholder:!0}:{filePath:n,filePathIsPlaceholder:!1,record:a?await te(n):void 0}}return"object"==typeof e.checkpoint?{record:e.checkpoint}:{}})();await(async()=>{var e;if(null!=(e=h.record)&&e.object_info){var t;const{last_modified:e,object_size:a}=null==(t=h.record)?void 0:t.object_info;l["last-modified"]===e&&d===a||(console.warn(`The file has been modified since ${new Date(e)}, so the checkpoint file is invalid, and specified object will be downloaded again.`),delete h.record)}})();const m=e.partSize||(null==(a=h.record)?void 0:a.part_size)||20971520;h.record&&h.record.part_size!==m&&(console.warn("The partSize param does not equal the partSize in checkpoint file, so the checkpoint file is invalid, and specified object will be downloaded again."),delete h.record);let f=e.bucket||this.opts.bucket||"";const y=e.key,x=await(async()=>{let t=null;try{t=await P(e.filePath)}catch(e){const t=e;if("ENOENT"!==t.code)throw t}const a=(t?t.isDirectory():e.filePath.endsWith("/"))?g.resolve(e.filePath,y):e.filePath,o=g.dirname(a);return await M(o),a})(),[b,k]=await(async()=>{const t=e.tempFilePath?e.tempFilePath:x+".temp";let a=!0;try{await P(t)}catch(e){const t=e;if("ENOENT"!==t.code)throw t;a=!1}return[t,a]})();h.record&&(k||(console.warn("The temp file doesn't not exist so the checkpoint file is invalid, and specified object will be downloaded again."),delete h.record));let v=[];const E=function(e,t){const a=[];for(let o=0;;++o){const n=o*t,i=Math.min(t,e-n);if(a.push({offset:n,partSize:i,partNumber:o+1}),(o+1)*t>=e)break}return a}(d,m),D=((null==(o=h.record)?void 0:o.parts_info)||[]).filter(e=>e.is_completed).reduce((e,t)=>e+(t.range_end-t.range_start+1),0),O=(null==(n=h.record)?void 0:n.parts_info)||[],A=new Map;O.forEach(e=>A.set(e.part_number,e));const j=async()=>{const t=()=>({bucket:f,key:y,version_id:r,part_size:m,parts_info:O,file_info:{file_path:x,temp_file_path:b},object_info:{last_modified:l["last-modified"],etag:p,hash_crc64ecma:l["x-tos-hash-crc64ecma"]||"",object_size:d}}),a=t=>{if(!e.downloadEventChange)return;const a={bucket:f,versionId:r,key:y,filePath:x,...t};h.filePath&&(a.checkpointFile=h.filePath),e.downloadEventChange(a)};let o,n=D;!function(e){e[e.start=0]="start",e[e.downloadPartSucceed=1]="downloadPartSucceed",e[e.renameTempFileSucceed=2]="renameTempFileSucceed"}(o||(o={}));const i=a=>{e.progress&&(n===d&&a===o.downloadPartSucceed||e.progress(a===o.start&&0===d?0:d?n/d:1,t()))};let u=D;const{dataTransferStatusChange:k}=e,P=(e,t=0)=>{k&&(u+=t,null==k||k({type:e,rwOnceBytes:t,consumedBytes:u,totalBytes:d}))},j=ee(async()=>{if(h.filePath){const e=JSON.stringify(t(),null,2),a=g.dirname(h.filePath);await M(a),await B(h.filePath,e,"utf-8")}}),_=async(e,t)=>{let r=A.get(e.partNumber);const s=e.offset,c=Math.min(e.offset+m-1,d-1);r||(r={part_number:e.partNumber,range_start:s,range_end:c,hash_crc64ecma:"",is_completed:!1},O.push(r),A.set(r.part_number,r)),t.err||(r.is_completed=!0,r.hash_crc64ecma=t.res.rangeHashCrc64ecma),await j();const l={partNumber:r.part_number,rangeStart:s,rangeEnd:c};if(t.err){const e=t.err;let o=exports.Lk.DownloadPartFailed;return e instanceof T&&Et.includes(e.statusCode)&&(o=exports.Lk.DownloadPartAborted),void a({type:o,err:e,downloadPartInfo:l})}n+=l.rangeEnd-l.rangeStart+1,a({type:exports.Lk.DownloadPartSucceed,downloadPartInfo:l}),i(o.downloadPartSucceed)};if(h.record){f=h.record.bucket;const e=new Set((h.record.parts_info||[]).filter(e=>e.is_completed).map(e=>e.part_number));v=E.filter(t=>!e.has(t.partNumber))}else{try{await B(b,"",{flag:"w+"})}catch(e){const t=e;throw a({type:exports.Lk.CreateTempFileFailed,err:t}),t}var L;h.filePathIsPlaceholder&&(h.filePath=null==(L=h.filePath)?void 0:L.replace("@@checkpoint-file-placeholder@@",function(e,t,a){return`${e}_${t}.${a}.json`.replace(/[\\/]/g,"")}(f,y,r))),a({type:exports.Lk.CreateTempFileSucceed}),P(exports.aB.Started),v=E}i(o.start),0===d?await(async()=>{})():await(async()=>{let a=null,o=0;if(await Promise.all(Array.from({length:e.taskNum||1}).map(async()=>{for(;;){const t=o++;if(t>=v.length)return;const n=v[t];let i=0;try{const t=await St.call(this,{bucket:f,key:y,versionId:r,headers:{"if-match":p,range:`bytes=${n.offset}-${Math.min(n.offset+n.partSize-1,d-1)}`},trafficLimit:e.trafficLimit,rateLimiter:e.rateLimiter,dataTransferStatusChange(e){e.type===exports.aB.Rw&&(s()||(i+=e.rwOnceBytes,P(exports.aB.Rw,e.rwOnceBytes)))}});let a=t.data.content;const o=new de;if(this.opts.enableCRC&&(a=Te(a,o)),await new Promise((e,t)=>{const o=C(b,{start:n.offset,flags:"r+"});let i=!1,r=null;o.on("close",()=>{i?t(r):e(void 0)}),o.on("error",e=>{i=!0,r=e}),a.pipe(o),a.on("error",e=>o.destroy(e)),a.on("data",(function e(){s()&&(t(new w("cancel downloadFile")),o.end(),a.unpipe(o),a.off("data",e))}))}),s())throw new w("cancel downloadFile");await _(n,{res:{...t.data,rangeHashCrc64ecma:o.getCrc64()}})}catch(e){const t=e;if(u-=i,i=0,H(t))throw t;if(s())throw new w("cancel downloadFile");a||(a=t),await _(n,{err:t})}}})),a)throw a;const n=c.data["x-tos-hash-crc64ecma"];if(this.opts.enableCRC&&n){const e=function(e){var t,a;let o="0";const n=null!=(t=null==(a=e.parts_info)||null==a.sort?void 0:a.sort((e,t)=>e.part_number-t.part_number))?t:[];for(const e of n)o=he(o,e.hash_crc64ecma,e.range_end-e.range_start+1);return o}(t());if(e!==n)throw new S(`validate file crc64 failed. Expect crc64 ${n}, actual crc64 ${e}. Please try again.`)}})();try{"function"==typeof e.customRenameFileAfterDownloadCompleted?await e.customRenameFileAfterDownloadCompleted(b,x):await R(b,x)}catch(e){const t=e;throw a({type:exports.Lk.RenameTempFileFailed,err:t}),P(exports.aB.Failed),t}return a({type:exports.Lk.RenameTempFileSucceed}),i(o.renameTempFileSucceed),P(exports.aB.Succeed),await(async()=>{h.filePath&&await I(h.filePath).catch(e=>{console.warn("remove checkpoint file failure, you can remove it by hand.\n",`checkpoint file path: ${h.filePath}\n`,e.message)})})(),c};try{return await j()}finally{}}function Pt(e){return!e||80===e||443===e}const Bt="request";class It{constructor(e,t){this.options=void 0,this.credentials=void 0,this.signature=(e,t,a)=>{a||(a=this.credentials);const o=[],n=this.credentialString(e.datetime);return o.push(this.options.algorithm+" Credential="+a.GetAccessKey()+"/"+n),o.push("SignedHeaders="+this.signedHeaders(e)),o.push("Signature="+this.authorization(e,a,0)),o.join(", ")},this.signatureHeader=(e,t,a)=>{e.datetime=this.getDateTime();const o=new Map;e.headers||(e.headers={}),e.headers.host=""+e.host,Pt(e.port)||(e.headers.host+=":"+e.port),e.endpoints&&(e.headers.host=`${this.options.bucket}.${e.endpoints}`),o.set("host",e.headers.host),o.set("x-tos-date",e.datetime),o.set("x-tos-content-sha256",this.hexEncodedBodyHash()),this.options.securityToken&&o.set("x-tos-security-token",this.options.securityToken),o.forEach((t,a)=>{a.startsWith("x-tos")&&(e.headers[a]=t)}),e.path=this.getEncodePath(e.path);const n=this.signature(e,0,a);return o.set("authorization",n),o},this.gnrCopySig=(e,t)=>({key:"",value:""}),this.getSignature=(e,t)=>({key:"",value:""}),this.getSignatureQuery=(e,t)=>{e.datetime=this.getDateTime(),e.headers||(e.headers={}),e.headers.host=""+e.host,Pt(e.port)||(e.headers.host+=":"+e.port),e.path=this.getEncodePath(e.path),e.endpoints&&(e.headers.host=`${this.options.bucket}.${e.endpoints}`),e.headers["X-Tos-Date"]=e.datetime;const a=this.credentialString(e.datetime),o={...e.query||{},"X-Tos-Algorithm":this.options.algorithm,"X-Tos-Content-Sha256":this.hexEncodedBodyHash(),"X-Tos-Credential":this.credentials.GetAccessKey()+"/"+a,"X-Tos-Date":e.datetime,"X-Tos-Expires":""+t,"X-Tos-SignedHeaders":this.signedHeaders(e)};return this.options.securityToken&&(o["X-Tos-Security-Token"]=this.options.securityToken),e.query=L(o),o["X-Tos-Signature"]=this.authorization(e,this.credentials,t),o},this.getSignaturePolicyQuery=(e,t)=>{e.datetime=this.getDateTime();const a=this.credentialString(e.datetime),o={"X-Tos-Algorithm":this.options.algorithm,"X-Tos-Credential":this.credentials.GetAccessKey()+"/"+a,"X-Tos-Date":e.datetime,"X-Tos-Expires":""+t,"X-Tos-Policy":ze(Ne(JSON.stringify(e.policy),"utf-8"),"base64")};return this.options.securityToken&&(o["X-Tos-Security-Token"]=this.options.securityToken),e.query=L(o),o["X-Tos-Signature"]=this.authorization(e,this.credentials,t),o},this.hexEncodedBodyHash=()=>"UNSIGNED-PAYLOAD",this.authorization=(e,t,a)=>{if(!e.datetime)return"";const o=this.getSigningKey(t,e.datetime.substr(0,8));return _e(o,this.stringToSign(e.datetime,e),"hex")},this.getDateTime=()=>new Date((new Date).toUTCString()).toISOString().replace(/\..+/,"").replace(/-/g,"").replace(/:/g,"")+"Z",this.credentialString=e=>this.createScope(e.substr(0,8),this.options.region,this.options.serviceName),this.createScope=(e,t,a)=>[e.substr(0,8),t,a,Bt].join("/"),this.getSigningKey=(e,t)=>{const a=_e(e.GetSecretKey(),t),o=_e(a,this.options.region),n=_e(o,this.options.serviceName);return _e(n,Bt)},this.stringToSign=(e,t)=>{if(!this.options.algorithm)return"";const a=[];a.push(this.options.algorithm),a.push(e),a.push(this.credentialString(e));const o="policy"in t?this.canonicalStringPolicy(t):this.canonicalString(t);return a.push(this.hexEncodedHash(o)),a.join("\n")},this.hexEncodedHash=e=>Le(e,"hex"),this.canonicalString=e=>{const t=[];return t.push(e.method),t.push(e.path),t.push(this.getEncodePath(e.query,!1)),t.push(this.canonicalHeaders(e)+"\n"),t.push(this.signedHeaders(e)),t.push(this.hexEncodedBodyHash()),t.join("\n")},this.canonicalStringPolicy=e=>{const t=[];return t.push(this.getEncodePath(e.query,!1)),t.push(this.hexEncodedBodyHash()),t.join("\n")},this.canonicalHeaders=e=>{const t=[],a=Mt(e.headers);for(let o of a){const a=e.headers[o];o=o.toLowerCase(),t.push(o+":"+this.canonicalHeaderValues(a.toString()))}return t.join("\n")},this.canonicalHeaderValues=e=>e.replace(/\s+/g," ").replace(/^\s+|\s+$/g,""),this.signedHeaders=e=>{const t=[],a=Mt(e.headers);for(let e of a)e=e.toLowerCase(),t.push(e);return t.sort().join(";")},this.options=e,this.credentials=t}getEncodePath(e,t=!0){if(!e)return"";let a=e;return t&&(a=e.replace(/%2F/g,"/")),a=a.replace(/\(/g,"%28"),a=a.replace(/\)/g,"%29"),a=a.replace(/!/g,"%21"),a=a.replace(/\*/g,"%2A"),a=a.replace(/\'/g,"%27"),a}}class Dt{constructor(e,t,a){this.securityToken=void 0,this.secretAccessKey=void 0,this.accessKeyId=void 0,this.accessKeyId=a,this.secretAccessKey=t,this.securityToken=e}GetAccessKey(){return this.accessKeyId}GetSecretKey(){return this.secretAccessKey}}function Mt(e){const t=[];return Object.keys(e||{}).forEach(a=>{("host"===a||a.startsWith("x-tos-"))&&null!=e[a]&&t.push(a)}),t.sort()}function Ot(e){const{tosOpts:t,...a}=e,o=new(t.isHttps?k.Agent:b.Agent)({...a,keepAlive:!0,rejectUnauthorized:t.enableVerifySSL,timeout:t.idleConnectionTime});o.maxFreeSockets=Infinity,o.maxTotalSockets=t.maxConnections;const n=o.createConnection;return o.createConnection=function(...e){const a=n.call(this,...e);let o=!1,i=!1,r=null;return process.nextTick(()=>{i||(r=setTimeout(()=>{o=!0},t.connectionTimeout))}),a.on("connect",()=>{i=!0,r&&clearTimeout(r),o&&a.destroy(new Error("Connect timeout"))}),a},o}class At{constructor(e){this.opts=void 0,this.axiosInst=void 0,this.userAgent=void 0,this.httpAgent=void 0,this.httpsAgent=void 0,this.getObjectPath=e=>{const t="string"!=typeof e&&e.bucket||this.opts.bucket,a="string"==typeof e?e:e.key;if(!t)throw new S("Must provide bucket param");return`/${t}/${encodeURIComponent(a)}`},this.setObjectContentTypeHeader=(e,t)=>{if(null!=t["content-type"])return;let a="application/octet-stream";const o=(e=>"string"==typeof e?e:e.key)(e);this.opts.autoRecognizeContentType&&(a=function(e){const t=e.lastIndexOf(".");if(t<=0)return;const a=e.slice(t+1).toLowerCase();return ce[a]}(o)||a),a&&(t["content-type"]=a)},this.getNormalDataFromError=X,this.opts=this.normalizeOpts(e),this.httpAgent=Ot({tosOpts:{...this.opts,isHttps:!1}}),this.httpsAgent=Ot({tosOpts:{...this.opts,isHttps:!this.opts.proxyHost}}),this.userAgent=this.getUserAgent(),this.axiosInst=(e=>{const t=a.create();t.defaults.auth=void 0,t.defaults.responseType="json",t.defaults.params=void 0,t.defaults.headers={},t.defaults.withCredentials=!1,t.defaults.maxContentLength=-1,t.defaults.maxBodyLength=-1,t.defaults.maxRedirects=0,t.defaults.validateStatus=function(e){return e>=200&&e<300},t.defaults.decompress=!1,t.defaults.transitional={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1};const n=e=>{var t;return e.headers=e.headers||e.header||(null==e||null==(t=e.response)?void 0:t.headers)||{},e};function i(e){Object.entries(e).forEach(([t,a])=>{const[o,n]=function(e){try{return[null,decodeURI(a)]}catch(e){return[e,null]}}();if(o||null==n||n===a)return;let i=[];const r=(""+a).match(/./gu),s=n.match(/./gu);for(let e=0,t=0;e<s.length;){const a=s[e];if(a===r[t]){i.push(a),++e,++t;continue}const o=encodeURIComponent(a);a.length>1||a.charCodeAt(0)>=128?i.push(a):i.push(o),++e,t+=o.length}e[t]=i.join("")})}return t.interceptors.response.use(n,e=>(n(e),Promise.reject(e))),t.interceptors.response.use(e=>e.headers?(i(e.headers),e):e,async e=>{var t;if(!a.isAxiosError(e))return Promise.reject(e);const o=null==(t=e.response)?void 0:t.headers;return o?(i(o),Promise.reject(e)):Promise.reject(e)}),t.interceptors.response.use(void 0,async a=>{var n;const{config:i}=a;if(!i)return Promise.reject(a);i.__retryConfig__||(i.__retryConfig__={});const r=i.__retryConfig__,s=null!=(n=r.retryCount)?n:0;let c=i.data;const l=(()=>{if(i.data&&i.data instanceof o.Readable){const e=null==r.makeRetryStream?void 0:r.makeRetryStream();if(!e)return!1;c=e}return!0})();if(!((function(e){var t;return!e.response&&Boolean(e.code)||e.response&&!(null!=(t=e.response.headers)&&t["x-tos-request-id"])}(a)||function(e){if(!e.response)return!1;const{status:t}=e.response;return 429===t||t>=500}(a))&&s<e&&l))return Promise.reject(a);const p=i.__retrySignature__;if(p){const{signOpt:e,sigInst:t}=p;t.signatureHeader(e).forEach((e,t)=>{i.headers[t]=e})}Me("retryConfig: ",i);const u={...i,data:c,__retryConfig__:{...r,retryCount:s+1}};return null==r.beforeRetry||r.beforeRetry(),t(u)}),t})(this.opts.maxRetryCount)}normalizeOpts(e){var t;["accessKeyId","accessKeySecret","stsToken","region","endpoint"].forEach(t=>{const a=e[t];"string"==typeof a&&(e[t]=a.trim())});const a=["accessKeyId","accessKeySecret","region"].filter(t=>!e[t]).join(", ");if(a)throw new S(`lack params: ${a}.`);const o=e.endpoint||`tos-${e.region}.volces.com`;if(!o)throw new S("the value of param region is invalid, correct values are cn-beijing, cn-nantong etc.");if(o.includes("s3"))throw new S("do not support s3 endpoint, please use tos endpoint.");const n=null==e.secure||!!e.secure,i=(e,t)=>null==e?t:e;return{...e,endpoint:o,secure:n,enableVerifySSL:i(e.enableVerifySSL,!0),autoRecognizeContentType:i(e.autoRecognizeContentType,!0),requestTimeout:i(e.requestTimeout,12e4),connectionTimeout:i(e.connectionTimeout,1e4),maxConnections:i(e.maxConnections,1024),idleConnectionTime:i(e.idleConnectionTime,3e4),maxRetryCount:i(e.maxRetryCount,3),enableCRC:null!=(t=e.enableCRC)&&t,requestAdapter:void 0}}getUserAgent(){const e=(()=>{const e=v.type();return{Linux:"linux",Darwin:"darwin",Windows_NT:"windows"}[e]||e})(),t=process.version.replaceAll("v","");return[`ve-tos-nodejs-sdk/v2.7.4 (${e}/${process.arch};nodejs${t})`,(()=>{const{userAgentProductName:e,userAgentSoftName:t,userAgentSoftVersion:a}=this.opts;let o=Object.entries(this.opts.userAgentCustomizedKeyValues||{}).map(([e,t])=>`${e}/${t}`).join(";");return o=o?`(${o})`:"",e||t||a||o?[[e,t,a].map(e=>e||"undefined").join("/"),o].filter(Boolean).join(" "):""})()].filter(Boolean).join(" -- ")}async fetch(e,t,o,n,i,r){const s=(null==r?void 0:r.handleResponse)||(e=>e.data);if(i&&(null==r?void 0:r.needMd5)){const e=Ue(JSON.stringify(i),"base64");n["content-md5"]=e}const[c,l]=(()=>null!=r&&r.subdomainBucket&&this.opts.forcePathStyle?[this.opts.endpoint,`/${r.subdomainBucket}${t}`]:null!=r&&r.subdomainBucket&&!this.opts.isCustomDomain?/^(\d|:)/.test(this.opts.endpoint)?[this.opts.endpoint,`/${r.subdomainBucket}${t}`]:[`${null==r?void 0:r.subdomainBucket}.${this.opts.endpoint}`,t]:[this.opts.endpoint,t])();t=l,n=(e=>{const t={};return Object.entries(e).forEach(([e,a])=>{t[e]=(""+a).match(/./gu).map(e=>e.length>1||e.charCodeAt(0)>=128?encodeURIComponent(e):e).join("")}),t})(n);const p={endpoints:void 0,bucket:"",method:e,headers:{...n},path:t,query:L(o),host:c},u=new Dt(this.opts.stsToken,this.opts.accessKeySecret,this.opts.accessKeyId),d=new It({algorithm:"TOS4-HMAC-SHA256",region:this.opts.region,serviceName:"tos",bucket:"",securityToken:this.opts.stsToken},u),h=d.signatureHeader(p),m={...n},f={method:e,baseURL:`http${this.opts.secure?"s":""}://${c}`,url:t,params:o,headers:m,data:i};h.forEach((e,t)=>{f.headers[t]=e});const y=N(this.opts.proxy);if(null!=y&&y.url&&!this.opts.proxyHost)f.baseURL=y.url,null!=y&&y.needProxyParams&&(f.params["x-proxy-tos-host"]=c,delete m.host);else if(this.opts.proxyHost){if(!this.opts.proxyPort)throw new S("The `proxyPort` is required if `proxyHost` is truly.");f.proxy={host:this.opts.proxyHost,port:this.opts.proxyPort,protocol:"http"}}m["user-agent"]=this.userAgent,this.opts.requestTimeout>0&&Infinity!==this.opts.requestTimeout&&(f.timeout=this.opts.requestTimeout),f.httpAgent=this.httpAgent,f.httpsAgent=this.httpsAgent;try{const e={...f};delete e.httpAgent,delete e.httpsAgent,Me("reqOpts: ",e);const t=await this.axiosInst({maxBodyLength:Infinity,maxContentLength:Infinity,adapter:this.opts.requestAdapter,...f,...(null==r?void 0:r.axiosOpts)||{},__retrySignature__:{signOpt:p,sigInst:d}});return{data:s(t),statusCode:t.status,headers:t.headers,requestId:t.headers["x-tos-request-id"],id2:t.headers["x-tos-id-2"]}}catch(e){var g,x;if(a.isAxiosError(e)&&null!=(g=e.response)&&null!=(x=g.headers)&&x["x-tos-request-id"]){const t=e.response;throw Me("TosServerError response: ",t),new T(t)}throw Me("err: ",e),e}}async fetchBucket(e,t,a,o,n,i){const r=e||this.opts.bucket;if(!r)throw new S("Must provide bucket param");return this.fetch(t,"/",a,o,n,{...i,subdomainBucket:r})}async _fetchObject(e,t,a,o,n,i){const r="string"!=typeof e&&e.bucket||this.opts.bucket,s="string"==typeof e?e:e.key;if(!r)throw new S("Must provide bucket param");return we(s),this.fetch(t,"/"+encodeURIComponent(s),a,o,n,{...i,subdomainBucket:r})}getSignatureQuery(e){const t=new Dt(this.opts.stsToken,this.opts.accessKeySecret,this.opts.accessKeyId),a=new It({algorithm:"TOS4-HMAC-SHA256",region:this.opts.endpoint,serviceName:"tos",bucket:e.bucket,securityToken:this.opts.stsToken},t);return"policy"in e?a.getSignaturePolicyQuery({policy:e.policy},e.expires):a.getSignatureQuery({method:e.method,path:e.path,endpoints:e.subdomain?e.endpoint:void 0,host:e.endpoint,query:e.query},e.expires)}normalizeBucketInput(e){return"string"==typeof e?{bucket:e}:e}normalizeObjectInput(e){return"string"==typeof e?{key:e}:e}}async function jt(e={}){const{...t}=e,a=await this.fetchBucket(e.bucket,"GET",j(t),{}),o=O(a.data);return o("CommonPrefixes"),o("Contents"),o("Versions"),o("DeleteMarkers"),a}async function _t(e={}){const{...t}=e,a=await this.fetchBucket(e.bucket,"GET",j({versions:"",...t}),{}),o=O(a.data);return o("CommonPrefixes"),o("Versions"),o("DeleteMarkers"),a}async function Lt(e={}){const{listOnlyOnce:t=!1}=e;let a;if(e.maxKeys||(e.maxKeys=1e3),t)a=await Ut.call(this,e);else{const t=e.maxKeys;let o={...e,maxKeys:t};for(;;){const e=await Ut.call(this,o);if(null==a?a=e:(a={...e,data:a.data},a.data.KeyCount+=e.data.KeyCount,a.data.IsTruncated=e.data.IsTruncated,a.data.NextContinuationToken=e.data.NextContinuationToken,a.data.Contents=a.data.Contents.concat(e.data.Contents),a.data.CommonPrefixes=a.data.CommonPrefixes.concat(e.data.CommonPrefixes)),!e.data.IsTruncated||a.data.KeyCount>=t)break;o.continuationToken=e.data.NextContinuationToken,o.maxKeys=o.maxKeys-e.data.KeyCount}}return a}async function Ut(e){const{...t}=e,a=await this.fetchBucket(e.bucket,"GET",{"list-type":2,...j(t)},{}),o=O(a.data);return o("CommonPrefixes"),o("Contents"),a}class Nt extends At{modifyAxiosInst(){this.axiosInst.interceptors.request.use(e=>{const t=e.headers||{};return delete t.authorization,t.host=this.parsedPolicyUrlVal.host,e.baseURL=this.parsedPolicyUrlVal.origin,e.paramsSerializer=e=>{const t=Q(e);return[this.parsedPolicyUrlVal.search,t].filter(e=>e.trim()).join("&")},e})}constructor(e){super({...e,bucket:"fake-bucket",region:"fake-region",accessKeyId:"fake-accessKeyId",accessKeySecret:"fake-accessKeySecret",endpoint:"fake-endpoint.com"}),this.shareLinkClientOpts=void 0,this.parsedPolicyUrlVal=void 0,this.headObject=ft,this.getObjectV2=St,this.listObjects=jt,this.listObjectsType2=Lt,this.listObjectVersions=_t,this.downloadFile=Rt,this.shareLinkClientOpts=e,this.parsedPolicyUrlVal=this.initParsedPolicyUrlVal(),this.modifyAxiosInst()}initParsedPolicyUrlVal(){const e=this.shareLinkClientOpts.policyUrl.match(/(https?:\/\/(?:[^@]+@)?([^/?]+))[^?]*\?(.+)/);if(!e)throw new S("the `policyUrl` param is invalid");return{origin:e[1],host:e[2],search:e[3]}}}async function zt(e={}){const t={};(null==e?void 0:e.projectName)&&J({...e,headers:t},["projectName"]);const a=await this.fetch("GET","/",{},t);return O(a.data)("Buckets"),a}async function Ft(e){const t=e.bucket||this.opts.bucket;if(t){if(t.length<3||t.length>63)throw new S("invalid bucket name, the length must be [3, 63]");if(!/^([a-z]|-|\d)+$/.test(t))throw new S("invalid bucket name, the character set is illegal");if(/^-/.test(t)||/-$/.test(t))throw new S("invalid bucket name, the bucket name can be neither starting with '-' nor ending with '-'")}const a=e.headers=U(e.headers);return J(e,["acl","grantFullControl","grantRead","grantReadAcp","grantWrite","grantWriteAcp","storageClass","azRedundancy","bucketType"]),(null==e?void 0:e.projectName)&&J(e,["projectName"]),await this.fetchBucket(e.bucket,"PUT",{},a)}async function qt(e){return this.fetchBucket(e,"DELETE",{},{})}async function Kt(e){return this.fetchBucket(e,"HEAD",{},{},void 0,{handleResponse:e=>({...e.headers,ProjectName:e.headers[Se.HeaderProjectName]})})}async function $t(e){const{bucket:t,storageClass:a}=e;return this.fetchBucket(t,"PUT",{storageClass:""},{"x-tos-storage-class":a})}async function Ht(e){const t={};return e.acl&&(t["x-tos-acl"]=e.acl),await this.fetchBucket(e.bucket,"PUT",{acl:""},t,e.aclBody,{needMd5:!0})}async function Gt(e){const t=await this.fetchBucket(e,"GET",{acl:""},{});return O(t.data)("Grants"),t}async function Vt(e){return Wt.call(this,e)}async function Wt(e){const t=(e=this.normalizeObjectInput(e)).headers=U(e.headers);J(e,["contentLength","contentMD5","contentSHA256","cacheControl","contentDisposition","contentEncoding","contentLanguage","contentType","expires","acl","grantFullControl","grantRead","grantReadAcp","grantWrite","grantWriteAcp","ssecAlgorithm","ssecKey","ssecKeyMD5","serverSideEncryption","serverSideDataEncryption","meta","websiteRedirectLocation","storageClass","trafficLimit","callback","callbackVar","forbidOverwrite","ifMatch"]),this.setObjectContentTypeHeader(e,t);const a=Ce(e.body,t),o=null!=a;o||!e.dataTransferStatusChange&&!e.progress||console.warn("Don't get totalSize of putObject's body, the `dataTransferStatusChange` and `progress` callback will not trigger. You can use `putObjectFromFile` instead");let n=0;const{dataTransferStatusChange:i,progress:r}=e,s=(e,t=0)=>{if(!o||t<0)return;if(!i&&!r)return;n+=t,null==i||i({type:e,rwOnceBytes:t,consumedBytes:n,totalBytes:a});const s=0===a?e===exports.aB.Succeed?1:0:n/a;1===s?e===exports.aB.Succeed&&(null==r||r(s)):null==r||r(s)},c=await Ee({body:e.body,dataTransferCallback:e=>s(exports.aB.Rw,e),makeRetryStream:e.makeRetryStream,enableCRC:this.opts.enableCRC,rateLimiter:e.rateLimiter});s(exports.aB.Started);const[l,p]=await z((async()=>{const a=await this._fetchObject(e,"PUT",{},t,c.body||"",{handleResponse:t=>{var a;const o={...t.headers};return null!=(a=e)&&a.callback&&t.data&&(o.CallbackResult=""+JSON.stringify(t.data)),o},axiosOpts:{__retryConfig__:{beforeRetry:()=>{n=0,null==c.beforeRetry||c.beforeRetry()},makeRetryStream:c.makeRetryStream},onUploadProgress:e=>{s(exports.aB.Rw,e.loaded-n)}}});return this.opts.enableCRC&&c.crc&&Y(c.crc,a.headers),a})());if(l||!p)throw s(exports.aB.Failed),l;return s(exports.aB.Succeed),p}async function Jt(e){const t=U(e.headers);if(!t["content-length"]){const a=await P(e.filePath);t["content-length"]=""+a.size}const a=ae(()=>E(e.filePath));try{return await Wt.call(this,{...e,body:a.make(),headers:t,makeRetryStream:a.make})}catch(e){throw oe(a.getLastStream(),e),e}}async function Qt(e){const t=e.headers=U(e.headers);return J(e,["acl","grantFullControl","grantRead","grantReadAcp","grantWriteAcp","ssecAlgorithm","ssecKey","ssecKeyMD5","meta","storageClass"]),await this._fetchObject(e,"POST",{fetch:""},t,{URL:e.url,IgnoreSameKey:e.ignoreSameKey,ContentMD5:e.contentMD5},{needMd5:!0})}async function Xt(e){const t=e.headers=U(e.headers);return J(e,["acl","grantFullControl","grantRead","grantReadAcp","grantWriteAcp","ssecAlgorithm","ssecKey","ssecKeyMD5","meta","storageClass"]),await this._fetchObject(e,"POST",{fetchTask:""},t,{URL:e.url,IgnoreSameKey:e.ignoreSameKey,ContentMD5:e.contentMD5,Object:e.key},{needMd5:!0})}function Yt(e){we(e);const t="string"==typeof e?{key:e}:e,a=t.alternativeEndpoint||this.opts.endpoint,o=!t.alternativeEndpoint&&!t.isCustomDomain,n=t.bucket||this.opts.bucket||"";if(o&&!n)throw new S("Must provide bucket param");const[i,r,s]=(()=>{const e=encodeURIComponent(t.key),i=t.key.split("/").map(e=>encodeURIComponent(e)).join("/");return o?[`${n}.${a}`,"/"+i,"/"+e]:[a,"/"+i,"/"+e]})(),c=t.query||{},l=(e,t)=>{null==c[e]&&null!=t&&(c[e]=t)},p=t.response||{};Object.keys(p).forEach(e=>{const t=e,a=j(t);l("response-"+a,p[t])}),t.versionId&&l("versionId",t.versionId);const u=this.getSignatureQuery({bucket:n,method:t.method||"GET",path:s,endpoint:a,subdomain:o,expires:t.expires||1800,query:c}),d=N(this.opts.proxy);let h=`http${this.opts.secure?"s":""}://${i}`;return null!=d&&d.url&&(h=d.url.replace(/\/+$/g,""),null!=d&&d.needProxyParams&&(u["x-proxy-tos-host"]=i)),`${h}${r}?${Object.keys(u).map(e=>`${encodeURIComponent(e)}=${encodeURIComponent(u[e])}`).join("&")}`}async function Zt(e){const t="string"==typeof e?{key:e}:e,a={};return t.versionId&&(a.versionId=t.versionId),t.skipTrash&&(a.skipTrash=t.skipTrash),t.recursive&&(a.recursive=t.recursive),await this._fetchObject(e,"DELETE",a,{},{},{handleResponse:e=>e.headers})}async function ea(e){return e.headers=e.headers||{},J(e,["recursiveMkdir","forbidOverwrite"]),this._fetchObject(e,"PUT",{rename:"",name:e.newKey},e.headers,"")}async function ta(e){const t={Quiet:e.quiet,Objects:e.objects.map(e=>({Key:e.key,VersionId:e.versionId}))},a={delete:""};e.skipTrash&&(a.skipTrash=e.skipTrash),e.recursive&&(a.recursive=e.recursive);const o=await this.fetchBucket(e.bucket,"POST",a,{},t),n=O(o.data);return n("Deleted"),n("Error"),o}async function aa(e){const t="string"==typeof e?{key:e}:e,a={acl:""};t.versionId&&(a.versionId=t.versionId);const o=await this._fetchObject(e,"GET",a,{});return O(o.data)("Grants"),o}async function oa(e){const t=e.headers=U(e.headers),a={acl:""};return e.versionId&&(a.versionId=e.versionId),J(e,["acl"]),this._fetchObject(e,"PUT",a,t,e.aclBody)}async function na(e){return this._fetchObject(e,"DELETE",{uploadId:e.uploadId},{})}async function ia(e={}){const{...t}=e,a=await this.fetchBucket(e.bucket,"GET",{uploads:"",...j(t)},{}),o=O(a.data);return o("Uploads"),o("CommonPrefixes"),a}async function ra(e){const t=e=this.normalizeObjectInput(e),a=e.headers=U(e.headers);J(e,["contentLength","cacheControl","contentDisposition","contentEncoding","contentLanguage","contentType","expires","acl","grantFullControl","grantRead","grantReadAcp","grantWriteAcp","meta","websiteRedirectLocation","storageClass","trafficLimit"]),this.setObjectContentTypeHeader(e,a);const o=Ce(e.body,a),n=null!=o;if(!n)throw new S("appendObject needs to know the content length in advance");if(a["content-length"]=a["content-length"]||""+o,this.opts.enableCRC&&0!==e.offset&&!e.preHashCrc64ecma)throw new S("must provide preHashCrc64ecma if enableCRC is true and offset is non-zero");let i=0;const{dataTransferStatusChange:r,progress:s}=e,c=(e,t=0)=>{if(!n||t<0)return;if(!r&&!s)return;i+=t,null==r||r({type:e,rwOnceBytes:t,consumedBytes:i,totalBytes:o});const a=0===o?e===exports.aB.Succeed?1:0:i/o;1===a?e===exports.aB.Succeed&&(null==s||s(a)):null==s||s(a)},l=await Ee({body:e.body,dataTransferCallback:e=>c(exports.aB.Rw,e),makeRetryStream:void 0,enableCRC:this.opts.enableCRC,rateLimiter:e.rateLimiter});c(exports.aB.Started);const[p,u]=await z((async()=>{const n=await this._fetchObject(e,"POST",{append:"",offset:t.offset},a,l.body||"",{handleResponse:e=>({...e.headers,nextAppendOffset:+e.headers["x-tos-next-append-offset"],hashCrc64ecma:e.headers["x-tos-hash-crc64ecma"]}),axiosOpts:{__retryConfig__:{beforeRetry:()=>{i=0,null==l.beforeRetry||l.beforeRetry()},makeRetryStream:l.makeRetryStream},onUploadProgress:e=>{c(exports.aB.Rw,e.loaded-i)}}});return this.opts.enableCRC&&l.crc&&Y(he(t.preHashCrc64ecma||"0",l.crc.getCrc64(),o),n.headers),n})());if(p||!u)throw c(exports.aB.Failed),p;return c(exports.aB.Succeed),u}async function sa(e){const t="string"==typeof e?{key:e}:e,a=t.headers=U(t.headers);J(t,["cacheControl","contentDisposition","contentEncoding","contentLanguage","contentType","expires","meta"]);const o={metadata:""};return t.versionId&&(o.versionId=t.versionId),this._fetchObject(e,"POST",o,a)}async function ca(e){we(e),e=this.normalizeObjectInput(e);const{expiresIn:t=3600,key:a}=e,o=e.bucket||this.opts.bucket,n={...e.fields},i=[...e.conditions||[]];if(!o)throw new S("Must provide bucket param");const r=this.opts.accessKeySecret,s=new Date,c=la({date:new Date(s.valueOf()+1e3*t),type:"ISO"}),l=la(),p=l.substring(0,8),u="tos",d="request",h=_e(r,p),m=_e(h,this.opts.region),f=_e(m,u),y=_e(f,d),g={key:a,"x-tos-algorithm":"TOS4-HMAC-SHA256","x-tos-date":l,"x-tos-credential":[this.opts.accessKeyId,p,this.opts.region,u,d].join("/")};this.opts.stsToken&&(g["x-tos-security-token"]=this.opts.stsToken),i.push({bucket:o}),Object.entries(g).forEach(([e,t])=>{n[e]=t}),Object.entries(n).forEach(([e,t])=>{i.push({[e]:""+t})});const x=JSON.stringify({expiration:c,conditions:i}),b=ze(Ne(x,"utf-8"),"base64"),k=_e(y,b,"hex");return n.policy=b,n["x-tos-signature"]=k,n}function la(e){const{date:t=new Date,type:a="Z"}=e||{};return"ISO"===a?t.toISOString():t.toISOString().replace(/\..+/,"").replace(/-/g,"").replace(/:/g,"")+"Z"}const pa={getBucketCustomDomain:!0,getBucketIntelligenttiering:!0,getBucketInventory:!0,listBucketInventory:!0,getBucketMirrorBack:!0,getBucketNotification:!0,getBucketPolicy:!0,getBucketRealTimeLog:!0,getBucketReplication:!0,getBucketTagging:!0,getBucketWebsite:!0};function ua(e,t){const{enableCatchEmptyServerError:a,methodKey:o,defaultResponse:n}=t;if(e instanceof T)if(a){if(404===e.statusCode)return X(n,e)}else if(void 0===a&&404===e.statusCode&&pa[o])return X(n,e);throw e}async function da(e){return!this.opts.enableOptimizeMethodBehavior&&void 0!==this.opts.enableOptimizeMethodBehavior||e.policy.Statement.length?await this.fetchBucket(e.bucket,"PUT",{policy:""},{},e.policy,{needMd5:!0}):ma.call(this,e.bucket)}async function ha(e){try{const t=await this.fetchBucket(e,"GET",{policy:""},{});return t.data.Statement.forEach(e=>{const t=O(e);Object.keys(e.Condition||{}).forEach(a=>{Object.keys(e.Condition[a]).forEach(e=>{t(`Condition["${a}"]["${e}"]`)})})}),t}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketPolicy",defaultResponse:{Statement:[],Version:"2012-10-17"}})}}async function ma(e){return this.fetchBucket(e,"DELETE",{policy:""},{})}async function fa(e){return this.fetchBucket(e,"GET",{versioning:""},{})}async function ya(e){return this.fetchBucket(e.bucket,"PUT",{versioning:""},{},{Status:e.status})}function ga(e){const t=xa.call(this,e);ba(e.conditions);const a=`http${this.opts.secure?"s":""}://${e.alternativeEndpoint||(e.isCustomDomain?this.opts.endpoint:`${t.bucket}.${this.opts.endpoint}`)}`,o=$(this.getSignatureQuery({bucket:t.bucket,expires:t.expires,policy:{conditions:t.conditions}}));return{getSignedURLForList:e=>{const t=$(e),n=[o,t].filter(Boolean).join("&");return`${a}?${n}`},getSignedURLForGetOrHead:(e,t)=>{const n=$(t),i=[o,n].filter(Boolean).join("&"),r=e.split("/").map(e=>encodeURIComponent(e)).join("/");return`${a}/${r}?${i}`},signedQuery:o}}function xa(e){const t=e.bucket||this.opts.bucket;if(!t)throw new S("Must provide bucket param");ba(e.conditions);const a=e.conditions.map(e=>[e.operator||"eq","$key",e.value]);return a.push(["eq","$bucket",t]),{bucket:t,expires:e.expires||3600,conditions:a}}function ba(e){if(e.length<1)throw new S("The `conditions` field of `PreSignedPolicyURLInput` must has one item at least");for(const t of e){if("key"!==t.key)throw new S("The `key` field of `PolicySignatureCondition` must be `'key'`");if(t.operator&&"eq"!==t.operator&&"starts-with"!==t.operator)throw new S("The `operator` field of `PolicySignatureCondition` must be `'eq'` or `'starts-with'`")}}async function ka(e){const{bucket:t}=e;return this.fetchBucket(t,"GET",{location:""},{})}async function va(e){try{const{bucket:t}=e;return await this.fetchBucket(t,"GET",{cors:""},{})}catch(e){return ua(e,{defaultResponse:{CORSRules:[]},enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketCORS"})}}async function Ta(e){const{bucket:t,CORSRules:a}=e;return this.opts.enableOptimizeMethodBehavior&&!a.length?Sa.call(this,{bucket:t}):this.fetchBucket(t,"PUT",{cors:""},{},{CORSRules:a})}async function Sa(e){const{bucket:t}=e;return this.fetchBucket(t,"DELETE",{cors:""},{})}async function wa(e){const{bucket:t,rules:a}=e;if(this.opts.enableOptimizeMethodBehavior&&!a.length)return Ea.call(this,{bucket:t});const o={};return J({...e,headers:o},["allowSameActionOverlap"]),this.fetchBucket(t,"PUT",{lifecycle:""},o,{Rules:a})}async function Ca(e){try{const{bucket:t}=e;return await this.fetchBucket(t,"GET",{lifecycle:""},{},{},{handleResponse:e=>({AllowSameActionOverlap:e.headers["x-tos-allow-same-action-overlap"],Rules:e.data.Rules})})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketLifecycle",defaultResponse:{Rules:[]}})}}async function Ea(e){const{bucket:t}=e;return this.fetchBucket(t,"DELETE",{lifecycle:""},{})}async function Ra(e){const{bucket:t,rule:a}=e;return this.fetchBucket(t,"PUT",{encryption:""},{"Content-MD5":Oe(JSON.stringify({Rule:a}),"base64")},{Rule:a})}async function Pa(e){const{bucket:t}=e;return this.fetchBucket(t,"GET",{encryption:""},{})}async function Ba(e){const{bucket:t}=e;return this.fetchBucket(t,"DELETE",{encryption:""},{})}async function Ia(e){const{bucket:t,rules:a}=e;return this.opts.enableOptimizeMethodBehavior&&!a.length?Ma.call(this,{bucket:t}):this.fetchBucket(t,"PUT",{mirror:""},{},{Rules:a})}async function Da(e){const{bucket:t}=e;try{return await this.fetchBucket(t,"GET",{mirror:""},{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketMirrorBack",defaultResponse:{Rules:[]}})}}async function Ma(e){const{bucket:t}=e;return this.fetchBucket(t,"DELETE",{mirror:""},{})}async function Oa(e){const{tagSet:t,versionId:a}=e,o=U({versionId:a});return this._fetchObject(e,"PUT",{tagging:"",...o},{},{TagSet:t})}async function Aa(e){const{versionId:t}=e,a=U({versionId:t}),o=await this._fetchObject(e,"GET",{tagging:"",...a},{});return O(o.data.TagSet)("Tags"),o}async function ja(e){const{versionId:t}=e,a=U({versionId:t});return this._fetchObject(e,"DELETE",{tagging:"",...a},{})}async function _a(e){const{bucket:t,rules:a,role:o}=e;return this.opts.enableOptimizeMethodBehavior&&!a.length?Ua.call(this,{bucket:t}):this.fetchBucket(t,"PUT",{replication:""},{},{Role:o,Rules:a})}async function La(e){const{bucket:t,progress:a,ruleId:o}=e,n={replication:"",progress:a||""};null!=o&&(n["rule-id"]=""+o);try{return await this.fetchBucket(t,"GET",n,{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketReplication",defaultResponse:{Rules:[],Role:""}})}}async function Ua(e){const{bucket:t}=e;return this.fetchBucket(t,"DELETE",{replication:""},{})}async function Na(e){const{bucket:t,...a}=e,o=_(a);return this.fetchBucket(t,"PUT",{website:""},{},{...o})}async function za(e){const{bucket:t}=e;try{return this.fetchBucket(t,"GET",{website:""},{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketWebsite",defaultResponse:{RoutingRules:[]}})}}async function Fa(e){const{bucket:t}=e;return this.fetchBucket(t,"DELETE",{website:""},{})}async function qa(e){const{bucket:t,...a}=e,o=_(a);return this.fetchBucket(t,"PUT",{notification:""},{},{...o})}async function Ka(e){const{bucket:t}=e;try{return await this.fetchBucket(t,"GET",{notification:""},{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketNotification",defaultResponse:{CloudFunctionConfigurations:[],RocketMQConfigurations:[]}})}}async function $a(e){const{bucket:t,...a}=e,o=_(a);return this.fetchBucket(t,"PUT",{customdomain:""},{},{...o})}async function Ha(e){try{const{bucket:t}=e;return await this.fetchBucket(t,"GET",{customdomain:""},{})}catch(e){return ua(e,{defaultResponse:{CustomDomainRules:[]},enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketCustomDomain"})}}async function Ga(e){const{bucket:t,customDomain:a}=e;return this.fetchBucket(t,"DELETE",{customdomain:a},{})}async function Va(e){const{bucket:t,...a}=e,o=_(a);return this.fetchBucket(t,"PUT",{realtimeLog:""},{},{...o})}async function Wa(e){const{bucket:t}=e;try{return await this.fetchBucket(t,"GET",{realtimeLog:""},{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketRealTimeLog",defaultResponse:{}})}}async function Ja(e){const{bucket:t}=e;return this.fetchBucket(t,"DELETE",{realtimeLog:""},{})}var Qa,Xa,Ya,Za,eo,to,ao;async function oo(e){try{return await this.fetchBucket(e.bucket,"GET",{inventory:"",id:e.id},{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketInventory",defaultResponse:void 0})}}async function no(e){const t={inventory:"",...e.continuationToken?{"continuation-token":e.continuationToken}:null};try{return await this.fetchBucket(e.bucket,"GET",t,{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"listBucketInventory",defaultResponse:{InventoryConfigurations:[]}})}}async function io(e){return this.fetchBucket(e.bucket,"DELETE",{inventory:"",id:e.id},{})}function ro(e){return this.fetchBucket(e.bucket,"PUT",{inventory:"",id:e.inventoryConfiguration.Id},{},e.inventoryConfiguration)}async function so(e){const{accountId:t,...a}=e,o=_(a);return await this.fetch("POST","/jobs",{},{"x-tos-account-id":t},{...o})}async function co(e){const{accountId:t,maxResults:a=1e3,...o}=e;return await this.fetch("GET","/jobs",{maxResults:a,...o},{"x-tos-account-id":t},{},{axiosOpts:{paramsSerializer:Q}})}async function lo(e){const{accountId:t,jobId:a,priority:o}=e;return await this.fetch("POST",`/jobs/${a}/priority`,{priority:o},{"x-tos-account-id":t},{},{needMd5:!0})}async function po(e){const{accountId:t,jobId:a,requestedJobStatus:o,statusUpdateReason:n}=e;return await this.fetch("POST",`/jobs/${a}/status`,{requestedJobStatus:o,statusUpdateReason:n},{"x-tos-account-id":t},{},{needMd5:!0})}async function uo(e){const{accountId:t,JobId:a}=e;return await this.fetch("DELETE","/jobs/"+a,{},{"x-tos-account-id":t},{})}async function ho(e){const{accountId:t,JobId:a}=e;return await this.fetch("GET","/jobs/"+a,{},{"x-tos-account-id":t},{})}async function mo(e){return await this.fetchBucket(e.bucket,"PUT",{tagging:""},{},e.tagging,{needMd5:!0})}async function fo({bucket:e}){try{return await this.fetchBucket(e,"GET",{tagging:""},{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketTagging",defaultResponse:{TagSet:{Tags:[]}}})}}async function yo({bucket:e}){return this.fetchBucket(e,"DELETE",{tagging:""},{})}async function go(e){return await this.fetchBucket(e.bucket,"PUT",{payByTraffic:""},{},e.payByTraffic)}async function xo({bucket:e}){return await this.fetchBucket(e,"GET",{payByTraffic:""},{})}async function bo(e){const{bucket:t}=e;try{return await this.fetchBucket(t,"GET",{imageStyleBriefInfo:""},{})}catch(e){if(e instanceof T&&404===e.statusCode)return this.getNormalDataFromError({BucketName:t,ImageStyleBriefInfo:[]},e);throw e}}async function ko(e){try{return await this.fetchBucket(e,"GET",{imageStyle:""},{})}catch(e){if(e instanceof T&&404===e.statusCode)return this.getNormalDataFromError({ImageStyles:[]},e);throw e}}async function vo(e){try{const{bucket:t,styleName:a}=e;return await this.fetchBucket(t,"GET",{imageStyleContent:"",styleName:a},{})}catch(e){if(e instanceof T&&404===e.statusCode)return this.getNormalDataFromError({ImageStyles:[]},e);throw e}}async function To(e,t){try{return await this.fetchBucket(e,"GET",{imageStyle:"",styleName:t},{})}catch(e){if(e instanceof T&&404===e.statusCode)return this.getNormalDataFromError(null,e);throw e}}async function So(e){const{bucket:t,styleName:a,content:o,styleObjectPrefix:n}=e;try{return await this.fetchBucket(t,"PUT",{imageStyle:"",styleName:a,styleObjectPrefix:n},{},{Content:o})}catch(e){if(e instanceof T&&404===e.statusCode)return this.getNormalDataFromError(null,e);throw e}}async function wo(e){const{styleName:t,styleObjectPrefix:a,bucket:o}=e;try{return await this.fetchBucket(o,"DELETE",{imageStyle:"",styleName:t,styleObjectPrefix:a},{})}catch(e){if(e instanceof T&&404===e.statusCode)return this.getNormalDataFromError(null,e);throw e}}async function Co(e,t){try{return await this.fetchBucket(e,"PUT",{originalImageProtect:""},{},t)}catch(e){if(e instanceof T&&404===e.statusCode)return this.getNormalDataFromError(null,e);throw e}}async function Eo(e){try{return await this.fetchBucket(e,"GET",{originalImageProtect:""},{})}catch(e){if(e instanceof T&&404===e.statusCode)return this.getNormalDataFromError(null,e);throw e}}async function Ro(e){const{bucket:t,Separator:a,SeparatorSuffix:o}=e;try{return await this.fetchBucket(t,"PUT",{imageStyleSeparator:""},{},{Separator:a,SeparatorSuffix:o})}catch(e){if(e instanceof T&&404===e.statusCode)return this.getNormalDataFromError(null,e);throw e}}async function Po(e){try{return await this.fetchBucket(e,"GET",{imageStyleSeparator:""},{})}catch(e){if(e instanceof T&&404===e.statusCode)return this.getNormalDataFromError(null,e);throw e}}async function Bo(e){try{return await this.fetchBucket(e,"GET",{intelligenttiering:""},{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketIntelligenttiering",defaultResponse:{}})}}async function Io(e){const{bucket:t,...a}=e,o=_(a);return this.fetchBucket(t,"PUT",{rename:""},{},{...o})}async function Do(e){const{bucket:t}=e;return await this.fetchBucket(t,"GET",{rename:""},{})}async function Mo(e){const{bucket:t}=e;return this.fetchBucket(t,"DELETE",{rename:""},{})}async function Oo(e){const{versionId:t,...a}=e,o={restore:""};t&&(o.versionId=t);const n=_(a);return this._fetchObject(e,"POST",o,{},n)}async function Ao(e){const{accountId:t}=e;return await this.fetch("GET","/storagelens",{},{"x-tos-account-id":t},{},{axiosOpts:{paramsSerializer:Q}})}async function jo(e){const{accountId:t,Id:a}=e;return await this.fetch("DELETE","/storagelens",{id:a},{"x-tos-account-id":t},{},{needMd5:!0})}async function _o(e){const{accountId:t,Id:a}=e;return await this.fetch("GET","/storagelens",{id:a},{"x-tos-account-id":t},{},{needMd5:!0})}async function Lo(e){const{accountId:t,Id:a,...o}=e;return await this.fetch("PUT","/storagelens",{id:a},{"x-tos-account-id":t},{...o,Id:a},{needMd5:!0})}async function Uo(e){const{bucket:t,...a}=e,o=_(a);return this.fetchBucket(t,"PUT",{notification_v2:""},{},{...o})}async function No(e){const{bucket:t}=e;try{return await this.fetchBucket(t,"GET",{notification_v2:""},{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketNotificationType2",defaultResponse:{Rules:[]}})}}async function zo(e){return Fo.call(this,e)}async function Fo(e){const t=e.headers=U(e.headers);return J(e,["symLinkTargetKey","symLinkTargetBucket","forbidOverwrite","acl","storageClass","meta"]),this._fetchObject(e,"PUT",{symlink:""},t,void 0,{handleResponse(e){const{headers:t}=e;return{VersionID:t["x-tos-version-id"]}}})}async function qo(e){return Ko.call(this,e)}async function Ko(e){const t={symlink:""};return e.versionId&&(t.versionId=e.versionId),this._fetchObject(e,"GET",t,{},void 0,{handleResponse:e=>{const{headers:t}=e;return{VersionID:t["x-tos-version-id"],SymlinkTargetKey:t["x-tos-symlink-target"],SymlinkTargetBucket:t["x-tos-symlink-bucket"],LastModified:t["last-modified"]}}})}async function $o(e){const{bucket:t,...a}=e,o=_(a);return this.fetchBucket(t,"PUT",{transferAcceleration:""},{},{...o})}async function Ho(e){try{const{bucket:t}=e,a={};return e.getStatus&&(a["x-tos-get-bucket-acceleration-status"]="true"),await this.fetchBucket(t,"GET",{transferAcceleration:""},a)}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketTransferAcceleration",defaultResponse:{TransferAccelerationConfiguration:{Enabled:"false",Status:exports.gN.Terminated}}})}}async function Go(e){const{bucket:t,status:a}=e;return this.fetchBucket(t,"PUT",{accessmonitor:""},{},{Status:a})}async function Vo(e){try{const{bucket:t}=e;return await this.fetchBucket(t,"GET",{accessmonitor:""},{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketAccessMonitor",defaultResponse:{}})}}async function Wo(e){const{accountId:t}=e;return await this.fetch("GET","/qospolicy",{},{"x-tos-account-id":t},{},{})}async function Jo(e){const{accountId:t,...a}=e;return await this.fetch("PUT","/qospolicy",{},{"x-tos-account-id":t},{...a},{})}async function Qo(e){const{accountId:t}=e;return await this.fetch("DELETE","/qospolicy",{},{"x-tos-account-id":t},{},{})}async function Xo(e){const{accountId:t,name:a,regions:o}=e;return await this.fetch("POST","/mrap",{name:a},{"x-tos-account-id":t},{Name:a,Regions:o},{})}async function Yo(e){const{name:t,accountId:a}=e;return await this.fetch("GET","/mrap",{name:t},{"x-tos-account-id":a},{},{})}async function Zo(e){const{accountId:t,...a}=e;return await this.fetch("GET","/mrap",{...a},{"x-tos-account-id":t},{},{})}async function en(e){const{accountId:t,alias:a}=e;return await this.fetch("GET","/mrap/routes",{alias:a},{"x-tos-account-id":t})}async function tn(e){const{name:t,accountId:a}=e;return await this.fetch("DELETE","/mrap",{name:t},{"x-tos-account-id":a})}async function an(e){const{routes:t,accountId:a,alias:o}=e;return await this.fetch("PATCH","/mrap/routes",{alias:o},{"x-tos-account-id":a},{Routes:t})}!function(e){e.Daily="Daily",e.Weekly="Weekly"}(Qa||(Qa={})),function(e){e.All="All",e.Current="Current"}(Xa||(Xa={})),function(e){e.Size="Size",e.LastModifiedDat="LastModifiedDate",e.ETag="ETag",e.StorageClass="StorageClass",e.IsMultipartUploaded="IsMultipartUploaded",e.EncryptionStatus="EncryptionStatus",e.CRC64="CRC64",e.ReplicationStatus="ReplicationStatus"}(Ya||(Ya={})),function(e){e.StringEquals="StringEquals",e.StringNotEquals="StringNotEquals",e.StringEqualsIgnoreCase="StringEqualsIgnoreCase",e.StringNotEqualsIgnoreCase="StringNotEqualsIgnoreCase",e.StringLike="StringLike",e.StringNotLike="StringNotLike"}(Za||(Za={})),function(e){e.DateEquals="DateEquals",e.DateNotEquals="DateNotEquals",e.DateLessThan="DateLessThan",e.DateLessThanEquals="DateLessThanEquals",e.DateGreaterThan="DateGreaterThan",e.DateGreaterThanEquals="DateGreaterThanEquals"}(eo||(eo={})),function(e){e.IpAddress="IpAddress",e.NotIpAddress="NotIpAddress"}(to||(to={})),function(e){e.WritesQps="WritesQps",e.ReadsQps="ReadsQps",e.ListQps="ListQps",e.WritesRate="WritesRate",e.ReadsRate="ReadsRate"}(ao||(ao={}));const on=async function(e){const{accountId:t,alias:a,rules:o}=e;return this.opts.enableOptimizeMethodBehavior&&!o.length?rn.call(this,{accountId:t,alias:a}):await this.fetch("PUT","/mrap/mirror",{alias:a},{"x-tos-account-id":t},{Rules:o},{handleResponse:()=>({})})},nn=async function(e){const{accountId:t,alias:a}=e;try{const e=await this.fetch("GET","/mrap/mirror",{alias:a},{"x-tos-account-id":t},{},{});return O(e.data)("Rules"),e}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getMultiRegionAccessPointMirrorBack",defaultResponse:{Rules:[]}})}},rn=async function(e){const{accountId:t,alias:a}=e;return await this.fetch("DELETE","/mrap/mirror",{alias:a},{"x-tos-account-id":t},{},{handleResponse:()=>({})})};async function sn(e){const{bucket:t,enable:a}=e;return await this.fetchBucket(t,"PUT",{privateM3U8:""},{},{Enable:a})}async function cn(e){const{bucket:t}=e;try{return await this.fetchBucket(t,"GET",{privateM3U8:""},{})}catch(e){return ua(e,{enableCatchEmptyServerError:this.opts.enableOptimizeMethodBehavior,methodKey:"getBucketPrivateM3U8",defaultResponse:{Enable:!1}})}}async function ln(e){const{bucket:t,...a}=e,o=_(a);return this.fetchBucket(t,"PUT",{trash:""},{},{...o})}async function pn(e){const{bucket:t}=e;return await this.fetchBucket(t,"GET",{trash:""},{})}class un extends At{constructor(...e){super(...e),this.createBucket=Ft,this.headBucket=Kt,this.deleteBucket=qt,this.listBuckets=zt,this.getBucketLocation=ka,this.putBucketStorageClass=$t,this.getBucketAcl=Gt,this.putBucketAcl=Ht,this.getBucketPolicy=ha,this.putBucketPolicy=da,this.deleteBucketPolicy=ma,this.getBucketVersioning=fa,this.putBucketVersioning=ya,this.getBucketCORS=va,this.putBucketCORS=Ta,this.deleteBucketCORS=Sa,this.putBucketLifecycle=wa,this.getBucketLifecycle=Ca,this.deleteBucketLifecycle=Ea,this.putBucketEncryption=Ra,this.getBucketEncryption=Pa,this.deleteBucketEncryption=Ba,this.putBucketMirrorBack=Ia,this.getBucketMirrorBack=Da,this.deleteBucketMirrorBack=Ma,this.putBucketReplication=_a,this.getBucketReplication=La,this.deleteBucketReplication=Ua,this.putBucketWebsite=Na,this.getBucketWebsite=za,this.deleteBucketWebsite=Fa,this.putBucketNotification=qa,this.getBucketNotification=Ka,this.putBucketCustomDomain=$a,this.getBucketCustomDomain=Ha,this.deleteBucketCustomDomain=Ga,this.putBucketRealTimeLog=Va,this.getBucketRealTimeLog=Wa,this.deleteBucketRealTimeLog=Ja,this.getBucketInventory=oo,this.listBucketInventory=no,this.putBucketInventory=ro,this.deleteBucketInventory=io,this.putBucketTagging=mo,this.getBucketTagging=fo,this.deleteBucketTagging=yo,this.putBucketPayByTraffic=go,this.getBucketPayByTraffic=xo,this.getBucketImageStyle=To,this.getBucketImageStyleList=ko,this.getBucketImageStyleListByName=vo,this.getImageStyleBriefInfo=bo,this.deleteBucketImageStyle=wo,this.putBucketImageStyle=So,this.putBucketImageStyleSeparator=Ro,this.putBucketImageProtect=Co,this.getBucketImageProtect=Eo,this.getBucketImageStyleSeparator=Po,this.putBucketRename=Io,this.getBucketRename=Do,this.deleteBucketRename=Mo,this.putBucketTransferAcceleration=$o,this.getBucketTransferAcceleration=Ho,this.copyObject=gt,this.resumableCopyObject=bt,this.deleteObject=Zt,this.deleteMultiObjects=ta,this.getObject=vt,this.getObjectV2=St,this.getObjectToFile=wt,this.getObjectAcl=aa,this.headObject=ft,this.appendObject=ra,this.listObjects=jt,this.renameObject=ea,this.fetchObject=Qt,this.putFetchTask=Xt,this.listObjectsType2=Lt,this.listObjectVersions=_t,this.putObject=Vt,this.putObjectFromFile=Jt,this.putObjectAcl=oa,this.setObjectMeta=sa,this.createMultipartUpload=ie,this.uploadPart=qe,this.uploadPartFromFile=Ke,this.completeMultipartUpload=$e,this.abortMultipartUpload=na,this.uploadPartCopy=yt,this.listMultipartUploads=ia,this.listParts=se,this.downloadFile=Rt,this.putObjectTagging=Oa,this.getObjectTagging=Aa,this.deleteObjectTagging=ja,this.listJobs=co,this.createJob=so,this.deleteJob=uo,this.describeJob=ho,this.updateJobStatus=po,this.updateJobPriority=lo,this.restoreObject=Oo,this.uploadFile=We,this.getPreSignedUrl=Yt,this.calculatePostSignature=ca,this.preSignedPostSignature=ca,this.preSignedPolicyURL=ga,this.getBucketIntelligenttiering=Bo,this.listStorageLens=Ao,this.deleteStorageLens=jo,this.getStorageLens=_o,this.putStorageLens=Lo,this.putBucketNotificationType2=Uo,this.getBucketNotificationType2=No,this.putSymlink=zo,this.getSymlink=qo,this.putBucketAccessMonitor=Go,this.getBucketAccessMonitor=Vo,this.putQosPolicy=Jo,this.getQosPolicy=Wo,this.deleteQosPolicy=Qo,this.createMultiRegionAccessPoint=Xo,this.getMultiRegionAccessPoint=Yo,this.listMultiRegionAccessPoints=Zo,this.getMultiRegionAccessPointRoutes=en,this.deleteMultiRegionAccessPoint=tn,this.submitMultiRegionAccessPointRoutes=an,this.putMultiRegionAccessPointMirrorBack=on,this.getMultiRegionAccessPointMirrorBack=nn,this.deleteMultiRegionAccessPointMirrorBack=rn,this.putBucketPrivateM3U8=sn,this.getBucketPrivateM3U8=cn,this.putBucketTrash=ln,this.getBucketTrash=pn}}const dn=a.CancelToken;class hn extends un{}hn.TosServerError=T,hn.isCancel=H,hn.CancelError=w,hn.TosServerCode=exports.Lm,hn.TosClientError=S,hn.CancelToken=dn,hn.ACLType=exports.ze,hn.StorageClassType=exports.uT,hn.MetadataDirectiveType=exports.FW,hn.AzRedundancyType=exports.zj,hn.PermissionType=exports.eZ,hn.GranteeType=exports.dh,hn.CannedType=exports.a4,hn.HttpMethodType=exports.ug,hn.LifecycleStatusType=exports.fL,hn.StatusType=exports.XU,hn.RedirectType=exports.zB,hn.StorageClassInheritDirectiveType=exports.g,hn.TierType=exports.Z4,hn.VersioningStatusType=exports.Do,hn.createDefaultRateLimiter=xe,hn.DataTransferType=exports.aB,hn.UploadEventType=exports.KW,hn.DownloadEventType=exports.Lk,hn.ResumableCopyEventType=exports.IU,hn.ReplicationStatusType=exports.Z5,hn.AccessPointStatusType=exports.zL,hn.TransferAccelerationStatusType=exports.gN,hn.MRAPMirrorBackRedirectPolicyType=exports.VI,hn.ShareLinkClient=Nt,__webpack_unused_export__=w,__webpack_unused_export__=dn,__webpack_unused_export__=Nt,__webpack_unused_export__=hn,exports.TosClient=hn,exports.TosClientError=S,exports.TosServerError=T,__webpack_unused_export__=xe,__webpack_unused_export__=hn,__webpack_unused_export__=H;
//# sourceMappingURL=tos.cjs.production.min.js.map


/***/ }),

/***/ 6029:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(2019);

/***/ }),

/***/ 2516:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);
var settle = __nccwpck_require__(2286);
var buildFullPath = __nccwpck_require__(91);
var buildURL = __nccwpck_require__(3982);
var http = __nccwpck_require__(8611);
var https = __nccwpck_require__(5692);
var httpFollow = (__nccwpck_require__(3716).http);
var httpsFollow = (__nccwpck_require__(3716).https);
var url = __nccwpck_require__(7016);
var zlib = __nccwpck_require__(3106);
var pkg = __nccwpck_require__(9947);
var createError = __nccwpck_require__(5111);
var enhanceError = __nccwpck_require__(8829);

var isHttps = /https:?/;

/**
 *
 * @param {http.ClientRequestArgs} options
 * @param {AxiosProxyConfig} proxy
 * @param {string} location
 */
function setProxy(options, proxy, location) {
  options.hostname = proxy.host;
  options.host = proxy.host;
  options.port = proxy.port;
  options.path = location;

  // Basic proxy authorization
  if (proxy.auth) {
    var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
    options.headers['Proxy-Authorization'] = 'Basic ' + base64;
  }

  // If a proxy is used, any redirects must also pass through the proxy
  options.beforeRedirect = function beforeRedirect(redirection) {
    redirection.headers.host = redirection.host;
    setProxy(redirection, proxy, redirection.href);
  };
}

/*eslint consistent-return:0*/
module.exports = function httpAdapter(config) {
  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
    var resolve = function resolve(value) {
      resolvePromise(value);
    };
    var reject = function reject(value) {
      rejectPromise(value);
    };
    var data = config.data;
    var headers = config.headers;

    // Set User-Agent (required by some servers)
    // See https://github.com/axios/axios/issues/69
    if ('User-Agent' in headers || 'user-agent' in headers) {
      // User-Agent is specified; handle case where no UA header is desired
      if (!headers['User-Agent'] && !headers['user-agent']) {
        delete headers['User-Agent'];
        delete headers['user-agent'];
      }
      // Otherwise, use specified value
    } else {
      // Only set header if it hasn't been set in config
      headers['User-Agent'] = 'axios/' + pkg.version;
    }

    if (data && !utils.isStream(data)) {
      if (Buffer.isBuffer(data)) {
        // Nothing to do...
      } else if (utils.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils.isString(data)) {
        data = Buffer.from(data, 'utf-8');
      } else {
        return reject(createError(
          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
          config
        ));
      }

      // Add Content-Length header if data exists
      headers['Content-Length'] = data.length;
    }

    // HTTP basic authentication
    var auth = undefined;
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      auth = username + ':' + password;
    }

    // Parse url
    var fullPath = buildFullPath(config.baseURL, config.url);
    var parsed = url.parse(fullPath);
    var protocol = parsed.protocol || 'http:';

    if (!auth && parsed.auth) {
      var urlAuth = parsed.auth.split(':');
      var urlUsername = urlAuth[0] || '';
      var urlPassword = urlAuth[1] || '';
      auth = urlUsername + ':' + urlPassword;
    }

    if (auth) {
      delete headers.Authorization;
    }

    var isHttpsRequest = isHttps.test(protocol);
    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;

    var options = {
      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
      method: config.method.toUpperCase(),
      headers: headers,
      agent: agent,
      agents: { http: config.httpAgent, https: config.httpsAgent },
      auth: auth
    };

    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname;
      options.port = parsed.port;
    }

    var proxy = config.proxy;
    if (!proxy && proxy !== false) {
      var proxyEnv = protocol.slice(0, -1) + '_proxy';
      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
      if (proxyUrl) {
        var parsedProxyUrl = url.parse(proxyUrl);
        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
        var shouldProxy = true;

        if (noProxyEnv) {
          var noProxy = noProxyEnv.split(',').map(function trim(s) {
            return s.trim();
          });

          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
            if (!proxyElement) {
              return false;
            }
            if (proxyElement === '*') {
              return true;
            }
            if (proxyElement[0] === '.' &&
                parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
              return true;
            }

            return parsed.hostname === proxyElement;
          });
        }

        if (shouldProxy) {
          proxy = {
            host: parsedProxyUrl.hostname,
            port: parsedProxyUrl.port,
            protocol: parsedProxyUrl.protocol
          };

          if (parsedProxyUrl.auth) {
            var proxyUrlAuth = parsedProxyUrl.auth.split(':');
            proxy.auth = {
              username: proxyUrlAuth[0],
              password: proxyUrlAuth[1]
            };
          }
        }
      }
    }

    if (proxy) {
      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
    }

    var transport;
    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsProxy ? https : http;
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }
      transport = isHttpsProxy ? httpsFollow : httpFollow;
    }

    if (config.maxBodyLength > -1) {
      options.maxBodyLength = config.maxBodyLength;
    }

    // Create the request
    var req = transport.request(options, function handleResponse(res) {
      if (req.aborted) return;

      // uncompress the response body transparently if required
      var stream = res;

      // return the last request in case of redirects
      var lastRequest = res.req || req;


      // if no content, is HEAD request or decompress disabled we should not decompress
      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {
        switch (res.headers['content-encoding']) {
        /*eslint default-case:0*/
        case 'gzip':
        case 'compress':
        case 'deflate':
        // add the unzipper to the body stream processing pipeline
          stream = stream.pipe(zlib.createUnzip());

          // remove the content-encoding in order to not confuse downstream operations
          delete res.headers['content-encoding'];
          break;
        }
      }

      var response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: res.headers,
        config: config,
        request: lastRequest
      };

      if (config.responseType === 'stream') {
        response.data = stream;
        settle(resolve, reject, response);
      } else {
        var responseBuffer = [];
        var totalResponseBytes = 0;
        stream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length;

          // make sure the content length is not over the maxContentLength if specified
          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
            stream.destroy();
            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',
              config, null, lastRequest));
          }
        });

        stream.on('error', function handleStreamError(err) {
          if (req.aborted) return;
          reject(enhanceError(err, config, null, lastRequest));
        });

        stream.on('end', function handleStreamEnd() {
          var responseData = Buffer.concat(responseBuffer);
          if (config.responseType !== 'arraybuffer') {
            responseData = responseData.toString(config.responseEncoding);
            if (!config.responseEncoding || config.responseEncoding === 'utf8') {
              responseData = utils.stripBOM(responseData);
            }
          }

          response.data = responseData;
          settle(resolve, reject, response);
        });
      }
    });

    // Handle errors
    req.on('error', function handleRequestError(err) {
      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;
      reject(enhanceError(err, config, null, req));
    });

    // Handle request timeout
    if (config.timeout) {
      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
      var timeout = parseInt(config.timeout, 10);

      if (isNaN(timeout)) {
        reject(createError(
          'error trying to parse `config.timeout` to int',
          config,
          'ERR_PARSE_TIMEOUT',
          req
        ));

        return;
      }

      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
      // And then these socket which be hang up will devoring CPU little by little.
      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
      req.setTimeout(timeout, function handleRequestTimeout() {
        req.abort();
        reject(createError(
          'timeout of ' + timeout + 'ms exceeded',
          config,
          config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
          req
        ));
      });
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (req.aborted) return;

        req.abort();
        reject(cancel);
      });
    }

    // Send the request
    if (utils.isStream(data)) {
      data.on('error', function handleStreamError(err) {
        reject(enhanceError(err, config, null, req));
      }).pipe(req);
    } else {
      req.end(data);
    }
  });
};


/***/ }),

/***/ 4716:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);
var settle = __nccwpck_require__(2286);
var cookies = __nccwpck_require__(3200);
var buildURL = __nccwpck_require__(3982);
var buildFullPath = __nccwpck_require__(91);
var parseHeaders = __nccwpck_require__(8336);
var isURLSameOrigin = __nccwpck_require__(8974);
var createError = __nccwpck_require__(5111);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ 2019:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);
var bind = __nccwpck_require__(5880);
var Axios = __nccwpck_require__(8679);
var mergeConfig = __nccwpck_require__(7691);
var defaults = __nccwpck_require__(527);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __nccwpck_require__(9324);
axios.CancelToken = __nccwpck_require__(7283);
axios.isCancel = __nccwpck_require__(6252);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __nccwpck_require__(352);

// Expose isAxiosError
axios.isAxiosError = __nccwpck_require__(775);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ 9324:
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ 7283:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var Cancel = __nccwpck_require__(9324);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ 6252:
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ 8679:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);
var buildURL = __nccwpck_require__(3982);
var InterceptorManager = __nccwpck_require__(3523);
var dispatchRequest = __nccwpck_require__(8774);
var mergeConfig = __nccwpck_require__(7691);
var validator = __nccwpck_require__(3757);

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ 3523:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ 91:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var isAbsoluteURL = __nccwpck_require__(3061);
var combineURLs = __nccwpck_require__(1092);

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ 5111:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var enhanceError = __nccwpck_require__(8829);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ 8774:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);
var transformData = __nccwpck_require__(8853);
var isCancel = __nccwpck_require__(6252);
var defaults = __nccwpck_require__(527);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ 8829:
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ 7691:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),

/***/ 2286:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var createError = __nccwpck_require__(5111);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ 8853:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);
var defaults = __nccwpck_require__(527);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ 527:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);
var normalizeHeaderName = __nccwpck_require__(8878);
var enhanceError = __nccwpck_require__(8829);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __nccwpck_require__(4716);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __nccwpck_require__(2516);
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ 5880:
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ 3982:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ 1092:
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ 3200:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ 3061:
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ 775:
/***/ ((module) => {

"use strict";


/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};


/***/ }),

/***/ 8974:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ 8878:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ 8336:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(5488);

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ 352:
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ 3757:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var pkg = __nccwpck_require__(9947);

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};
var currentVerArr = pkg.version.split('.');

/**
 * Compare package versions
 * @param {string} version
 * @param {string?} thanVersion
 * @returns {boolean}
 */
function isOlderVersion(version, thanVersion) {
  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
  var destVer = version.split('.');
  for (var i = 0; i < 3; i++) {
    if (pkgVersionArr[i] > destVer[i]) {
      return true;
    } else if (pkgVersionArr[i] < destVer[i]) {
      return false;
    }
  }
  return false;
}

/**
 * Transitional option validator
 * @param {function|boolean?} validator
 * @param {string?} version
 * @param {string} message
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  var isDeprecated = version && isOlderVersion(version);

  function formatMessage(opt, desc) {
    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed in ' + version));
    }

    if (isDeprecated && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  isOlderVersion: isOlderVersion,
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ 5488:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var bind = __nccwpck_require__(5880);

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ 127:
/***/ ((module) => {

"use strict";

module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    if(a===b) {
      return [ai, bi];
    }
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}


/***/ }),

/***/ 5612:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var concatMap = __nccwpck_require__(8401);
var balanced = __nccwpck_require__(127);

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function identity(e) {
  return e;
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m || /\$$/.test(m.pre)) return [str];

  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
  var isSequence = isNumericSequence || isAlphaSequence;
  var isOptions = m.body.indexOf(',') >= 0;
  if (!isSequence && !isOptions) {
    // {a},b}
    if (m.post.match(/,.*\}/)) {
      str = m.pre + '{' + m.body + escClose + m.post;
      return expand(str);
    }
    return [str];
  }

  var n;
  if (isSequence) {
    n = m.body.split(/\.\./);
  } else {
    n = parseCommaParts(m.body);
    if (n.length === 1) {
      // x{{a,b}}y ==> x{a}y x{b}y
      n = expand(n[0], false).map(embrace);
      if (n.length === 1) {
        var post = m.post.length
          ? expand(m.post, false)
          : [''];
        return post.map(function(p) {
          return m.pre + n[0] + p;
        });
      }
    }
  }

  // at this point, n is the parts, and we know it's not a comma set
  // with a single entry.

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  var N;

  if (isSequence) {
    var x = numeric(n[0]);
    var y = numeric(n[1]);
    var width = Math.max(n[0].length, n[1].length)
    var incr = n.length == 3
      ? Math.abs(numeric(n[2]))
      : 1;
    var test = lte;
    var reverse = y < x;
    if (reverse) {
      incr *= -1;
      test = gte;
    }
    var pad = n.some(isPadded);

    N = [];

    for (var i = x; test(i, y); i += incr) {
      var c;
      if (isAlphaSequence) {
        c = String.fromCharCode(i);
        if (c === '\\')
          c = '';
      } else {
        c = String(i);
        if (pad) {
          var need = width - c.length;
          if (need > 0) {
            var z = new Array(need + 1).join('0');
            if (i < 0)
              c = '-' + z + c.slice(1);
            else
              c = z + c;
          }
        }
      }
      N.push(c);
    }
  } else {
    N = concatMap(n, function(el) { return expand(el, false) });
  }

  for (var j = 0; j < N.length; j++) {
    for (var k = 0; k < post.length; k++) {
      var expansion = pre + N[j] + post[k];
      if (!isTop || isSequence || expansion)
        expansions.push(expansion);
    }
  }

  return expansions;
}



/***/ }),

/***/ 429:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var bind = __nccwpck_require__(5632);

var $apply = __nccwpck_require__(9831);
var $call = __nccwpck_require__(4715);
var $reflectApply = __nccwpck_require__(9348);

/** @type {import('./actualApply')} */
module.exports = $reflectApply || bind.call($call, $apply);


/***/ }),

/***/ 9831:
/***/ ((module) => {

"use strict";


/** @type {import('./functionApply')} */
module.exports = Function.prototype.apply;


/***/ }),

/***/ 4715:
/***/ ((module) => {

"use strict";


/** @type {import('./functionCall')} */
module.exports = Function.prototype.call;


/***/ }),

/***/ 7063:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var bind = __nccwpck_require__(5632);
var $TypeError = __nccwpck_require__(6458);

var $call = __nccwpck_require__(4715);
var $actualApply = __nccwpck_require__(429);

/** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */
module.exports = function callBindBasic(args) {
	if (args.length < 1 || typeof args[0] !== 'function') {
		throw new $TypeError('a function is required');
	}
	return $actualApply(bind, $call, args);
};


/***/ }),

/***/ 9348:
/***/ ((module) => {

"use strict";


/** @type {import('./reflectApply')} */
module.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;


/***/ }),

/***/ 2389:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var GetIntrinsic = __nccwpck_require__(1412);

var callBindBasic = __nccwpck_require__(7063);

/** @type {(thisArg: string, searchString: string, position?: number) => number} */
var $indexOf = callBindBasic([GetIntrinsic('%String.prototype.indexOf%')]);

/** @type {import('.')} */
module.exports = function callBoundIntrinsic(name, allowMissing) {
	/* eslint no-extra-parens: 0 */

	var intrinsic = /** @type {(this: unknown, ...args: unknown[]) => unknown} */ (GetIntrinsic(name, !!allowMissing));
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBindBasic(/** @type {const} */ ([intrinsic]));
	}
	return intrinsic;
};


/***/ }),

/***/ 8401:
/***/ ((module) => {

module.exports = function (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ 1459:
/***/ (function(module, exports, __nccwpck_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory();
	}
	else {}
}(this, function () {

	/*globals window, global, require*/

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {

	    var crypto;

	    // Native crypto from window (Browser)
	    if (typeof window !== 'undefined' && window.crypto) {
	        crypto = window.crypto;
	    }

	    // Native crypto in web worker (Browser)
	    if (typeof self !== 'undefined' && self.crypto) {
	        crypto = self.crypto;
	    }

	    // Native crypto from worker
	    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
	        crypto = globalThis.crypto;
	    }

	    // Native (experimental IE 11) crypto from window (Browser)
	    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
	        crypto = window.msCrypto;
	    }

	    // Native crypto from global (NodeJS)
	    if (!crypto && typeof global !== 'undefined' && global.crypto) {
	        crypto = global.crypto;
	    }

	    // Native crypto import via require (NodeJS)
	    if (!crypto && "function" === 'function') {
	        try {
	            crypto = __nccwpck_require__(6982);
	        } catch (err) {}
	    }

	    /*
	     * Cryptographically secure pseudorandom number generator
	     *
	     * As Math.random() is cryptographically not safe to use
	     */
	    var cryptoSecureRandomInt = function () {
	        if (crypto) {
	            // Use getRandomValues method (Browser)
	            if (typeof crypto.getRandomValues === 'function') {
	                try {
	                    return crypto.getRandomValues(new Uint32Array(1))[0];
	                } catch (err) {}
	            }

	            // Use randomBytes method (NodeJS)
	            if (typeof crypto.randomBytes === 'function') {
	                try {
	                    return crypto.randomBytes(4).readInt32LE();
	                } catch (err) {}
	            }
	        }

	        throw new Error('Native crypto module could not be used to get secure random number.');
	    };

	    /*
	     * Local polyfill of Object.create

	     */
	    var create = Object.create || (function () {
	        function F() {}

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }());

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var j = 0; j < thatSigBytes; j += 4) {
	                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            for (var i = 0; i < nBytes; i += 4) {
	                words.push(cryptoSecureRandomInt());
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            var processedWords;

	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	return CryptoJS;

}));

/***/ }),

/***/ 1400:
/***/ (function(module, exports, __nccwpck_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__nccwpck_require__(1459));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * Base64 encoding strategy.
	     */
	    var Base64 = C_enc.Base64 = {
	        /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = this._map;

	            // Clamp excess bits
	            wordArray.clamp();

	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }

	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }

	            return base64Chars.join('');
	        },

	        /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */
	        parse: function (base64Str) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = this._map;
	            var reverseMap = this._reverseMap;

	            if (!reverseMap) {
	                    reverseMap = this._reverseMap = [];
	                    for (var j = 0; j < map.length; j++) {
	                        reverseMap[map.charCodeAt(j)] = j;
	                    }
	            }

	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex !== -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }

	            // Convert
	            return parseLoop(base64Str, base64StrLength, reverseMap);

	        },

	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	    };

	    function parseLoop(base64Str, base64StrLength, reverseMap) {
	      var words = [];
	      var nBytes = 0;
	      for (var i = 0; i < base64StrLength; i++) {
	          if (i % 4) {
	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
	              var bitsCombined = bits1 | bits2;
	              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
	              nBytes++;
	          }
	      }
	      return WordArray.create(words, nBytes);
	    }
	}());


	return CryptoJS.enc.Base64;

}));

/***/ }),

/***/ 5314:
/***/ (function(module, exports, __nccwpck_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__nccwpck_require__(1459));
	}
	else {}
}(this, function (CryptoJS) {

	return CryptoJS.enc.Hex;

}));

/***/ }),

/***/ 7784:
/***/ (function(module, exports, __nccwpck_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__nccwpck_require__(1459));
	}
	else {}
}(this, function (CryptoJS) {

	return CryptoJS.enc.Utf8;

}));

/***/ }),

/***/ 8554:
/***/ (function(module, exports, __nccwpck_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__nccwpck_require__(1459));
	}
	else {}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	return CryptoJS.MD5;

}));

/***/ }),

/***/ 4885:
/***/ ((module, exports, __nccwpck_require__) => {

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
	let warned = false;

	return () => {
		if (!warned) {
			warned = true;
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}
	};
})();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	let m;

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	// eslint-disable-next-line no-return-assign
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = __nccwpck_require__(8228)(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};


/***/ }),

/***/ 8228:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = __nccwpck_require__(2134);
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;
		let namespacesCache;
		let enabledCache;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => {
				if (enableOverride !== null) {
					return enableOverride;
				}
				if (namespacesCache !== createDebug.namespaces) {
					namespacesCache = createDebug.namespaces;
					enabledCache = createDebug.enabled(namespace);
				}

				return enabledCache;
			},
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);
		createDebug.namespaces = namespaces;

		createDebug.names = [];
		createDebug.skips = [];

		const split = (typeof namespaces === 'string' ? namespaces : '')
			.trim()
			.replace(' ', ',')
			.split(',')
			.filter(Boolean);

		for (const ns of split) {
			if (ns[0] === '-') {
				createDebug.skips.push(ns.slice(1));
			} else {
				createDebug.names.push(ns);
			}
		}
	}

	/**
	 * Checks if the given string matches a namespace template, honoring
	 * asterisks as wildcards.
	 *
	 * @param {String} search
	 * @param {String} template
	 * @return {Boolean}
	 */
	function matchesTemplate(search, template) {
		let searchIndex = 0;
		let templateIndex = 0;
		let starIndex = -1;
		let matchIndex = 0;

		while (searchIndex < search.length) {
			if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {
				// Match character or proceed with wildcard
				if (template[templateIndex] === '*') {
					starIndex = templateIndex;
					matchIndex = searchIndex;
					templateIndex++; // Skip the '*'
				} else {
					searchIndex++;
					templateIndex++;
				}
			} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition
				// Backtrack to the last '*' and try to match more characters
				templateIndex = starIndex + 1;
				matchIndex++;
				searchIndex = matchIndex;
			} else {
				return false; // No match
			}
		}

		// Handle trailing '*' in template
		while (templateIndex < template.length && template[templateIndex] === '*') {
			templateIndex++;
		}

		return templateIndex === template.length;
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names,
			...createDebug.skips.map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		for (const skip of createDebug.skips) {
			if (matchesTemplate(name, skip)) {
				return false;
			}
		}

		for (const ns of createDebug.names) {
			if (matchesTemplate(name, ns)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


/***/ }),

/***/ 1541:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */

if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
	module.exports = __nccwpck_require__(4885);
} else {
	module.exports = __nccwpck_require__(7709);
}


/***/ }),

/***/ 7709:
/***/ ((module, exports, __nccwpck_require__) => {

/**
 * Module dependencies.
 */

const tty = __nccwpck_require__(2018);
const util = __nccwpck_require__(9023);

/**
 * This is the Node.js implementation of `debug()`.
 */

exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(
	() => {},
	'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
);

/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

try {
	// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
	// eslint-disable-next-line import/no-extraneous-dependencies
	const supportsColor = __nccwpck_require__(5545);

	if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
		exports.colors = [
			20,
			21,
			26,
			27,
			32,
			33,
			38,
			39,
			40,
			41,
			42,
			43,
			44,
			45,
			56,
			57,
			62,
			63,
			68,
			69,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			92,
			93,
			98,
			99,
			112,
			113,
			128,
			129,
			134,
			135,
			148,
			149,
			160,
			161,
			162,
			163,
			164,
			165,
			166,
			167,
			168,
			169,
			170,
			171,
			172,
			173,
			178,
			179,
			184,
			185,
			196,
			197,
			198,
			199,
			200,
			201,
			202,
			203,
			204,
			205,
			206,
			207,
			208,
			209,
			214,
			215,
			220,
			221
		];
	}
} catch (error) {
	// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(key => {
	return /^debug_/i.test(key);
}).reduce((obj, key) => {
	// Camel-case
	const prop = key
		.substring(6)
		.toLowerCase()
		.replace(/_([a-z])/g, (_, k) => {
			return k.toUpperCase();
		});

	// Coerce string value into JS value
	let val = process.env[key];
	if (/^(yes|on|true|enabled)$/i.test(val)) {
		val = true;
	} else if (/^(no|off|false|disabled)$/i.test(val)) {
		val = false;
	} else if (val === 'null') {
		val = null;
	} else {
		val = Number(val);
	}

	obj[prop] = val;
	return obj;
}, {});

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
	return 'colors' in exports.inspectOpts ?
		Boolean(exports.inspectOpts.colors) :
		tty.isatty(process.stderr.fd);
}

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	const {namespace: name, useColors} = this;

	if (useColors) {
		const c = this.color;
		const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
		const prefix = `  ${colorCode};1m${name} \u001B[0m`;

		args[0] = prefix + args[0].split('\n').join('\n' + prefix);
		args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
	} else {
		args[0] = getDate() + name + ' ' + args[0];
	}
}

function getDate() {
	if (exports.inspectOpts.hideDate) {
		return '';
	}
	return new Date().toISOString() + ' ';
}

/**
 * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
 */

function log(...args) {
	return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	if (namespaces) {
		process.env.DEBUG = namespaces;
	} else {
		// If you set a process.env field to null or undefined, it gets cast to the
		// string 'null' or 'undefined'. Just delete instead.
		delete process.env.DEBUG;
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
	return process.env.DEBUG;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init(debug) {
	debug.inspectOpts = {};

	const keys = Object.keys(exports.inspectOpts);
	for (let i = 0; i < keys.length; i++) {
		debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
	}
}

module.exports = __nccwpck_require__(8228)(exports);

const {formatters} = module.exports;

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

formatters.o = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts)
		.split('\n')
		.map(str => str.trim())
		.join(' ');
};

/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */

formatters.O = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts);
};


/***/ }),

/***/ 9594:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var callBind = __nccwpck_require__(7063);
var gOPD = __nccwpck_require__(2671);

var hasProtoAccessor;
try {
	// eslint-disable-next-line no-extra-parens, no-proto
	hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ ([]).__proto__ === Array.prototype;
} catch (e) {
	if (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {
		throw e;
	}
}

// eslint-disable-next-line no-extra-parens
var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ ('__proto__'));

var $Object = Object;
var $getPrototypeOf = $Object.getPrototypeOf;

/** @type {import('./get')} */
module.exports = desc && typeof desc.get === 'function'
	? callBind([desc.get])
	: typeof $getPrototypeOf === 'function'
		? /** @type {import('./get')} */ function getDunder(value) {
			// eslint-disable-next-line eqeqeq
			return $getPrototypeOf(value == null ? value : $Object(value));
		}
		: false;


/***/ }),

/***/ 9674:
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
var $defineProperty = Object.defineProperty || false;
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

module.exports = $defineProperty;


/***/ }),

/***/ 9224:
/***/ ((module) => {

"use strict";


/** @type {import('./eval')} */
module.exports = EvalError;


/***/ }),

/***/ 4684:
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
module.exports = Error;


/***/ }),

/***/ 4433:
/***/ ((module) => {

"use strict";


/** @type {import('./range')} */
module.exports = RangeError;


/***/ }),

/***/ 7409:
/***/ ((module) => {

"use strict";


/** @type {import('./ref')} */
module.exports = ReferenceError;


/***/ }),

/***/ 1681:
/***/ ((module) => {

"use strict";


/** @type {import('./syntax')} */
module.exports = SyntaxError;


/***/ }),

/***/ 6458:
/***/ ((module) => {

"use strict";


/** @type {import('./type')} */
module.exports = TypeError;


/***/ }),

/***/ 1866:
/***/ ((module) => {

"use strict";


/** @type {import('./uri')} */
module.exports = URIError;


/***/ }),

/***/ 3485:
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
module.exports = Object;


/***/ }),

/***/ 1483:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var debug;

module.exports = function () {
  if (!debug) {
    try {
      /* eslint global-require: off */
      debug = __nccwpck_require__(1541)("follow-redirects");
    }
    catch (error) { /* */ }
    if (typeof debug !== "function") {
      debug = function () { /* */ };
    }
  }
  debug.apply(null, arguments);
};


/***/ }),

/***/ 3716:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var url = __nccwpck_require__(7016);
var URL = url.URL;
var http = __nccwpck_require__(8611);
var https = __nccwpck_require__(5692);
var Writable = (__nccwpck_require__(2203).Writable);
var assert = __nccwpck_require__(2613);
var debug = __nccwpck_require__(1483);

// Preventive platform detection
// istanbul ignore next
(function detectUnsupportedEnvironment() {
  var looksLikeNode = typeof process !== "undefined";
  var looksLikeBrowser = typeof window !== "undefined" && typeof document !== "undefined";
  var looksLikeV8 = isFunction(Error.captureStackTrace);
  if (!looksLikeNode && (looksLikeBrowser || !looksLikeV8)) {
    console.warn("The follow-redirects package should be excluded from browser builds.");
  }
}());

// Whether to use the native URL object or the legacy url module
var useNativeURL = false;
try {
  assert(new URL(""));
}
catch (error) {
  useNativeURL = error.code === "ERR_INVALID_URL";
}

// URL fields to preserve in copy operations
var preservedUrlFields = [
  "auth",
  "host",
  "hostname",
  "href",
  "path",
  "pathname",
  "port",
  "protocol",
  "query",
  "search",
  "hash",
];

// Create handlers that pass events from native requests
var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = Object.create(null);
events.forEach(function (event) {
  eventHandlers[event] = function (arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
});

// Error types with codes
var InvalidUrlError = createErrorType(
  "ERR_INVALID_URL",
  "Invalid URL",
  TypeError
);
var RedirectionError = createErrorType(
  "ERR_FR_REDIRECTION_FAILURE",
  "Redirected request failed"
);
var TooManyRedirectsError = createErrorType(
  "ERR_FR_TOO_MANY_REDIRECTS",
  "Maximum number of redirects exceeded",
  RedirectionError
);
var MaxBodyLengthExceededError = createErrorType(
  "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
  "Request body larger than maxBodyLength limit"
);
var WriteAfterEndError = createErrorType(
  "ERR_STREAM_WRITE_AFTER_END",
  "write after end"
);

// istanbul ignore next
var destroy = Writable.prototype.destroy || noop;

// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);
  this._sanitizeOptions(options);
  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = [];

  // Attach a callback if passed
  if (responseCallback) {
    this.on("response", responseCallback);
  }

  // React to responses of native requests
  var self = this;
  this._onNativeResponse = function (response) {
    try {
      self._processResponse(response);
    }
    catch (cause) {
      self.emit("error", cause instanceof RedirectionError ?
        cause : new RedirectionError({ cause: cause }));
    }
  };

  // Perform the first request
  this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);

RedirectableRequest.prototype.abort = function () {
  destroyRequest(this._currentRequest);
  this._currentRequest.abort();
  this.emit("abort");
};

RedirectableRequest.prototype.destroy = function (error) {
  destroyRequest(this._currentRequest, error);
  destroy.call(this, error);
  return this;
};

// Writes buffered data to the current native request
RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Writing is not allowed if end has been called
  if (this._ending) {
    throw new WriteAfterEndError();
  }

  // Validate input and shift parameters if necessary
  if (!isString(data) && !isBuffer(data)) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }
  if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }

  // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066
  if (data.length === 0) {
    if (callback) {
      callback();
    }
    return;
  }
  // Only write when we don't exceed the maximum body length
  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;
    this._requestBodyBuffers.push({ data: data, encoding: encoding });
    this._currentRequest.write(data, encoding, callback);
  }
  // Error when we exceed the maximum body length
  else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
};

// Ends the current native request
RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (isFunction(data)) {
    callback = data;
    data = encoding = null;
  }
  else if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }

  // Write data if needed and end
  if (!data) {
    this._ended = this._ending = true;
    this._currentRequest.end(null, null, callback);
  }
  else {
    var self = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function () {
      self._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
};

// Sets a header value on the current native request
RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;
  this._currentRequest.setHeader(name, value);
};

// Clears a header value on the current native request
RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];
  this._currentRequest.removeHeader(name);
};

// Global timeout for all underlying requests
RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
  var self = this;

  // Destroys the socket on timeout
  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  }

  // Sets up a timer to trigger a timeout event
  function startTimer(socket) {
    if (self._timeout) {
      clearTimeout(self._timeout);
    }
    self._timeout = setTimeout(function () {
      self.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  }

  // Stops a timeout from triggering
  function clearTimer() {
    // Clear the timeout
    if (self._timeout) {
      clearTimeout(self._timeout);
      self._timeout = null;
    }

    // Clean up all attached listeners
    self.removeListener("abort", clearTimer);
    self.removeListener("error", clearTimer);
    self.removeListener("response", clearTimer);
    self.removeListener("close", clearTimer);
    if (callback) {
      self.removeListener("timeout", callback);
    }
    if (!self.socket) {
      self._currentRequest.removeListener("socket", startTimer);
    }
  }

  // Attach callback if passed
  if (callback) {
    this.on("timeout", callback);
  }

  // Start the timer if or when the socket is opened
  if (this.socket) {
    startTimer(this.socket);
  }
  else {
    this._currentRequest.once("socket", startTimer);
  }

  // Clean up on events
  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);
  this.on("close", clearTimer);

  return this;
};

// Proxy all other public ClientRequest methods
[
  "flushHeaders", "getHeader",
  "setNoDelay", "setSocketKeepAlive",
].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
});

// Proxy all public ClientRequest properties
["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function () { return this._currentRequest[property]; },
  });
});

RedirectableRequest.prototype._sanitizeOptions = function (options) {
  // Ensure headers are always present
  if (!options.headers) {
    options.headers = {};
  }

  // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.
  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }
    delete options.host;
  }

  // Complete the URL object when necessary
  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");
    if (searchPos < 0) {
      options.pathname = options.path;
    }
    else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }
};


// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];
  if (!nativeProtocol) {
    throw new TypeError("Unsupported protocol " + protocol);
  }

  // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)
  if (this._options.agents) {
    var scheme = protocol.slice(0, -1);
    this._options.agent = this._options.agents[scheme];
  }

  // Create the native request and set up its event handlers
  var request = this._currentRequest =
        nativeProtocol.request(this._options, this._onNativeResponse);
  request._redirectable = this;
  for (var event of events) {
    request.on(event, eventHandlers[event]);
  }

  // RFC7230§5.3.1: When making a request directly to an origin server, […]
  // a client MUST send only the absolute path […] as the request-target.
  this._currentUrl = /^\//.test(this._options.path) ?
    url.format(this._options) :
    // When making a request to a proxy, […]
    // a client MUST send the target URI in absolute-form […].
    this._options.path;

  // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)
  if (this._isRedirect) {
    // Write the request entity and end
    var i = 0;
    var self = this;
    var buffers = this._requestBodyBuffers;
    (function writeNext(error) {
      // Only write if this request has not been redirected yet
      // istanbul ignore else
      if (request === self._currentRequest) {
        // Report any write errors
        // istanbul ignore if
        if (error) {
          self.emit("error", error);
        }
        // Write the next buffer if there are still left
        else if (i < buffers.length) {
          var buffer = buffers[i++];
          // istanbul ignore else
          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        }
        // End the request if `end` has been called on us
        else if (self._ended) {
          request.end();
        }
      }
    }());
  }
};

// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  var statusCode = response.statusCode;
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: statusCode,
    });
  }

  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.

  // If the response is not a redirect; return it as-is
  var location = response.headers.location;
  if (!location || this._options.followRedirects === false ||
      statusCode < 300 || statusCode >= 400) {
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response);

    // Clean up
    this._requestBodyBuffers = [];
    return;
  }

  // The response is a redirect, so abort the current request
  destroyRequest(this._currentRequest);
  // Discard the remainder of the response to avoid waiting for data
  response.destroy();

  // RFC7231§6.4: A client SHOULD detect and intervene
  // in cyclical redirections (i.e., "infinite" redirection loops).
  if (++this._redirectCount > this._options.maxRedirects) {
    throw new TooManyRedirectsError();
  }

  // Store the request headers if applicable
  var requestHeaders;
  var beforeRedirect = this._options.beforeRedirect;
  if (beforeRedirect) {
    requestHeaders = Object.assign({
      // The Host header was set by nativeProtocol.request
      Host: response.req.getHeader("host"),
    }, this._options.headers);
  }

  // RFC7231§6.4: Automatic redirection needs to done with
  // care for methods not known to be safe, […]
  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
  // the request method from POST to GET for the subsequent request.
  var method = this._options.method;
  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" ||
      // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {
    this._options.method = "GET";
    // Drop a possible entity and headers related to it
    this._requestBodyBuffers = [];
    removeMatchingHeaders(/^content-/i, this._options.headers);
  }

  // Drop the Host header, as the redirect might lead to a different host
  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);

  // If the redirect is relative, carry over the host of the last request
  var currentUrlParts = parseUrl(this._currentUrl);
  var currentHost = currentHostHeader || currentUrlParts.host;
  var currentUrl = /^\w+:/.test(location) ? this._currentUrl :
    url.format(Object.assign(currentUrlParts, { host: currentHost }));

  // Create the redirected request
  var redirectUrl = resolveUrl(location, currentUrl);
  debug("redirecting to", redirectUrl.href);
  this._isRedirect = true;
  spreadUrlObject(redirectUrl, this._options);

  // Drop confidential headers when redirecting to a less secure protocol
  // or to a different domain that is not a superdomain
  if (redirectUrl.protocol !== currentUrlParts.protocol &&
     redirectUrl.protocol !== "https:" ||
     redirectUrl.host !== currentHost &&
     !isSubdomain(redirectUrl.host, currentHost)) {
    removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
  }

  // Evaluate the beforeRedirect callback
  if (isFunction(beforeRedirect)) {
    var responseDetails = {
      headers: response.headers,
      statusCode: statusCode,
    };
    var requestDetails = {
      url: currentUrl,
      method: method,
      headers: requestHeaders,
    };
    beforeRedirect(this._options, responseDetails, requestDetails);
    this._sanitizeOptions(this._options);
  }

  // Perform the redirected request
  this._performRequest();
};

// Wraps the key/value object of protocols with redirect functionality
function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024,
  };

  // Wrap each protocol
  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

    // Executes a request, following redirects
    function request(input, options, callback) {
      // Parse parameters, ensuring that input is an object
      if (isURL(input)) {
        input = spreadUrlObject(input);
      }
      else if (isString(input)) {
        input = spreadUrlObject(parseUrl(input));
      }
      else {
        callback = options;
        options = validateUrl(input);
        input = { protocol: protocol };
      }
      if (isFunction(options)) {
        callback = options;
        options = null;
      }

      // Set defaults
      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength,
      }, input, options);
      options.nativeProtocols = nativeProtocols;
      if (!isString(options.host) && !isString(options.hostname)) {
        options.hostname = "::1";
      }

      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug("options", options);
      return new RedirectableRequest(options, callback);
    }

    // Executes a GET request, following redirects
    function get(input, options, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options, callback);
      wrappedRequest.end();
      return wrappedRequest;
    }

    // Expose the properties on the wrapped protocol
    Object.defineProperties(wrappedProtocol, {
      request: { value: request, configurable: true, enumerable: true, writable: true },
      get: { value: get, configurable: true, enumerable: true, writable: true },
    });
  });
  return exports;
}

function noop() { /* empty */ }

function parseUrl(input) {
  var parsed;
  // istanbul ignore else
  if (useNativeURL) {
    parsed = new URL(input);
  }
  else {
    // Ensure the URL is valid and absolute
    parsed = validateUrl(url.parse(input));
    if (!isString(parsed.protocol)) {
      throw new InvalidUrlError({ input });
    }
  }
  return parsed;
}

function resolveUrl(relative, base) {
  // istanbul ignore next
  return useNativeURL ? new URL(relative, base) : parseUrl(url.resolve(base, relative));
}

function validateUrl(input) {
  if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
    throw new InvalidUrlError({ input: input.href || input });
  }
  if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
    throw new InvalidUrlError({ input: input.href || input });
  }
  return input;
}

function spreadUrlObject(urlObject, target) {
  var spread = target || {};
  for (var key of preservedUrlFields) {
    spread[key] = urlObject[key];
  }

  // Fix IPv6 hostname
  if (spread.hostname.startsWith("[")) {
    spread.hostname = spread.hostname.slice(1, -1);
  }
  // Ensure port is a number
  if (spread.port !== "") {
    spread.port = Number(spread.port);
  }
  // Concatenate path
  spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;

  return spread;
}

function removeMatchingHeaders(regex, headers) {
  var lastValue;
  for (var header in headers) {
    if (regex.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }
  return (lastValue === null || typeof lastValue === "undefined") ?
    undefined : String(lastValue).trim();
}

function createErrorType(code, message, baseClass) {
  // Create constructor
  function CustomError(properties) {
    // istanbul ignore else
    if (isFunction(Error.captureStackTrace)) {
      Error.captureStackTrace(this, this.constructor);
    }
    Object.assign(this, properties || {});
    this.code = code;
    this.message = this.cause ? message + ": " + this.cause.message : message;
  }

  // Attach constructor and set default properties
  CustomError.prototype = new (baseClass || Error)();
  Object.defineProperties(CustomError.prototype, {
    constructor: {
      value: CustomError,
      enumerable: false,
    },
    name: {
      value: "Error [" + code + "]",
      enumerable: false,
    },
  });
  return CustomError;
}

function destroyRequest(request, error) {
  for (var event of events) {
    request.removeListener(event, eventHandlers[event]);
  }
  request.on("error", noop);
  request.destroy(error);
}

function isSubdomain(subdomain, domain) {
  assert(isString(subdomain) && isString(domain));
  var dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}

function isString(value) {
  return typeof value === "string" || value instanceof String;
}

function isFunction(value) {
  return typeof value === "function";
}

function isBuffer(value) {
  return typeof value === "object" && ("length" in value);
}

function isURL(value) {
  return URL && value instanceof URL;
}

// Exports
module.exports = wrap({ http: http, https: https });
module.exports.wrap = wrap;


/***/ }),

/***/ 6404:
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ 5632:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var implementation = __nccwpck_require__(6404);

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ 1412:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var undefined;

var $Object = __nccwpck_require__(3485);

var $Error = __nccwpck_require__(4684);
var $EvalError = __nccwpck_require__(9224);
var $RangeError = __nccwpck_require__(4433);
var $ReferenceError = __nccwpck_require__(7409);
var $SyntaxError = __nccwpck_require__(1681);
var $TypeError = __nccwpck_require__(6458);
var $URIError = __nccwpck_require__(1866);

var abs = __nccwpck_require__(4328);
var floor = __nccwpck_require__(422);
var max = __nccwpck_require__(1378);
var min = __nccwpck_require__(7388);
var pow = __nccwpck_require__(526);
var round = __nccwpck_require__(7816);
var sign = __nccwpck_require__(2328);

var $Function = Function;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = __nccwpck_require__(2671);
var $defineProperty = __nccwpck_require__(9674);

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __nccwpck_require__(9718)();

var getProto = __nccwpck_require__(9272);
var $ObjectGPO = __nccwpck_require__(5932);
var $ReflectGPO = __nccwpck_require__(3172);

var $apply = __nccwpck_require__(9831);
var $call = __nccwpck_require__(4715);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	__proto__: null,
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': $Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': $EvalError,
	'%Float16Array%': typeof Float16Array === 'undefined' ? undefined : Float16Array,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': $Object,
	'%Object.getOwnPropertyDescriptor%': $gOPD,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': $RangeError,
	'%ReferenceError%': $ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': $URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,

	'%Function.prototype.call%': $call,
	'%Function.prototype.apply%': $apply,
	'%Object.defineProperty%': $defineProperty,
	'%Object.getPrototypeOf%': $ObjectGPO,
	'%Math.abs%': abs,
	'%Math.floor%': floor,
	'%Math.max%': max,
	'%Math.min%': min,
	'%Math.pow%': pow,
	'%Math.round%': round,
	'%Math.sign%': sign,
	'%Reflect.getPrototypeOf%': $ReflectGPO
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	__proto__: null,
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __nccwpck_require__(5632);
var hasOwn = __nccwpck_require__(2618);
var $concat = bind.call($call, Array.prototype.concat);
var $spliceApply = bind.call($apply, Array.prototype.splice);
var $replace = bind.call($call, String.prototype.replace);
var $strSlice = bind.call($call, String.prototype.slice);
var $exec = bind.call($call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ 5932:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var $Object = __nccwpck_require__(3485);

/** @type {import('./Object.getPrototypeOf')} */
module.exports = $Object.getPrototypeOf || null;


/***/ }),

/***/ 3172:
/***/ ((module) => {

"use strict";


/** @type {import('./Reflect.getPrototypeOf')} */
module.exports = (typeof Reflect !== 'undefined' && Reflect.getPrototypeOf) || null;


/***/ }),

/***/ 9272:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var reflectGetProto = __nccwpck_require__(3172);
var originalGetProto = __nccwpck_require__(5932);

var getDunderProto = __nccwpck_require__(9594);

/** @type {import('.')} */
module.exports = reflectGetProto
	? function getProto(O) {
		// @ts-expect-error TS can't narrow inside a closure, for some reason
		return reflectGetProto(O);
	}
	: originalGetProto
		? function getProto(O) {
			if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
				throw new TypeError('getProto: not an object');
			}
			// @ts-expect-error TS can't narrow inside a closure, for some reason
			return originalGetProto(O);
		}
		: getDunderProto
			? function getProto(O) {
				// @ts-expect-error TS can't narrow inside a closure, for some reason
				return getDunderProto(O);
			}
			: null;


/***/ }),

/***/ 7401:
/***/ ((module) => {

"use strict";


/** @type {import('./gOPD')} */
module.exports = Object.getOwnPropertyDescriptor;


/***/ }),

/***/ 2671:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


/** @type {import('.')} */
var $gOPD = __nccwpck_require__(7401);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ 9718:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __nccwpck_require__(6044);

/** @type {import('.')} */
module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ 6044:
/***/ ((module) => {

"use strict";


/** @type {import('./shams')} */
/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	/** @type {{ [k in symbol]?: unknown }} */
	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		// eslint-disable-next-line no-extra-parens
		var descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ 2618:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = __nccwpck_require__(5632);

/** @type {import('.')} */
module.exports = bind.call(call, $hasOwn);


/***/ }),

/***/ 8447:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getNative = __nccwpck_require__(5211),
    root = __nccwpck_require__(9134);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),

/***/ 4442:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var hashClear = __nccwpck_require__(7305),
    hashDelete = __nccwpck_require__(7729),
    hashGet = __nccwpck_require__(3176),
    hashHas = __nccwpck_require__(9836),
    hashSet = __nccwpck_require__(9996);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ 8394:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var listCacheClear = __nccwpck_require__(8793),
    listCacheDelete = __nccwpck_require__(6177),
    listCacheGet = __nccwpck_require__(2904),
    listCacheHas = __nccwpck_require__(716),
    listCacheSet = __nccwpck_require__(9244);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ 7674:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getNative = __nccwpck_require__(5211),
    root = __nccwpck_require__(9134);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ 3258:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var mapCacheClear = __nccwpck_require__(2873),
    mapCacheDelete = __nccwpck_require__(6593),
    mapCacheGet = __nccwpck_require__(9624),
    mapCacheHas = __nccwpck_require__(9100),
    mapCacheSet = __nccwpck_require__(1420);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ 2469:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getNative = __nccwpck_require__(5211),
    root = __nccwpck_require__(9134);

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),

/***/ 4416:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getNative = __nccwpck_require__(5211),
    root = __nccwpck_require__(9134);

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),

/***/ 6652:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var ListCache = __nccwpck_require__(8394),
    stackClear = __nccwpck_require__(5591),
    stackDelete = __nccwpck_require__(1475),
    stackGet = __nccwpck_require__(562),
    stackHas = __nccwpck_require__(9686),
    stackSet = __nccwpck_require__(6590);

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),

/***/ 7314:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var root = __nccwpck_require__(9134);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ 6583:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var root = __nccwpck_require__(9134);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),

/***/ 3094:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getNative = __nccwpck_require__(5211),
    root = __nccwpck_require__(9134);

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),

/***/ 4400:
/***/ ((module) => {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),

/***/ 9079:
/***/ ((module) => {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),

/***/ 9942:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseTimes = __nccwpck_require__(5641),
    isArguments = __nccwpck_require__(1283),
    isArray = __nccwpck_require__(6857),
    isBuffer = __nccwpck_require__(7533),
    isIndex = __nccwpck_require__(8528),
    isTypedArray = __nccwpck_require__(5930);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),

/***/ 6167:
/***/ ((module) => {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ 3017:
/***/ ((module) => {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),

/***/ 78:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseAssignValue = __nccwpck_require__(3265),
    eq = __nccwpck_require__(5885);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),

/***/ 5962:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var eq = __nccwpck_require__(5885);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ 8586:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var copyObject = __nccwpck_require__(4344),
    keys = __nccwpck_require__(491);

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),

/***/ 7261:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var copyObject = __nccwpck_require__(4344),
    keysIn = __nccwpck_require__(2264);

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;


/***/ }),

/***/ 3265:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var defineProperty = __nccwpck_require__(3636);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ 1174:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var Stack = __nccwpck_require__(6652),
    arrayEach = __nccwpck_require__(4400),
    assignValue = __nccwpck_require__(78),
    baseAssign = __nccwpck_require__(8586),
    baseAssignIn = __nccwpck_require__(7261),
    cloneBuffer = __nccwpck_require__(9499),
    copyArray = __nccwpck_require__(8466),
    copySymbols = __nccwpck_require__(3194),
    copySymbolsIn = __nccwpck_require__(9581),
    getAllKeys = __nccwpck_require__(2825),
    getAllKeysIn = __nccwpck_require__(7042),
    getTag = __nccwpck_require__(7926),
    initCloneArray = __nccwpck_require__(4118),
    initCloneByTag = __nccwpck_require__(4264),
    initCloneObject = __nccwpck_require__(124),
    isArray = __nccwpck_require__(6857),
    isBuffer = __nccwpck_require__(7533),
    isMap = __nccwpck_require__(8881),
    isObject = __nccwpck_require__(8620),
    isSet = __nccwpck_require__(5556),
    keys = __nccwpck_require__(491),
    keysIn = __nccwpck_require__(2264);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;


/***/ }),

/***/ 5379:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var isObject = __nccwpck_require__(8620);

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),

/***/ 2499:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var castPath = __nccwpck_require__(6310),
    toKey = __nccwpck_require__(4552);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),

/***/ 7588:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var arrayPush = __nccwpck_require__(3017),
    isArray = __nccwpck_require__(6857);

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),

/***/ 1139:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var Symbol = __nccwpck_require__(7314),
    getRawTag = __nccwpck_require__(4774),
    objectToString = __nccwpck_require__(4781);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ 1659:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseGetTag = __nccwpck_require__(1139),
    isObjectLike = __nccwpck_require__(3203);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),

/***/ 4473:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getTag = __nccwpck_require__(7926),
    isObjectLike = __nccwpck_require__(3203);

/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;


/***/ }),

/***/ 7960:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var isFunction = __nccwpck_require__(5463),
    isMasked = __nccwpck_require__(4807),
    isObject = __nccwpck_require__(8620),
    toSource = __nccwpck_require__(6210);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ 8444:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getTag = __nccwpck_require__(7926),
    isObjectLike = __nccwpck_require__(3203);

/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;


/***/ }),

/***/ 1906:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseGetTag = __nccwpck_require__(1139),
    isLength = __nccwpck_require__(3243),
    isObjectLike = __nccwpck_require__(3203);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),

/***/ 6867:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var isPrototype = __nccwpck_require__(4226),
    nativeKeys = __nccwpck_require__(7113);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),

/***/ 496:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var isObject = __nccwpck_require__(8620),
    isPrototype = __nccwpck_require__(4226),
    nativeKeysIn = __nccwpck_require__(4146);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;


/***/ }),

/***/ 8935:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var assignValue = __nccwpck_require__(78),
    castPath = __nccwpck_require__(6310),
    isIndex = __nccwpck_require__(8528),
    isObject = __nccwpck_require__(8620),
    toKey = __nccwpck_require__(4552);

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;


/***/ }),

/***/ 5641:
/***/ ((module) => {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),

/***/ 8931:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var Symbol = __nccwpck_require__(7314),
    arrayMap = __nccwpck_require__(6167),
    isArray = __nccwpck_require__(6857),
    isSymbol = __nccwpck_require__(2195);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ 6759:
/***/ ((module) => {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),

/***/ 6310:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var isArray = __nccwpck_require__(6857),
    isKey = __nccwpck_require__(8323),
    stringToPath = __nccwpck_require__(4189),
    toString = __nccwpck_require__(8203);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),

/***/ 2258:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var Uint8Array = __nccwpck_require__(6583);

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;


/***/ }),

/***/ 9499:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);
var root = __nccwpck_require__(9134);

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;


/***/ }),

/***/ 9664:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var cloneArrayBuffer = __nccwpck_require__(2258);

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;


/***/ }),

/***/ 6164:
/***/ ((module) => {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;


/***/ }),

/***/ 469:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var Symbol = __nccwpck_require__(7314);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;


/***/ }),

/***/ 8280:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var cloneArrayBuffer = __nccwpck_require__(2258);

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;


/***/ }),

/***/ 8466:
/***/ ((module) => {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),

/***/ 4344:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var assignValue = __nccwpck_require__(78),
    baseAssignValue = __nccwpck_require__(3265);

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),

/***/ 3194:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var copyObject = __nccwpck_require__(4344),
    getSymbols = __nccwpck_require__(2200);

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;


/***/ }),

/***/ 9581:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var copyObject = __nccwpck_require__(4344),
    getSymbolsIn = __nccwpck_require__(4664);

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;


/***/ }),

/***/ 5358:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var root = __nccwpck_require__(9134);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ 3636:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getNative = __nccwpck_require__(5211);

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ 1735:
/***/ ((module) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;


/***/ }),

/***/ 2825:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseGetAllKeys = __nccwpck_require__(7588),
    getSymbols = __nccwpck_require__(2200),
    keys = __nccwpck_require__(491);

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),

/***/ 7042:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseGetAllKeys = __nccwpck_require__(7588),
    getSymbolsIn = __nccwpck_require__(4664),
    keysIn = __nccwpck_require__(2264);

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;


/***/ }),

/***/ 4844:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var isKeyable = __nccwpck_require__(8075);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ 5211:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseIsNative = __nccwpck_require__(7960),
    getValue = __nccwpck_require__(9067);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ 6752:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var overArg = __nccwpck_require__(7894);

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),

/***/ 4774:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var Symbol = __nccwpck_require__(7314);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ 2200:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var arrayFilter = __nccwpck_require__(9079),
    stubArray = __nccwpck_require__(5706);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),

/***/ 4664:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var arrayPush = __nccwpck_require__(3017),
    getPrototype = __nccwpck_require__(6752),
    getSymbols = __nccwpck_require__(2200),
    stubArray = __nccwpck_require__(5706);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;


/***/ }),

/***/ 7926:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var DataView = __nccwpck_require__(8447),
    Map = __nccwpck_require__(7674),
    Promise = __nccwpck_require__(2469),
    Set = __nccwpck_require__(4416),
    WeakMap = __nccwpck_require__(3094),
    baseGetTag = __nccwpck_require__(1139),
    toSource = __nccwpck_require__(6210);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),

/***/ 9067:
/***/ ((module) => {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ 7305:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var nativeCreate = __nccwpck_require__(1969);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ 7729:
/***/ ((module) => {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ 3176:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var nativeCreate = __nccwpck_require__(1969);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ 9836:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var nativeCreate = __nccwpck_require__(1969);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ 9996:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var nativeCreate = __nccwpck_require__(1969);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ 4118:
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;


/***/ }),

/***/ 4264:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var cloneArrayBuffer = __nccwpck_require__(2258),
    cloneDataView = __nccwpck_require__(9664),
    cloneRegExp = __nccwpck_require__(6164),
    cloneSymbol = __nccwpck_require__(469),
    cloneTypedArray = __nccwpck_require__(8280);

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;


/***/ }),

/***/ 124:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseCreate = __nccwpck_require__(5379),
    getPrototype = __nccwpck_require__(6752),
    isPrototype = __nccwpck_require__(4226);

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),

/***/ 8528:
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ 8323:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var isArray = __nccwpck_require__(6857),
    isSymbol = __nccwpck_require__(2195);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),

/***/ 8075:
/***/ ((module) => {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ 4807:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var coreJsData = __nccwpck_require__(5358);

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ 4226:
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),

/***/ 8793:
/***/ ((module) => {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ 6177:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var assocIndexOf = __nccwpck_require__(5962);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ 2904:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var assocIndexOf = __nccwpck_require__(5962);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ 716:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var assocIndexOf = __nccwpck_require__(5962);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ 9244:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var assocIndexOf = __nccwpck_require__(5962);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ 2873:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var Hash = __nccwpck_require__(4442),
    ListCache = __nccwpck_require__(8394),
    Map = __nccwpck_require__(7674);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ 6593:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getMapData = __nccwpck_require__(4844);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ 9624:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getMapData = __nccwpck_require__(4844);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ 9100:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getMapData = __nccwpck_require__(4844);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ 1420:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getMapData = __nccwpck_require__(4844);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ 7509:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var memoize = __nccwpck_require__(9555);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),

/***/ 1969:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var getNative = __nccwpck_require__(5211);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ 7113:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var overArg = __nccwpck_require__(7894);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ 4146:
/***/ ((module) => {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),

/***/ 3986:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);
var freeGlobal = __nccwpck_require__(1735);

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;


/***/ }),

/***/ 4781:
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ 7894:
/***/ ((module) => {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ 9134:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var freeGlobal = __nccwpck_require__(1735);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ 5591:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var ListCache = __nccwpck_require__(8394);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),

/***/ 1475:
/***/ ((module) => {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),

/***/ 562:
/***/ ((module) => {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),

/***/ 9686:
/***/ ((module) => {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),

/***/ 6590:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var ListCache = __nccwpck_require__(8394),
    Map = __nccwpck_require__(7674),
    MapCache = __nccwpck_require__(3258);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),

/***/ 4189:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var memoizeCapped = __nccwpck_require__(7509);

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),

/***/ 4552:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var isSymbol = __nccwpck_require__(2195);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),

/***/ 6210:
/***/ ((module) => {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ 1020:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseClone = __nccwpck_require__(1174);

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;


/***/ }),

/***/ 5885:
/***/ ((module) => {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ 1579:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseGet = __nccwpck_require__(2499);

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),

/***/ 1283:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseIsArguments = __nccwpck_require__(1659),
    isObjectLike = __nccwpck_require__(3203);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),

/***/ 6857:
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ 1905:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var isFunction = __nccwpck_require__(5463),
    isLength = __nccwpck_require__(3243);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ 7533:
/***/ ((module, exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);
var root = __nccwpck_require__(9134),
    stubFalse = __nccwpck_require__(3316);

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;


/***/ }),

/***/ 5463:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseGetTag = __nccwpck_require__(1139),
    isObject = __nccwpck_require__(8620);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ 3243:
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ 8881:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseIsMap = __nccwpck_require__(4473),
    baseUnary = __nccwpck_require__(6759),
    nodeUtil = __nccwpck_require__(3986);

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

module.exports = isMap;


/***/ }),

/***/ 8620:
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ 3203:
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ 5556:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseIsSet = __nccwpck_require__(8444),
    baseUnary = __nccwpck_require__(6759),
    nodeUtil = __nccwpck_require__(3986);

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;


/***/ }),

/***/ 2195:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseGetTag = __nccwpck_require__(1139),
    isObjectLike = __nccwpck_require__(3203);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ 5930:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseIsTypedArray = __nccwpck_require__(1906),
    baseUnary = __nccwpck_require__(6759),
    nodeUtil = __nccwpck_require__(3986);

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),

/***/ 491:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var arrayLikeKeys = __nccwpck_require__(9942),
    baseKeys = __nccwpck_require__(6867),
    isArrayLike = __nccwpck_require__(1905);

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),

/***/ 2264:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var arrayLikeKeys = __nccwpck_require__(9942),
    baseKeysIn = __nccwpck_require__(496),
    isArrayLike = __nccwpck_require__(1905);

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;


/***/ }),

/***/ 9555:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var MapCache = __nccwpck_require__(3258);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),

/***/ 4287:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseSet = __nccwpck_require__(8935);

/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */
function set(object, path, value) {
  return object == null ? object : baseSet(object, path, value);
}

module.exports = set;


/***/ }),

/***/ 5706:
/***/ ((module) => {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ 3316:
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ 8203:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var baseToString = __nccwpck_require__(8931);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ 4328:
/***/ ((module) => {

"use strict";


/** @type {import('./abs')} */
module.exports = Math.abs;


/***/ }),

/***/ 422:
/***/ ((module) => {

"use strict";


/** @type {import('./floor')} */
module.exports = Math.floor;


/***/ }),

/***/ 4021:
/***/ ((module) => {

"use strict";


/** @type {import('./isNaN')} */
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};


/***/ }),

/***/ 1378:
/***/ ((module) => {

"use strict";


/** @type {import('./max')} */
module.exports = Math.max;


/***/ }),

/***/ 7388:
/***/ ((module) => {

"use strict";


/** @type {import('./min')} */
module.exports = Math.min;


/***/ }),

/***/ 526:
/***/ ((module) => {

"use strict";


/** @type {import('./pow')} */
module.exports = Math.pow;


/***/ }),

/***/ 7816:
/***/ ((module) => {

"use strict";


/** @type {import('./round')} */
module.exports = Math.round;


/***/ }),

/***/ 2328:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var $isNaN = __nccwpck_require__(4021);

/** @type {import('./sign')} */
module.exports = function sign(number) {
	if ($isNaN(number) || number === 0) {
		return number;
	}
	return number < 0 ? -1 : +1;
};


/***/ }),

/***/ 6274:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = minimatch
minimatch.Minimatch = Minimatch

var path = (function () { try { return __nccwpck_require__(6928) } catch (e) {}}()) || {
  sep: '/'
}
minimatch.sep = path.sep

var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
var expand = __nccwpck_require__(5612)

var plTypes = {
  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
  '?': { open: '(?:', close: ')?' },
  '+': { open: '(?:', close: ')+' },
  '*': { open: '(?:', close: ')*' },
  '@': { open: '(?:', close: ')' }
}

// any single thing other than /
// don't need to escape / when using new RegExp()
var qmark = '[^/]'

// * => any number of characters
var star = qmark + '*?'

// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

// not a ^ or / followed by a dot,
// followed by anything, any number of times.
var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

// characters that need to be escaped in RegExp.
var reSpecials = charSet('().*{}+?[]^$\\!')

// "abc" -> { a:true, b:true, c:true }
function charSet (s) {
  return s.split('').reduce(function (set, c) {
    set[c] = true
    return set
  }, {})
}

// normalizes slashes.
var slashSplit = /\/+/

minimatch.filter = filter
function filter (pattern, options) {
  options = options || {}
  return function (p, i, list) {
    return minimatch(p, pattern, options)
  }
}

function ext (a, b) {
  b = b || {}
  var t = {}
  Object.keys(a).forEach(function (k) {
    t[k] = a[k]
  })
  Object.keys(b).forEach(function (k) {
    t[k] = b[k]
  })
  return t
}

minimatch.defaults = function (def) {
  if (!def || typeof def !== 'object' || !Object.keys(def).length) {
    return minimatch
  }

  var orig = minimatch

  var m = function minimatch (p, pattern, options) {
    return orig(p, pattern, ext(def, options))
  }

  m.Minimatch = function Minimatch (pattern, options) {
    return new orig.Minimatch(pattern, ext(def, options))
  }
  m.Minimatch.defaults = function defaults (options) {
    return orig.defaults(ext(def, options)).Minimatch
  }

  m.filter = function filter (pattern, options) {
    return orig.filter(pattern, ext(def, options))
  }

  m.defaults = function defaults (options) {
    return orig.defaults(ext(def, options))
  }

  m.makeRe = function makeRe (pattern, options) {
    return orig.makeRe(pattern, ext(def, options))
  }

  m.braceExpand = function braceExpand (pattern, options) {
    return orig.braceExpand(pattern, ext(def, options))
  }

  m.match = function (list, pattern, options) {
    return orig.match(list, pattern, ext(def, options))
  }

  return m
}

Minimatch.defaults = function (def) {
  return minimatch.defaults(def).Minimatch
}

function minimatch (p, pattern, options) {
  assertValidPattern(pattern)

  if (!options) options = {}

  // shortcut: comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    return false
  }

  return new Minimatch(pattern, options).match(p)
}

function Minimatch (pattern, options) {
  if (!(this instanceof Minimatch)) {
    return new Minimatch(pattern, options)
  }

  assertValidPattern(pattern)

  if (!options) options = {}

  pattern = pattern.trim()

  // windows support: need to use /, not \
  if (!options.allowWindowsEscape && path.sep !== '/') {
    pattern = pattern.split(path.sep).join('/')
  }

  this.options = options
  this.set = []
  this.pattern = pattern
  this.regexp = null
  this.negate = false
  this.comment = false
  this.empty = false
  this.partial = !!options.partial

  // make the set of regexps etc.
  this.make()
}

Minimatch.prototype.debug = function () {}

Minimatch.prototype.make = make
function make () {
  var pattern = this.pattern
  var options = this.options

  // empty patterns and comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    this.comment = true
    return
  }
  if (!pattern) {
    this.empty = true
    return
  }

  // step 1: figure out negation, etc.
  this.parseNegate()

  // step 2: expand braces
  var set = this.globSet = this.braceExpand()

  if (options.debug) this.debug = function debug() { console.error.apply(console, arguments) }

  this.debug(this.pattern, set)

  // step 3: now we have a set, so turn each one into a series of path-portion
  // matching patterns.
  // These will be regexps, except in the case of "**", which is
  // set to the GLOBSTAR object for globstar behavior,
  // and will not contain any / characters
  set = this.globParts = set.map(function (s) {
    return s.split(slashSplit)
  })

  this.debug(this.pattern, set)

  // glob --> regexps
  set = set.map(function (s, si, set) {
    return s.map(this.parse, this)
  }, this)

  this.debug(this.pattern, set)

  // filter out everything that didn't compile properly.
  set = set.filter(function (s) {
    return s.indexOf(false) === -1
  })

  this.debug(this.pattern, set)

  this.set = set
}

Minimatch.prototype.parseNegate = parseNegate
function parseNegate () {
  var pattern = this.pattern
  var negate = false
  var options = this.options
  var negateOffset = 0

  if (options.nonegate) return

  for (var i = 0, l = pattern.length
    ; i < l && pattern.charAt(i) === '!'
    ; i++) {
    negate = !negate
    negateOffset++
  }

  if (negateOffset) this.pattern = pattern.substr(negateOffset)
  this.negate = negate
}

// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = function (pattern, options) {
  return braceExpand(pattern, options)
}

Minimatch.prototype.braceExpand = braceExpand

function braceExpand (pattern, options) {
  if (!options) {
    if (this instanceof Minimatch) {
      options = this.options
    } else {
      options = {}
    }
  }

  pattern = typeof pattern === 'undefined'
    ? this.pattern : pattern

  assertValidPattern(pattern)

  // Thanks to Yeting Li <https://github.com/yetingli> for
  // improving this regexp to avoid a ReDOS vulnerability.
  if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
    // shortcut. no need to expand.
    return [pattern]
  }

  return expand(pattern)
}

var MAX_PATTERN_LENGTH = 1024 * 64
var assertValidPattern = function (pattern) {
  if (typeof pattern !== 'string') {
    throw new TypeError('invalid pattern')
  }

  if (pattern.length > MAX_PATTERN_LENGTH) {
    throw new TypeError('pattern is too long')
  }
}

// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
Minimatch.prototype.parse = parse
var SUBPARSE = {}
function parse (pattern, isSub) {
  assertValidPattern(pattern)

  var options = this.options

  // shortcuts
  if (pattern === '**') {
    if (!options.noglobstar)
      return GLOBSTAR
    else
      pattern = '*'
  }
  if (pattern === '') return ''

  var re = ''
  var hasMagic = !!options.nocase
  var escaping = false
  // ? => one single character
  var patternListStack = []
  var negativeLists = []
  var stateChar
  var inClass = false
  var reClassStart = -1
  var classStart = -1
  // . and .. never match anything that doesn't start with .,
  // even when options.dot is set.
  var patternStart = pattern.charAt(0) === '.' ? '' // anything
  // not (start or / followed by . or .. followed by / or end)
  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
  : '(?!\\.)'
  var self = this

  function clearStateChar () {
    if (stateChar) {
      // we had some state-tracking character
      // that wasn't consumed by this pass.
      switch (stateChar) {
        case '*':
          re += star
          hasMagic = true
        break
        case '?':
          re += qmark
          hasMagic = true
        break
        default:
          re += '\\' + stateChar
        break
      }
      self.debug('clearStateChar %j %j', stateChar, re)
      stateChar = false
    }
  }

  for (var i = 0, len = pattern.length, c
    ; (i < len) && (c = pattern.charAt(i))
    ; i++) {
    this.debug('%s\t%s %s %j', pattern, i, re, c)

    // skip over any that are escaped.
    if (escaping && reSpecials[c]) {
      re += '\\' + c
      escaping = false
      continue
    }

    switch (c) {
      /* istanbul ignore next */
      case '/': {
        // completely not allowed, even escaped.
        // Should already be path-split by now.
        return false
      }

      case '\\':
        clearStateChar()
        escaping = true
      continue

      // the various stateChar values
      // for the "extglob" stuff.
      case '?':
      case '*':
      case '+':
      case '@':
      case '!':
        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

        // all of those are literals inside a class, except that
        // the glob [!a] means [^a] in regexp
        if (inClass) {
          this.debug('  in class')
          if (c === '!' && i === classStart + 1) c = '^'
          re += c
          continue
        }

        // if we already have a stateChar, then it means
        // that there was something like ** or +? in there.
        // Handle the stateChar, then proceed with this one.
        self.debug('call clearStateChar %j', stateChar)
        clearStateChar()
        stateChar = c
        // if extglob is disabled, then +(asdf|foo) isn't a thing.
        // just clear the statechar *now*, rather than even diving into
        // the patternList stuff.
        if (options.noext) clearStateChar()
      continue

      case '(':
        if (inClass) {
          re += '('
          continue
        }

        if (!stateChar) {
          re += '\\('
          continue
        }

        patternListStack.push({
          type: stateChar,
          start: i - 1,
          reStart: re.length,
          open: plTypes[stateChar].open,
          close: plTypes[stateChar].close
        })
        // negation is (?:(?!js)[^/]*)
        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
        this.debug('plType %j %j', stateChar, re)
        stateChar = false
      continue

      case ')':
        if (inClass || !patternListStack.length) {
          re += '\\)'
          continue
        }

        clearStateChar()
        hasMagic = true
        var pl = patternListStack.pop()
        // negation is (?:(?!js)[^/]*)
        // The others are (?:<pattern>)<type>
        re += pl.close
        if (pl.type === '!') {
          negativeLists.push(pl)
        }
        pl.reEnd = re.length
      continue

      case '|':
        if (inClass || !patternListStack.length || escaping) {
          re += '\\|'
          escaping = false
          continue
        }

        clearStateChar()
        re += '|'
      continue

      // these are mostly the same in regexp and glob
      case '[':
        // swallow any state-tracking char before the [
        clearStateChar()

        if (inClass) {
          re += '\\' + c
          continue
        }

        inClass = true
        classStart = i
        reClassStart = re.length
        re += c
      continue

      case ']':
        //  a right bracket shall lose its special
        //  meaning and represent itself in
        //  a bracket expression if it occurs
        //  first in the list.  -- POSIX.2 2.8.3.2
        if (i === classStart + 1 || !inClass) {
          re += '\\' + c
          escaping = false
          continue
        }

        // handle the case where we left a class open.
        // "[z-a]" is valid, equivalent to "\[z-a\]"
        // split where the last [ was, make sure we don't have
        // an invalid re. if so, re-walk the contents of the
        // would-be class to re-translate any characters that
        // were passed through as-is
        // TODO: It would probably be faster to determine this
        // without a try/catch and a new RegExp, but it's tricky
        // to do safely.  For now, this is safe and works.
        var cs = pattern.substring(classStart + 1, i)
        try {
          RegExp('[' + cs + ']')
        } catch (er) {
          // not a valid class!
          var sp = this.parse(cs, SUBPARSE)
          re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
          hasMagic = hasMagic || sp[1]
          inClass = false
          continue
        }

        // finish up the class.
        hasMagic = true
        inClass = false
        re += c
      continue

      default:
        // swallow any state char that wasn't consumed
        clearStateChar()

        if (escaping) {
          // no need
          escaping = false
        } else if (reSpecials[c]
          && !(c === '^' && inClass)) {
          re += '\\'
        }

        re += c

    } // switch
  } // for

  // handle the case where we left a class open.
  // "[abc" is valid, equivalent to "\[abc"
  if (inClass) {
    // split where the last [ was, and escape it
    // this is a huge pita.  We now have to re-walk
    // the contents of the would-be class to re-translate
    // any characters that were passed through as-is
    cs = pattern.substr(classStart + 1)
    sp = this.parse(cs, SUBPARSE)
    re = re.substr(0, reClassStart) + '\\[' + sp[0]
    hasMagic = hasMagic || sp[1]
  }

  // handle the case where we had a +( thing at the *end*
  // of the pattern.
  // each pattern list stack adds 3 chars, and we need to go through
  // and escape any | chars that were passed through as-is for the regexp.
  // Go through and escape them, taking care not to double-escape any
  // | chars that were already escaped.
  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
    var tail = re.slice(pl.reStart + pl.open.length)
    this.debug('setting tail', re, pl)
    // maybe some even number of \, then maybe 1 \, followed by a |
    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
      if (!$2) {
        // the | isn't already escaped, so escape it.
        $2 = '\\'
      }

      // need to escape all those slashes *again*, without escaping the
      // one that we need for escaping the | character.  As it works out,
      // escaping an even number of slashes can be done by simply repeating
      // it exactly after itself.  That's why this trick works.
      //
      // I am sorry that you have to see this.
      return $1 + $1 + $2 + '|'
    })

    this.debug('tail=%j\n   %s', tail, tail, pl, re)
    var t = pl.type === '*' ? star
      : pl.type === '?' ? qmark
      : '\\' + pl.type

    hasMagic = true
    re = re.slice(0, pl.reStart) + t + '\\(' + tail
  }

  // handle trailing things that only matter at the very end.
  clearStateChar()
  if (escaping) {
    // trailing \\
    re += '\\\\'
  }

  // only need to apply the nodot start if the re starts with
  // something that could conceivably capture a dot
  var addPatternStart = false
  switch (re.charAt(0)) {
    case '[': case '.': case '(': addPatternStart = true
  }

  // Hack to work around lack of negative lookbehind in JS
  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
  // like 'a.xyz.yz' doesn't match.  So, the first negative
  // lookahead, has to look ALL the way ahead, to the end of
  // the pattern.
  for (var n = negativeLists.length - 1; n > -1; n--) {
    var nl = negativeLists[n]

    var nlBefore = re.slice(0, nl.reStart)
    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
    var nlAfter = re.slice(nl.reEnd)

    nlLast += nlAfter

    // Handle nested stuff like *(*.js|!(*.json)), where open parens
    // mean that we should *not* include the ) in the bit that is considered
    // "after" the negated section.
    var openParensBefore = nlBefore.split('(').length - 1
    var cleanAfter = nlAfter
    for (i = 0; i < openParensBefore; i++) {
      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
    }
    nlAfter = cleanAfter

    var dollar = ''
    if (nlAfter === '' && isSub !== SUBPARSE) {
      dollar = '$'
    }
    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
    re = newRe
  }

  // if the re is not "" at this point, then we need to make sure
  // it doesn't match against an empty path part.
  // Otherwise a/* will match a/, which it should not.
  if (re !== '' && hasMagic) {
    re = '(?=.)' + re
  }

  if (addPatternStart) {
    re = patternStart + re
  }

  // parsing just a piece of a larger pattern.
  if (isSub === SUBPARSE) {
    return [re, hasMagic]
  }

  // skip the regexp for non-magical patterns
  // unescape anything in it, though, so that it'll be
  // an exact match against a file etc.
  if (!hasMagic) {
    return globUnescape(pattern)
  }

  var flags = options.nocase ? 'i' : ''
  try {
    var regExp = new RegExp('^' + re + '$', flags)
  } catch (er) /* istanbul ignore next - should be impossible */ {
    // If it was an invalid regular expression, then it can't match
    // anything.  This trick looks for a character after the end of
    // the string, which is of course impossible, except in multi-line
    // mode, but it's not a /m regex.
    return new RegExp('$.')
  }

  regExp._glob = pattern
  regExp._src = re

  return regExp
}

minimatch.makeRe = function (pattern, options) {
  return new Minimatch(pattern, options || {}).makeRe()
}

Minimatch.prototype.makeRe = makeRe
function makeRe () {
  if (this.regexp || this.regexp === false) return this.regexp

  // at this point, this.set is a 2d array of partial
  // pattern strings, or "**".
  //
  // It's better to use .match().  This function shouldn't
  // be used, really, but it's pretty convenient sometimes,
  // when you just want to work with a regex.
  var set = this.set

  if (!set.length) {
    this.regexp = false
    return this.regexp
  }
  var options = this.options

  var twoStar = options.noglobstar ? star
    : options.dot ? twoStarDot
    : twoStarNoDot
  var flags = options.nocase ? 'i' : ''

  var re = set.map(function (pattern) {
    return pattern.map(function (p) {
      return (p === GLOBSTAR) ? twoStar
      : (typeof p === 'string') ? regExpEscape(p)
      : p._src
    }).join('\\\/')
  }).join('|')

  // must match entire pattern
  // ending in a * or ** will make it less strict.
  re = '^(?:' + re + ')$'

  // can match anything, as long as it's not this.
  if (this.negate) re = '^(?!' + re + ').*$'

  try {
    this.regexp = new RegExp(re, flags)
  } catch (ex) /* istanbul ignore next - should be impossible */ {
    this.regexp = false
  }
  return this.regexp
}

minimatch.match = function (list, pattern, options) {
  options = options || {}
  var mm = new Minimatch(pattern, options)
  list = list.filter(function (f) {
    return mm.match(f)
  })
  if (mm.options.nonull && !list.length) {
    list.push(pattern)
  }
  return list
}

Minimatch.prototype.match = function match (f, partial) {
  if (typeof partial === 'undefined') partial = this.partial
  this.debug('match', f, this.pattern)
  // short-circuit in the case of busted things.
  // comments, etc.
  if (this.comment) return false
  if (this.empty) return f === ''

  if (f === '/' && partial) return true

  var options = this.options

  // windows: need to use /, not \
  if (path.sep !== '/') {
    f = f.split(path.sep).join('/')
  }

  // treat the test path as a set of pathparts.
  f = f.split(slashSplit)
  this.debug(this.pattern, 'split', f)

  // just ONE of the pattern sets in this.set needs to match
  // in order for it to be valid.  If negating, then just one
  // match means that we have failed.
  // Either way, return on the first hit.

  var set = this.set
  this.debug(this.pattern, 'set', set)

  // Find the basename of the path by looking for the last non-empty segment
  var filename
  var i
  for (i = f.length - 1; i >= 0; i--) {
    filename = f[i]
    if (filename) break
  }

  for (i = 0; i < set.length; i++) {
    var pattern = set[i]
    var file = f
    if (options.matchBase && pattern.length === 1) {
      file = [filename]
    }
    var hit = this.matchOne(file, pattern, partial)
    if (hit) {
      if (options.flipNegate) return true
      return !this.negate
    }
  }

  // didn't get any hits.  this is success if it's a negative
  // pattern, failure otherwise.
  if (options.flipNegate) return false
  return this.negate
}

// set partial to true to test if, for example,
// "/a/b" matches the start of "/*/b/*/d"
// Partial means, if you run out of file before you run
// out of pattern, then that's fine, as long as all
// the parts match.
Minimatch.prototype.matchOne = function (file, pattern, partial) {
  var options = this.options

  this.debug('matchOne',
    { 'this': this, file: file, pattern: pattern })

  this.debug('matchOne', file.length, pattern.length)

  for (var fi = 0,
      pi = 0,
      fl = file.length,
      pl = pattern.length
      ; (fi < fl) && (pi < pl)
      ; fi++, pi++) {
    this.debug('matchOne loop')
    var p = pattern[pi]
    var f = file[fi]

    this.debug(pattern, p, f)

    // should be impossible.
    // some invalid regexp stuff in the set.
    /* istanbul ignore if */
    if (p === false) return false

    if (p === GLOBSTAR) {
      this.debug('GLOBSTAR', [pattern, p, f])

      // "**"
      // a/**/b/**/c would match the following:
      // a/b/x/y/z/c
      // a/x/y/z/b/c
      // a/b/x/b/x/c
      // a/b/c
      // To do this, take the rest of the pattern after
      // the **, and see if it would match the file remainder.
      // If so, return success.
      // If not, the ** "swallows" a segment, and try again.
      // This is recursively awful.
      //
      // a/**/b/**/c matching a/b/x/y/z/c
      // - a matches a
      // - doublestar
      //   - matchOne(b/x/y/z/c, b/**/c)
      //     - b matches b
      //     - doublestar
      //       - matchOne(x/y/z/c, c) -> no
      //       - matchOne(y/z/c, c) -> no
      //       - matchOne(z/c, c) -> no
      //       - matchOne(c, c) yes, hit
      var fr = fi
      var pr = pi + 1
      if (pr === pl) {
        this.debug('** at the end')
        // a ** at the end will just swallow the rest.
        // We have found a match.
        // however, it will not swallow /.x, unless
        // options.dot is set.
        // . and .. are *never* matched by **, for explosively
        // exponential reasons.
        for (; fi < fl; fi++) {
          if (file[fi] === '.' || file[fi] === '..' ||
            (!options.dot && file[fi].charAt(0) === '.')) return false
        }
        return true
      }

      // ok, let's see if we can swallow whatever we can.
      while (fr < fl) {
        var swallowee = file[fr]

        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

        // XXX remove this slice.  Just pass the start index.
        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
          this.debug('globstar found match!', fr, fl, swallowee)
          // found a match.
          return true
        } else {
          // can't swallow "." or ".." ever.
          // can only swallow ".foo" when explicitly asked.
          if (swallowee === '.' || swallowee === '..' ||
            (!options.dot && swallowee.charAt(0) === '.')) {
            this.debug('dot detected!', file, fr, pattern, pr)
            break
          }

          // ** swallows a segment, and continue.
          this.debug('globstar swallow a segment, and continue')
          fr++
        }
      }

      // no match was found.
      // However, in partial mode, we can't say this is necessarily over.
      // If there's more *pattern* left, then
      /* istanbul ignore if */
      if (partial) {
        // ran out of file
        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
        if (fr === fl) return true
      }
      return false
    }

    // something other than **
    // non-magic patterns just have to match exactly
    // patterns with magic have been turned into regexps.
    var hit
    if (typeof p === 'string') {
      hit = f === p
      this.debug('string match', p, f, hit)
    } else {
      hit = f.match(p)
      this.debug('pattern match', p, f, hit)
    }

    if (!hit) return false
  }

  // Note: ending in / means that we'll get a final ""
  // at the end of the pattern.  This can only match a
  // corresponding "" at the end of the file.
  // If the file ends in /, then it can only match a
  // a pattern that ends in /, unless the pattern just
  // doesn't have any more for it. But, a/b/ should *not*
  // match "a/b/*", even though "" matches against the
  // [^/]*? pattern, except in partial mode, where it might
  // simply not be reached yet.
  // However, a/b/ should still satisfy a/*

  // now either we fell off the end of the pattern, or we're done.
  if (fi === fl && pi === pl) {
    // ran out of pattern and filename at the same time.
    // an exact hit!
    return true
  } else if (fi === fl) {
    // ran out of file, but still had pattern left.
    // this is ok if we're doing the match as part of
    // a glob fs traversal.
    return partial
  } else /* istanbul ignore else */ if (pi === pl) {
    // ran out of pattern, still have file left.
    // this is only acceptable if we're on the very last
    // empty segment of a file with a trailing slash.
    // a/* should match a/b/
    return (fi === fl - 1) && (file[fi] === '')
  }

  // should be unreachable.
  /* istanbul ignore next */
  throw new Error('wtf?')
}

// replace stuff like \* with *
function globUnescape (s) {
  return s.replace(/\\(.)/g, '$1')
}

function regExpEscape (s) {
  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
}


/***/ }),

/***/ 2134:
/***/ ((module) => {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),

/***/ 3299:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
// ie, `has-tostringtag/shams
var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
    ? Symbol.toStringTag
    : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;

var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
    [].__proto__ === Array.prototype // eslint-disable-line no-proto
        ? function (O) {
            return O.__proto__; // eslint-disable-line no-proto
        }
        : null
);

function addNumericSeparator(num, str) {
    if (
        num === Infinity
        || num === -Infinity
        || num !== num
        || (num && num > -1000 && num < 1000)
        || $test.call(/e/, str)
    ) {
        return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === 'number') {
        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
        if (int !== num) {
            var intStr = String(int);
            var dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
        }
    }
    return $replace.call(str, sepRegex, '$&_');
}

var utilInspect = __nccwpck_require__(9397);
var inspectCustom = utilInspect.custom;
var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;

var quotes = {
    __proto__: null,
    'double': '"',
    single: "'"
};
var quoteREs = {
    __proto__: null,
    'double': /(["\\])/g,
    single: /(['\\])/g
};

module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};

    if (has(opts, 'quoteStyle') && !has(quotes, opts.quoteStyle)) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (
        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
            : opts.maxStringLength !== null
        )
    ) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }

    if (
        has(opts, 'indent')
        && opts.indent !== null
        && opts.indent !== '\t'
        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
    ) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;

    if (typeof obj === 'undefined') {
        return 'undefined';
    }
    if (obj === null) {
        return 'null';
    }
    if (typeof obj === 'boolean') {
        return obj ? 'true' : 'false';
    }

    if (typeof obj === 'string') {
        return inspectString(obj, opts);
    }
    if (typeof obj === 'number') {
        if (obj === 0) {
            return Infinity / obj > 0 ? '0' : '-0';
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === 'bigint') {
        var bigIntStr = String(obj) + 'n';
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }

    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
    if (typeof depth === 'undefined') { depth = 0; }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
        return isArray(obj) ? '[Array]' : '[Object]';
    }

    var indent = getIndent(opts, depth);

    if (typeof seen === 'undefined') {
        seen = [];
    } else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }

    function inspect(value, from, noIndent) {
        if (from) {
            seen = $arrSlice.call(seen);
            seen.push(from);
        }
        if (noIndent) {
            var newOpts = {
                depth: opts.depth
            };
            if (has(opts, 'quoteStyle')) {
                newOpts.quoteStyle = opts.quoteStyle;
            }
            return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
    }

    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
    }
    if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
        var s = '<' + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
        return s;
    }
    if (isArray(obj)) {
        if (obj.length === 0) { return '[]'; }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
            return '[' + indentedJoin(xs, indent) + ']';
        }
        return '[ ' + $join.call(xs, ', ') + ' ]';
    }
    if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
        }
        if (parts.length === 0) { return '[' + String(obj) + ']'; }
        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
    }
    if (typeof obj === 'object' && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
            return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
            return obj.inspect();
        }
    }
    if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
            mapForEach.call(obj, function (value, key) {
                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
            });
        }
        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
            setForEach.call(obj, function (value) {
                setParts.push(inspect(value, obj));
            });
        }
        return collectionOf('Set', setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
        return weakCollectionOf('WeakMap');
    }
    if (isWeakSet(obj)) {
        return weakCollectionOf('WeakSet');
    }
    if (isWeakRef(obj)) {
        return weakCollectionOf('WeakRef');
    }
    if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
    }
    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other
    /* eslint-env browser */
    if (typeof window !== 'undefined' && obj === window) {
        return '{ [object Window] }';
    }
    if (
        (typeof globalThis !== 'undefined' && obj === globalThis)
        || (typeof global !== 'undefined' && obj === global)
    ) {
        return '{ [object globalThis] }';
    }
    if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? '' : 'null prototype';
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
        if (ys.length === 0) { return tag + '{}'; }
        if (indent) {
            return tag + '{' + indentedJoin(ys, indent) + '}';
        }
        return tag + '{ ' + $join.call(ys, ', ') + ' }';
    }
    return String(obj);
};

function wrapQuotes(s, defaultStyle, opts) {
    var style = opts.quoteStyle || defaultStyle;
    var quoteChar = quotes[style];
    return quoteChar + s + quoteChar;
}

function quote(s) {
    return $replace.call(String(s), /"/g, '&quot;');
}

function canTrustToString(obj) {
    return !toStringTag || !(typeof obj === 'object' && (toStringTag in obj || typeof obj[toStringTag] !== 'undefined'));
}
function isArray(obj) { return toStr(obj) === '[object Array]' && canTrustToString(obj); }
function isDate(obj) { return toStr(obj) === '[object Date]' && canTrustToString(obj); }
function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && canTrustToString(obj); }
function isError(obj) { return toStr(obj) === '[object Error]' && canTrustToString(obj); }
function isString(obj) { return toStr(obj) === '[object String]' && canTrustToString(obj); }
function isNumber(obj) { return toStr(obj) === '[object Number]' && canTrustToString(obj); }
function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && canTrustToString(obj); }

// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
function isSymbol(obj) {
    if (hasShammedSymbols) {
        return obj && typeof obj === 'object' && obj instanceof Symbol;
    }
    if (typeof obj === 'symbol') {
        return true;
    }
    if (!obj || typeof obj !== 'object' || !symToString) {
        return false;
    }
    try {
        symToString.call(obj);
        return true;
    } catch (e) {}
    return false;
}

function isBigInt(obj) {
    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
        return false;
    }
    try {
        bigIntValueOf.call(obj);
        return true;
    } catch (e) {}
    return false;
}

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has(obj, key) {
    return hasOwn.call(obj, key);
}

function toStr(obj) {
    return objectToString.call(obj);
}

function nameOf(f) {
    if (f.name) { return f.name; }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) { return m[1]; }
    return null;
}

function indexOf(xs, x) {
    if (xs.indexOf) { return xs.indexOf(x); }
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) { return i; }
    }
    return -1;
}

function isMap(x) {
    if (!mapSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        mapSize.call(x);
        try {
            setSize.call(x);
        } catch (s) {
            return true;
        }
        return x instanceof Map; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakMapHas.call(x, weakMapHas);
        try {
            weakSetHas.call(x, weakSetHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakRefDeref.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet(x) {
    if (!setSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        setSize.call(x);
        try {
            mapSize.call(x);
        } catch (m) {
            return true;
        }
        return x instanceof Set; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakSetHas.call(x, weakSetHas);
        try {
            weakMapHas.call(x, weakMapHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isElement(x) {
    if (!x || typeof x !== 'object') { return false; }
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
}

function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var quoteRE = quoteREs[opts.quoteStyle || 'single'];
    quoteRE.lastIndex = 0;
    // eslint-disable-next-line no-control-regex
    var s = $replace.call($replace.call(str, quoteRE, '\\$1'), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, 'single', opts);
}

function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
        8: 'b',
        9: 't',
        10: 'n',
        12: 'f',
        13: 'r'
    }[n];
    if (x) { return '\\' + x; }
    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
}

function markBoxed(str) {
    return 'Object(' + str + ')';
}

function weakCollectionOf(type) {
    return type + ' { ? }';
}

function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
    return type + ' (' + size + ') {' + joinedEntries + '}';
}

function singleLineValues(xs) {
    for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], '\n') >= 0) {
            return false;
        }
    }
    return true;
}

function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === '\t') {
        baseIndent = '\t';
    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), ' ');
    } else {
        return null;
    }
    return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
    };
}

function indentedJoin(xs, indent) {
    if (xs.length === 0) { return ''; }
    var lineJoiner = '\n' + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
}

function arrObjKeys(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
    }
    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
            symMap['$' + syms[k]] = syms[k];
        }
    }

    for (var key in obj) { // eslint-disable-line no-restricted-syntax
        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
            continue; // eslint-disable-line no-restricted-syntax, no-continue
        } else if ($test.call(/[^\w$]/, key)) {
            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
        } else {
            xs.push(key + ': ' + inspect(obj[key], obj));
        }
    }
    if (typeof gOPS === 'function') {
        for (var j = 0; j < syms.length; j++) {
            if (isEnumerable.call(obj, syms[j])) {
                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
            }
        }
    }
    return xs;
}


/***/ }),

/***/ 9397:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(9023).inspect;


/***/ }),

/***/ 7841:
/***/ ((module) => {

"use strict";


var replace = String.prototype.replace;
var percentTwenties = /%20/g;

var Format = {
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

module.exports = {
    'default': Format.RFC3986,
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return String(value);
        }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
};


/***/ }),

/***/ 9:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var stringify = __nccwpck_require__(6336);
var parse = __nccwpck_require__(7230);
var formats = __nccwpck_require__(7841);

module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};


/***/ }),

/***/ 7230:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(676);

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var defaults = {
    allowDots: false,
    allowEmptyArrays: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: 'utf-8',
    charsetSentinel: false,
    comma: false,
    decodeDotInKeys: false,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    duplicates: 'combine',
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictDepth: false,
    strictNullHandling: false,
    throwOnLimitExceeded: false
};

var interpretNumericEntities = function (str) {
    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
    });
};

var parseArrayValue = function (val, options, currentArrayLength) {
    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
        return val.split(',');
    }

    if (options.throwOnLimitExceeded && currentArrayLength >= options.arrayLimit) {
        throw new RangeError('Array limit exceeded. Only ' + options.arrayLimit + ' element' + (options.arrayLimit === 1 ? '' : 's') + ' allowed in an array.');
    }

    return val;
};

// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

var parseValues = function parseQueryStringValues(str, options) {
    var obj = { __proto__: null };

    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    cleanStr = cleanStr.replace(/%5B/gi, '[').replace(/%5D/gi, ']');

    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(
        options.delimiter,
        options.throwOnLimitExceeded ? limit + 1 : limit
    );

    if (options.throwOnLimitExceeded && parts.length > limit) {
        throw new RangeError('Parameter limit exceeded. Only ' + limit + ' parameter' + (limit === 1 ? '' : 's') + ' allowed.');
    }

    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;

    var charset = options.charset;
    if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
            if (parts[i].indexOf('utf8=') === 0) {
                if (parts[i] === charsetSentinel) {
                    charset = 'utf-8';
                } else if (parts[i] === isoSentinel) {
                    charset = 'iso-8859-1';
                }
                skipIndex = i;
                i = parts.length; // The eslint settings do not allow break;
            }
        }
    }

    for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
            continue;
        }
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key;
        var val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder, charset, 'key');
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');

            val = utils.maybeMap(
                parseArrayValue(
                    part.slice(pos + 1),
                    options,
                    isArray(obj[key]) ? obj[key].length : 0
                ),
                function (encodedVal) {
                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');
                }
            );
        }

        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
            val = interpretNumericEntities(String(val));
        }

        if (part.indexOf('[]=') > -1) {
            val = isArray(val) ? [val] : val;
        }

        var existing = has.call(obj, key);
        if (existing && options.duplicates === 'combine') {
            obj[key] = utils.combine(obj[key], val);
        } else if (!existing || options.duplicates === 'last') {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function (chain, val, options, valuesParsed) {
    var currentArrayLength = 0;
    if (chain.length > 0 && chain[chain.length - 1] === '[]') {
        var parentKey = chain.slice(0, -1).join('');
        currentArrayLength = Array.isArray(val) && val[parentKey] ? val[parentKey].length : 0;
    }

    var leaf = valuesParsed ? val : parseArrayValue(val, options, currentArrayLength);

    for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];

        if (root === '[]' && options.parseArrays) {
            obj = options.allowEmptyArrays && (leaf === '' || (options.strictNullHandling && leaf === null))
                ? []
                : utils.combine([], leaf);
        } else {
            obj = options.plainObjects ? { __proto__: null } : {};
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;
            var index = parseInt(decodedRoot, 10);
            if (!options.parseArrays && decodedRoot === '') {
                obj = { 0: leaf };
            } else if (
                !isNaN(index)
                && root !== decodedRoot
                && String(index) === decodedRoot
                && index >= 0
                && (options.parseArrays && index <= options.arrayLimit)
            ) {
                obj = [];
                obj[index] = leaf;
            } else if (decodedRoot !== '__proto__') {
                obj[decodedRoot] = leaf;
            }
        }

        leaf = obj;
    }

    return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(parent);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, check strictDepth option for throw, else just add whatever is left

    if (segment) {
        if (options.strictDepth === true) {
            throw new RangeError('Input depth exceeded depth option of ' + options.depth + ' and strictDepth is true');
        }
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options, valuesParsed);
};

var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
        return defaults;
    }

    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {
        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');
    }

    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {
        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');
    }

    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }

    if (typeof opts.throwOnLimitExceeded !== 'undefined' && typeof opts.throwOnLimitExceeded !== 'boolean') {
        throw new TypeError('`throwOnLimitExceeded` option must be a boolean');
    }

    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;

    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;

    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {
        throw new TypeError('The duplicates option must be either combine, first, or last');
    }

    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;

    return {
        allowDots: allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,
        duplicates: duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
        strictDepth: typeof opts.strictDepth === 'boolean' ? !!opts.strictDepth : defaults.strictDepth,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling,
        throwOnLimitExceeded: typeof opts.throwOnLimitExceeded === 'boolean' ? opts.throwOnLimitExceeded : false
    };
};

module.exports = function (str, opts) {
    var options = normalizeParseOptions(opts);

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? { __proto__: null } : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? { __proto__: null } : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
        obj = utils.merge(obj, newObj, options);
    }

    if (options.allowSparse === true) {
        return obj;
    }

    return utils.compact(obj);
};


/***/ }),

/***/ 6336:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var getSideChannel = __nccwpck_require__(4706);
var utils = __nccwpck_require__(676);
var formats = __nccwpck_require__(7841);
var has = Object.prototype.hasOwnProperty;

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + '[]';
    },
    comma: 'comma',
    indices: function indices(prefix, key) {
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};

var isArray = Array.isArray;
var push = Array.prototype.push;
var pushToArray = function (arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
};

var toISO = Date.prototype.toISOString;

var defaultFormat = formats['default'];
var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    allowEmptyArrays: false,
    arrayFormat: 'indices',
    charset: 'utf-8',
    charsetSentinel: false,
    commaRoundTrip: false,
    delimiter: '&',
    encode: true,
    encodeDotInKeys: false,
    encoder: utils.encode,
    encodeValuesOnly: false,
    filter: void undefined,
    format: defaultFormat,
    formatter: formats.formatters[defaultFormat],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === 'string'
        || typeof v === 'number'
        || typeof v === 'boolean'
        || typeof v === 'symbol'
        || typeof v === 'bigint';
};

var sentinel = {};

var stringify = function stringify(
    object,
    prefix,
    generateArrayPrefix,
    commaRoundTrip,
    allowEmptyArrays,
    strictNullHandling,
    skipNulls,
    encodeDotInKeys,
    encoder,
    filter,
    sort,
    allowDots,
    serializeDate,
    format,
    formatter,
    encodeValuesOnly,
    charset,
    sideChannel
) {
    var obj = object;

    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;
    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
        // Where object last appeared in the ref tree
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== 'undefined') {
            if (pos === step) {
                throw new RangeError('Cyclic object value');
            } else {
                findFlag = true; // Break while
            }
        }
        if (typeof tmpSc.get(sentinel) === 'undefined') {
            step = 0;
        }
    }

    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
        obj = utils.maybeMap(obj, function (value) {
            if (value instanceof Date) {
                return serializeDate(value);
            }
            return value;
        });
    }

    if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
        }

        obj = '';
    }

    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (generateArrayPrefix === 'comma' && isArray(obj)) {
        // we need to join elements in
        if (encodeValuesOnly && encoder) {
            obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];
    } else if (isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    var encodedPrefix = encodeDotInKeys ? String(prefix).replace(/\./g, '%2E') : String(prefix);

    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;

    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
        return adjustedPrefix + '[]';
    }

    for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === 'object' && key && typeof key.value !== 'undefined'
            ? key.value
            : obj[key];

        if (skipNulls && value === null) {
            continue;
        }

        var encodedKey = allowDots && encodeDotInKeys ? String(key).replace(/\./g, '%2E') : String(key);
        var keyPrefix = isArray(obj)
            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix
            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');

        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify(
            value,
            keyPrefix,
            generateArrayPrefix,
            commaRoundTrip,
            allowEmptyArrays,
            strictNullHandling,
            skipNulls,
            encodeDotInKeys,
            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,
            filter,
            sort,
            allowDots,
            serializeDate,
            format,
            formatter,
            encodeValuesOnly,
            charset,
            valueSideChannel
        ));
    }

    return values;
};

var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
        return defaults;
    }

    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {
        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');
    }

    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {
        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');
    }

    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }

    var format = formats['default'];
    if (typeof opts.format !== 'undefined') {
        if (!has.call(formats.formatters, opts.format)) {
            throw new TypeError('Unknown format option provided.');
        }
        format = opts.format;
    }
    var formatter = formats.formatters[format];

    var filter = defaults.filter;
    if (typeof opts.filter === 'function' || isArray(opts.filter)) {
        filter = opts.filter;
    }

    var arrayFormat;
    if (opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
    } else if ('indices' in opts) {
        arrayFormat = opts.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = defaults.arrayFormat;
    }

    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
    }

    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;

    return {
        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        arrayFormat: arrayFormat,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        commaRoundTrip: !!opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter,
        format: format,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === 'function' ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};

module.exports = function (object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);

    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (options.sort) {
        objKeys.sort(options.sort);
    }

    var sideChannel = getSideChannel();
    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        var value = obj[key];

        if (options.skipNulls && value === null) {
            continue;
        }
        pushToArray(keys, stringify(
            value,
            key,
            generateArrayPrefix,
            commaRoundTrip,
            options.allowEmptyArrays,
            options.strictNullHandling,
            options.skipNulls,
            options.encodeDotInKeys,
            options.encode ? options.encoder : null,
            options.filter,
            options.sort,
            options.allowDots,
            options.serializeDate,
            options.format,
            options.formatter,
            options.encodeValuesOnly,
            options.charset,
            sideChannel
        ));
    }

    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    if (options.charsetSentinel) {
        if (options.charset === 'iso-8859-1') {
            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
            prefix += 'utf8=%26%2310003%3B&';
        } else {
            // encodeURIComponent('✓')
            prefix += 'utf8=%E2%9C%93&';
        }
    }

    return joined.length > 0 ? prefix + joined : '';
};


/***/ }),

/***/ 676:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var formats = __nccwpck_require__(7841);

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}());

var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];

        if (isArray(obj)) {
            var compacted = [];

            for (var j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j]);
                }
            }

            item.obj[item.prop] = compacted;
        }
    }
};

var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? { __proto__: null } : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

var merge = function merge(target, source, options) {
    /* eslint no-param-reassign: 0 */
    if (!source) {
        return target;
    }

    if (typeof source !== 'object' && typeof source !== 'function') {
        if (isArray(target)) {
            target.push(source);
        } else if (target && typeof target === 'object') {
            if (
                (options && (options.plainObjects || options.allowPrototypes))
                || !has.call(Object.prototype, source)
            ) {
                target[source] = true;
            }
        } else {
            return [target, source];
        }

        return target;
    }

    if (!target || typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
    }

    if (isArray(target) && isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                    target[i] = merge(targetItem, item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (has.call(acc, key)) {
            acc[key] = merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};

var decode = function (str, defaultDecoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, ' ');
    if (charset === 'iso-8859-1') {
        // unescape never throws, no try...catch needed:
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    } catch (e) {
        return strWithoutPlus;
    }
};

var limit = 1024;

/* eslint operator-linebreak: [2, "before"] */

var encode = function encode(str, defaultEncoder, charset, kind, format) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = str;
    if (typeof str === 'symbol') {
        string = Symbol.prototype.toString.call(str);
    } else if (typeof str !== 'string') {
        string = String(str);
    }

    if (charset === 'iso-8859-1') {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
        });
    }

    var out = '';
    for (var j = 0; j < string.length; j += limit) {
        var segment = string.length >= limit ? string.slice(j, j + limit) : string;
        var arr = [];

        for (var i = 0; i < segment.length; ++i) {
            var c = segment.charCodeAt(i);
            if (
                c === 0x2D // -
                || c === 0x2E // .
                || c === 0x5F // _
                || c === 0x7E // ~
                || (c >= 0x30 && c <= 0x39) // 0-9
                || (c >= 0x41 && c <= 0x5A) // a-z
                || (c >= 0x61 && c <= 0x7A) // A-Z
                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
            ) {
                arr[arr.length] = segment.charAt(i);
                continue;
            }

            if (c < 0x80) {
                arr[arr.length] = hexTable[c];
                continue;
            }

            if (c < 0x800) {
                arr[arr.length] = hexTable[0xC0 | (c >> 6)]
                    + hexTable[0x80 | (c & 0x3F)];
                continue;
            }

            if (c < 0xD800 || c >= 0xE000) {
                arr[arr.length] = hexTable[0xE0 | (c >> 12)]
                    + hexTable[0x80 | ((c >> 6) & 0x3F)]
                    + hexTable[0x80 | (c & 0x3F)];
                continue;
            }

            i += 1;
            c = 0x10000 + (((c & 0x3FF) << 10) | (segment.charCodeAt(i) & 0x3FF));

            arr[arr.length] = hexTable[0xF0 | (c >> 18)]
                + hexTable[0x80 | ((c >> 12) & 0x3F)]
                + hexTable[0x80 | ((c >> 6) & 0x3F)]
                + hexTable[0x80 | (c & 0x3F)];
        }

        out += arr.join('');
    }

    return out;
};

var compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: 'o' }];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];

        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
            var key = keys[j];
            var val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                queue.push({ obj: obj, prop: key });
                refs.push(val);
            }
        }
    }

    compactQueue(queue);

    return value;
};

var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== 'object') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

var combine = function combine(a, b) {
    return [].concat(a, b);
};

var maybeMap = function maybeMap(val, fn) {
    if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
            mapped.push(fn(val[i]));
        }
        return mapped;
    }
    return fn(val);
};

module.exports = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode,
    encode: encode,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    maybeMap: maybeMap,
    merge: merge
};


/***/ }),

/***/ 1624:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const ANY = Symbol('SemVer ANY')
// hoisted class for cyclic dependency
class Comparator {
  static get ANY () {
    return ANY
  }

  constructor (comp, options) {
    options = parseOptions(options)

    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp
      } else {
        comp = comp.value
      }
    }

    comp = comp.trim().split(/\s+/).join(' ')
    debug('comparator', comp, options)
    this.options = options
    this.loose = !!options.loose
    this.parse(comp)

    if (this.semver === ANY) {
      this.value = ''
    } else {
      this.value = this.operator + this.semver.version
    }

    debug('comp', this)
  }

  parse (comp) {
    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
    const m = comp.match(r)

    if (!m) {
      throw new TypeError(`Invalid comparator: ${comp}`)
    }

    this.operator = m[1] !== undefined ? m[1] : ''
    if (this.operator === '=') {
      this.operator = ''
    }

    // if it literally is just '>' or '' then allow anything.
    if (!m[2]) {
      this.semver = ANY
    } else {
      this.semver = new SemVer(m[2], this.options.loose)
    }
  }

  toString () {
    return this.value
  }

  test (version) {
    debug('Comparator.test', version, this.options.loose)

    if (this.semver === ANY || version === ANY) {
      return true
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    return cmp(version, this.operator, this.semver, this.options)
  }

  intersects (comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError('a Comparator is required')
    }

    if (this.operator === '') {
      if (this.value === '') {
        return true
      }
      return new Range(comp.value, options).test(this.value)
    } else if (comp.operator === '') {
      if (comp.value === '') {
        return true
      }
      return new Range(this.value, options).test(comp.semver)
    }

    options = parseOptions(options)

    // Special cases where nothing can possibly be lower
    if (options.includePrerelease &&
      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {
      return false
    }
    if (!options.includePrerelease &&
      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {
      return false
    }

    // Same direction increasing (> or >=)
    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
      return true
    }
    // Same direction decreasing (< or <=)
    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
      return true
    }
    // same SemVer and both sides are inclusive (<= or >=)
    if (
      (this.semver.version === comp.semver.version) &&
      this.operator.includes('=') && comp.operator.includes('=')) {
      return true
    }
    // opposite directions less than
    if (cmp(this.semver, '<', comp.semver, options) &&
      this.operator.startsWith('>') && comp.operator.startsWith('<')) {
      return true
    }
    // opposite directions greater than
    if (cmp(this.semver, '>', comp.semver, options) &&
      this.operator.startsWith('<') && comp.operator.startsWith('>')) {
      return true
    }
    return false
  }
}

module.exports = Comparator

const parseOptions = __nccwpck_require__(9763)
const { safeRe: re, t } = __nccwpck_require__(5118)
const cmp = __nccwpck_require__(4167)
const debug = __nccwpck_require__(2864)
const SemVer = __nccwpck_require__(9532)
const Range = __nccwpck_require__(4767)


/***/ }),

/***/ 4767:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SPACE_CHARACTERS = /\s+/g

// hoisted class for cyclic dependency
class Range {
  constructor (range, options) {
    options = parseOptions(options)

    if (range instanceof Range) {
      if (
        range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease
      ) {
        return range
      } else {
        return new Range(range.raw, options)
      }
    }

    if (range instanceof Comparator) {
      // just put it in the set and return
      this.raw = range.value
      this.set = [[range]]
      this.formatted = undefined
      return this
    }

    this.options = options
    this.loose = !!options.loose
    this.includePrerelease = !!options.includePrerelease

    // First reduce all whitespace as much as possible so we do not have to rely
    // on potentially slow regexes like \s*. This is then stored and used for
    // future error messages as well.
    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')

    // First, split on ||
    this.set = this.raw
      .split('||')
      // map the range to a 2d array of comparators
      .map(r => this.parseRange(r.trim()))
      // throw out any comparator lists that are empty
      // this generally means that it was not a valid range, which is allowed
      // in loose mode, but will still throw if the WHOLE range is invalid.
      .filter(c => c.length)

    if (!this.set.length) {
      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)
    }

    // if we have any that are not the null set, throw out null sets.
    if (this.set.length > 1) {
      // keep the first one, in case they're all null sets
      const first = this.set[0]
      this.set = this.set.filter(c => !isNullSet(c[0]))
      if (this.set.length === 0) {
        this.set = [first]
      } else if (this.set.length > 1) {
        // if we have any that are *, then the range is just *
        for (const c of this.set) {
          if (c.length === 1 && isAny(c[0])) {
            this.set = [c]
            break
          }
        }
      }
    }

    this.formatted = undefined
  }

  get range () {
    if (this.formatted === undefined) {
      this.formatted = ''
      for (let i = 0; i < this.set.length; i++) {
        if (i > 0) {
          this.formatted += '||'
        }
        const comps = this.set[i]
        for (let k = 0; k < comps.length; k++) {
          if (k > 0) {
            this.formatted += ' '
          }
          this.formatted += comps[k].toString().trim()
        }
      }
    }
    return this.formatted
  }

  format () {
    return this.range
  }

  toString () {
    return this.range
  }

  parseRange (range) {
    // memoize range parsing for performance.
    // this is a very hot path, and fully deterministic.
    const memoOpts =
      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
      (this.options.loose && FLAG_LOOSE)
    const memoKey = memoOpts + ':' + range
    const cached = cache.get(memoKey)
    if (cached) {
      return cached
    }

    const loose = this.options.loose
    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]
    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))
    debug('hyphen replace', range)

    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)
    debug('comparator trim', range)

    // `~ 1.2.3` => `~1.2.3`
    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)
    debug('tilde trim', range)

    // `^ 1.2.3` => `^1.2.3`
    range = range.replace(re[t.CARETTRIM], caretTrimReplace)
    debug('caret trim', range)

    // At this point, the range is completely trimmed and
    // ready to be split into comparators.

    let rangeList = range
      .split(' ')
      .map(comp => parseComparator(comp, this.options))
      .join(' ')
      .split(/\s+/)
      // >=0.0.0 is equivalent to *
      .map(comp => replaceGTE0(comp, this.options))

    if (loose) {
      // in loose mode, throw out any that are not valid comparators
      rangeList = rangeList.filter(comp => {
        debug('loose invalid filter', comp, this.options)
        return !!comp.match(re[t.COMPARATORLOOSE])
      })
    }
    debug('range list', rangeList)

    // if any comparators are the null set, then replace with JUST null set
    // if more than one comparator, remove any * comparators
    // also, don't include the same comparator more than once
    const rangeMap = new Map()
    const comparators = rangeList.map(comp => new Comparator(comp, this.options))
    for (const comp of comparators) {
      if (isNullSet(comp)) {
        return [comp]
      }
      rangeMap.set(comp.value, comp)
    }
    if (rangeMap.size > 1 && rangeMap.has('')) {
      rangeMap.delete('')
    }

    const result = [...rangeMap.values()]
    cache.set(memoKey, result)
    return result
  }

  intersects (range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError('a Range is required')
    }

    return this.set.some((thisComparators) => {
      return (
        isSatisfiable(thisComparators, options) &&
        range.set.some((rangeComparators) => {
          return (
            isSatisfiable(rangeComparators, options) &&
            thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options)
              })
            })
          )
        })
      )
    })
  }

  // if ANY of the sets match ALL of its comparators, then pass
  test (version) {
    if (!version) {
      return false
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    for (let i = 0; i < this.set.length; i++) {
      if (testSet(this.set[i], version, this.options)) {
        return true
      }
    }
    return false
  }
}

module.exports = Range

const LRU = __nccwpck_require__(5490)
const cache = new LRU()

const parseOptions = __nccwpck_require__(9763)
const Comparator = __nccwpck_require__(1624)
const debug = __nccwpck_require__(2864)
const SemVer = __nccwpck_require__(9532)
const {
  safeRe: re,
  t,
  comparatorTrimReplace,
  tildeTrimReplace,
  caretTrimReplace,
} = __nccwpck_require__(5118)
const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = __nccwpck_require__(610)

const isNullSet = c => c.value === '<0.0.0-0'
const isAny = c => c.value === ''

// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options) => {
  let result = true
  const remainingComparators = comparators.slice()
  let testComparator = remainingComparators.pop()

  while (result && remainingComparators.length) {
    result = remainingComparators.every((otherComparator) => {
      return testComparator.intersects(otherComparator, options)
    })

    testComparator = remainingComparators.pop()
  }

  return result
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options) => {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

const isX = id => !id || id.toLowerCase() === 'x' || id === '*'

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const replaceTildes = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceTilde(c, options))
    .join(' ')
}

const replaceTilde = (comp, options) => {
  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('tilde', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0-0
      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = `>=${M}.${m}.${p}-${pr
      } <${M}.${+m + 1}.0-0`
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0-0
      ret = `>=${M}.${m}.${p
      } <${M}.${+m + 1}.0-0`
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const replaceCarets = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceCaret(c, options))
    .join(' ')
}

const replaceCaret = (comp, options) => {
  debug('caret', comp, options)
  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]
  const z = options.includePrerelease ? '-0' : ''
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('caret', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      if (M === '0') {
        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`
      } else {
        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p}-${pr
        } <${+M + 1}.0.0-0`
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p
        } <${+M + 1}.0.0-0`
      }
    }

    debug('caret return', ret)
    return ret
  })
}

const replaceXRanges = (comp, options) => {
  debug('replaceXRanges', comp, options)
  return comp
    .split(/\s+/)
    .map((c) => replaceXRange(c, options))
    .join(' ')
}

const replaceXRange = (comp, options) => {
  comp = comp.trim()
  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]
  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    const xM = isX(M)
    const xm = xM || isX(m)
    const xp = xm || isX(p)
    const anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    // if we're including prereleases in the match, then we need
    // to fix this to -0, the lowest possible prerelease value
    pr = options.includePrerelease ? '-0' : ''

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0-0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      if (gtlt === '<') {
        pr = '-0'
      }

      ret = `${gtlt + M}.${m}.${p}${pr}`
    } else if (xm) {
      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`
    } else if (xp) {
      ret = `>=${M}.${m}.0${pr
      } <${M}.${+m + 1}.0-0`
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options) => {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp
    .trim()
    .replace(re[t.STAR], '')
}

const replaceGTE0 = (comp, options) => {
  debug('replaceGTE0', comp, options)
  return comp
    .trim()
    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
}

// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
// TODO build?
const hyphenReplace = incPr => ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr) => {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = `>=${fM}.0.0${incPr ? '-0' : ''}`
  } else if (isX(fp)) {
    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`
  } else if (fpr) {
    from = `>=${from}`
  } else {
    from = `>=${from}${incPr ? '-0' : ''}`
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = `<${+tM + 1}.0.0-0`
  } else if (isX(tp)) {
    to = `<${tM}.${+tm + 1}.0-0`
  } else if (tpr) {
    to = `<=${tM}.${tm}.${tp}-${tpr}`
  } else if (incPr) {
    to = `<${tM}.${tm}.${+tp + 1}-0`
  } else {
    to = `<=${to}`
  }

  return `${from} ${to}`.trim()
}

const testSet = (set, version, options) => {
  for (let i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (let i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === Comparator.ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        const allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}


/***/ }),

/***/ 9532:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const debug = __nccwpck_require__(2864)
const { MAX_LENGTH, MAX_SAFE_INTEGER } = __nccwpck_require__(610)
const { safeRe: re, safeSrc: src, t } = __nccwpck_require__(5118)

const parseOptions = __nccwpck_require__(9763)
const { compareIdentifiers } = __nccwpck_require__(1355)
class SemVer {
  constructor (version, options) {
    options = parseOptions(options)

    if (version instanceof SemVer) {
      if (version.loose === !!options.loose &&
        version.includePrerelease === !!options.includePrerelease) {
        return version
      } else {
        version = version.version
      }
    } else if (typeof version !== 'string') {
      throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`)
    }

    if (version.length > MAX_LENGTH) {
      throw new TypeError(
        `version is longer than ${MAX_LENGTH} characters`
      )
    }

    debug('SemVer', version, options)
    this.options = options
    this.loose = !!options.loose
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease

    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])

    if (!m) {
      throw new TypeError(`Invalid Version: ${version}`)
    }

    this.raw = version

    // these are actually numbers
    this.major = +m[1]
    this.minor = +m[2]
    this.patch = +m[3]

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version')
    }

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version')
    }

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version')
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      this.prerelease = []
    } else {
      this.prerelease = m[4].split('.').map((id) => {
        if (/^[0-9]+$/.test(id)) {
          const num = +id
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num
          }
        }
        return id
      })
    }

    this.build = m[5] ? m[5].split('.') : []
    this.format()
  }

  format () {
    this.version = `${this.major}.${this.minor}.${this.patch}`
    if (this.prerelease.length) {
      this.version += `-${this.prerelease.join('.')}`
    }
    return this.version
  }

  toString () {
    return this.version
  }

  compare (other) {
    debug('SemVer.compare', this.version, this.options, other)
    if (!(other instanceof SemVer)) {
      if (typeof other === 'string' && other === this.version) {
        return 0
      }
      other = new SemVer(other, this.options)
    }

    if (other.version === this.version) {
      return 0
    }

    return this.compareMain(other) || this.comparePre(other)
  }

  compareMain (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    return (
      compareIdentifiers(this.major, other.major) ||
      compareIdentifiers(this.minor, other.minor) ||
      compareIdentifiers(this.patch, other.patch)
    )
  }

  comparePre (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length) {
      return -1
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0
    }

    let i = 0
    do {
      const a = this.prerelease[i]
      const b = other.prerelease[i]
      debug('prerelease compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  compareBuild (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    let i = 0
    do {
      const a = this.build[i]
      const b = other.build[i]
      debug('build compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  inc (release, identifier, identifierBase) {
    if (release.startsWith('pre')) {
      if (!identifier && identifierBase === false) {
        throw new Error('invalid increment argument: identifier is empty')
      }
      // Avoid an invalid semver results
      if (identifier) {
        const r = new RegExp(`^${this.options.loose ? src[t.PRERELEASELOOSE] : src[t.PRERELEASE]}$`)
        const match = `-${identifier}`.match(r)
        if (!match || match[1] !== identifier) {
          throw new Error(`invalid identifier: ${identifier}`)
        }
      }
    }

    switch (release) {
      case 'premajor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor = 0
        this.major++
        this.inc('pre', identifier, identifierBase)
        break
      case 'preminor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor++
        this.inc('pre', identifier, identifierBase)
        break
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0
        this.inc('patch', identifier, identifierBase)
        this.inc('pre', identifier, identifierBase)
        break
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0) {
          this.inc('patch', identifier, identifierBase)
        }
        this.inc('pre', identifier, identifierBase)
        break
      case 'release':
        if (this.prerelease.length === 0) {
          throw new Error(`version ${this.raw} is not a prerelease`)
        }
        this.prerelease.length = 0
        break

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (
          this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0
        ) {
          this.major++
        }
        this.minor = 0
        this.patch = 0
        this.prerelease = []
        break
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++
        }
        this.patch = 0
        this.prerelease = []
        break
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0) {
          this.patch++
        }
        this.prerelease = []
        break
      // This probably shouldn't be used publicly.
      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
      case 'pre': {
        const base = Number(identifierBase) ? 1 : 0

        if (this.prerelease.length === 0) {
          this.prerelease = [base]
        } else {
          let i = this.prerelease.length
          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++
              i = -2
            }
          }
          if (i === -1) {
            // didn't increment anything
            if (identifier === this.prerelease.join('.') && identifierBase === false) {
              throw new Error('invalid increment argument: identifier already exists')
            }
            this.prerelease.push(base)
          }
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          let prerelease = [identifier, base]
          if (identifierBase === false) {
            prerelease = [identifier]
          }
          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = prerelease
            }
          } else {
            this.prerelease = prerelease
          }
        }
        break
      }
      default:
        throw new Error(`invalid increment argument: ${release}`)
    }
    this.raw = this.format()
    if (this.build.length) {
      this.raw += `+${this.build.join('.')}`
    }
    return this
  }
}

module.exports = SemVer


/***/ }),

/***/ 5662:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const parse = __nccwpck_require__(5720)
const clean = (version, options) => {
  const s = parse(version.trim().replace(/^[=v]+/, ''), options)
  return s ? s.version : null
}
module.exports = clean


/***/ }),

/***/ 4167:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const eq = __nccwpck_require__(9737)
const neq = __nccwpck_require__(7511)
const gt = __nccwpck_require__(3460)
const gte = __nccwpck_require__(8753)
const lt = __nccwpck_require__(2139)
const lte = __nccwpck_require__(5480)

const cmp = (a, op, b, loose) => {
  switch (op) {
    case '===':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a === b

    case '!==':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError(`Invalid operator: ${op}`)
  }
}
module.exports = cmp


/***/ }),

/***/ 6402:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)
const parse = __nccwpck_require__(5720)
const { safeRe: re, t } = __nccwpck_require__(5118)

const coerce = (version, options) => {
  if (version instanceof SemVer) {
    return version
  }

  if (typeof version === 'number') {
    version = String(version)
  }

  if (typeof version !== 'string') {
    return null
  }

  options = options || {}

  let match = null
  if (!options.rtl) {
    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE])
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL]
    let next
    while ((next = coerceRtlRegex.exec(version)) &&
        (!match || match.index + match[0].length !== version.length)
    ) {
      if (!match ||
            next.index + next[0].length !== match.index + match[0].length) {
        match = next
      }
      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length
    }
    // leave it in a clean state
    coerceRtlRegex.lastIndex = -1
  }

  if (match === null) {
    return null
  }

  const major = match[2]
  const minor = match[3] || '0'
  const patch = match[4] || '0'
  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : ''
  const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''

  return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)
}
module.exports = coerce


/***/ }),

/***/ 8341:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)
const compareBuild = (a, b, loose) => {
  const versionA = new SemVer(a, loose)
  const versionB = new SemVer(b, loose)
  return versionA.compare(versionB) || versionA.compareBuild(versionB)
}
module.exports = compareBuild


/***/ }),

/***/ 9387:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const compare = __nccwpck_require__(9800)
const compareLoose = (a, b) => compare(a, b, true)
module.exports = compareLoose


/***/ }),

/***/ 9800:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)
const compare = (a, b, loose) =>
  new SemVer(a, loose).compare(new SemVer(b, loose))

module.exports = compare


/***/ }),

/***/ 4192:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const parse = __nccwpck_require__(5720)

const diff = (version1, version2) => {
  const v1 = parse(version1, null, true)
  const v2 = parse(version2, null, true)
  const comparison = v1.compare(v2)

  if (comparison === 0) {
    return null
  }

  const v1Higher = comparison > 0
  const highVersion = v1Higher ? v1 : v2
  const lowVersion = v1Higher ? v2 : v1
  const highHasPre = !!highVersion.prerelease.length
  const lowHasPre = !!lowVersion.prerelease.length

  if (lowHasPre && !highHasPre) {
    // Going from prerelease -> no prerelease requires some special casing

    // If the low version has only a major, then it will always be a major
    // Some examples:
    // 1.0.0-1 -> 1.0.0
    // 1.0.0-1 -> 1.1.1
    // 1.0.0-1 -> 2.0.0
    if (!lowVersion.patch && !lowVersion.minor) {
      return 'major'
    }

    // If the main part has no difference
    if (lowVersion.compareMain(highVersion) === 0) {
      if (lowVersion.minor && !lowVersion.patch) {
        return 'minor'
      }
      return 'patch'
    }
  }

  // add the `pre` prefix if we are going to a prerelease version
  const prefix = highHasPre ? 'pre' : ''

  if (v1.major !== v2.major) {
    return prefix + 'major'
  }

  if (v1.minor !== v2.minor) {
    return prefix + 'minor'
  }

  if (v1.patch !== v2.patch) {
    return prefix + 'patch'
  }

  // high and low are preleases
  return 'prerelease'
}

module.exports = diff


/***/ }),

/***/ 9737:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const compare = __nccwpck_require__(9800)
const eq = (a, b, loose) => compare(a, b, loose) === 0
module.exports = eq


/***/ }),

/***/ 3460:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const compare = __nccwpck_require__(9800)
const gt = (a, b, loose) => compare(a, b, loose) > 0
module.exports = gt


/***/ }),

/***/ 8753:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const compare = __nccwpck_require__(9800)
const gte = (a, b, loose) => compare(a, b, loose) >= 0
module.exports = gte


/***/ }),

/***/ 3879:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)

const inc = (version, release, options, identifier, identifierBase) => {
  if (typeof (options) === 'string') {
    identifierBase = identifier
    identifier = options
    options = undefined
  }

  try {
    return new SemVer(
      version instanceof SemVer ? version.version : version,
      options
    ).inc(release, identifier, identifierBase).version
  } catch (er) {
    return null
  }
}
module.exports = inc


/***/ }),

/***/ 2139:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const compare = __nccwpck_require__(9800)
const lt = (a, b, loose) => compare(a, b, loose) < 0
module.exports = lt


/***/ }),

/***/ 5480:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const compare = __nccwpck_require__(9800)
const lte = (a, b, loose) => compare(a, b, loose) <= 0
module.exports = lte


/***/ }),

/***/ 9682:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)
const major = (a, loose) => new SemVer(a, loose).major
module.exports = major


/***/ }),

/***/ 5574:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)
const minor = (a, loose) => new SemVer(a, loose).minor
module.exports = minor


/***/ }),

/***/ 7511:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const compare = __nccwpck_require__(9800)
const neq = (a, b, loose) => compare(a, b, loose) !== 0
module.exports = neq


/***/ }),

/***/ 5720:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)
const parse = (version, options, throwErrors = false) => {
  if (version instanceof SemVer) {
    return version
  }
  try {
    return new SemVer(version, options)
  } catch (er) {
    if (!throwErrors) {
      return null
    }
    throw er
  }
}

module.exports = parse


/***/ }),

/***/ 2405:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)
const patch = (a, loose) => new SemVer(a, loose).patch
module.exports = patch


/***/ }),

/***/ 569:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const parse = __nccwpck_require__(5720)
const prerelease = (version, options) => {
  const parsed = parse(version, options)
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
}
module.exports = prerelease


/***/ }),

/***/ 6714:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const compare = __nccwpck_require__(9800)
const rcompare = (a, b, loose) => compare(b, a, loose)
module.exports = rcompare


/***/ }),

/***/ 1437:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const compareBuild = __nccwpck_require__(8341)
const rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))
module.exports = rsort


/***/ }),

/***/ 7374:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const Range = __nccwpck_require__(4767)
const satisfies = (version, range, options) => {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}
module.exports = satisfies


/***/ }),

/***/ 6383:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const compareBuild = __nccwpck_require__(8341)
const sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))
module.exports = sort


/***/ }),

/***/ 9393:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const parse = __nccwpck_require__(5720)
const valid = (version, options) => {
  const v = parse(version, options)
  return v ? v.version : null
}
module.exports = valid


/***/ }),

/***/ 989:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

// just pre-load all the stuff that index.js lazily exports
const internalRe = __nccwpck_require__(5118)
const constants = __nccwpck_require__(610)
const SemVer = __nccwpck_require__(9532)
const identifiers = __nccwpck_require__(1355)
const parse = __nccwpck_require__(5720)
const valid = __nccwpck_require__(9393)
const clean = __nccwpck_require__(5662)
const inc = __nccwpck_require__(3879)
const diff = __nccwpck_require__(4192)
const major = __nccwpck_require__(9682)
const minor = __nccwpck_require__(5574)
const patch = __nccwpck_require__(2405)
const prerelease = __nccwpck_require__(569)
const compare = __nccwpck_require__(9800)
const rcompare = __nccwpck_require__(6714)
const compareLoose = __nccwpck_require__(9387)
const compareBuild = __nccwpck_require__(8341)
const sort = __nccwpck_require__(6383)
const rsort = __nccwpck_require__(1437)
const gt = __nccwpck_require__(3460)
const lt = __nccwpck_require__(2139)
const eq = __nccwpck_require__(9737)
const neq = __nccwpck_require__(7511)
const gte = __nccwpck_require__(8753)
const lte = __nccwpck_require__(5480)
const cmp = __nccwpck_require__(4167)
const coerce = __nccwpck_require__(6402)
const Comparator = __nccwpck_require__(1624)
const Range = __nccwpck_require__(4767)
const satisfies = __nccwpck_require__(7374)
const toComparators = __nccwpck_require__(7703)
const maxSatisfying = __nccwpck_require__(6628)
const minSatisfying = __nccwpck_require__(4710)
const minVersion = __nccwpck_require__(549)
const validRange = __nccwpck_require__(6362)
const outside = __nccwpck_require__(9819)
const gtr = __nccwpck_require__(8859)
const ltr = __nccwpck_require__(9750)
const intersects = __nccwpck_require__(9140)
const simplifyRange = __nccwpck_require__(2533)
const subset = __nccwpck_require__(2912)
module.exports = {
  parse,
  valid,
  clean,
  inc,
  diff,
  major,
  minor,
  patch,
  prerelease,
  compare,
  rcompare,
  compareLoose,
  compareBuild,
  sort,
  rsort,
  gt,
  lt,
  eq,
  neq,
  gte,
  lte,
  cmp,
  coerce,
  Comparator,
  Range,
  satisfies,
  toComparators,
  maxSatisfying,
  minSatisfying,
  minVersion,
  validRange,
  outside,
  gtr,
  ltr,
  intersects,
  simplifyRange,
  subset,
  SemVer,
  re: internalRe.re,
  src: internalRe.src,
  tokens: internalRe.t,
  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
  RELEASE_TYPES: constants.RELEASE_TYPES,
  compareIdentifiers: identifiers.compareIdentifiers,
  rcompareIdentifiers: identifiers.rcompareIdentifiers,
}


/***/ }),

/***/ 610:
/***/ ((module) => {

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = '2.0.0'

const MAX_LENGTH = 256
const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
/* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16

// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6

const RELEASE_TYPES = [
  'major',
  'premajor',
  'minor',
  'preminor',
  'patch',
  'prepatch',
  'prerelease',
]

module.exports = {
  MAX_LENGTH,
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_SAFE_INTEGER,
  RELEASE_TYPES,
  SEMVER_SPEC_VERSION,
  FLAG_INCLUDE_PRERELEASE: 0b001,
  FLAG_LOOSE: 0b010,
}


/***/ }),

/***/ 2864:
/***/ ((module) => {

const debug = (
  typeof process === 'object' &&
  process.env &&
  process.env.NODE_DEBUG &&
  /\bsemver\b/i.test(process.env.NODE_DEBUG)
) ? (...args) => console.error('SEMVER', ...args)
  : () => {}

module.exports = debug


/***/ }),

/***/ 1355:
/***/ ((module) => {

const numeric = /^[0-9]+$/
const compareIdentifiers = (a, b) => {
  const anum = numeric.test(a)
  const bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)

module.exports = {
  compareIdentifiers,
  rcompareIdentifiers,
}


/***/ }),

/***/ 5490:
/***/ ((module) => {

class LRUCache {
  constructor () {
    this.max = 1000
    this.map = new Map()
  }

  get (key) {
    const value = this.map.get(key)
    if (value === undefined) {
      return undefined
    } else {
      // Remove the key from the map and add it to the end
      this.map.delete(key)
      this.map.set(key, value)
      return value
    }
  }

  delete (key) {
    return this.map.delete(key)
  }

  set (key, value) {
    const deleted = this.delete(key)

    if (!deleted && value !== undefined) {
      // If cache is full, delete the least recently used item
      if (this.map.size >= this.max) {
        const firstKey = this.map.keys().next().value
        this.delete(firstKey)
      }

      this.map.set(key, value)
    }

    return this
  }
}

module.exports = LRUCache


/***/ }),

/***/ 9763:
/***/ ((module) => {

// parse out just the options we care about
const looseOption = Object.freeze({ loose: true })
const emptyOpts = Object.freeze({ })
const parseOptions = options => {
  if (!options) {
    return emptyOpts
  }

  if (typeof options !== 'object') {
    return looseOption
  }

  return options
}
module.exports = parseOptions


/***/ }),

/***/ 5118:
/***/ ((module, exports, __nccwpck_require__) => {

const {
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_LENGTH,
} = __nccwpck_require__(610)
const debug = __nccwpck_require__(2864)
exports = module.exports = {}

// The actual regexps go on exports.re
const re = exports.re = []
const safeRe = exports.safeRe = []
const src = exports.src = []
const safeSrc = exports.safeSrc = []
const t = exports.t = {}
let R = 0

const LETTERDASHNUMBER = '[a-zA-Z0-9-]'

// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
  ['\\s', 1],
  ['\\d', MAX_LENGTH],
  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],
]

const makeSafeRegex = (value) => {
  for (const [token, max] of safeRegexReplacements) {
    value = value
      .split(`${token}*`).join(`${token}{0,${max}}`)
      .split(`${token}+`).join(`${token}{1,${max}}`)
  }
  return value
}

const createToken = (name, value, isGlobal) => {
  const safe = makeSafeRegex(value)
  const index = R++
  debug(name, index, value)
  t[name] = index
  src[index] = value
  safeSrc[index] = safe
  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)
  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)
}

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*')
createToken('NUMERICIDENTIFIERLOOSE', '\\d+')

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)

// ## Main Version
// Three dot-separated numeric identifiers.

createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})`)

createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]
}|${src[t.NONNUMERICIDENTIFIER]})`)

createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]
}|${src[t.NONNUMERICIDENTIFIER]})`)

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`)

createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
}(?:\\.${src[t.BUILDIDENTIFIER]})*))`)

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
}${src[t.PRERELEASE]}?${
  src[t.BUILD]}?`)

createToken('FULL', `^${src[t.FULLPLAIN]}$`)

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
}${src[t.PRERELEASELOOSE]}?${
  src[t.BUILD]}?`)

createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)

createToken('GTLT', '((?:<|>)?=?)')

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`)
createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`)

createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:${src[t.PRERELEASE]})?${
                     src[t.BUILD]}?` +
                   `)?)?`)

createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:${src[t.PRERELEASELOOSE]})?${
                          src[t.BUILD]}?` +
                        `)?)?`)

createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`)
createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`)

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken('COERCEPLAIN', `${'(^|[^\\d])' +
              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)
createToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\d])`)
createToken('COERCEFULL', src[t.COERCEPLAIN] +
              `(?:${src[t.PRERELEASE]})?` +
              `(?:${src[t.BUILD]})?` +
              `(?:$|[^\\d])`)
createToken('COERCERTL', src[t.COERCE], true)
createToken('COERCERTLFULL', src[t.COERCEFULL], true)

// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken('LONETILDE', '(?:~>?)')

createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true)
exports.tildeTrimReplace = '$1~'

createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)
createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)

// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken('LONECARET', '(?:\\^)')

createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true)
exports.caretTrimReplace = '$1^'

createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)
createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)

// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`)
createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`)

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)
exports.comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
                   `\\s+-\\s+` +
                   `(${src[t.XRANGEPLAIN]})` +
                   `\\s*$`)

createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s+-\\s+` +
                        `(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s*$`)

// Star ranges basically just allow anything at all.
createToken('STAR', '(<|>)?=?\\s*\\*')
// >=0.0.0 is like a star
createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$')
createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$')


/***/ }),

/***/ 8859:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

// Determine if version is greater than all the versions possible in the range.
const outside = __nccwpck_require__(9819)
const gtr = (version, range, options) => outside(version, range, '>', options)
module.exports = gtr


/***/ }),

/***/ 9140:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const Range = __nccwpck_require__(4767)
const intersects = (r1, r2, options) => {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2, options)
}
module.exports = intersects


/***/ }),

/***/ 9750:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const outside = __nccwpck_require__(9819)
// Determine if version is less than all the versions possible in the range
const ltr = (version, range, options) => outside(version, range, '<', options)
module.exports = ltr


/***/ }),

/***/ 6628:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)
const Range = __nccwpck_require__(4767)

const maxSatisfying = (versions, range, options) => {
  let max = null
  let maxSV = null
  let rangeObj = null
  try {
    rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v
        maxSV = new SemVer(max, options)
      }
    }
  })
  return max
}
module.exports = maxSatisfying


/***/ }),

/***/ 4710:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)
const Range = __nccwpck_require__(4767)
const minSatisfying = (versions, range, options) => {
  let min = null
  let minSV = null
  let rangeObj = null
  try {
    rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v
        minSV = new SemVer(min, options)
      }
    }
  })
  return min
}
module.exports = minSatisfying


/***/ }),

/***/ 549:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)
const Range = __nccwpck_require__(4767)
const gt = __nccwpck_require__(3460)

const minVersion = (range, loose) => {
  range = new Range(range, loose)

  let minver = new SemVer('0.0.0')
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer('0.0.0-0')
  if (range.test(minver)) {
    return minver
  }

  minver = null
  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i]

    let setMin = null
    comparators.forEach((comparator) => {
      // Clone to avoid manipulating the comparator's semver object.
      const compver = new SemVer(comparator.semver.version)
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++
          } else {
            compver.prerelease.push(0)
          }
          compver.raw = compver.format()
          /* fallthrough */
        case '':
        case '>=':
          if (!setMin || gt(compver, setMin)) {
            setMin = compver
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error(`Unexpected operation: ${comparator.operator}`)
      }
    })
    if (setMin && (!minver || gt(minver, setMin))) {
      minver = setMin
    }
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
}
module.exports = minVersion


/***/ }),

/***/ 9819:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const SemVer = __nccwpck_require__(9532)
const Comparator = __nccwpck_require__(1624)
const { ANY } = Comparator
const Range = __nccwpck_require__(4767)
const satisfies = __nccwpck_require__(7374)
const gt = __nccwpck_require__(3460)
const lt = __nccwpck_require__(2139)
const lte = __nccwpck_require__(5480)
const gte = __nccwpck_require__(8753)

const outside = (version, range, hilo, options) => {
  version = new SemVer(version, options)
  range = new Range(range, options)

  let gtfn, ltefn, ltfn, comp, ecomp
  switch (hilo) {
    case '>':
      gtfn = gt
      ltefn = lte
      ltfn = lt
      comp = '>'
      ecomp = '>='
      break
    case '<':
      gtfn = lt
      ltefn = gte
      ltfn = gt
      comp = '<'
      ecomp = '<='
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisfies the range it is not outside
  if (satisfies(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i]

    let high = null
    let low = null

    comparators.forEach((comparator) => {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator
      low = low || comparator
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator
      }
    })

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
}

module.exports = outside


/***/ }),

/***/ 2533:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
const satisfies = __nccwpck_require__(7374)
const compare = __nccwpck_require__(9800)
module.exports = (versions, range, options) => {
  const set = []
  let first = null
  let prev = null
  const v = versions.sort((a, b) => compare(a, b, options))
  for (const version of v) {
    const included = satisfies(version, range, options)
    if (included) {
      prev = version
      if (!first) {
        first = version
      }
    } else {
      if (prev) {
        set.push([first, prev])
      }
      prev = null
      first = null
    }
  }
  if (first) {
    set.push([first, null])
  }

  const ranges = []
  for (const [min, max] of set) {
    if (min === max) {
      ranges.push(min)
    } else if (!max && min === v[0]) {
      ranges.push('*')
    } else if (!max) {
      ranges.push(`>=${min}`)
    } else if (min === v[0]) {
      ranges.push(`<=${max}`)
    } else {
      ranges.push(`${min} - ${max}`)
    }
  }
  const simplified = ranges.join(' || ')
  const original = typeof range.raw === 'string' ? range.raw : String(range)
  return simplified.length < original.length ? simplified : range
}


/***/ }),

/***/ 2912:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const Range = __nccwpck_require__(4767)
const Comparator = __nccwpck_require__(1624)
const { ANY } = Comparator
const satisfies = __nccwpck_require__(7374)
const compare = __nccwpck_require__(9800)

// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true

const subset = (sub, dom, options = {}) => {
  if (sub === dom) {
    return true
  }

  sub = new Range(sub, options)
  dom = new Range(dom, options)
  let sawNonNull = false

  OUTER: for (const simpleSub of sub.set) {
    for (const simpleDom of dom.set) {
      const isSub = simpleSubset(simpleSub, simpleDom, options)
      sawNonNull = sawNonNull || isSub !== null
      if (isSub) {
        continue OUTER
      }
    }
    // the null set is a subset of everything, but null simple ranges in
    // a complex range should be ignored.  so if we saw a non-null range,
    // then we know this isn't a subset, but if EVERY simple range was null,
    // then it is a subset.
    if (sawNonNull) {
      return false
    }
  }
  return true
}

const minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]
const minimumVersion = [new Comparator('>=0.0.0')]

const simpleSubset = (sub, dom, options) => {
  if (sub === dom) {
    return true
  }

  if (sub.length === 1 && sub[0].semver === ANY) {
    if (dom.length === 1 && dom[0].semver === ANY) {
      return true
    } else if (options.includePrerelease) {
      sub = minimumVersionWithPreRelease
    } else {
      sub = minimumVersion
    }
  }

  if (dom.length === 1 && dom[0].semver === ANY) {
    if (options.includePrerelease) {
      return true
    } else {
      dom = minimumVersion
    }
  }

  const eqSet = new Set()
  let gt, lt
  for (const c of sub) {
    if (c.operator === '>' || c.operator === '>=') {
      gt = higherGT(gt, c, options)
    } else if (c.operator === '<' || c.operator === '<=') {
      lt = lowerLT(lt, c, options)
    } else {
      eqSet.add(c.semver)
    }
  }

  if (eqSet.size > 1) {
    return null
  }

  let gtltComp
  if (gt && lt) {
    gtltComp = compare(gt.semver, lt.semver, options)
    if (gtltComp > 0) {
      return null
    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {
      return null
    }
  }

  // will iterate one or zero times
  for (const eq of eqSet) {
    if (gt && !satisfies(eq, String(gt), options)) {
      return null
    }

    if (lt && !satisfies(eq, String(lt), options)) {
      return null
    }

    for (const c of dom) {
      if (!satisfies(eq, String(c), options)) {
        return false
      }
    }

    return true
  }

  let higher, lower
  let hasDomLT, hasDomGT
  // if the subset has a prerelease, we need a comparator in the superset
  // with the same tuple and a prerelease, or it's not a subset
  let needDomLTPre = lt &&
    !options.includePrerelease &&
    lt.semver.prerelease.length ? lt.semver : false
  let needDomGTPre = gt &&
    !options.includePrerelease &&
    gt.semver.prerelease.length ? gt.semver : false
  // exception: <1.2.3-0 is the same as <1.2.3
  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&
      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
    needDomLTPre = false
  }

  for (const c of dom) {
    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='
    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='
    if (gt) {
      if (needDomGTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomGTPre.major &&
            c.semver.minor === needDomGTPre.minor &&
            c.semver.patch === needDomGTPre.patch) {
          needDomGTPre = false
        }
      }
      if (c.operator === '>' || c.operator === '>=') {
        higher = higherGT(gt, c, options)
        if (higher === c && higher !== gt) {
          return false
        }
      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {
        return false
      }
    }
    if (lt) {
      if (needDomLTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomLTPre.major &&
            c.semver.minor === needDomLTPre.minor &&
            c.semver.patch === needDomLTPre.patch) {
          needDomLTPre = false
        }
      }
      if (c.operator === '<' || c.operator === '<=') {
        lower = lowerLT(lt, c, options)
        if (lower === c && lower !== lt) {
          return false
        }
      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {
        return false
      }
    }
    if (!c.operator && (lt || gt) && gtltComp !== 0) {
      return false
    }
  }

  // if there was a < or >, and nothing in the dom, then must be false
  // UNLESS it was limited by another range in the other direction.
  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
  if (gt && hasDomLT && !lt && gtltComp !== 0) {
    return false
  }

  if (lt && hasDomGT && !gt && gtltComp !== 0) {
    return false
  }

  // we needed a prerelease range in a specific tuple, but didn't get one
  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
  // because it includes prereleases in the 1.2.3 tuple
  if (needDomGTPre || needDomLTPre) {
    return false
  }

  return true
}

// >=1.2.3 is lower than >1.2.3
const higherGT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare(a.semver, b.semver, options)
  return comp > 0 ? a
    : comp < 0 ? b
    : b.operator === '>' && a.operator === '>=' ? b
    : a
}

// <=1.2.3 is higher than <1.2.3
const lowerLT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare(a.semver, b.semver, options)
  return comp < 0 ? a
    : comp > 0 ? b
    : b.operator === '<' && a.operator === '<=' ? b
    : a
}

module.exports = subset


/***/ }),

/***/ 7703:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const Range = __nccwpck_require__(4767)

// Mostly just for testing and legacy API reasons
const toComparators = (range, options) =>
  new Range(range, options).set
    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))

module.exports = toComparators


/***/ }),

/***/ 6362:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const Range = __nccwpck_require__(4767)
const validRange = (range, options) => {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*'
  } catch (er) {
    return null
  }
}
module.exports = validRange


/***/ }),

/***/ 9223:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var inspect = __nccwpck_require__(3299);

var $TypeError = __nccwpck_require__(6458);

/*
* This function traverses the list returning the node corresponding to the given key.
*
* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list.
* By doing so, all the recently used nodes can be accessed relatively quickly.
*/
/** @type {import('./list.d.ts').listGetNode} */
// eslint-disable-next-line consistent-return
var listGetNode = function (list, key, isDelete) {
	/** @type {typeof list | NonNullable<(typeof list)['next']>} */
	var prev = list;
	/** @type {(typeof list)['next']} */
	var curr;
	// eslint-disable-next-line eqeqeq
	for (; (curr = prev.next) != null; prev = curr) {
		if (curr.key === key) {
			prev.next = curr.next;
			if (!isDelete) {
				// eslint-disable-next-line no-extra-parens
				curr.next = /** @type {NonNullable<typeof list.next>} */ (list.next);
				list.next = curr; // eslint-disable-line no-param-reassign
			}
			return curr;
		}
	}
};

/** @type {import('./list.d.ts').listGet} */
var listGet = function (objects, key) {
	if (!objects) {
		return void undefined;
	}
	var node = listGetNode(objects, key);
	return node && node.value;
};
/** @type {import('./list.d.ts').listSet} */
var listSet = function (objects, key, value) {
	var node = listGetNode(objects, key);
	if (node) {
		node.value = value;
	} else {
		// Prepend the new node to the beginning of the list
		objects.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */ ({ // eslint-disable-line no-param-reassign, no-extra-parens
			key: key,
			next: objects.next,
			value: value
		});
	}
};
/** @type {import('./list.d.ts').listHas} */
var listHas = function (objects, key) {
	if (!objects) {
		return false;
	}
	return !!listGetNode(objects, key);
};
/** @type {import('./list.d.ts').listDelete} */
// eslint-disable-next-line consistent-return
var listDelete = function (objects, key) {
	if (objects) {
		return listGetNode(objects, key, true);
	}
};

/** @type {import('.')} */
module.exports = function getSideChannelList() {
	/** @typedef {ReturnType<typeof getSideChannelList>} Channel */
	/** @typedef {Parameters<Channel['get']>[0]} K */
	/** @typedef {Parameters<Channel['set']>[1]} V */

	/** @type {import('./list.d.ts').RootNode<V, K> | undefined} */ var $o;

	/** @type {Channel} */
	var channel = {
		assert: function (key) {
			if (!channel.has(key)) {
				throw new $TypeError('Side channel does not contain ' + inspect(key));
			}
		},
		'delete': function (key) {
			var root = $o && $o.next;
			var deletedNode = listDelete($o, key);
			if (deletedNode && root && root === deletedNode) {
				$o = void undefined;
			}
			return !!deletedNode;
		},
		get: function (key) {
			return listGet($o, key);
		},
		has: function (key) {
			return listHas($o, key);
		},
		set: function (key, value) {
			if (!$o) {
				// Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head
				$o = {
					next: void undefined
				};
			}
			// eslint-disable-next-line no-extra-parens
			listSet(/** @type {NonNullable<typeof $o>} */ ($o), key, value);
		}
	};
	// @ts-expect-error TODO: figure out why this is erroring
	return channel;
};


/***/ }),

/***/ 7138:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var GetIntrinsic = __nccwpck_require__(1412);
var callBound = __nccwpck_require__(2389);
var inspect = __nccwpck_require__(3299);

var $TypeError = __nccwpck_require__(6458);
var $Map = GetIntrinsic('%Map%', true);

/** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */
var $mapGet = callBound('Map.prototype.get', true);
/** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */
var $mapSet = callBound('Map.prototype.set', true);
/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */
var $mapHas = callBound('Map.prototype.has', true);
/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */
var $mapDelete = callBound('Map.prototype.delete', true);
/** @type {<K, V>(thisArg: Map<K, V>) => number} */
var $mapSize = callBound('Map.prototype.size', true);

/** @type {import('.')} */
module.exports = !!$Map && /** @type {Exclude<import('.'), false>} */ function getSideChannelMap() {
	/** @typedef {ReturnType<typeof getSideChannelMap>} Channel */
	/** @typedef {Parameters<Channel['get']>[0]} K */
	/** @typedef {Parameters<Channel['set']>[1]} V */

	/** @type {Map<K, V> | undefined} */ var $m;

	/** @type {Channel} */
	var channel = {
		assert: function (key) {
			if (!channel.has(key)) {
				throw new $TypeError('Side channel does not contain ' + inspect(key));
			}
		},
		'delete': function (key) {
			if ($m) {
				var result = $mapDelete($m, key);
				if ($mapSize($m) === 0) {
					$m = void undefined;
				}
				return result;
			}
			return false;
		},
		get: function (key) { // eslint-disable-line consistent-return
			if ($m) {
				return $mapGet($m, key);
			}
		},
		has: function (key) {
			if ($m) {
				return $mapHas($m, key);
			}
			return false;
		},
		set: function (key, value) {
			if (!$m) {
				// @ts-expect-error TS can't handle narrowing a variable inside a closure
				$m = new $Map();
			}
			$mapSet($m, key, value);
		}
	};

	// @ts-expect-error TODO: figure out why TS is erroring here
	return channel;
};


/***/ }),

/***/ 2431:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var GetIntrinsic = __nccwpck_require__(1412);
var callBound = __nccwpck_require__(2389);
var inspect = __nccwpck_require__(3299);
var getSideChannelMap = __nccwpck_require__(7138);

var $TypeError = __nccwpck_require__(6458);
var $WeakMap = GetIntrinsic('%WeakMap%', true);

/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => V} */
var $weakMapGet = callBound('WeakMap.prototype.get', true);
/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K, value: V) => void} */
var $weakMapSet = callBound('WeakMap.prototype.set', true);
/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */
var $weakMapHas = callBound('WeakMap.prototype.has', true);
/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */
var $weakMapDelete = callBound('WeakMap.prototype.delete', true);

/** @type {import('.')} */
module.exports = $WeakMap
	? /** @type {Exclude<import('.'), false>} */ function getSideChannelWeakMap() {
		/** @typedef {ReturnType<typeof getSideChannelWeakMap>} Channel */
		/** @typedef {Parameters<Channel['get']>[0]} K */
		/** @typedef {Parameters<Channel['set']>[1]} V */

		/** @type {WeakMap<K & object, V> | undefined} */ var $wm;
		/** @type {Channel | undefined} */ var $m;

		/** @type {Channel} */
		var channel = {
			assert: function (key) {
				if (!channel.has(key)) {
					throw new $TypeError('Side channel does not contain ' + inspect(key));
				}
			},
			'delete': function (key) {
				if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
					if ($wm) {
						return $weakMapDelete($wm, key);
					}
				} else if (getSideChannelMap) {
					if ($m) {
						return $m['delete'](key);
					}
				}
				return false;
			},
			get: function (key) {
				if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
					if ($wm) {
						return $weakMapGet($wm, key);
					}
				}
				return $m && $m.get(key);
			},
			has: function (key) {
				if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
					if ($wm) {
						return $weakMapHas($wm, key);
					}
				}
				return !!$m && $m.has(key);
			},
			set: function (key, value) {
				if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
					if (!$wm) {
						$wm = new $WeakMap();
					}
					$weakMapSet($wm, key, value);
				} else if (getSideChannelMap) {
					if (!$m) {
						$m = getSideChannelMap();
					}
					// eslint-disable-next-line no-extra-parens
					/** @type {NonNullable<typeof $m>} */ ($m).set(key, value);
				}
			}
		};

		// @ts-expect-error TODO: figure out why this is erroring
		return channel;
	}
	: getSideChannelMap;


/***/ }),

/***/ 4706:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var $TypeError = __nccwpck_require__(6458);
var inspect = __nccwpck_require__(3299);
var getSideChannelList = __nccwpck_require__(9223);
var getSideChannelMap = __nccwpck_require__(7138);
var getSideChannelWeakMap = __nccwpck_require__(2431);

var makeChannel = getSideChannelWeakMap || getSideChannelMap || getSideChannelList;

/** @type {import('.')} */
module.exports = function getSideChannel() {
	/** @typedef {ReturnType<typeof getSideChannel>} Channel */

	/** @type {Channel | undefined} */ var $channelData;

	/** @type {Channel} */
	var channel = {
		assert: function (key) {
			if (!channel.has(key)) {
				throw new $TypeError('Side channel does not contain ' + inspect(key));
			}
		},
		'delete': function (key) {
			return !!$channelData && $channelData['delete'](key);
		},
		get: function (key) {
			return $channelData && $channelData.get(key);
		},
		has: function (key) {
			return !!$channelData && $channelData.has(key);
		},
		set: function (key, value) {
			if (!$channelData) {
				$channelData = makeChannel();
			}

			$channelData.set(key, value);
		}
	};
	// @ts-expect-error TODO: figure out why this is erroring
	return channel;
};


/***/ }),

/***/ 2373:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const fs = __nccwpck_require__(9896);

const binding = __nccwpck_require__(8564);

const raw = {
  crc64: binding._crc64,
  combineCrc64: binding._combine_crc64,
  strToUint64Ptr: binding._str_to_uint64,
  uint64PtrToStr: binding._uint64_to_str,
};

binding._crc64_init();

function strToUint64Ptr(str) {
  const strPtr = binding._malloc(str.length + 1);
  binding.stringToUTF8(str, strPtr, str.length + 1);

  const uint64Ptr = binding._malloc(8);
  raw.strToUint64Ptr(strPtr, uint64Ptr);
  binding._free(strPtr);

  return uint64Ptr;
}

function uint64PtrToStr(uint64Ptr) {
  const strPtr = binding._malloc(32);
  raw.uint64PtrToStr(strPtr, uint64Ptr);
  const str = binding.UTF8ToString(strPtr);
  binding._free(strPtr);
  return str;
}

function isBuffer(v) { return typeof Buffer !== 'undefined' && Buffer.isBuffer(v); }

function buffToPtr(buff) {
  if (!isBuffer(buff)) {
    throw new Error('Invalid buffer type.');
  }

  const buffPtr = binding._malloc(buff.length);
  binding.writeArrayToMemory(buff, buffPtr);

  return buffPtr;
}

module.exports.crc64 = function(buff, prev) {
  if (!prev) prev = '0';
  if (typeof prev !== 'string' || !/\d+/.test(prev)) {
    throw new Error('Invlid previous value.');
  }

  const prevPtr = strToUint64Ptr(prev);
  const buffPtr = buffToPtr(buff);

  raw.crc64(prevPtr, buffPtr, buff.length);
  const ret = uint64PtrToStr(prevPtr);

  binding._free(prevPtr);
  binding._free(buffPtr);

  return ret;
};

/**
 * Calculate the CRC-64 of two sequential blocks
 * @param {string} crc1 the CRC-64 of the first block
 * @param {string} crc2 crc2 is the CRC-64 of the second block
 * @param {number} crc2BytesLen the length of the second block
 * @returns {string} the CRC-64 of two sequential blocks
 */
module.exports.combineCrc64 = function(crc1, crc2, crc2BytesLen) {
  if (
    typeof crc1 !== 'string' || !/\d+/.test(crc1) ||
    typeof crc2 !== 'string' || !/\d+/.test(crc2)
  ) {
    throw new Error('Invlid crc1 or crc2 value.');
  }
  const crc1Ptr = strToUint64Ptr(crc1);
  const crc2Ptr = strToUint64Ptr(crc2);
  raw.combineCrc64(crc1Ptr, crc2Ptr, crc2BytesLen);
  const retCrc = uint64PtrToStr(crc1Ptr);

  binding._free(crc1Ptr);
  binding._free(crc2Ptr);

  return retCrc;
};

module.exports.crc64File = function(filename, callback) {
  let errored = false;
  const stream = fs.createReadStream(filename);
  const crcPtr = strToUint64Ptr('0');
  let crcPtrFreed = false;
  stream.on('error', function(err) {
    errored = true;
    stream.destroy();
    if (!crcPtrFreed) {
      binding._free(crcPtr);
      crcPtrFreed = true;
    }
    return callback(err);
  });

  stream.on('data', function(chunk) {
    const buffPtr = buffToPtr(chunk);
    raw.crc64(crcPtr, buffPtr, chunk.length);
    binding._free(buffPtr);
  });
  stream.on('end', function() {
    if (errored) return;

    const ret = uint64PtrToStr(crcPtr);
    if (!crcPtrFreed) {
      binding._free(crcPtr);
      crcPtrFreed = true;
    }

    return callback(undefined, ret);
  });
};


/***/ }),

/***/ 8564:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = (/* unused pure expression or super */ null && ([]));
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
  readAsync,
  readBinary;

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == 'undefined' || !process.release || process.release.name !== 'node') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  var nodeVersion = process.versions.node;
  var numericVersion = nodeVersion.split('.').slice(0, 3);
  numericVersion = numericVersion[0] * 10000 + numericVersion[1] * 100 + numericVersion[2].split('-')[0] * 1;
  var minVersion = 160000;
  if (numericVersion < 160000) {
    // throw new Error('This emscripten-generated code requires node v16.0.0 (detected v' + nodeVersion + ')');
  }

  // `require()` is no-op in an ESM module, use `createRequire()` to construct
  // the require()` function.  This is only necessary for multi-environment
  // builds, `-sENVIRONMENT=node` emits a static import declaration instead.
  // TODO: Swap all `require()`'s with `import()`'s?
  // These modules will usually be used on Node.js. Load them eagerly to avoid
  // the complexity of lazy-loading.
  var fs = __nccwpck_require__(9896);
  var nodePath = __nccwpck_require__(6928);

  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = nodePath.dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

  // include: node_shell_read.js
  read_ = (filename, binary) => {
    // We need to re-wrap `file://` strings to URLs. Normalizing isn't
    // necessary in that case, the path should already be absolute.
    filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
    return fs.readFileSync(filename, binary ? undefined : 'utf8');
  };

  readBinary = (filename) => {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  readAsync = (filename, onload, onerror, binary = true) => {
    // See the comment in the `read_` function.
    filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
    fs.readFile(filename, binary ? undefined : 'utf8', (err, data) => {
      if (err) onerror(err);else
      onload(binary ? data.buffer : data);
    });
  };
  // end include: node_shell_read.js
  if (!Module['thisProgram'] && process.argv.length > 1) {
    thisProgram = process.argv[1].replace(/\\/g, '/');
  }

  arguments_ = process.argv.slice(2);

  if (true) {
    module['exports'] = Module;
  }

  quit_ = (status, toThrow) => {
    process.exitCode = status;
    throw toThrow;
  };

} else
if (ENVIRONMENT_IS_SHELL) {

  if (typeof process == 'object' && "function" === 'function' || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = read;
  }

  readBinary = (f) => {
    if (typeof readbuffer == 'function') {
      return new Uint8Array(readbuffer(f));
    }
    let data = read(f, 'binary');
    assert(typeof data == 'object');
    return data;
  };

  readAsync = (f, onload, onerror) => {
    setTimeout(() => onload(readBinary(f)));
  };

  if (typeof clearTimeout == 'undefined') {
    globalThis.clearTimeout = (id) => {};
  }

  if (typeof setTimeout == 'undefined') {
    // spidermonkey lacks setTimeout but we use it above in readAsync.
    globalThis.setTimeout = (f) => typeof f == 'function' ? f() : abort();
  }

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit == 'function') {
    quit_ = (status, toThrow) => {
      // Unlike node which has process.exitCode, d8 has no such mechanism. So we
      // have no way to set the exit code and then let the program exit with
      // that code when it naturally stops running (say, when all setTimeouts
      // have completed). For that reason, we must call `quit` - the only way to
      // set the exit code - but quit also halts immediately.  To increase
      // consistency with node (and the web) we schedule the actual quit call
      // using a setTimeout to give the current stack and any exception handlers
      // a chance to run.  This enables features such as addOnPostRun (which
      // expected to be able to run code after main returns).
      setTimeout(() => {
        if (!(toThrow instanceof ExitStatus)) {
          let toLog = toThrow;
          if (toThrow && typeof toThrow == 'object' && toThrow.stack) {
            toLog = [toThrow, toThrow.stack];
          }
          err(`exiting due to exception: ${toLog}`);
        }
        quit(status);
      });
      throw toThrow;
    };
  }

  if (typeof print != 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console == 'undefined') console = /** @type{!Console} */{};
    console.log = /** @type{!function(this:Console, ...*): undefined} */print;
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */typeof printErr != 'undefined' ? printErr : print;
  }

} else

  // Note that this includes Node.js workers when relevant (pthreads is enabled).
  // Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
  // ENVIRONMENT_IS_NODE.
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    if (ENVIRONMENT_IS_WORKER) {// Check worker, not web, since window could be polyfilled
      scriptDirectory = self.location.href;
    } else if (typeof document != 'undefined' && document.currentScript) {// web
      scriptDirectory = document.currentScript.src;
    }
    // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
    // otherwise, slice off the final part of the url to find the script directory.
    // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
    // and scriptDirectory will correctly be replaced with an empty string.
    // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
    // they are removed because they could contain a slash.
    if (scriptDirectory.startsWith('blob:')) {
      scriptDirectory = '';
    } else {
      scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/') + 1);
    }

    if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

    // Differentiate the Web Worker from the Node Worker case, as reading must
    // be done differently.
    {
      // include: web_or_worker_shell_read.js
      read_ = (url) => {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.send(null);
        return xhr.responseText;
      };

      if (ENVIRONMENT_IS_WORKER) {
        readBinary = (url) => {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', url, false);
          xhr.responseType = 'arraybuffer';
          xhr.send(null);
          return new Uint8Array( /** @type{!ArrayBuffer} */xhr.response);
        };
      }

      readAsync = (url, onload, onerror) => {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = () => {
          if (xhr.status == 200 || xhr.status == 0 && xhr.response) {// file URLs can return 0
            onload(xhr.response);
            return;
          }
          onerror();
        };
        xhr.onerror = onerror;
        xhr.send(null);
      };

      // end include: web_or_worker_shell_read.js
    }
  } else
  {
    throw new Error('environment detection error');
  }

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.error.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

if (Module['quit']) quit_ = Module['quit'];legacyModuleProp('quit', 'quit_');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('asm', 'wasmExports');
legacyModuleProp('read', 'read_');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var FETCHFS = 'FETCHFS is no longer included by default; build with -lfetchfs.js';
var ICASEFS = 'ICASEFS is no longer included by default; build with -licasefs.js';
var JSFILEFS = 'JSFILEFS is no longer included by default; build with -ljsfilefs.js';
var OPFS = 'OPFS is no longer included by default; build with -lopfs.js';

var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_SHELL, 'shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.');


// end include: shell.js
// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function (opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function (binary) {




    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  }, /** @constructor */Instance: function (module, info) {// TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports =
    function instantiate(info) {
      function Table(ret) {
        // grow method not included; table is not growable
        ret.set = function (i, func) {
          this[i] = func;
        };
        ret.get = function (i) {
          return this[i];
        };
        return ret;
      }

      var bufferView;
      var base64ReverseLookup = new Uint8Array(123 /*'z'+1*/);
      for (var i = 25; i >= 0; --i) {
        base64ReverseLookup[48 + i] = 52 + i; // '0-9'
        base64ReverseLookup[65 + i] = i; // 'A-Z'
        base64ReverseLookup[97 + i] = 26 + i; // 'a-z'
      }
      base64ReverseLookup[43] = 62; // '+'
      base64ReverseLookup[47] = 63; // '/'
      /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
      function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
        var b1,b2,i = 0,j = offset,bLength = b64.length,end = offset + (bLength * 3 >> 2) - (b64[bLength - 2] == '=') - (b64[bLength - 1] == '=');
        for (; i < bLength; i += 4) {
          b1 = base64ReverseLookup[b64.charCodeAt(i + 1)];
          b2 = base64ReverseLookup[b64.charCodeAt(i + 2)];
          uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
          if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
          if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i + 3)];
        }
      }
      function initActiveSegments(imports) {
        base64DecodeToExistingUint8Array(bufferView, 65536, "aW5maW5pdHkALSsgICAwWDB4AC0wWCswWCAwWC0weCsweCAweAAlbGx1AG5hbgBpbmYATkFOAElORgAuAChudWxsKQAAAAAAAAAAAAAAAAAZAAoAGRkZAAAAAAUAAAAAAAAJAAAAAAsAAAAAAAAAABkAEQoZGRkDCgcAAQAJCxgAAAkGCwAACwAGGQAAABkZGQAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAAAZAAoNGRkZAA0AAAIACQ4AAAAJAA4AAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAEwAAAAATAAAAAAkMAAAAAAAMAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAA8AAAAEDwAAAAAJEAAAAAAAEAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAARAAAAABEAAAAACRIAAAAAABIAABIAABoAAAAaGhoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgAAABoaGgAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAABcAAAAAFwAAAAAJFAAAAAAAFAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAAAAAAAAAAAAAAVAAAAABUAAAAACRYAAAAAABYAABYAADAxMjM0NTY3ODlBQkNERUbRdJ4AV529KoBwUg///z4nCgAAAGQAAADoAwAAECcAAKCGAQBAQg8AgJaYAADh9QUYAAAANQAAAHEAAABr////zvv//5K///8AAAAAAAAAAP////////////////////////////////////////////////////////////////8AAQIDBAUGBwgJ/////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAECBAcDBgUAAAAAAAAAAgAAwAMAAMAEAADABQAAwAYAAMAHAADACAAAwAkAAMAKAADACwAAwAwAAMANAADADgAAwA8AAMAQAADAEQAAwBIAAMATAADAFAAAwBUAAMAWAADAFwAAwBgAAMAZAADAGgAAwBsAAMAcAADAHQAAwB4AAMAfAADAAAAAswEAAMMCAADDAwAAwwQAAMMFAADDBgAAwwcAAMMIAADDCQAAwwoAAMMLAADDDAAAww0AANMOAADDDwAAwwAADLsBAAzDAgAMwwMADMMEAAzb");
        base64DecodeToExistingUint8Array(bufferView, 66652, "IIcBAA==");
      }

      var scratchBuffer = new ArrayBuffer(16);
      var i32ScratchView = new Int32Array(scratchBuffer);
      var f32ScratchView = new Float32Array(scratchBuffer);
      var f64ScratchView = new Float64Array(scratchBuffer);

      function wasm2js_scratch_load_i32(index) {
        return i32ScratchView[index];
      }

      function wasm2js_scratch_store_i32(index, value) {
        i32ScratchView[index] = value;
      }

      function wasm2js_scratch_load_f64() {
        return f64ScratchView[0];
      }

      function wasm2js_scratch_store_f64(value) {
        f64ScratchView[0] = value;
      }

      function wasm2js_scratch_store_f32(value) {
        f32ScratchView[2] = value;
      }

      function wasm2js_scratch_load_f32() {
        return f32ScratchView[2];
      }

      function asmFunc(imports) {
        var buffer = new ArrayBuffer(16777216);
        var HEAP8 = new Int8Array(buffer);
        var HEAP16 = new Int16Array(buffer);
        var HEAP32 = new Int32Array(buffer);
        var HEAPU8 = new Uint8Array(buffer);
        var HEAPU16 = new Uint16Array(buffer);
        var HEAPU32 = new Uint32Array(buffer);
        var HEAPF32 = new Float32Array(buffer);
        var HEAPF64 = new Float64Array(buffer);
        var Math_imul = Math.imul;
        var Math_fround = Math.fround;
        var Math_abs = Math.abs;
        var Math_clz32 = Math.clz32;
        var Math_min = Math.min;
        var Math_max = Math.max;
        var Math_floor = Math.floor;
        var Math_ceil = Math.ceil;
        var Math_trunc = Math.trunc;
        var Math_sqrt = Math.sqrt;
        var env = imports.env;
        var fimport$0 = env.emscripten_memcpy_js;
        var fimport$1 = env.emscripten_resize_heap;
        var global$0 = 65536;
        var global$2 = 0;
        var global$3 = 0;
        var __wasm_intrinsics_temp_i64 = 0;
        var __wasm_intrinsics_temp_i64$hi = 0;
        var i64toi32_i32$HIGH_BITS = 0;
        // EMSCRIPTEN_START_FUNCS
        ;
        function $0() {
          $104();
          $66();
        }

        function $1() {
          var $2_1 = 0,i64toi32_i32$0 = 0;
          $2_1 = global$0 - 16 | 0;
          global$0 = $2_1;
          i64toi32_i32$0 = 0;
          HEAP32[($2_1 + 8 | 0) >> 2] = 1;
          HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          label$1: {
            label$2: {
              if (!(((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
                break label$2;
              }
              $2();
              break label$1;
            }
            $3();
          }
          global$0 = $2_1 + 16 | 0;
          return;
        }

        function $2() {
          $4(66656 | 0);
          return;
        }

        function $3() {
          var $2_1 = 0,i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,$111_1 = 0;
          $2_1 = global$0 - 16 | 0;
          global$0 = $2_1;
          $4(83040 | 0);
          HEAP32[($2_1 + 12 | 0) >> 2] = 0;
          label$1: {
            label$2: while (1) {
              if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
                break label$1;
              }
              HEAP32[($2_1 + 8 | 0) >> 2] = 0;
              label$3: {
                label$4: while (1) {
                  if (!((HEAP32[($2_1 + 8 | 0) >> 2] | 0) >>> 0 < 256 >>> 0 & 1 | 0)) {
                    break label$3;
                  }
                  i64toi32_i32$2 = (83040 + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 11 | 0) | 0) + ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  i64toi32_i32$1 = $5(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
                  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                  $111_1 = i64toi32_i32$1;
                  i64toi32_i32$1 = (83040 + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 11 | 0) | 0) + ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0;
                  HEAP32[i64toi32_i32$1 >> 2] = $111_1;
                  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 1 | 0;
                  continue label$4;
                };
              }
              HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
              continue label$2;
            };
          }
          global$0 = $2_1 + 16 | 0;
          return;
        }

        function $4($0_1) {
          $0_1 = $0_1 | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,i64toi32_i32$3 = 0,$3_1 = 0,i64toi32_i32$2 = 0,i64toi32_i32$4 = 0,$70$hi = 0,$71$hi = 0,$72$hi = 0,$73$hi = 0,$74$hi = 0,$75$hi = 0,$30_1 = 0,$76$hi = 0,$77$hi = 0,$79_1 = 0,$79$hi = 0,$80$hi = 0,$81$hi = 0,$31_1 = 0,$86$hi = 0,$87$hi = 0,$89$hi = 0,$90$hi = 0,$91$hi = 0,$32_1 = 0,$92$hi = 0,$183 = 0,$216 = 0,$89_1 = 0,$255 = 0,$277 = 0;
          $3_1 = global$0 - 32 | 0;
          HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
          HEAP32[($3_1 + 24 | 0) >> 2] = 0;
          label$1: {
            label$2: while (1) {
              if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0 < 256 >>> 0 & 1 | 0)) {
                break label$1;
              }
              i64toi32_i32$0 = 0;
              i64toi32_i32$1 = $3_1;
              HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
              HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
              label$3: {
                label$4: while (1) {
                  if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
                    break label$3;
                  }
                  i64toi32_i32$2 = $3_1;
                  i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
                  $70$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  $71$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $70$hi;
                  i64toi32_i32$1 = $71$hi;
                  i64toi32_i32$1 = $70$hi;
                  i64toi32_i32$2 = i64toi32_i32$0;
                  i64toi32_i32$0 = $71$hi;
                  i64toi32_i32$3 = 1;
                  i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
                  $72$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  $73$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $72$hi;
                  i64toi32_i32$0 = $73$hi;
                  i64toi32_i32$0 = $72$hi;
                  i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
                  i64toi32_i32$2 = $73$hi;
                  i64toi32_i32$3 = 0;
                  label$5: {
                    label$6: {
                      if (!(((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) & 1 | 0)) {
                        break label$6;
                      }
                      i64toi32_i32$3 = $3_1;
                      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                      $74$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = 0;
                      $75$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $74$hi;
                      i64toi32_i32$0 = $75$hi;
                      i64toi32_i32$0 = $74$hi;
                      i64toi32_i32$3 = i64toi32_i32$1;
                      i64toi32_i32$1 = $75$hi;
                      i64toi32_i32$2 = 1;
                      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
                      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                        i64toi32_i32$1 = 0;
                        $30_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                      } else {
                        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                        $30_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
                      }
                      $76$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = -915646571;
                      $77$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $76$hi;
                      i64toi32_i32$1 = $77$hi;
                      i64toi32_i32$1 = $76$hi;
                      i64toi32_i32$0 = $30_1;
                      i64toi32_i32$3 = $77$hi;
                      i64toi32_i32$2 = -679014590;
                      i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
                      $79_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
                      $79$hi = i64toi32_i32$3;
                      break label$5;
                    }
                    i64toi32_i32$1 = $3_1;
                    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
                    $80$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = 0;
                    $81$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $80$hi;
                    i64toi32_i32$0 = $81$hi;
                    i64toi32_i32$0 = $80$hi;
                    i64toi32_i32$1 = i64toi32_i32$3;
                    i64toi32_i32$3 = $81$hi;
                    i64toi32_i32$2 = 1;
                    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                      i64toi32_i32$3 = 0;
                      $31_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                    } else {
                      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                      $31_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
                    }
                    $79_1 = $31_1;
                    $79$hi = i64toi32_i32$3;
                  }
                  i64toi32_i32$3 = $79$hi;
                  i64toi32_i32$1 = $3_1;
                  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $79_1;
                  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
                  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = (HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0) + 1 | 0;
                  continue label$4;
                };
              }
              i64toi32_i32$0 = $3_1;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
              $183 = i64toi32_i32$3;
              i64toi32_i32$3 = (HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0) + ((HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0) << 3 | 0) | 0;
              HEAP32[i64toi32_i32$3 >> 2] = $183;
              HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
              HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0) + 1 | 0;
              continue label$2;
            };
          }
          HEAP32[($3_1 + 24 | 0) >> 2] = 0;
          label$7: {
            label$8: while (1) {
              if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0 < 256 >>> 0 & 1 | 0)) {
                break label$7;
              }
              i64toi32_i32$0 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $216 = i64toi32_i32$1;
              i64toi32_i32$1 = $3_1;
              HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $216;
              HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
              HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
              label$9: {
                label$10: while (1) {
                  if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
                    break label$9;
                  }
                  i64toi32_i32$0 = $3_1;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
                  $86$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  $87$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $86$hi;
                  i64toi32_i32$1 = $87$hi;
                  i64toi32_i32$1 = $86$hi;
                  i64toi32_i32$0 = i64toi32_i32$3;
                  i64toi32_i32$3 = $87$hi;
                  i64toi32_i32$2 = 255;
                  i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
                  i64toi32_i32$1 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + ((i64toi32_i32$0 & i64toi32_i32$2 | 0) << 3 | 0) | 0;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                  $89_1 = i64toi32_i32$3;
                  $89$hi = i64toi32_i32$0;
                  i64toi32_i32$1 = $3_1;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
                  $90$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = 0;
                  $91$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $90$hi;
                  i64toi32_i32$3 = $91$hi;
                  i64toi32_i32$3 = $90$hi;
                  i64toi32_i32$1 = i64toi32_i32$0;
                  i64toi32_i32$0 = $91$hi;
                  i64toi32_i32$2 = 8;
                  i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
                  if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                    i64toi32_i32$0 = 0;
                    $32_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                  } else {
                    i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                    $32_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
                  }
                  $92$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $89$hi;
                  i64toi32_i32$0 = $92$hi;
                  i64toi32_i32$0 = $89$hi;
                  i64toi32_i32$3 = $89_1;
                  i64toi32_i32$1 = $92$hi;
                  i64toi32_i32$2 = $32_1;
                  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
                  $255 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
                  i64toi32_i32$3 = $3_1;
                  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $255;
                  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$1;
                  i64toi32_i32$0 = i64toi32_i32$3;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
                  $277 = i64toi32_i32$1;
                  i64toi32_i32$1 = ((HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0) + ((HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0) << 11 | 0) | 0) + ((HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0) << 3 | 0) | 0;
                  HEAP32[i64toi32_i32$1 >> 2] = $277;
                  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
                  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0) + 1 | 0;
                  continue label$10;
                };
              }
              HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
              continue label$8;
            };
          }
          return;
        }

        function $5($0_1, $0$hi) {
          $0_1 = $0_1 | 0;
          $0$hi = $0$hi | 0;
          var i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$4 = 0,i64toi32_i32$3 = 0,$3_1 = 0,$5$hi = 0,$6$hi = 0,$45_1 = 0,$7$hi = 0,$8$hi = 0,$9$hi = 0,$10$hi = 0,$11$hi = 0,$12$hi = 0,$13$hi = 0,$46_1 = 0,$14$hi = 0,$17$hi = 0,$18$hi = 0,$47_1 = 0,$19$hi = 0,$20$hi = 0,$21$hi = 0,$22$hi = 0,$23$hi = 0,$24$hi = 0,$25$hi = 0,$48_1 = 0,$26$hi = 0,$28$hi = 0,$29$hi = 0,$49_1 = 0,$30$hi = 0,$31$hi = 0,$32$hi = 0,$50_1 = 0,$33$hi = 0,$51_1 = 0,$9_1 = 0,$10_1 = 0,$58_1 = 0,$67_1 = 0,$78_1 = 0,$21_1 = 0,$22_1 = 0,$85_1 = 0,$94_1 = 0,$30_1 = 0;
          $3_1 = global$0 - 16 | 0;
          i64toi32_i32$0 = $0$hi;
          i64toi32_i32$1 = $3_1;
          HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $0_1;
          HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$0 = 16711935;
          HEAP32[i64toi32_i32$1 >> 2] = 16711935;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$2 = i64toi32_i32$1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
          $5$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $6$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $5$hi;
          i64toi32_i32$1 = $6$hi;
          i64toi32_i32$1 = $5$hi;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = $6$hi;
          i64toi32_i32$3 = 8;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $45_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $45_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
          }
          $7$hi = i64toi32_i32$0;
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $8$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $7$hi;
          i64toi32_i32$2 = $8$hi;
          $51_1 = i64toi32_i32$0;
          i64toi32_i32$2 = $7$hi;
          i64toi32_i32$1 = $45_1;
          i64toi32_i32$0 = $8$hi;
          i64toi32_i32$3 = $51_1;
          i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
          $9_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
          $9$hi = i64toi32_i32$0;
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$0;
          $10$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $11$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$0 = $11$hi;
          $58_1 = i64toi32_i32$1;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$1 = $11$hi;
          i64toi32_i32$3 = $58_1;
          i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
          $12$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $13$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $12$hi;
          i64toi32_i32$1 = $13$hi;
          i64toi32_i32$1 = $12$hi;
          i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
          i64toi32_i32$2 = $13$hi;
          i64toi32_i32$3 = 8;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            $46_1 = 0;
          } else {
            i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
            $46_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          }
          $14$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $9$hi;
          i64toi32_i32$2 = $14$hi;
          i64toi32_i32$2 = $9$hi;
          i64toi32_i32$1 = $9_1;
          i64toi32_i32$0 = $14$hi;
          i64toi32_i32$3 = $46_1;
          i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
          $67_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
          i64toi32_i32$1 = $3_1;
          HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $67_1;
          HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$0 = 65535;
          HEAP32[i64toi32_i32$1 >> 2] = 65535;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$2 = i64toi32_i32$1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
          $17$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $18$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $17$hi;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $17$hi;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = $18$hi;
          i64toi32_i32$3 = 16;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $47_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $47_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
          }
          $19$hi = i64toi32_i32$0;
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $20$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $19$hi;
          i64toi32_i32$2 = $20$hi;
          $78_1 = i64toi32_i32$0;
          i64toi32_i32$2 = $19$hi;
          i64toi32_i32$1 = $47_1;
          i64toi32_i32$0 = $20$hi;
          i64toi32_i32$3 = $78_1;
          i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
          $21_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
          $21$hi = i64toi32_i32$0;
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
          $22_1 = i64toi32_i32$0;
          $22$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $23$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $22$hi;
          i64toi32_i32$0 = $23$hi;
          $85_1 = i64toi32_i32$1;
          i64toi32_i32$0 = $22$hi;
          i64toi32_i32$2 = $22_1;
          i64toi32_i32$1 = $23$hi;
          i64toi32_i32$3 = $85_1;
          i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
          $24$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $25$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $24$hi;
          i64toi32_i32$1 = $25$hi;
          i64toi32_i32$1 = $24$hi;
          i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
          i64toi32_i32$2 = $25$hi;
          i64toi32_i32$3 = 16;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            $48_1 = 0;
          } else {
            i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
            $48_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          }
          $26$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $21$hi;
          i64toi32_i32$2 = $26$hi;
          i64toi32_i32$2 = $21$hi;
          i64toi32_i32$1 = $21_1;
          i64toi32_i32$0 = $26$hi;
          i64toi32_i32$3 = $48_1;
          i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
          $94_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
          i64toi32_i32$1 = $3_1;
          HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $94_1;
          HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$2 = i64toi32_i32$1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
          $28$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $29$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $28$hi;
          i64toi32_i32$1 = $29$hi;
          i64toi32_i32$1 = $28$hi;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = $29$hi;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $49_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $49_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
          }
          $30_1 = $49_1;
          $30$hi = i64toi32_i32$0;
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
          $31$hi = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          $32$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $31$hi;
          i64toi32_i32$2 = $32$hi;
          i64toi32_i32$2 = $31$hi;
          i64toi32_i32$1 = i64toi32_i32$0;
          i64toi32_i32$0 = $32$hi;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
            $50_1 = 0;
          } else {
            i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
            $50_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
          }
          $33$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $30$hi;
          i64toi32_i32$0 = $33$hi;
          i64toi32_i32$0 = $30$hi;
          i64toi32_i32$2 = $30_1;
          i64toi32_i32$1 = $33$hi;
          i64toi32_i32$3 = $50_1;
          i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
          i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
          return i64toi32_i32$2 | 0;
        }

        function $6($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $5_1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,i64toi32_i32$2 = 0,$27_1 = 0,$27$hi = 0;
          $5_1 = global$0 - 32 | 0;
          global$0 = $5_1;
          HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
          HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
          HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$1 = $5_1;
          HEAP32[($5_1 + 8 | 0) >> 2] = 1;
          HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          label$1: {
            label$2: {
              if (!(((HEAPU8[($5_1 + 8 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
                break label$2;
              }
              i64toi32_i32$2 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              i64toi32_i32$1 = $7(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              $27_1 = i64toi32_i32$1;
              $27$hi = i64toi32_i32$0;
              break label$1;
            }
            i64toi32_i32$2 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            i64toi32_i32$1 = $8(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
            $27_1 = i64toi32_i32$1;
            $27$hi = i64toi32_i32$0;
          }
          i64toi32_i32$0 = $27$hi;
          i64toi32_i32$1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
          HEAP32[i64toi32_i32$1 >> 2] = $27_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          global$0 = $5_1 + 32 | 0;
          return;
        }

        function $7($0_1, $0$hi, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $0$hi = $0$hi | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var i64toi32_i32$1 = 0,i64toi32_i32$2 = 0,i64toi32_i32$0 = 0,i64toi32_i32$3 = 0,i64toi32_i32$4 = 0,$5_1 = 0,$113$hi = 0,$114$hi = 0,$9_1 = 0,$116$hi = 0,$18_1 = 0,$117$hi = 0,$118$hi = 0,$119$hi = 0,$121$hi = 0,$122$hi = 0,$123$hi = 0,$100_1 = 0,$124$hi = 0,$126$hi = 0,$129$hi = 0,$130$hi = 0,$132$hi = 0,$133$hi = 0,$134$hi = 0,$101_1 = 0,$135$hi = 0,$136$hi = 0,$138$hi = 0,$139$hi = 0,$140$hi = 0,$141$hi = 0,$102 = 0,$142$hi = 0,$143$hi = 0,$145$hi = 0,$146$hi = 0,$147$hi = 0,$148$hi = 0,$103 = 0,$149$hi = 0,$150$hi = 0,$152$hi = 0,$153$hi = 0,$154$hi = 0,$155$hi = 0,$104_1 = 0,$156$hi = 0,$157$hi = 0,$159$hi = 0,$160$hi = 0,$161$hi = 0,$162$hi = 0,$105_1 = 0,$163$hi = 0,$164$hi = 0,$166$hi = 0,$167$hi = 0,$168$hi = 0,$169$hi = 0,$106_1 = 0,$170$hi = 0,$171$hi = 0,$173$hi = 0,$174$hi = 0,$175$hi = 0,$176$hi = 0,$107_1 = 0,$178$hi = 0,$180$hi = 0,$99_1 = 0,$181$hi = 0,$182$hi = 0,$183$hi = 0,$185$hi = 0,$186$hi = 0,$187$hi = 0,$108_1 = 0,$188$hi = 0,$190$hi = 0,$191$hi = 0,$213 = 0,$121 = 0,$275 = 0,$126 = 0,$299$hi = 0,$303 = 0,$132 = 0,$344 = 0,$139 = 0,$368 = 0,$146 = 0,$392 = 0,$153 = 0,$416 = 0,$160 = 0,$440 = 0,$167 = 0,$464 = 0,$174 = 0,$482 = 0,$485 = 0,$185 = 0,$545 = 0;
          $5_1 = global$0 - 32 | 0;
          i64toi32_i32$0 = $0$hi;
          i64toi32_i32$1 = $5_1;
          HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $0_1;
          HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = $1_1;
          HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $2_1;
          HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
          i64toi32_i32$2 = i64toi32_i32$1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
          $113$hi = i64toi32_i32$1;
          i64toi32_i32$1 = -1;
          $114$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $113$hi;
          i64toi32_i32$1 = $114$hi;
          i64toi32_i32$1 = $113$hi;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = $114$hi;
          i64toi32_i32$3 = -1;
          i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
          $213 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
          i64toi32_i32$2 = $5_1;
          HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $213;
          HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$0;
          label$1: while (1) {
            $9_1 = 0;
            label$2: {
              if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
                break label$2;
              }
              $9_1 = ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & 7 | 0 | 0) != (0 | 0);
            }
            label$3: {
              if (!($9_1 & 1 | 0)) {
                break label$3;
              }
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
              $116$hi = i64toi32_i32$2;
              $18_1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
              HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = $18_1 + 1 | 0;
              i64toi32_i32$2 = 0;
              $117$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $116$hi;
              i64toi32_i32$2 = $117$hi;
              i64toi32_i32$2 = $116$hi;
              i64toi32_i32$1 = i64toi32_i32$0;
              i64toi32_i32$0 = $117$hi;
              i64toi32_i32$3 = (HEAPU8[$18_1 >> 0] | 0) & 255 | 0;
              i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
              $118$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $119$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $118$hi;
              i64toi32_i32$0 = $119$hi;
              i64toi32_i32$0 = $118$hi;
              i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
              i64toi32_i32$1 = $119$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
              i64toi32_i32$0 = 66656 + ((i64toi32_i32$2 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $121 = i64toi32_i32$1;
              $121$hi = i64toi32_i32$2;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
              $122$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $123$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $122$hi;
              i64toi32_i32$1 = $123$hi;
              i64toi32_i32$1 = $122$hi;
              i64toi32_i32$0 = i64toi32_i32$2;
              i64toi32_i32$2 = $123$hi;
              i64toi32_i32$3 = 8;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $100_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $100_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              $124$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $121$hi;
              i64toi32_i32$2 = $124$hi;
              i64toi32_i32$2 = $121$hi;
              i64toi32_i32$1 = $121;
              i64toi32_i32$0 = $124$hi;
              i64toi32_i32$3 = $100_1;
              i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
              $275 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
              i64toi32_i32$1 = $5_1;
              HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $275;
              HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0) + -1 | 0;
              continue label$1;
            }
            break label$1;
          };
          label$4: {
            label$5: while (1) {
              if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 >= 8 >>> 0 & 1 | 0)) {
                break label$4;
              }
              i64toi32_i32$2 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $126 = i64toi32_i32$0;
              $126$hi = i64toi32_i32$1;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
              $299$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $126$hi;
              i64toi32_i32$0 = $299$hi;
              i64toi32_i32$2 = i64toi32_i32$1;
              i64toi32_i32$1 = $126$hi;
              i64toi32_i32$3 = $126;
              i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
              $303 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
              i64toi32_i32$2 = $5_1;
              HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $303;
              HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$0 = i64toi32_i32$2;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
              $129$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $130$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $129$hi;
              i64toi32_i32$2 = $130$hi;
              i64toi32_i32$2 = $129$hi;
              i64toi32_i32$0 = i64toi32_i32$1;
              i64toi32_i32$1 = $130$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
              i64toi32_i32$2 = (66656 + 14336 | 0) + ((i64toi32_i32$0 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $132 = i64toi32_i32$1;
              $132$hi = i64toi32_i32$0;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
              $133$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $134$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $133$hi;
              i64toi32_i32$1 = $134$hi;
              i64toi32_i32$1 = $133$hi;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = $134$hi;
              i64toi32_i32$3 = 8;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $101_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $101_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
              }
              $135$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $136$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $135$hi;
              i64toi32_i32$0 = $136$hi;
              i64toi32_i32$0 = $135$hi;
              i64toi32_i32$1 = $101_1;
              i64toi32_i32$2 = $136$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
              i64toi32_i32$0 = (66656 + 12288 | 0) + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $138$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $132$hi;
              i64toi32_i32$1 = $138$hi;
              $344 = i64toi32_i32$2;
              i64toi32_i32$1 = $132$hi;
              i64toi32_i32$0 = $132;
              i64toi32_i32$2 = $138$hi;
              i64toi32_i32$3 = $344;
              i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
              $139 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
              $139$hi = i64toi32_i32$2;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
              $140$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $141$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $140$hi;
              i64toi32_i32$0 = $141$hi;
              i64toi32_i32$0 = $140$hi;
              i64toi32_i32$1 = i64toi32_i32$2;
              i64toi32_i32$2 = $141$hi;
              i64toi32_i32$3 = 16;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $102 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                $102 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
              }
              $142$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $143$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $142$hi;
              i64toi32_i32$2 = $143$hi;
              i64toi32_i32$2 = $142$hi;
              i64toi32_i32$0 = $102;
              i64toi32_i32$1 = $143$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
              i64toi32_i32$2 = (66656 + 10240 | 0) + ((i64toi32_i32$0 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $145$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $139$hi;
              i64toi32_i32$0 = $145$hi;
              $368 = i64toi32_i32$1;
              i64toi32_i32$0 = $139$hi;
              i64toi32_i32$2 = $139;
              i64toi32_i32$1 = $145$hi;
              i64toi32_i32$3 = $368;
              i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
              $146 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
              $146$hi = i64toi32_i32$1;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
              $147$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $148$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $147$hi;
              i64toi32_i32$2 = $148$hi;
              i64toi32_i32$2 = $147$hi;
              i64toi32_i32$0 = i64toi32_i32$1;
              i64toi32_i32$1 = $148$hi;
              i64toi32_i32$3 = 24;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $103 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                $103 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              $149$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $150$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $149$hi;
              i64toi32_i32$1 = $150$hi;
              i64toi32_i32$1 = $149$hi;
              i64toi32_i32$2 = $103;
              i64toi32_i32$0 = $150$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
              i64toi32_i32$1 = (66656 + 8192 | 0) + ((i64toi32_i32$2 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $152$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $146$hi;
              i64toi32_i32$2 = $152$hi;
              $392 = i64toi32_i32$0;
              i64toi32_i32$2 = $146$hi;
              i64toi32_i32$1 = $146;
              i64toi32_i32$0 = $152$hi;
              i64toi32_i32$3 = $392;
              i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
              $153 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
              $153$hi = i64toi32_i32$0;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
              $154$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $155$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $154$hi;
              i64toi32_i32$1 = $155$hi;
              i64toi32_i32$1 = $154$hi;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = $155$hi;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $104_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $104_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
              }
              $156$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $157$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $156$hi;
              i64toi32_i32$0 = $157$hi;
              i64toi32_i32$0 = $156$hi;
              i64toi32_i32$1 = $104_1;
              i64toi32_i32$2 = $157$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
              i64toi32_i32$0 = (66656 + 6144 | 0) + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $159$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $153$hi;
              i64toi32_i32$1 = $159$hi;
              $416 = i64toi32_i32$2;
              i64toi32_i32$1 = $153$hi;
              i64toi32_i32$0 = $153;
              i64toi32_i32$2 = $159$hi;
              i64toi32_i32$3 = $416;
              i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
              $160 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
              $160$hi = i64toi32_i32$2;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
              $161$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $162$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $161$hi;
              i64toi32_i32$0 = $162$hi;
              i64toi32_i32$0 = $161$hi;
              i64toi32_i32$1 = i64toi32_i32$2;
              i64toi32_i32$2 = $162$hi;
              i64toi32_i32$3 = 40;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $105_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                $105_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
              }
              $163$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $164$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $163$hi;
              i64toi32_i32$2 = $164$hi;
              i64toi32_i32$2 = $163$hi;
              i64toi32_i32$0 = $105_1;
              i64toi32_i32$1 = $164$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
              i64toi32_i32$2 = (66656 + 4096 | 0) + ((i64toi32_i32$0 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $166$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $160$hi;
              i64toi32_i32$0 = $166$hi;
              $440 = i64toi32_i32$1;
              i64toi32_i32$0 = $160$hi;
              i64toi32_i32$2 = $160;
              i64toi32_i32$1 = $166$hi;
              i64toi32_i32$3 = $440;
              i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
              $167 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
              $167$hi = i64toi32_i32$1;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
              $168$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $169$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $168$hi;
              i64toi32_i32$2 = $169$hi;
              i64toi32_i32$2 = $168$hi;
              i64toi32_i32$0 = i64toi32_i32$1;
              i64toi32_i32$1 = $169$hi;
              i64toi32_i32$3 = 48;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $106_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                $106_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              $170$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $171$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $170$hi;
              i64toi32_i32$1 = $171$hi;
              i64toi32_i32$1 = $170$hi;
              i64toi32_i32$2 = $106_1;
              i64toi32_i32$0 = $171$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
              i64toi32_i32$1 = (66656 + 2048 | 0) + ((i64toi32_i32$2 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $173$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $167$hi;
              i64toi32_i32$2 = $173$hi;
              $464 = i64toi32_i32$0;
              i64toi32_i32$2 = $167$hi;
              i64toi32_i32$1 = $167;
              i64toi32_i32$0 = $173$hi;
              i64toi32_i32$3 = $464;
              i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
              $174 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
              $174$hi = i64toi32_i32$0;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
              $175$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $176$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $175$hi;
              i64toi32_i32$1 = $176$hi;
              i64toi32_i32$1 = $175$hi;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = $176$hi;
              i64toi32_i32$3 = 56;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $107_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $107_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
              }
              i64toi32_i32$1 = 66656 + ($107_1 << 3 | 0) | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $178$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $174$hi;
              i64toi32_i32$2 = $178$hi;
              $482 = i64toi32_i32$0;
              i64toi32_i32$2 = $174$hi;
              i64toi32_i32$1 = $174;
              i64toi32_i32$0 = $178$hi;
              i64toi32_i32$3 = $482;
              i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
              $485 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
              i64toi32_i32$1 = $5_1;
              HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $485;
              HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = (HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0) + 8 | 0;
              HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0) - 8 | 0;
              continue label$5;
            };
          }
          label$6: {
            label$7: while (1) {
              if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
                break label$6;
              }
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
              $180$hi = i64toi32_i32$1;
              $99_1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
              HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = $99_1 + 1 | 0;
              i64toi32_i32$1 = 0;
              $181$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $180$hi;
              i64toi32_i32$1 = $181$hi;
              i64toi32_i32$1 = $180$hi;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = $181$hi;
              i64toi32_i32$3 = (HEAPU8[$99_1 >> 0] | 0) & 255 | 0;
              i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
              $182$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $183$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $182$hi;
              i64toi32_i32$0 = $183$hi;
              i64toi32_i32$0 = $182$hi;
              i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
              i64toi32_i32$2 = $183$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
              i64toi32_i32$0 = 66656 + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $185 = i64toi32_i32$2;
              $185$hi = i64toi32_i32$1;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
              $186$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $187$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $186$hi;
              i64toi32_i32$2 = $187$hi;
              i64toi32_i32$2 = $186$hi;
              i64toi32_i32$0 = i64toi32_i32$1;
              i64toi32_i32$1 = $187$hi;
              i64toi32_i32$3 = 8;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $108_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                $108_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              $188$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $185$hi;
              i64toi32_i32$1 = $188$hi;
              i64toi32_i32$1 = $185$hi;
              i64toi32_i32$2 = $185;
              i64toi32_i32$0 = $188$hi;
              i64toi32_i32$3 = $108_1;
              i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
              $545 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
              i64toi32_i32$2 = $5_1;
              HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $545;
              HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0) + -1 | 0;
              continue label$7;
            };
          }
          i64toi32_i32$1 = $5_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
          $190$hi = i64toi32_i32$2;
          i64toi32_i32$2 = -1;
          $191$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $190$hi;
          i64toi32_i32$2 = $191$hi;
          i64toi32_i32$2 = $190$hi;
          i64toi32_i32$1 = i64toi32_i32$0;
          i64toi32_i32$0 = $191$hi;
          i64toi32_i32$3 = -1;
          i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
          i64toi32_i32$1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
          return i64toi32_i32$1 | 0;
        }

        function $8($0_1, $0$hi, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $0$hi = $0$hi | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,i64toi32_i32$2 = 0,i64toi32_i32$3 = 0,i64toi32_i32$4 = 0,$5_1 = 0,$116$hi = 0,$117$hi = 0,$9_1 = 0,$119$hi = 0,$120$hi = 0,$100_1 = 0,$121$hi = 0,$18_1 = 0,$122$hi = 0,$124$hi = 0,$125$hi = 0,$126$hi = 0,$101_1 = 0,$127$hi = 0,$129$hi = 0,$132$hi = 0,$133$hi = 0,$135$hi = 0,$136$hi = 0,$137$hi = 0,$102 = 0,$138$hi = 0,$139$hi = 0,$141$hi = 0,$142$hi = 0,$143$hi = 0,$144$hi = 0,$103 = 0,$145$hi = 0,$146$hi = 0,$148$hi = 0,$149$hi = 0,$150$hi = 0,$151$hi = 0,$104_1 = 0,$152$hi = 0,$153$hi = 0,$155$hi = 0,$156$hi = 0,$157$hi = 0,$158$hi = 0,$105_1 = 0,$159$hi = 0,$160$hi = 0,$162$hi = 0,$163$hi = 0,$164$hi = 0,$165$hi = 0,$106_1 = 0,$166$hi = 0,$167$hi = 0,$169$hi = 0,$170$hi = 0,$171$hi = 0,$172$hi = 0,$107_1 = 0,$173$hi = 0,$174$hi = 0,$176$hi = 0,$177$hi = 0,$178$hi = 0,$179$hi = 0,$108_1 = 0,$181$hi = 0,$183$hi = 0,$184$hi = 0,$109_1 = 0,$185$hi = 0,$99_1 = 0,$186$hi = 0,$188$hi = 0,$189$hi = 0,$190$hi = 0,$110_1 = 0,$191$hi = 0,$194$hi = 0,$195$hi = 0,$220 = 0,$124 = 0,$282 = 0,$129 = 0,$306$hi = 0,$310 = 0,$135 = 0,$348 = 0,$142 = 0,$372 = 0,$149 = 0,$396 = 0,$156 = 0,$420 = 0,$163 = 0,$444 = 0,$170 = 0,$468 = 0,$177 = 0,$489 = 0,$492 = 0,$188 = 0,$552 = 0;
          $5_1 = global$0 - 32 | 0;
          global$0 = $5_1;
          i64toi32_i32$0 = $0$hi;
          i64toi32_i32$1 = $5_1;
          HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $0_1;
          HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = $1_1;
          HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $2_1;
          HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
          i64toi32_i32$2 = i64toi32_i32$1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
          i64toi32_i32$1 = $5(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $116$hi = i64toi32_i32$0;
          i64toi32_i32$0 = -1;
          $117$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $116$hi;
          i64toi32_i32$0 = $117$hi;
          i64toi32_i32$0 = $116$hi;
          i64toi32_i32$2 = i64toi32_i32$1;
          i64toi32_i32$1 = $117$hi;
          i64toi32_i32$3 = -1;
          i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
          $220 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
          i64toi32_i32$2 = $5_1;
          HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $220;
          HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
          label$1: while (1) {
            $9_1 = 0;
            label$2: {
              if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
                break label$2;
              }
              $9_1 = ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & 7 | 0 | 0) != (0 | 0);
            }
            label$3: {
              if (!($9_1 & 1 | 0)) {
                break label$3;
              }
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
              $119$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $120$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $119$hi;
              i64toi32_i32$2 = $120$hi;
              i64toi32_i32$2 = $119$hi;
              i64toi32_i32$0 = i64toi32_i32$1;
              i64toi32_i32$1 = $120$hi;
              i64toi32_i32$3 = 56;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $100_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                $100_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              $121$hi = i64toi32_i32$1;
              $18_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              HEAP32[($5_1 + 12 | 0) >> 2] = $18_1 + 1 | 0;
              i64toi32_i32$1 = 0;
              $122$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $121$hi;
              i64toi32_i32$1 = $122$hi;
              i64toi32_i32$1 = $121$hi;
              i64toi32_i32$2 = $100_1;
              i64toi32_i32$0 = $122$hi;
              i64toi32_i32$3 = (HEAPU8[$18_1 >> 0] | 0) & 255 | 0;
              i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
              i64toi32_i32$1 = 83040 + ((i64toi32_i32$2 ^ i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $124 = i64toi32_i32$0;
              $124$hi = i64toi32_i32$2;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
              $125$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $126$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $125$hi;
              i64toi32_i32$0 = $126$hi;
              i64toi32_i32$0 = $125$hi;
              i64toi32_i32$1 = i64toi32_i32$2;
              i64toi32_i32$2 = $126$hi;
              i64toi32_i32$3 = 8;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
                $101_1 = 0;
              } else {
                i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
                $101_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
              }
              $127$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $124$hi;
              i64toi32_i32$2 = $127$hi;
              i64toi32_i32$2 = $124$hi;
              i64toi32_i32$0 = $124;
              i64toi32_i32$1 = $127$hi;
              i64toi32_i32$3 = $101_1;
              i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
              $282 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
              i64toi32_i32$0 = $5_1;
              HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $282;
              HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
              HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0) + -1 | 0;
              continue label$1;
            }
            break label$1;
          };
          label$4: {
            label$5: while (1) {
              if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 >= 8 >>> 0 & 1 | 0)) {
                break label$4;
              }
              i64toi32_i32$2 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $129 = i64toi32_i32$1;
              $129$hi = i64toi32_i32$0;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
              $306$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $129$hi;
              i64toi32_i32$1 = $306$hi;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = $129$hi;
              i64toi32_i32$3 = $129;
              i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
              $310 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
              i64toi32_i32$2 = $5_1;
              HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $310;
              HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = i64toi32_i32$2;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
              $132$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $133$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $132$hi;
              i64toi32_i32$2 = $133$hi;
              i64toi32_i32$2 = $132$hi;
              i64toi32_i32$1 = i64toi32_i32$0;
              i64toi32_i32$0 = $133$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
              i64toi32_i32$2 = 83040 + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $135 = i64toi32_i32$0;
              $135$hi = i64toi32_i32$1;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
              $136$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $137$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $136$hi;
              i64toi32_i32$0 = $137$hi;
              i64toi32_i32$0 = $136$hi;
              i64toi32_i32$2 = i64toi32_i32$1;
              i64toi32_i32$1 = $137$hi;
              i64toi32_i32$3 = 8;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $102 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                $102 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
              }
              $138$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $139$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $138$hi;
              i64toi32_i32$1 = $139$hi;
              i64toi32_i32$1 = $138$hi;
              i64toi32_i32$0 = $102;
              i64toi32_i32$2 = $139$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
              i64toi32_i32$1 = (83040 + 2048 | 0) + ((i64toi32_i32$0 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $141$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $135$hi;
              i64toi32_i32$0 = $141$hi;
              $348 = i64toi32_i32$2;
              i64toi32_i32$0 = $135$hi;
              i64toi32_i32$1 = $135;
              i64toi32_i32$2 = $141$hi;
              i64toi32_i32$3 = $348;
              i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
              $142 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
              $142$hi = i64toi32_i32$2;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
              $143$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $144$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $143$hi;
              i64toi32_i32$1 = $144$hi;
              i64toi32_i32$1 = $143$hi;
              i64toi32_i32$0 = i64toi32_i32$2;
              i64toi32_i32$2 = $144$hi;
              i64toi32_i32$3 = 16;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $103 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $103 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              $145$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $146$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $145$hi;
              i64toi32_i32$2 = $146$hi;
              i64toi32_i32$2 = $145$hi;
              i64toi32_i32$1 = $103;
              i64toi32_i32$0 = $146$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
              i64toi32_i32$2 = (83040 + 4096 | 0) + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $148$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $142$hi;
              i64toi32_i32$1 = $148$hi;
              $372 = i64toi32_i32$0;
              i64toi32_i32$1 = $142$hi;
              i64toi32_i32$2 = $142;
              i64toi32_i32$0 = $148$hi;
              i64toi32_i32$3 = $372;
              i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
              $149 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
              $149$hi = i64toi32_i32$0;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
              $150$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $151$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $150$hi;
              i64toi32_i32$2 = $151$hi;
              i64toi32_i32$2 = $150$hi;
              i64toi32_i32$1 = i64toi32_i32$0;
              i64toi32_i32$0 = $151$hi;
              i64toi32_i32$3 = 24;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $104_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                $104_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
              }
              $152$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $153$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $152$hi;
              i64toi32_i32$0 = $153$hi;
              i64toi32_i32$0 = $152$hi;
              i64toi32_i32$2 = $104_1;
              i64toi32_i32$1 = $153$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
              i64toi32_i32$0 = (83040 + 6144 | 0) + ((i64toi32_i32$2 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $155$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $149$hi;
              i64toi32_i32$2 = $155$hi;
              $396 = i64toi32_i32$1;
              i64toi32_i32$2 = $149$hi;
              i64toi32_i32$0 = $149;
              i64toi32_i32$1 = $155$hi;
              i64toi32_i32$3 = $396;
              i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
              $156 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
              $156$hi = i64toi32_i32$1;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
              $157$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $158$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $157$hi;
              i64toi32_i32$0 = $158$hi;
              i64toi32_i32$0 = $157$hi;
              i64toi32_i32$2 = i64toi32_i32$1;
              i64toi32_i32$1 = $158$hi;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $105_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                $105_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
              }
              $159$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $160$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $159$hi;
              i64toi32_i32$1 = $160$hi;
              i64toi32_i32$1 = $159$hi;
              i64toi32_i32$0 = $105_1;
              i64toi32_i32$2 = $160$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
              i64toi32_i32$1 = (83040 + 8192 | 0) + ((i64toi32_i32$0 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $162$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $156$hi;
              i64toi32_i32$0 = $162$hi;
              $420 = i64toi32_i32$2;
              i64toi32_i32$0 = $156$hi;
              i64toi32_i32$1 = $156;
              i64toi32_i32$2 = $162$hi;
              i64toi32_i32$3 = $420;
              i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
              $163 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
              $163$hi = i64toi32_i32$2;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
              $164$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $165$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $164$hi;
              i64toi32_i32$1 = $165$hi;
              i64toi32_i32$1 = $164$hi;
              i64toi32_i32$0 = i64toi32_i32$2;
              i64toi32_i32$2 = $165$hi;
              i64toi32_i32$3 = 40;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $106_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $106_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              $166$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $167$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $166$hi;
              i64toi32_i32$2 = $167$hi;
              i64toi32_i32$2 = $166$hi;
              i64toi32_i32$1 = $106_1;
              i64toi32_i32$0 = $167$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
              i64toi32_i32$2 = (83040 + 10240 | 0) + ((i64toi32_i32$1 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $169$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $163$hi;
              i64toi32_i32$1 = $169$hi;
              $444 = i64toi32_i32$0;
              i64toi32_i32$1 = $163$hi;
              i64toi32_i32$2 = $163;
              i64toi32_i32$0 = $169$hi;
              i64toi32_i32$3 = $444;
              i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
              $170 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
              $170$hi = i64toi32_i32$0;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
              $171$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $172$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $171$hi;
              i64toi32_i32$2 = $172$hi;
              i64toi32_i32$2 = $171$hi;
              i64toi32_i32$1 = i64toi32_i32$0;
              i64toi32_i32$0 = $172$hi;
              i64toi32_i32$3 = 48;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $107_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                $107_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
              }
              $173$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $174$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $173$hi;
              i64toi32_i32$0 = $174$hi;
              i64toi32_i32$0 = $173$hi;
              i64toi32_i32$2 = $107_1;
              i64toi32_i32$1 = $174$hi;
              i64toi32_i32$3 = 255;
              i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
              i64toi32_i32$0 = (83040 + 12288 | 0) + ((i64toi32_i32$2 & i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $176$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $170$hi;
              i64toi32_i32$2 = $176$hi;
              $468 = i64toi32_i32$1;
              i64toi32_i32$2 = $170$hi;
              i64toi32_i32$0 = $170;
              i64toi32_i32$1 = $176$hi;
              i64toi32_i32$3 = $468;
              i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
              $177 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
              $177$hi = i64toi32_i32$1;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
              $178$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $179$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $178$hi;
              i64toi32_i32$0 = $179$hi;
              i64toi32_i32$0 = $178$hi;
              i64toi32_i32$2 = i64toi32_i32$1;
              i64toi32_i32$1 = $179$hi;
              i64toi32_i32$3 = 56;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $108_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                $108_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
              }
              i64toi32_i32$0 = (83040 + 14336 | 0) + ($108_1 << 3 | 0) | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $181$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $177$hi;
              i64toi32_i32$2 = $181$hi;
              $489 = i64toi32_i32$1;
              i64toi32_i32$2 = $177$hi;
              i64toi32_i32$0 = $177;
              i64toi32_i32$1 = $181$hi;
              i64toi32_i32$3 = $489;
              i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
              $492 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
              i64toi32_i32$0 = $5_1;
              HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $492;
              HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
              HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0) + 8 | 0;
              HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0) - 8 | 0;
              continue label$5;
            };
          }
          label$6: {
            label$7: while (1) {
              if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
                break label$6;
              }
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
              $183$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $184$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $183$hi;
              i64toi32_i32$0 = $184$hi;
              i64toi32_i32$0 = $183$hi;
              i64toi32_i32$2 = i64toi32_i32$1;
              i64toi32_i32$1 = $184$hi;
              i64toi32_i32$3 = 56;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $109_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                $109_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
              }
              $185$hi = i64toi32_i32$1;
              $99_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              HEAP32[($5_1 + 12 | 0) >> 2] = $99_1 + 1 | 0;
              i64toi32_i32$1 = 0;
              $186$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $185$hi;
              i64toi32_i32$1 = $186$hi;
              i64toi32_i32$1 = $185$hi;
              i64toi32_i32$0 = $109_1;
              i64toi32_i32$2 = $186$hi;
              i64toi32_i32$3 = (HEAPU8[$99_1 >> 0] | 0) & 255 | 0;
              i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
              i64toi32_i32$1 = 83040 + ((i64toi32_i32$0 ^ i64toi32_i32$3 | 0) << 3 | 0) | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $188 = i64toi32_i32$2;
              $188$hi = i64toi32_i32$0;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
              $189$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $190$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $189$hi;
              i64toi32_i32$2 = $190$hi;
              i64toi32_i32$2 = $189$hi;
              i64toi32_i32$1 = i64toi32_i32$0;
              i64toi32_i32$0 = $190$hi;
              i64toi32_i32$3 = 8;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
                $110_1 = 0;
              } else {
                i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
                $110_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
              }
              $191$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $188$hi;
              i64toi32_i32$0 = $191$hi;
              i64toi32_i32$0 = $188$hi;
              i64toi32_i32$2 = $188;
              i64toi32_i32$1 = $191$hi;
              i64toi32_i32$3 = $110_1;
              i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
              $552 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
              i64toi32_i32$2 = $5_1;
              HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $552;
              HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
              HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = (HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0) + -1 | 0;
              continue label$7;
            };
          }
          i64toi32_i32$0 = $5_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
          i64toi32_i32$2 = $5(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
          $194$hi = i64toi32_i32$1;
          i64toi32_i32$1 = -1;
          $195$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $194$hi;
          i64toi32_i32$1 = $195$hi;
          i64toi32_i32$1 = $194$hi;
          i64toi32_i32$0 = i64toi32_i32$2;
          i64toi32_i32$2 = $195$hi;
          i64toi32_i32$3 = -1;
          i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
          global$0 = $5_1 + 32 | 0;
          i64toi32_i32$0 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
          return i64toi32_i32$0 | 0;
        }

        function $9($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var $4_1 = 0,$5_1 = 0;
          $4_1 = global$0 - 16 | 0;
          global$0 = $4_1;
          HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
          $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
          HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
          $15($5_1 | 0, 65574 | 0, $4_1 | 0) | 0;
          global$0 = $4_1 + 16 | 0;
          return;
        }

        function $10($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var $4_1 = 0,i64toi32_i32$2 = 0,$5_1 = 0,i64toi32_i32$1 = 0;
          $4_1 = global$0 - 16 | 0;
          global$0 = $4_1;
          HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
          $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          HEAP32[$4_1 >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
          $14($5_1 | 0, 65574 | 0, $4_1 | 0) | 0;
          global$0 = $4_1 + 16 | 0;
          return;
        }

        function $11($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $5_1 = 0,i64toi32_i32$2 = 0,i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,i64toi32_i32$4 = 0,i64toi32_i32$3 = 0,$65$hi = 0,$66$hi = 0,$21_1 = 0,$72$hi = 0,$92_1 = 0,$98_1 = 0,$130 = 0,$183 = 0,$215 = 0,$72_1 = 0,$230$hi = 0,$234 = 0,$240 = 0;
          $5_1 = global$0 - 1072 | 0;
          global$0 = $5_1;
          HEAP32[($5_1 + 1068 | 0) >> 2] = $0_1;
          HEAP32[($5_1 + 1064 | 0) >> 2] = $1_1;
          HEAP32[($5_1 + 1060 | 0) >> 2] = $2_1;
          i64toi32_i32$2 = HEAP32[($5_1 + 1068 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $92_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $5_1;
          HEAP32[($5_1 + 1048 | 0) >> 2] = $92_1;
          HEAP32[($5_1 + 1052 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = HEAP32[($5_1 + 1064 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $98_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $5_1;
          HEAP32[($5_1 + 1040 | 0) >> 2] = $98_1;
          HEAP32[($5_1 + 1044 | 0) >> 2] = i64toi32_i32$0;
          label$1: {
            label$2: {
              if (HEAP32[($5_1 + 1060 | 0) >> 2] | 0) {
                break label$2;
              }
              break label$1;
            }
            i64toi32_i32$0 = -915646571;
            i64toi32_i32$1 = $5_1;
            HEAP32[$5_1 >> 2] = -679014590;
            HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$1 = $5_1;
            HEAP32[($5_1 + 1024 | 0) >> 2] = 1;
            HEAP32[($5_1 + 1028 | 0) >> 2] = i64toi32_i32$0;
            HEAP32[($5_1 + 1036 | 0) >> 2] = 1;
            label$3: {
              label$4: while (1) {
                if (!((HEAP32[($5_1 + 1036 | 0) >> 2] | 0) >>> 0 < 64 >>> 0 & 1 | 0)) {
                  break label$3;
                }
                i64toi32_i32$2 = $5_1;
                i64toi32_i32$0 = HEAP32[($5_1 + 1024 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($5_1 + 1028 | 0) >> 2] | 0;
                $130 = i64toi32_i32$0;
                i64toi32_i32$0 = $5_1 + ((HEAP32[($5_1 + 1036 | 0) >> 2] | 0) << 3 | 0) | 0;
                HEAP32[i64toi32_i32$0 >> 2] = $130;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                i64toi32_i32$2 = $5_1;
                i64toi32_i32$1 = HEAP32[($5_1 + 1024 | 0) >> 2] | 0;
                i64toi32_i32$0 = HEAP32[($5_1 + 1028 | 0) >> 2] | 0;
                $65$hi = i64toi32_i32$0;
                i64toi32_i32$0 = 0;
                $66$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $65$hi;
                i64toi32_i32$0 = $66$hi;
                i64toi32_i32$0 = $65$hi;
                i64toi32_i32$2 = i64toi32_i32$1;
                i64toi32_i32$1 = $66$hi;
                i64toi32_i32$3 = 1;
                i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                  $21_1 = 0;
                } else {
                  i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
                  $21_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                }
                i64toi32_i32$2 = $5_1;
                HEAP32[($5_1 + 1024 | 0) >> 2] = $21_1;
                HEAP32[($5_1 + 1028 | 0) >> 2] = i64toi32_i32$1;
                HEAP32[($5_1 + 1036 | 0) >> 2] = (HEAP32[($5_1 + 1036 | 0) >> 2] | 0) + 1 | 0;
                continue label$4;
              };
            }
            $12($5_1 + 512 | 0 | 0, $5_1 | 0);
            $12($5_1 | 0, $5_1 + 512 | 0 | 0);
            label$5: while (1) {
              $12($5_1 + 512 | 0 | 0, $5_1 | 0);
              label$6: {
                if (!((HEAP32[($5_1 + 1060 | 0) >> 2] | 0) & 1 | 0)) {
                  break label$6;
                }
                i64toi32_i32$0 = $5_1;
                i64toi32_i32$1 = HEAP32[($5_1 + 1048 | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[($5_1 + 1052 | 0) >> 2] | 0;
                i64toi32_i32$2 = $13($5_1 + 512 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                $183 = i64toi32_i32$2;
                i64toi32_i32$2 = $5_1;
                HEAP32[($5_1 + 1048 | 0) >> 2] = $183;
                HEAP32[($5_1 + 1052 | 0) >> 2] = i64toi32_i32$1;
              }
              HEAP32[($5_1 + 1060 | 0) >> 2] = (HEAP32[($5_1 + 1060 | 0) >> 2] | 0) >>> 1 | 0;
              label$7: {
                label$8: {
                  if (HEAP32[($5_1 + 1060 | 0) >> 2] | 0) {
                    break label$8;
                  }
                  break label$7;
                }
                $12($5_1 | 0, $5_1 + 512 | 0 | 0);
                label$9: {
                  if (!((HEAP32[($5_1 + 1060 | 0) >> 2] | 0) & 1 | 0)) {
                    break label$9;
                  }
                  i64toi32_i32$0 = $5_1;
                  i64toi32_i32$1 = HEAP32[($5_1 + 1048 | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[($5_1 + 1052 | 0) >> 2] | 0;
                  i64toi32_i32$2 = $13($5_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                  $215 = i64toi32_i32$2;
                  i64toi32_i32$2 = $5_1;
                  HEAP32[($5_1 + 1048 | 0) >> 2] = $215;
                  HEAP32[($5_1 + 1052 | 0) >> 2] = i64toi32_i32$1;
                }
                HEAP32[($5_1 + 1060 | 0) >> 2] = (HEAP32[($5_1 + 1060 | 0) >> 2] | 0) >>> 1 | 0;
                if (HEAP32[($5_1 + 1060 | 0) >> 2] | 0) {
                  continue label$5;
                }
              }
              break label$5;
            };
            i64toi32_i32$0 = $5_1;
            i64toi32_i32$1 = HEAP32[($5_1 + 1040 | 0) >> 2] | 0;
            i64toi32_i32$2 = HEAP32[($5_1 + 1044 | 0) >> 2] | 0;
            $72_1 = i64toi32_i32$1;
            $72$hi = i64toi32_i32$2;
            i64toi32_i32$0 = $5_1;
            i64toi32_i32$2 = HEAP32[($5_1 + 1048 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($5_1 + 1052 | 0) >> 2] | 0;
            $230$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $72$hi;
            i64toi32_i32$1 = $230$hi;
            i64toi32_i32$0 = i64toi32_i32$2;
            i64toi32_i32$2 = $72$hi;
            i64toi32_i32$3 = $72_1;
            i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
            $234 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
            i64toi32_i32$0 = $5_1;
            HEAP32[($5_1 + 1048 | 0) >> 2] = $234;
            HEAP32[($5_1 + 1052 | 0) >> 2] = i64toi32_i32$2;
            i64toi32_i32$1 = $5_1;
            i64toi32_i32$2 = HEAP32[($5_1 + 1048 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($5_1 + 1052 | 0) >> 2] | 0;
            $240 = i64toi32_i32$2;
            i64toi32_i32$2 = HEAP32[($5_1 + 1068 | 0) >> 2] | 0;
            HEAP32[i64toi32_i32$2 >> 2] = $240;
            HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
          }
          global$0 = $5_1 + 1072 | 0;
          return;
        }

        function $12($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var $4_1 = 0,i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,$78_1 = 0;
          $4_1 = global$0 - 16 | 0;
          global$0 = $4_1;
          HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
          HEAP32[($4_1 + 4 | 0) >> 2] = 0;
          label$1: {
            label$2: while (1) {
              if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < 64 >>> 0 & 1 | 0)) {
                break label$1;
              }
              i64toi32_i32$2 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              i64toi32_i32$1 = $13(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              $78_1 = i64toi32_i32$1;
              i64toi32_i32$1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
              HEAP32[i64toi32_i32$1 >> 2] = $78_1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
              continue label$2;
            };
          }
          global$0 = $4_1 + 16 | 0;
          return;
        }

        function $13($0_1, $1_1, $1$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          var i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,$4_1 = 0,i64toi32_i32$3 = 0,i64toi32_i32$4 = 0,$16$hi = 0,$17$hi = 0,$18$hi = 0,$19$hi = 0,$20$hi = 0,$21$hi = 0,$22$hi = 0,$25$hi = 0,$26$hi = 0,$21_1 = 0,$22_1 = 0,$68$hi = 0,$72_1 = 0;
          $4_1 = global$0 - 32 | 0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$1 = $4_1;
          HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $1_1;
          HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
          HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
          label$1: {
            label$2: while (1) {
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
              $16$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $17$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $16$hi;
              i64toi32_i32$1 = $17$hi;
              i64toi32_i32$1 = $16$hi;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = $17$hi;
              i64toi32_i32$3 = 0;
              if (!(((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) & 1 | 0)) {
                break label$1;
              }
              i64toi32_i32$3 = $4_1;
              i64toi32_i32$2 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
              $18$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $19$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $18$hi;
              i64toi32_i32$1 = $19$hi;
              i64toi32_i32$1 = $18$hi;
              i64toi32_i32$3 = i64toi32_i32$2;
              i64toi32_i32$2 = $19$hi;
              i64toi32_i32$0 = 1;
              i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
              $20$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $21$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $20$hi;
              i64toi32_i32$2 = $21$hi;
              i64toi32_i32$2 = $20$hi;
              i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
              i64toi32_i32$3 = $21$hi;
              i64toi32_i32$0 = 0;
              label$3: {
                if (!(((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) & 1 | 0)) {
                  break label$3;
                }
                i64toi32_i32$0 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                $22_1 = i64toi32_i32$1;
                $22$hi = i64toi32_i32$2;
                i64toi32_i32$0 = $4_1;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
                $68$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $22$hi;
                i64toi32_i32$1 = $68$hi;
                i64toi32_i32$0 = i64toi32_i32$2;
                i64toi32_i32$2 = $22$hi;
                i64toi32_i32$3 = $22_1;
                i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
                $72_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
                i64toi32_i32$0 = $4_1;
                HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $72_1;
                HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
              }
              i64toi32_i32$1 = $4_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
              $25$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $26$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $25$hi;
              i64toi32_i32$0 = $26$hi;
              i64toi32_i32$0 = $25$hi;
              i64toi32_i32$1 = i64toi32_i32$2;
              i64toi32_i32$2 = $26$hi;
              i64toi32_i32$3 = 1;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
              }
              i64toi32_i32$1 = $4_1;
              HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $21_1;
              HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$2;
              HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = (HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0) + 8 | 0;
              continue label$2;
            };
          }
          i64toi32_i32$0 = $4_1;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
          return i64toi32_i32$2 | 0;
        }

        function $14($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $3_1 = 0;
          $3_1 = global$0 - 16 | 0;
          global$0 = $3_1;
          HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
          $2_1 = $45($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
          global$0 = $3_1 + 16 | 0;
          return $2_1 | 0;
        }

        function $15($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $3_1 = 0;
          $3_1 = global$0 - 16 | 0;
          global$0 = $3_1;
          HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
          $2_1 = $73($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
          global$0 = $3_1 + 16 | 0;
          return $2_1 | 0;
        }

        function $16($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $3_1 = 0,i64toi32_i32$0 = 0,$4_1 = 0,i64toi32_i32$1 = 0,$6_1 = 0,$5_1 = 0,$6$hi = 0;
          label$1: {
            if (!$2_1) {
              break label$1;
            }
            HEAP8[$0_1 >> 0] = $1_1;
            $3_1 = $0_1 + $2_1 | 0;
            HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
            if ($2_1 >>> 0 < 3 >>> 0) {
              break label$1;
            }
            HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
            HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
            HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
            HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
            if ($2_1 >>> 0 < 7 >>> 0) {
              break label$1;
            }
            HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
            HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
            if ($2_1 >>> 0 < 9 >>> 0) {
              break label$1;
            }
            $4_1 = (0 - $0_1 | 0) & 3 | 0;
            $3_1 = $0_1 + $4_1 | 0;
            $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
            HEAP32[$3_1 >> 2] = $1_1;
            $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
            $2_1 = $3_1 + $4_1 | 0;
            HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
            if ($4_1 >>> 0 < 9 >>> 0) {
              break label$1;
            }
            HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
            HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
            HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
            if ($4_1 >>> 0 < 25 >>> 0) {
              break label$1;
            }
            HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
            HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
            HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
            HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
            HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
            HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
            HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
            $5_1 = $3_1 & 4 | 0 | 24 | 0;
            $2_1 = $4_1 - $5_1 | 0;
            if ($2_1 >>> 0 < 32 >>> 0) {
              break label$1;
            }
            i64toi32_i32$0 = 0;
            i64toi32_i32$1 = 1;
            i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
            $6_1 = i64toi32_i32$1;
            $6$hi = i64toi32_i32$0;
            $1_1 = $3_1 + $5_1 | 0;
            label$2: while (1) {
              i64toi32_i32$0 = $6$hi;
              i64toi32_i32$1 = $1_1;
              HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
              HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = $1_1;
              HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
              HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = $1_1;
              HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
              HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = $1_1;
              HEAP32[$1_1 >> 2] = $6_1;
              HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
              $1_1 = $1_1 + 32 | 0;
              $2_1 = $2_1 + -32 | 0;
              if ($2_1 >>> 0 > 31 >>> 0) {
                continue label$2;
              }
              break label$2;
            };
          }
          return $0_1 | 0;
        }

        function $17() {
          return 99424 | 0;
        }

        function $18($0_1) {
          $0_1 = $0_1 | 0;
          return 1 | 0;
        }

        function $19($0_1) {
          $0_1 = $0_1 | 0;
        }

        function $20($0_1) {
          $0_1 = $0_1 | 0;
        }

        function $21($0_1) {
          $0_1 = $0_1 | 0;
        }

        function $22() {
          $20(99428 | 0);
          return 99432 | 0;
        }

        function $23() {
          $21(99428 | 0);
        }

        function $24($0_1) {
          $0_1 = $0_1 | 0;
          var $1_1 = 0;
          $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
          HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
          label$1: {
            $1_1 = HEAP32[$0_1 >> 2] | 0;
            if (!($1_1 & 8 | 0)) {
              break label$1;
            }
            HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
            return -1 | 0;
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = 0;
          HEAP32[($0_1 + 8 | 0) >> 2] = 0;
          $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
          HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
          HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
          HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
          return 0 | 0;
        }

        function $25($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $3_1 = 0,$4_1 = 0;
          $3_1 = ($2_1 | 0) != (0 | 0);
          label$1: {
            label$2: {
              label$3: {
                if (!($0_1 & 3 | 0)) {
                  break label$3;
                }
                if (!$2_1) {
                  break label$3;
                }
                $4_1 = $1_1 & 255 | 0;
                label$4: while (1) {
                  if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
                    break label$2;
                  }
                  $2_1 = $2_1 + -1 | 0;
                  $3_1 = ($2_1 | 0) != (0 | 0);
                  $0_1 = $0_1 + 1 | 0;
                  if (!($0_1 & 3 | 0)) {
                    break label$3;
                  }
                  if ($2_1) {
                    continue label$4;
                  }
                  break label$4;
                };
              }
              if (!$3_1) {
                break label$1;
              }
              label$5: {
                if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
                  break label$5;
                }
                if ($2_1 >>> 0 < 4 >>> 0) {
                  break label$5;
                }
                $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
                label$6: while (1) {
                  $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
                  if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
                    break label$2;
                  }
                  $0_1 = $0_1 + 4 | 0;
                  $2_1 = $2_1 + -4 | 0;
                  if ($2_1 >>> 0 > 3 >>> 0) {
                    continue label$6;
                  }
                  break label$6;
                };
              }
              if (!$2_1) {
                break label$1;
              }
            }
            $3_1 = $1_1 & 255 | 0;
            label$7: while (1) {
              label$8: {
                if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
                  break label$8;
                }
                return $0_1 | 0;
              }
              $0_1 = $0_1 + 1 | 0;
              $2_1 = $2_1 + -1 | 0;
              if ($2_1) {
                continue label$7;
              }
              break label$7;
            };
          }
          return 0 | 0;
        }

        function $26($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var $2_1 = 0;
          $2_1 = $25($0_1 | 0, 0 | 0, $1_1 | 0) | 0;
          return ($2_1 ? $2_1 - $0_1 | 0 : $1_1) | 0;
        }

        function $27($0_1, $1_1) {
          $0_1 = +$0_1;
          $1_1 = $1_1 | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,i64toi32_i32$3 = 0,$3_1 = 0,i64toi32_i32$2 = 0,i64toi32_i32$4 = 0,$2_1 = 0,$10_1 = 0,$2$hi = 0;
          label$1: {
            wasm2js_scratch_store_f64(+$0_1);
            i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
            $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
            $2$hi = i64toi32_i32$0;
            i64toi32_i32$2 = $2_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = 52;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
            }
            $3_1 = $10_1 & 2047 | 0;
            if (($3_1 | 0) == (2047 | 0)) {
              break label$1;
            }
            label$2: {
              if ($3_1) {
                break label$2;
              }
              label$3: {
                label$4: {
                  if ($0_1 != 0.0) {
                    break label$4;
                  }
                  $3_1 = 0;
                  break label$3;
                }
                $0_1 = +$27(+($0_1 * 18446744073709551615.0), $1_1 | 0);
                $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
              }
              HEAP32[$1_1 >> 2] = $3_1;
              return +$0_1;
            }
            HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$0 = $2_1;
            i64toi32_i32$2 = -2146435073;
            i64toi32_i32$3 = -1;
            i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
            i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
            i64toi32_i32$0 = 1071644672;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
            wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
            wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
            $0_1 = +wasm2js_scratch_load_f64();
          }
          return +$0_1;
        }

        function $28($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $4_1 = 0,$3_1 = 0,$5_1 = 0;
          label$1: {
            if ($2_1 >>> 0 < 512 >>> 0) {
              break label$1;
            }
            fimport$0($0_1 | 0, $1_1 | 0, $2_1 | 0);
            return $0_1 | 0;
          }
          $3_1 = $0_1 + $2_1 | 0;
          label$2: {
            label$3: {
              if (($1_1 ^ $0_1 | 0) & 3 | 0) {
                break label$3;
              }
              label$4: {
                label$5: {
                  if ($0_1 & 3 | 0) {
                    break label$5;
                  }
                  $2_1 = $0_1;
                  break label$4;
                }
                label$6: {
                  if ($2_1) {
                    break label$6;
                  }
                  $2_1 = $0_1;
                  break label$4;
                }
                $2_1 = $0_1;
                label$7: while (1) {
                  HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
                  $1_1 = $1_1 + 1 | 0;
                  $2_1 = $2_1 + 1 | 0;
                  if (!($2_1 & 3 | 0)) {
                    break label$4;
                  }
                  if ($2_1 >>> 0 < $3_1 >>> 0) {
                    continue label$7;
                  }
                  break label$7;
                };
              }
              label$8: {
                $4_1 = $3_1 & -4 | 0;
                if ($4_1 >>> 0 < 64 >>> 0) {
                  break label$8;
                }
                $5_1 = $4_1 + -64 | 0;
                if ($2_1 >>> 0 > $5_1 >>> 0) {
                  break label$8;
                }
                label$9: while (1) {
                  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                  HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
                  HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
                  $1_1 = $1_1 + 64 | 0;
                  $2_1 = $2_1 + 64 | 0;
                  if ($2_1 >>> 0 <= $5_1 >>> 0) {
                    continue label$9;
                  }
                  break label$9;
                };
              }
              if ($2_1 >>> 0 >= $4_1 >>> 0) {
                break label$2;
              }
              label$10: while (1) {
                HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                $1_1 = $1_1 + 4 | 0;
                $2_1 = $2_1 + 4 | 0;
                if ($2_1 >>> 0 < $4_1 >>> 0) {
                  continue label$10;
                }
                break label$2;
              };
            }
            label$11: {
              if ($3_1 >>> 0 >= 4 >>> 0) {
                break label$11;
              }
              $2_1 = $0_1;
              break label$2;
            }
            label$12: {
              $4_1 = $3_1 + -4 | 0;
              if ($4_1 >>> 0 >= $0_1 >>> 0) {
                break label$12;
              }
              $2_1 = $0_1;
              break label$2;
            }
            $2_1 = $0_1;
            label$13: while (1) {
              HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
              HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
              HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
              HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
              $1_1 = $1_1 + 4 | 0;
              $2_1 = $2_1 + 4 | 0;
              if ($2_1 >>> 0 <= $4_1 >>> 0) {
                continue label$13;
              }
              break label$13;
            };
          }
          label$14: {
            if ($2_1 >>> 0 >= $3_1 >>> 0) {
              break label$14;
            }
            label$15: while (1) {
              HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
              $1_1 = $1_1 + 1 | 0;
              $2_1 = $2_1 + 1 | 0;
              if (($2_1 | 0) != ($3_1 | 0)) {
                continue label$15;
              }
              break label$15;
            };
          }
          return $0_1 | 0;
        }

        function $29($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $3_1 = 0,$4_1 = 0,$5_1 = 0;
          label$1: {
            label$2: {
              $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if ($3_1) {
                break label$2;
              }
              $4_1 = 0;
              if ($24($2_1 | 0) | 0) {
                break label$1;
              }
              $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
            }
            label$3: {
              $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
              if (($3_1 - $4_1 | 0) >>> 0 >= $1_1 >>> 0) {
                break label$3;
              }
              return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
            }
            label$4: {
              label$5: {
                if ((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                  break label$5;
                }
                if (!$1_1) {
                  break label$5;
                }
                $3_1 = $1_1;
                label$6: {
                  label$7: while (1) {
                    $5_1 = $0_1 + $3_1 | 0;
                    if ((HEAPU8[($5_1 + -1 | 0) >> 0] | 0 | 0) == (10 | 0)) {
                      break label$6;
                    }
                    $3_1 = $3_1 + -1 | 0;
                    if (!$3_1) {
                      break label$5;
                    }
                    continue label$7;
                  };
                }
                $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
                if ($4_1 >>> 0 < $3_1 >>> 0) {
                  break label$1;
                }
                $1_1 = $1_1 - $3_1 | 0;
                $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
                break label$4;
              }
              $5_1 = $0_1;
              $3_1 = 0;
            }
            $28($4_1 | 0, $5_1 | 0, $1_1 | 0) | 0;
            HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
            $4_1 = $3_1 + $1_1 | 0;
          }
          return $4_1 | 0;
        }

        function $30($0_1, $1_1, $2_1, $3_1, $4_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          $3_1 = $3_1 | 0;
          $4_1 = $4_1 | 0;
          var $5_1 = 0,i64toi32_i32$0 = 0,$8_1 = 0,$6_1 = 0,$7_1 = 0;
          $5_1 = global$0 - 208 | 0;
          global$0 = $5_1;
          HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
          $16($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
          HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
          label$1: {
            label$2: {
              if (($31(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
                break label$2;
              }
              $4_1 = -1;
              break label$1;
            }
            label$3: {
              label$4: {
                if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
                  break label$4;
                }
                $6_1 = 1;
                break label$3;
              }
              $6_1 = !($18($0_1 | 0) | 0);
            }
            $7_1 = HEAP32[$0_1 >> 2] | 0;
            HEAP32[$0_1 >> 2] = $7_1 & -33 | 0;
            label$5: {
              label$6: {
                label$7: {
                  label$8: {
                    if (HEAP32[($0_1 + 48 | 0) >> 2] | 0) {
                      break label$8;
                    }
                    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
                    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
                    i64toi32_i32$0 = 0;
                    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
                    $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
                    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
                    break label$7;
                  }
                  $8_1 = 0;
                  if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
                    break label$6;
                  }
                }
                $2_1 = -1;
                if ($24($0_1 | 0) | 0) {
                  break label$5;
                }
              }
              $2_1 = $31($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
            }
            $4_1 = $7_1 & 32 | 0;
            label$9: {
              if (!$8_1) {
                break label$9;
              }
              FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
              HEAP32[($0_1 + 48 | 0) >> 2] = 0;
              HEAP32[($0_1 + 44 | 0) >> 2] = $8_1;
              HEAP32[($0_1 + 28 | 0) >> 2] = 0;
              $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
              i64toi32_i32$0 = 0;
              HEAP32[($0_1 + 16 | 0) >> 2] = 0;
              HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
              $2_1 = $3_1 ? $2_1 : -1;
            }
            $3_1 = HEAP32[$0_1 >> 2] | 0;
            HEAP32[$0_1 >> 2] = $3_1 | $4_1 | 0;
            $4_1 = $3_1 & 32 | 0 ? -1 : $2_1;
            if ($6_1) {
              break label$1;
            }
            $19($0_1 | 0);
          }
          global$0 = $5_1 + 208 | 0;
          return $4_1 | 0;
        }

        function $31($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          $3_1 = $3_1 | 0;
          $4_1 = $4_1 | 0;
          $5_1 = $5_1 | 0;
          $6_1 = $6_1 | 0;
          var $12_1 = 0,$7_1 = 0,$15_1 = 0,$20_1 = 0,i64toi32_i32$1 = 0,$17_1 = 0,$14_1 = 0,$13_1 = 0,i64toi32_i32$2 = 0,i64toi32_i32$0 = 0,$11_1 = 0,$16_1 = 0,$19_1 = 0,$22_1 = 0,i64toi32_i32$3 = 0,i64toi32_i32$5 = 0,$9_1 = 0,$18_1 = 0,$24_1 = 0,$10_1 = 0,$25_1 = 0,$25$hi = 0,$21_1 = 0,$23_1 = 0,$33_1 = 0,$34_1 = 0,$35_1 = 0,$8_1 = 0,$266 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $7_1 = global$0 - 80 | 0;
          global$0 = $7_1;
          HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
          $8_1 = $7_1 + 55 | 0;
          $9_1 = $7_1 + 56 | 0;
          $10_1 = 0;
          $11_1 = 0;
          label$1: {
            label$2: {
              label$3: {
                label$4: {
                  label$5: while (1) {
                    $12_1 = 0;
                    label$6: while (1) {
                      $13_1 = $1_1;
                      if (($12_1 | 0) > ($11_1 ^ 2147483647 | 0 | 0)) {
                        break label$4;
                      }
                      $11_1 = $12_1 + $11_1 | 0;
                      $12_1 = $1_1;
                      label$7: {
                        label$8: {
                          label$9: {
                            label$10: {
                              label$11: {
                                $14_1 = HEAPU8[$12_1 >> 0] | 0;
                                if (!$14_1) {
                                  break label$11;
                                }
                                label$12: while (1) {
                                  label$13: {
                                    label$14: {
                                      label$15: {
                                        $14_1 = $14_1 & 255 | 0;
                                        if ($14_1) {
                                          break label$15;
                                        }
                                        $1_1 = $12_1;
                                        break label$14;
                                      }
                                      if (($14_1 | 0) != (37 | 0)) {
                                        break label$13;
                                      }
                                      $14_1 = $12_1;
                                      label$16: while (1) {
                                        label$17: {
                                          if ((HEAPU8[($14_1 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                                            break label$17;
                                          }
                                          $1_1 = $14_1;
                                          break label$14;
                                        }
                                        $12_1 = $12_1 + 1 | 0;
                                        $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
                                        $1_1 = $14_1 + 2 | 0;
                                        $14_1 = $1_1;
                                        if (($15_1 | 0) == (37 | 0)) {
                                          continue label$16;
                                        }
                                        break label$16;
                                      };
                                    }
                                    $12_1 = $12_1 - $13_1 | 0;
                                    $14_1 = $11_1 ^ 2147483647 | 0;
                                    if (($12_1 | 0) > ($14_1 | 0)) {
                                      break label$4;
                                    }
                                    label$18: {
                                      if (!$0_1) {
                                        break label$18;
                                      }
                                      $32($0_1 | 0, $13_1 | 0, $12_1 | 0);
                                    }
                                    if ($12_1) {
                                      continue label$6;
                                    }
                                    HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                                    $12_1 = $1_1 + 1 | 0;
                                    $16_1 = -1;
                                    label$19: {
                                      $15_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                                      if ($15_1 >>> 0 > 9 >>> 0) {
                                        break label$19;
                                      }
                                      if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                                        break label$19;
                                      }
                                      $12_1 = $1_1 + 3 | 0;
                                      $10_1 = 1;
                                      $16_1 = $15_1;
                                    }
                                    HEAP32[($7_1 + 76 | 0) >> 2] = $12_1;
                                    $17_1 = 0;
                                    label$20: {
                                      label$21: {
                                        $18_1 = HEAP8[$12_1 >> 0] | 0;
                                        $1_1 = $18_1 + -32 | 0;
                                        if ($1_1 >>> 0 <= 31 >>> 0) {
                                          break label$21;
                                        }
                                        $15_1 = $12_1;
                                        break label$20;
                                      }
                                      $17_1 = 0;
                                      $15_1 = $12_1;
                                      $1_1 = 1 << $1_1 | 0;
                                      if (!($1_1 & 75913 | 0)) {
                                        break label$20;
                                      }
                                      label$22: while (1) {
                                        $15_1 = $12_1 + 1 | 0;
                                        HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
                                        $17_1 = $1_1 | $17_1 | 0;
                                        $18_1 = HEAP8[($12_1 + 1 | 0) >> 0] | 0;
                                        $1_1 = $18_1 + -32 | 0;
                                        if ($1_1 >>> 0 >= 32 >>> 0) {
                                          break label$20;
                                        }
                                        $12_1 = $15_1;
                                        $1_1 = 1 << $1_1 | 0;
                                        if ($1_1 & 75913 | 0) {
                                          continue label$22;
                                        }
                                        break label$22;
                                      };
                                    }
                                    label$23: {
                                      label$24: {
                                        if (($18_1 | 0) != (42 | 0)) {
                                          break label$24;
                                        }
                                        label$25: {
                                          label$26: {
                                            $12_1 = (HEAP8[($15_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                                            if ($12_1 >>> 0 > 9 >>> 0) {
                                              break label$26;
                                            }
                                            if ((HEAPU8[($15_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                                              break label$26;
                                            }
                                            label$27: {
                                              label$28: {
                                                if ($0_1) {
                                                  break label$28;
                                                }
                                                HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] = 10;
                                                $19_1 = 0;
                                                break label$27;
                                              }
                                              $19_1 = HEAP32[($3_1 + ($12_1 << 3 | 0) | 0) >> 2] | 0;
                                            }
                                            $1_1 = $15_1 + 3 | 0;
                                            $10_1 = 1;
                                            break label$25;
                                          }
                                          if ($10_1) {
                                            break label$10;
                                          }
                                          $1_1 = $15_1 + 1 | 0;
                                          label$29: {
                                            if ($0_1) {
                                              break label$29;
                                            }
                                            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                                            $10_1 = 0;
                                            $19_1 = 0;
                                            break label$23;
                                          }
                                          $12_1 = HEAP32[$2_1 >> 2] | 0;
                                          HEAP32[$2_1 >> 2] = $12_1 + 4 | 0;
                                          $19_1 = HEAP32[$12_1 >> 2] | 0;
                                          $10_1 = 0;
                                        }
                                        HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                                        if (($19_1 | 0) > (-1 | 0)) {
                                          break label$23;
                                        }
                                        $19_1 = 0 - $19_1 | 0;
                                        $17_1 = $17_1 | 8192 | 0;
                                        break label$23;
                                      }
                                      $19_1 = $33($7_1 + 76 | 0 | 0) | 0;
                                      if (($19_1 | 0) < (0 | 0)) {
                                        break label$4;
                                      }
                                      $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                                    }
                                    $12_1 = 0;
                                    $20_1 = -1;
                                    label$30: {
                                      label$31: {
                                        if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (46 | 0)) {
                                          break label$31;
                                        }
                                        $21_1 = 0;
                                        break label$30;
                                      }
                                      label$32: {
                                        if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                                          break label$32;
                                        }
                                        label$33: {
                                          label$34: {
                                            $15_1 = (HEAP8[($1_1 + 2 | 0) >> 0] | 0) + -48 | 0;
                                            if ($15_1 >>> 0 > 9 >>> 0) {
                                              break label$34;
                                            }
                                            if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                                              break label$34;
                                            }
                                            label$35: {
                                              label$36: {
                                                if ($0_1) {
                                                  break label$36;
                                                }
                                                HEAP32[($4_1 + ($15_1 << 2 | 0) | 0) >> 2] = 10;
                                                $20_1 = 0;
                                                break label$35;
                                              }
                                              $20_1 = HEAP32[($3_1 + ($15_1 << 3 | 0) | 0) >> 2] | 0;
                                            }
                                            $1_1 = $1_1 + 4 | 0;
                                            break label$33;
                                          }
                                          if ($10_1) {
                                            break label$10;
                                          }
                                          $1_1 = $1_1 + 2 | 0;
                                          label$37: {
                                            if ($0_1) {
                                              break label$37;
                                            }
                                            $20_1 = 0;
                                            break label$33;
                                          }
                                          $15_1 = HEAP32[$2_1 >> 2] | 0;
                                          HEAP32[$2_1 >> 2] = $15_1 + 4 | 0;
                                          $20_1 = HEAP32[$15_1 >> 2] | 0;
                                        }
                                        HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                                        $21_1 = ($20_1 | 0) > (-1 | 0);
                                        break label$30;
                                      }
                                      HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
                                      $21_1 = 1;
                                      $20_1 = $33($7_1 + 76 | 0 | 0) | 0;
                                      $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                                    }
                                    label$38: while (1) {
                                      $15_1 = $12_1;
                                      $22_1 = 28;
                                      $18_1 = $1_1;
                                      $12_1 = HEAP8[$1_1 >> 0] | 0;
                                      if (($12_1 + -123 | 0) >>> 0 < -58 >>> 0) {
                                        break label$3;
                                      }
                                      $1_1 = $1_1 + 1 | 0;
                                      $12_1 = HEAPU8[(($12_1 + Math_imul($15_1, 58) | 0) + 65551 | 0) >> 0] | 0;
                                      if (($12_1 + -1 | 0) >>> 0 < 8 >>> 0) {
                                        continue label$38;
                                      }
                                      break label$38;
                                    };
                                    HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                                    label$39: {
                                      label$40: {
                                        if (($12_1 | 0) == (27 | 0)) {
                                          break label$40;
                                        }
                                        if (!$12_1) {
                                          break label$3;
                                        }
                                        label$41: {
                                          if (($16_1 | 0) < (0 | 0)) {
                                            break label$41;
                                          }
                                          label$42: {
                                            if ($0_1) {
                                              break label$42;
                                            }
                                            HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $12_1;
                                            continue label$5;
                                          }
                                          i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                                          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                                          $266 = i64toi32_i32$0;
                                          i64toi32_i32$0 = $7_1;
                                          HEAP32[($7_1 + 64 | 0) >> 2] = $266;
                                          HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
                                          break label$39;
                                        }
                                        if (!$0_1) {
                                          break label$7;
                                        }
                                        $34($7_1 + 64 | 0 | 0, $12_1 | 0, $2_1 | 0, $6_1 | 0);
                                        break label$39;
                                      }
                                      if (($16_1 | 0) > (-1 | 0)) {
                                        break label$3;
                                      }
                                      $12_1 = 0;
                                      if (!$0_1) {
                                        continue label$6;
                                      }
                                    }
                                    if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                                      break label$2;
                                    }
                                    $23_1 = $17_1 & -65537 | 0;
                                    $17_1 = $17_1 & 8192 | 0 ? $23_1 : $17_1;
                                    $16_1 = 0;
                                    $24_1 = 65545;
                                    $22_1 = $9_1;
                                    label$43: {
                                      label$44: {
                                        label$45: {
                                          label$46: {
                                            label$47: {
                                              label$48: {
                                                label$49: {
                                                  label$50: {
                                                    label$51: {
                                                      label$52: {
                                                        label$53: {
                                                          label$54: {
                                                            label$55: {
                                                              label$56: {
                                                                label$57: {
                                                                  label$58: {
                                                                    $12_1 = HEAP8[$18_1 >> 0] | 0;
                                                                    $12_1 = $15_1 ? ($12_1 & 15 | 0 | 0) == (3 | 0) ? $12_1 & -45 | 0 : $12_1 : $12_1;
                                                                    switch ($12_1 + -88 | 0 | 0) {
                                                                      case 11:
                                                                        break label$43;
                                                                      case 9:
                                                                      case 13:
                                                                      case 14:
                                                                      case 15:
                                                                        break label$44;
                                                                      case 27:
                                                                        break label$49;
                                                                      case 12:
                                                                      case 17:
                                                                        break label$52;
                                                                      case 23:
                                                                        break label$53;
                                                                      case 0:
                                                                      case 32:
                                                                        break label$54;
                                                                      case 24:
                                                                        break label$55;
                                                                      case 22:
                                                                        break label$56;
                                                                      case 29:
                                                                        break label$57;
                                                                      case 1:
                                                                      case 2:
                                                                      case 3:
                                                                      case 4:
                                                                      case 5:
                                                                      case 6:
                                                                      case 7:
                                                                      case 8:
                                                                      case 10:
                                                                      case 16:
                                                                      case 18:
                                                                      case 19:
                                                                      case 20:
                                                                      case 21:
                                                                      case 25:
                                                                      case 26:
                                                                      case 28:
                                                                      case 30:
                                                                      case 31:
                                                                        break label$8;
                                                                      default:
                                                                        break label$58;
                                                                    };
                                                                  }
                                                                  $22_1 = $9_1;
                                                                  label$59: {
                                                                    switch ($12_1 + -65 | 0 | 0) {
                                                                      case 0:
                                                                      case 4:
                                                                      case 5:
                                                                      case 6:
                                                                        break label$44;
                                                                      case 2:
                                                                        break label$47;
                                                                      case 1:
                                                                      case 3:
                                                                        break label$8;
                                                                      default:
                                                                        break label$59;
                                                                    };
                                                                  }
                                                                  if (($12_1 | 0) == (83 | 0)) {
                                                                    break label$48;
                                                                  }
                                                                  break label$9;
                                                                }
                                                                $16_1 = 0;
                                                                $24_1 = 65545;
                                                                i64toi32_i32$2 = $7_1;
                                                                i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                                                i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                                                                $25_1 = i64toi32_i32$1;
                                                                $25$hi = i64toi32_i32$0;
                                                                break label$51;
                                                              }
                                                              $12_1 = 0;
                                                              label$60: {
                                                                switch ($15_1 & 255 | 0 | 0) {
                                                                  case 0:
                                                                    HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                                                                    continue label$6;
                                                                  case 1:
                                                                    HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                                                                    continue label$6;
                                                                  case 2:
                                                                    i64toi32_i32$1 = $11_1;
                                                                    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                                                                    i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                                                    HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                                                                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                                                    continue label$6;
                                                                  case 3:
                                                                    HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                                                                    continue label$6;
                                                                  case 4:
                                                                    HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                                                                    continue label$6;
                                                                  case 6:
                                                                    HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                                                                    continue label$6;
                                                                  case 7:
                                                                    break label$60;
                                                                  default:
                                                                    continue label$6;
                                                                };
                                                              }
                                                              i64toi32_i32$1 = $11_1;
                                                              i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                                                              i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                                              HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                                                              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                                              continue label$6;
                                                            }
                                                            $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                                                            $17_1 = $17_1 | 8 | 0;
                                                            $12_1 = 120;
                                                          }
                                                          i64toi32_i32$2 = $7_1;
                                                          i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                                          i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                                                          $13_1 = $35(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $12_1 & 32 | 0 | 0) | 0;
                                                          $16_1 = 0;
                                                          $24_1 = 65545;
                                                          i64toi32_i32$2 = $7_1;
                                                          i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                                          i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                                                          if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                                                            break label$50;
                                                          }
                                                          if (!($17_1 & 8 | 0)) {
                                                            break label$50;
                                                          }
                                                          $24_1 = ($12_1 >>> 4 | 0) + 65545 | 0;
                                                          $16_1 = 2;
                                                          break label$50;
                                                        }
                                                        $16_1 = 0;
                                                        $24_1 = 65545;
                                                        i64toi32_i32$2 = $7_1;
                                                        i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                                        i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                                                        $13_1 = $36(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                                                        if (!($17_1 & 8 | 0)) {
                                                          break label$50;
                                                        }
                                                        $12_1 = $9_1 - $13_1 | 0;
                                                        $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1 + 1 | 0;
                                                        break label$50;
                                                      }
                                                      label$67: {
                                                        i64toi32_i32$2 = $7_1;
                                                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                                        i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                                                        $25_1 = i64toi32_i32$1;
                                                        $25$hi = i64toi32_i32$0;
                                                        i64toi32_i32$2 = i64toi32_i32$1;
                                                        i64toi32_i32$1 = -1;
                                                        i64toi32_i32$3 = -1;
                                                        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                                                          $33_1 = 1;
                                                        } else {
                                                          if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                                                            if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                                                              $34_1 = 0;
                                                            } else {
                                                              $34_1 = 1;
                                                            }
                                                            $35_1 = $34_1;
                                                          } else {
                                                            $35_1 = 0;
                                                          }
                                                          $33_1 = $35_1;
                                                        }
                                                        if ($33_1) {
                                                          break label$67;
                                                        }
                                                        i64toi32_i32$2 = $25$hi;
                                                        i64toi32_i32$2 = 0;
                                                        i64toi32_i32$3 = 0;
                                                        i64toi32_i32$0 = $25$hi;
                                                        i64toi32_i32$1 = $25_1;
                                                        i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                                                        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                                                        $25_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                                                        $25$hi = i64toi32_i32$5;
                                                        i64toi32_i32$3 = $7_1;
                                                        HEAP32[($7_1 + 64 | 0) >> 2] = $25_1;
                                                        HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                                                        $16_1 = 1;
                                                        $24_1 = 65545;
                                                        break label$51;
                                                      }
                                                      label$68: {
                                                        if (!($17_1 & 2048 | 0)) {
                                                          break label$68;
                                                        }
                                                        $16_1 = 1;
                                                        $24_1 = 65546;
                                                        break label$51;
                                                      }
                                                      $16_1 = $17_1 & 1 | 0;
                                                      $24_1 = $16_1 ? 65547 : 65545;
                                                    }
                                                    i64toi32_i32$5 = $25$hi;
                                                    $13_1 = $37($25_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                                                  }
                                                  if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                                                    break label$4;
                                                  }
                                                  $17_1 = $21_1 ? $17_1 & -65537 | 0 : $17_1;
                                                  label$69: {
                                                    i64toi32_i32$2 = $7_1;
                                                    i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                                    i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                                                    $25_1 = i64toi32_i32$5;
                                                    $25$hi = i64toi32_i32$3;
                                                    i64toi32_i32$2 = i64toi32_i32$5;
                                                    i64toi32_i32$5 = 0;
                                                    i64toi32_i32$1 = 0;
                                                    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                                                      break label$69;
                                                    }
                                                    if ($20_1) {
                                                      break label$69;
                                                    }
                                                    $13_1 = $9_1;
                                                    $22_1 = $13_1;
                                                    $20_1 = 0;
                                                    break label$8;
                                                  }
                                                  i64toi32_i32$2 = $25$hi;
                                                  $12_1 = ($9_1 - $13_1 | 0) + !($25_1 | i64toi32_i32$2 | 0) | 0;
                                                  $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1;
                                                  break label$9;
                                                }
                                                $12_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                                $13_1 = $12_1 ? $12_1 : 65597;
                                                $12_1 = $26($13_1 | 0, ($20_1 >>> 0 < 2147483647 >>> 0 ? $20_1 : 2147483647) | 0) | 0;
                                                $22_1 = $13_1 + $12_1 | 0;
                                                label$70: {
                                                  if (($20_1 | 0) <= (-1 | 0)) {
                                                    break label$70;
                                                  }
                                                  $17_1 = $23_1;
                                                  $20_1 = $12_1;
                                                  break label$8;
                                                }
                                                $17_1 = $23_1;
                                                $20_1 = $12_1;
                                                if (HEAPU8[$22_1 >> 0] | 0) {
                                                  break label$4;
                                                }
                                                break label$8;
                                              }
                                              label$71: {
                                                if (!$20_1) {
                                                  break label$71;
                                                }
                                                $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                                break label$46;
                                              }
                                              $12_1 = 0;
                                              $38($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $17_1 | 0);
                                              break label$45;
                                            }
                                            HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                                            i64toi32_i32$1 = $7_1;
                                            i64toi32_i32$2 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                            i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                                            HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$2;
                                            HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
                                            $14_1 = $7_1 + 8 | 0;
                                            $20_1 = -1;
                                          }
                                          $12_1 = 0;
                                          label$72: {
                                            label$73: while (1) {
                                              $15_1 = HEAP32[$14_1 >> 2] | 0;
                                              if (!$15_1) {
                                                break label$72;
                                              }
                                              $15_1 = $76($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                                              if (($15_1 | 0) < (0 | 0)) {
                                                break label$2;
                                              }
                                              if ($15_1 >>> 0 > ($20_1 - $12_1 | 0) >>> 0) {
                                                break label$72;
                                              }
                                              $14_1 = $14_1 + 4 | 0;
                                              $12_1 = $15_1 + $12_1 | 0;
                                              if ($12_1 >>> 0 < $20_1 >>> 0) {
                                                continue label$73;
                                              }
                                              break label$73;
                                            };
                                          }
                                          $22_1 = 61;
                                          if (($12_1 | 0) < (0 | 0)) {
                                            break label$3;
                                          }
                                          $38($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 | 0);
                                          label$74: {
                                            if ($12_1) {
                                              break label$74;
                                            }
                                            $12_1 = 0;
                                            break label$45;
                                          }
                                          $15_1 = 0;
                                          $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                          label$75: while (1) {
                                            $13_1 = HEAP32[$14_1 >> 2] | 0;
                                            if (!$13_1) {
                                              break label$45;
                                            }
                                            $13_1 = $76($7_1 + 4 | 0 | 0, $13_1 | 0) | 0;
                                            $15_1 = $13_1 + $15_1 | 0;
                                            if ($15_1 >>> 0 > $12_1 >>> 0) {
                                              break label$45;
                                            }
                                            $32($0_1 | 0, $7_1 + 4 | 0 | 0, $13_1 | 0);
                                            $14_1 = $14_1 + 4 | 0;
                                            if ($15_1 >>> 0 < $12_1 >>> 0) {
                                              continue label$75;
                                            }
                                            break label$75;
                                          };
                                        }
                                        $38($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 ^ 8192 | 0 | 0);
                                        $12_1 = ($19_1 | 0) > ($12_1 | 0) ? $19_1 : $12_1;
                                        continue label$6;
                                      }
                                      if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                                        break label$4;
                                      }
                                      $22_1 = 61;
                                      $12_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $19_1, $20_1, $17_1, $12_1) | 0;
                                      if (($12_1 | 0) >= (0 | 0)) {
                                        continue label$6;
                                      }
                                      break label$3;
                                    }
                                    i64toi32_i32$1 = $7_1;
                                    i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                                    i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                                    HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$3;
                                    $20_1 = 1;
                                    $13_1 = $8_1;
                                    $22_1 = $9_1;
                                    $17_1 = $23_1;
                                    break label$8;
                                  }
                                  $14_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
                                  $12_1 = $12_1 + 1 | 0;
                                  continue label$12;
                                };
                              }
                              if ($0_1) {
                                break label$1;
                              }
                              if (!$10_1) {
                                break label$7;
                              }
                              $12_1 = 1;
                              label$76: {
                                label$77: while (1) {
                                  $14_1 = HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0;
                                  if (!$14_1) {
                                    break label$76;
                                  }
                                  $34($3_1 + ($12_1 << 3 | 0) | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
                                  $11_1 = 1;
                                  $12_1 = $12_1 + 1 | 0;
                                  if (($12_1 | 0) != (10 | 0)) {
                                    continue label$77;
                                  }
                                  break label$1;
                                };
                              }
                              $11_1 = 1;
                              if ($12_1 >>> 0 >= 10 >>> 0) {
                                break label$1;
                              }
                              label$78: while (1) {
                                if (HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0) {
                                  break label$10;
                                }
                                $11_1 = 1;
                                $12_1 = $12_1 + 1 | 0;
                                if (($12_1 | 0) == (10 | 0)) {
                                  break label$1;
                                }
                                continue label$78;
                              };
                            }
                            $22_1 = 28;
                            break label$3;
                          }
                          $22_1 = $9_1;
                        }
                        $1_1 = $22_1 - $13_1 | 0;
                        $18_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1;
                        if (($18_1 | 0) > ($16_1 ^ 2147483647 | 0 | 0)) {
                          break label$4;
                        }
                        $22_1 = 61;
                        $15_1 = $16_1 + $18_1 | 0;
                        $12_1 = ($19_1 | 0) > ($15_1 | 0) ? $19_1 : $15_1;
                        if (($12_1 | 0) > ($14_1 | 0)) {
                          break label$3;
                        }
                        $38($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 | 0);
                        $32($0_1 | 0, $24_1 | 0, $16_1 | 0);
                        $38($0_1 | 0, 48 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 65536 | 0 | 0);
                        $38($0_1 | 0, 48 | 0, $18_1 | 0, $1_1 | 0, 0 | 0);
                        $32($0_1 | 0, $13_1 | 0, $1_1 | 0);
                        $38($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 8192 | 0 | 0);
                        $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                        continue label$6;
                      }
                      break label$6;
                    };
                    break label$5;
                  };
                  $11_1 = 0;
                  break label$1;
                }
                $22_1 = 61;
              }
              (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = $22_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
            }
            $11_1 = -1;
          }
          global$0 = $7_1 + 80 | 0;
          return $11_1 | 0;
        }

        function $32($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          label$1: {
            if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
              break label$1;
            }
            $29($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
          }
        }

        function $33($0_1) {
          $0_1 = $0_1 | 0;
          var $3_1 = 0,$1_1 = 0,$2_1 = 0,$4_1 = 0,$5_1 = 0;
          $1_1 = 0;
          label$1: {
            $2_1 = HEAP32[$0_1 >> 2] | 0;
            $3_1 = (HEAP8[$2_1 >> 0] | 0) + -48 | 0;
            if ($3_1 >>> 0 <= 9 >>> 0) {
              break label$1;
            }
            return 0 | 0;
          }
          label$2: while (1) {
            $4_1 = -1;
            label$3: {
              if ($1_1 >>> 0 > 214748364 >>> 0) {
                break label$3;
              }
              $1_1 = Math_imul($1_1, 10);
              $4_1 = $3_1 >>> 0 > ($1_1 ^ 2147483647 | 0) >>> 0 ? -1 : $3_1 + $1_1 | 0;
            }
            $3_1 = $2_1 + 1 | 0;
            HEAP32[$0_1 >> 2] = $3_1;
            $5_1 = HEAP8[($2_1 + 1 | 0) >> 0] | 0;
            $1_1 = $4_1;
            $2_1 = $3_1;
            $3_1 = $5_1 + -48 | 0;
            if ($3_1 >>> 0 < 10 >>> 0) {
              continue label$2;
            }
            break label$2;
          };
          return $1_1 | 0;
        }

        function $34($0_1, $1_1, $2_1, $3_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          $3_1 = $3_1 | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,$21_1 = 0,$29_1 = 0,$37_1 = 0,$45_1 = 0,$55_1 = 0,$63_1 = 0,$71_1 = 0,$79_1 = 0,$87_1 = 0,$97_1 = 0,$105_1 = 0,$115 = 0,$125 = 0,$133 = 0,$141 = 0;
          label$1: {
            switch ($1_1 + -9 | 0 | 0) {
              case 0:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
                return;
              case 1:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
                i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
                $21_1 = i64toi32_i32$0;
                i64toi32_i32$0 = $0_1;
                HEAP32[i64toi32_i32$0 >> 2] = $21_1;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                return;
              case 2:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
                i64toi32_i32$0 = 0;
                $29_1 = i64toi32_i32$1;
                i64toi32_i32$1 = $0_1;
                HEAP32[i64toi32_i32$1 >> 2] = $29_1;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                return;
              case 4:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
                i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
                $37_1 = i64toi32_i32$0;
                i64toi32_i32$0 = $0_1;
                HEAP32[i64toi32_i32$0 >> 2] = $37_1;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                return;
              case 5:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
                i64toi32_i32$0 = 0;
                $45_1 = i64toi32_i32$1;
                i64toi32_i32$1 = $0_1;
                HEAP32[i64toi32_i32$1 >> 2] = $45_1;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                return;
              case 3:
                $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
                i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                $55_1 = i64toi32_i32$0;
                i64toi32_i32$0 = $0_1;
                HEAP32[i64toi32_i32$0 >> 2] = $55_1;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                return;
              case 6:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
                i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                $63_1 = i64toi32_i32$1;
                i64toi32_i32$1 = $0_1;
                HEAP32[i64toi32_i32$1 >> 2] = $63_1;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                return;
              case 7:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
                i64toi32_i32$1 = 0;
                $71_1 = i64toi32_i32$0;
                i64toi32_i32$0 = $0_1;
                HEAP32[i64toi32_i32$0 >> 2] = $71_1;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                return;
              case 8:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
                i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                $79_1 = i64toi32_i32$1;
                i64toi32_i32$1 = $0_1;
                HEAP32[i64toi32_i32$1 >> 2] = $79_1;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                return;
              case 9:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
                i64toi32_i32$1 = 0;
                $87_1 = i64toi32_i32$0;
                i64toi32_i32$0 = $0_1;
                HEAP32[i64toi32_i32$0 >> 2] = $87_1;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                return;
              case 10:
                $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
                i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                $97_1 = i64toi32_i32$1;
                i64toi32_i32$1 = $0_1;
                HEAP32[i64toi32_i32$1 >> 2] = $97_1;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                return;
              case 11:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
                i64toi32_i32$1 = 0;
                $105_1 = i64toi32_i32$0;
                i64toi32_i32$0 = $0_1;
                HEAP32[i64toi32_i32$0 >> 2] = $105_1;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                return;
              case 12:
                $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
                i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                $115 = i64toi32_i32$1;
                i64toi32_i32$1 = $0_1;
                HEAP32[i64toi32_i32$1 >> 2] = $115;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                return;
              case 13:
                $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
                i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                $125 = i64toi32_i32$0;
                i64toi32_i32$0 = $0_1;
                HEAP32[i64toi32_i32$0 >> 2] = $125;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                return;
              case 14:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
                i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                $133 = i64toi32_i32$1;
                i64toi32_i32$1 = $0_1;
                HEAP32[i64toi32_i32$1 >> 2] = $133;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                return;
              case 15:
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
                i64toi32_i32$1 = 0;
                $141 = i64toi32_i32$0;
                i64toi32_i32$0 = $0_1;
                HEAP32[i64toi32_i32$0 >> 2] = $141;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                return;
              case 16:
                $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
                HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
                return;
              case 17:
                FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
                break;
              default:
                break label$1;
            };
          }
        }

        function $35($0_1, $0$hi, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $0$hi = $0$hi | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$1 = 0,i64toi32_i32$4 = 0,i64toi32_i32$3 = 0,$10_1 = 0,$3_1 = 0;
          label$1: {
            i64toi32_i32$0 = $0$hi;
            if (!($0_1 | i64toi32_i32$0 | 0)) {
              break label$1;
            }
            label$2: while (1) {
              $1_1 = $1_1 + -1 | 0;
              i64toi32_i32$0 = $0$hi;
              HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 66080 | 0) >> 0] | 0 | $2_1 | 0;
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 15;
              $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$1 = 4;
              i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
              }
              $0_1 = $10_1;
              $0$hi = i64toi32_i32$0;
              if ($3_1) {
                continue label$2;
              }
              break label$2;
            };
          }
          return $1_1 | 0;
        }

        function $36($0_1, $0$hi, $1_1) {
          $0_1 = $0_1 | 0;
          $0$hi = $0$hi | 0;
          $1_1 = $1_1 | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$1 = 0,i64toi32_i32$4 = 0,i64toi32_i32$3 = 0,$9_1 = 0,$2_1 = 0;
          label$1: {
            i64toi32_i32$0 = $0$hi;
            if (!($0_1 | i64toi32_i32$0 | 0)) {
              break label$1;
            }
            label$2: while (1) {
              $1_1 = $1_1 + -1 | 0;
              i64toi32_i32$0 = $0$hi;
              HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 7;
              $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$1 = 3;
              i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
              }
              $0_1 = $9_1;
              $0$hi = i64toi32_i32$0;
              if ($2_1) {
                continue label$2;
              }
              break label$2;
            };
          }
          return $1_1 | 0;
        }

        function $37($0_1, $0$hi, $1_1) {
          $0_1 = $0_1 | 0;
          $0$hi = $0$hi | 0;
          $1_1 = $1_1 | 0;
          var i64toi32_i32$2 = 0,i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,$3_1 = 0,i64toi32_i32$5 = 0,i64toi32_i32$3 = 0,$2_1 = 0,$2$hi = 0,$4_1 = 0,$16_1 = 0,$16$hi = 0,$5_1 = 0;
          label$1: {
            label$2: {
              i64toi32_i32$0 = $0$hi;
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$1 = 1;
              i64toi32_i32$3 = 0;
              if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
                break label$2;
              }
              i64toi32_i32$2 = i64toi32_i32$0;
              $2_1 = $0_1;
              $2$hi = i64toi32_i32$2;
              break label$1;
            }
            label$3: while (1) {
              $1_1 = $1_1 + -1 | 0;
              i64toi32_i32$2 = $0$hi;
              i64toi32_i32$0 = 0;
              i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
              $2_1 = i64toi32_i32$0;
              $2$hi = i64toi32_i32$2;
              i64toi32_i32$0 = 0;
              i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
              $16_1 = i64toi32_i32$0;
              $16$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $0$hi;
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$0 = $16$hi;
              i64toi32_i32$1 = $16_1;
              i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
              i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
              HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
              i64toi32_i32$5 = i64toi32_i32$2;
              i64toi32_i32$5 = i64toi32_i32$2;
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$3 = 9;
              i64toi32_i32$1 = -1;
              $3_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
              i64toi32_i32$2 = $2$hi;
              $0_1 = $2_1;
              $0$hi = i64toi32_i32$2;
              if ($3_1) {
                continue label$3;
              }
              break label$3;
            };
          }
          label$4: {
            i64toi32_i32$2 = $2$hi;
            $3_1 = $2_1;
            if (!$3_1) {
              break label$4;
            }
            label$5: while (1) {
              $1_1 = $1_1 + -1 | 0;
              $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
              HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
              $5_1 = $3_1 >>> 0 > 9 >>> 0;
              $3_1 = $4_1;
              if ($5_1) {
                continue label$5;
              }
              break label$5;
            };
          }
          return $1_1 | 0;
        }

        function $38($0_1, $1_1, $2_1, $3_1, $4_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          $3_1 = $3_1 | 0;
          $4_1 = $4_1 | 0;
          var $5_1 = 0;
          $5_1 = global$0 - 256 | 0;
          global$0 = $5_1;
          label$1: {
            if (($2_1 | 0) <= ($3_1 | 0)) {
              break label$1;
            }
            if ($4_1 & 73728 | 0) {
              break label$1;
            }
            $3_1 = $2_1 - $3_1 | 0;
            $2_1 = $3_1 >>> 0 < 256 >>> 0;
            $16($5_1 | 0, $1_1 & 255 | 0 | 0, ($2_1 ? $3_1 : 256) | 0) | 0;
            label$2: {
              if ($2_1) {
                break label$2;
              }
              label$3: while (1) {
                $32($0_1 | 0, $5_1 | 0, 256 | 0);
                $3_1 = $3_1 + -256 | 0;
                if ($3_1 >>> 0 > 255 >>> 0) {
                  continue label$3;
                }
                break label$3;
              };
            }
            $32($0_1 | 0, $5_1 | 0, $3_1 | 0);
          }
          global$0 = $5_1 + 256 | 0;
        }

        function $39($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          return $30($0_1 | 0, $1_1 | 0, $2_1 | 0, 1 | 0, 2 | 0) | 0 | 0;
        }

        function $40($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
          $0_1 = $0_1 | 0;
          $1_1 = +$1_1;
          $2_1 = $2_1 | 0;
          $3_1 = $3_1 | 0;
          $4_1 = $4_1 | 0;
          $5_1 = $5_1 | 0;
          var $10_1 = 0,$11_1 = 0,$12_1 = 0,$18_1 = 0,$6_1 = 0,$21_1 = 0,i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,$15_1 = 0,i64toi32_i32$4 = 0,$22_1 = 0,$23_1 = 0,i64toi32_i32$2 = 0,i64toi32_i32$3 = 0,i64toi32_i32$5 = 0,$19_1 = 0,$17_1 = 0,$8_1 = 0,$26_1 = 0.0,$24_1 = 0,$13_1 = 0,$24$hi = 0,$14_1 = 0,$16_1 = 0,$20_1 = 0,$9_1 = 0,$7_1 = 0,$45_1 = 0,$46_1 = 0,$47_1 = 0,$25$hi = 0,$48_1 = 0,$25_1 = 0,$167 = 0,$169$hi = 0,$171$hi = 0,$173 = 0,$173$hi = 0,$175$hi = 0,$179 = 0,$179$hi = 0,$391 = 0.0,$855 = 0;
          $6_1 = global$0 - 560 | 0;
          global$0 = $6_1;
          $7_1 = 0;
          HEAP32[($6_1 + 44 | 0) >> 2] = 0;
          label$1: {
            label$2: {
              i64toi32_i32$0 = $42(+$1_1) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              $24_1 = i64toi32_i32$0;
              $24$hi = i64toi32_i32$1;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = -1;
              i64toi32_i32$3 = -1;
              if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
                $45_1 = 1;
              } else {
                if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
                  if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                    $46_1 = 0;
                  } else {
                    $46_1 = 1;
                  }
                  $47_1 = $46_1;
                } else {
                  $47_1 = 0;
                }
                $45_1 = $47_1;
              }
              if ($45_1) {
                break label$2;
              }
              $8_1 = 1;
              $9_1 = 65555;
              $1_1 = -$1_1;
              i64toi32_i32$2 = $42(+$1_1) | 0;
              i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              $24_1 = i64toi32_i32$2;
              $24$hi = i64toi32_i32$1;
              break label$1;
            }
            label$3: {
              if (!($4_1 & 2048 | 0)) {
                break label$3;
              }
              $8_1 = 1;
              $9_1 = 65558;
              break label$1;
            }
            $8_1 = $4_1 & 1 | 0;
            $9_1 = $8_1 ? 65561 : 65556;
            $7_1 = !$8_1;
          }
          label$4: {
            label$5: {
              i64toi32_i32$1 = $24$hi;
              i64toi32_i32$3 = $24_1;
              i64toi32_i32$2 = 2146435072;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
              i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
              i64toi32_i32$3 = 2146435072;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                break label$5;
              }
              $10_1 = $8_1 + 3 | 0;
              $38($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
              $32($0_1 | 0, $9_1 | 0, $8_1 | 0);
              $11_1 = $5_1 & 32 | 0;
              $32($0_1 | 0, ($1_1 != $1_1 ? $11_1 ? 65579 : 65587 : $11_1 ? 65583 : 65591) | 0, 3 | 0);
              $38($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
              $12_1 = ($10_1 | 0) > ($2_1 | 0) ? $10_1 : $2_1;
              break label$4;
            }
            $13_1 = $6_1 + 16 | 0;
            label$6: {
              label$7: {
                label$8: {
                  label$9: {
                    $1_1 = +$27(+$1_1, $6_1 + 44 | 0 | 0);
                    $1_1 = $1_1 + $1_1;
                    if ($1_1 == 0.0) {
                      break label$9;
                    }
                    $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
                    HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
                    $14_1 = $5_1 | 32 | 0;
                    if (($14_1 | 0) != (97 | 0)) {
                      break label$8;
                    }
                    break label$6;
                  }
                  $14_1 = $5_1 | 32 | 0;
                  if (($14_1 | 0) == (97 | 0)) {
                    break label$6;
                  }
                  $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
                  $16_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
                  break label$7;
                }
                $16_1 = $10_1 + -29 | 0;
                HEAP32[($6_1 + 44 | 0) >> 2] = $16_1;
                $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
                $1_1 = $1_1 * 268435456.0;
              }
              $17_1 = ($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 0 : 288) | 0;
              $11_1 = $17_1;
              label$10: while (1) {
                label$11: {
                  label$12: {
                    if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
                      break label$12;
                    }
                    $10_1 = ~~$1_1 >>> 0;
                    break label$11;
                  }
                  $10_1 = 0;
                }
                HEAP32[$11_1 >> 2] = $10_1;
                $11_1 = $11_1 + 4 | 0;
                $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
                if ($1_1 != 0.0) {
                  continue label$10;
                }
                break label$10;
              };
              label$13: {
                label$14: {
                  if (($16_1 | 0) >= (1 | 0)) {
                    break label$14;
                  }
                  $3_1 = $16_1;
                  $10_1 = $11_1;
                  $18_1 = $17_1;
                  break label$13;
                }
                $18_1 = $17_1;
                $3_1 = $16_1;
                label$15: while (1) {
                  $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
                  label$16: {
                    $10_1 = $11_1 + -4 | 0;
                    if ($10_1 >>> 0 < $18_1 >>> 0) {
                      break label$16;
                    }
                    i64toi32_i32$1 = 0;
                    $25_1 = $3_1;
                    $25$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = 0;
                    $24_1 = 0;
                    $24$hi = i64toi32_i32$1;
                    label$17: while (1) {
                      $167 = $10_1;
                      i64toi32_i32$0 = $10_1;
                      i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
                      i64toi32_i32$2 = 0;
                      $169$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $25$hi;
                      i64toi32_i32$2 = $169$hi;
                      i64toi32_i32$0 = i64toi32_i32$1;
                      i64toi32_i32$1 = $25$hi;
                      i64toi32_i32$3 = $25_1;
                      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                        i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
                        $48_1 = 0;
                      } else {
                        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
                        $48_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
                      }
                      $171$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $24$hi;
                      i64toi32_i32$2 = $24_1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$3 = -1;
                      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
                      $173 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
                      $173$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $171$hi;
                      i64toi32_i32$1 = $48_1;
                      i64toi32_i32$2 = $173$hi;
                      i64toi32_i32$3 = $173;
                      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                      }
                      $24_1 = i64toi32_i32$4;
                      $24$hi = i64toi32_i32$5;
                      $175$hi = i64toi32_i32$5;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                      $24_1 = i64toi32_i32$1;
                      $24$hi = i64toi32_i32$5;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
                      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                      $179 = i64toi32_i32$1;
                      $179$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $175$hi;
                      i64toi32_i32$0 = i64toi32_i32$4;
                      i64toi32_i32$1 = $179$hi;
                      i64toi32_i32$3 = $179;
                      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
                      i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
                      i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
                      HEAP32[$167 >> 2] = i64toi32_i32$2;
                      $10_1 = $10_1 + -4 | 0;
                      if ($10_1 >>> 0 >= $18_1 >>> 0) {
                        continue label$17;
                      }
                      break label$17;
                    };
                    i64toi32_i32$4 = $24$hi;
                    $10_1 = $24_1;
                    if (!$10_1) {
                      break label$16;
                    }
                    $18_1 = $18_1 + -4 | 0;
                    HEAP32[$18_1 >> 2] = $10_1;
                  }
                  label$18: {
                    label$19: while (1) {
                      $10_1 = $11_1;
                      if ($10_1 >>> 0 <= $18_1 >>> 0) {
                        break label$18;
                      }
                      $11_1 = $10_1 + -4 | 0;
                      if (!(HEAP32[$11_1 >> 2] | 0)) {
                        continue label$19;
                      }
                      break label$19;
                    };
                  }
                  $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
                  HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
                  $11_1 = $10_1;
                  if (($3_1 | 0) > (0 | 0)) {
                    continue label$15;
                  }
                  break label$15;
                };
              }
              label$20: {
                if (($3_1 | 0) > (-1 | 0)) {
                  break label$20;
                }
                $19_1 = ((($15_1 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
                $20_1 = ($14_1 | 0) == (102 | 0);
                label$21: while (1) {
                  $11_1 = 0 - $3_1 | 0;
                  $21_1 = ($11_1 | 0) < (9 | 0) ? $11_1 : 9;
                  label$22: {
                    label$23: {
                      if ($18_1 >>> 0 < $10_1 >>> 0) {
                        break label$23;
                      }
                      $11_1 = !(HEAP32[$18_1 >> 2] | 0) << 2 | 0;
                      break label$22;
                    }
                    $22_1 = 1e9 >>> $21_1 | 0;
                    $23_1 = (-1 << $21_1 | 0) ^ -1 | 0;
                    $3_1 = 0;
                    $11_1 = $18_1;
                    label$24: while (1) {
                      $12_1 = HEAP32[$11_1 >> 2] | 0;
                      HEAP32[$11_1 >> 2] = ($12_1 >>> $21_1 | 0) + $3_1 | 0;
                      $3_1 = Math_imul($12_1 & $23_1 | 0, $22_1);
                      $11_1 = $11_1 + 4 | 0;
                      if ($11_1 >>> 0 < $10_1 >>> 0) {
                        continue label$24;
                      }
                      break label$24;
                    };
                    $11_1 = !(HEAP32[$18_1 >> 2] | 0) << 2 | 0;
                    if (!$3_1) {
                      break label$22;
                    }
                    HEAP32[$10_1 >> 2] = $3_1;
                    $10_1 = $10_1 + 4 | 0;
                  }
                  $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $21_1 | 0;
                  HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
                  $18_1 = $18_1 + $11_1 | 0;
                  $11_1 = $20_1 ? $17_1 : $18_1;
                  $10_1 = (($10_1 - $11_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $11_1 + ($19_1 << 2 | 0) | 0 : $10_1;
                  if (($3_1 | 0) < (0 | 0)) {
                    continue label$21;
                  }
                  break label$21;
                };
              }
              $3_1 = 0;
              label$25: {
                if ($18_1 >>> 0 >= $10_1 >>> 0) {
                  break label$25;
                }
                $3_1 = Math_imul(($17_1 - $18_1 | 0) >> 2 | 0, 9);
                $11_1 = 10;
                $12_1 = HEAP32[$18_1 >> 2] | 0;
                if ($12_1 >>> 0 < 10 >>> 0) {
                  break label$25;
                }
                label$26: while (1) {
                  $3_1 = $3_1 + 1 | 0;
                  $11_1 = Math_imul($11_1, 10);
                  if ($12_1 >>> 0 >= $11_1 >>> 0) {
                    continue label$26;
                  }
                  break label$26;
                };
              }
              label$27: {
                $11_1 = ($15_1 - (($14_1 | 0) == (102 | 0) ? 0 : $3_1) | 0) - (($15_1 | 0) != (0 | 0) & ($14_1 | 0) == (103 | 0) | 0) | 0;
                if (($11_1 | 0) >= (Math_imul(($10_1 - $17_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
                  break label$27;
                }
                $12_1 = $11_1 + 9216 | 0;
                $22_1 = ($12_1 | 0) / (9 | 0) | 0;
                $19_1 = (($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 4 : 292) | 0) + ($22_1 << 2 | 0) | 0;
                $21_1 = $19_1 + -4096 | 0;
                $11_1 = 10;
                label$28: {
                  $12_1 = $12_1 - Math_imul($22_1, 9) | 0;
                  if (($12_1 | 0) > (7 | 0)) {
                    break label$28;
                  }
                  label$29: while (1) {
                    $11_1 = Math_imul($11_1, 10);
                    $12_1 = $12_1 + 1 | 0;
                    if (($12_1 | 0) != (8 | 0)) {
                      continue label$29;
                    }
                    break label$29;
                  };
                }
                $23_1 = $19_1 + -4092 | 0;
                label$30: {
                  label$31: {
                    $12_1 = HEAP32[$21_1 >> 2] | 0;
                    $20_1 = ($12_1 >>> 0) / ($11_1 >>> 0) | 0;
                    $22_1 = $12_1 - Math_imul($20_1, $11_1) | 0;
                    if ($22_1) {
                      break label$31;
                    }
                    if (($23_1 | 0) == ($10_1 | 0)) {
                      break label$30;
                    }
                  }
                  label$32: {
                    label$33: {
                      if ($20_1 & 1 | 0) {
                        break label$33;
                      }
                      $1_1 = 9007199254740992.0;
                      if (($11_1 | 0) != (1e9 | 0)) {
                        break label$32;
                      }
                      if ($21_1 >>> 0 <= $18_1 >>> 0) {
                        break label$32;
                      }
                      if (!((HEAPU8[($19_1 + -4100 | 0) >> 0] | 0) & 1 | 0)) {
                        break label$32;
                      }
                    }
                    $1_1 = 9007199254740994.0;
                  }
                  $391 = ($23_1 | 0) == ($10_1 | 0) ? 1.0 : 1.5;
                  $23_1 = $11_1 >>> 1 | 0;
                  $26_1 = $22_1 >>> 0 < $23_1 >>> 0 ? .5 : ($22_1 | 0) == ($23_1 | 0) ? $391 : 1.5;
                  label$34: {
                    if ($7_1) {
                      break label$34;
                    }
                    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
                      break label$34;
                    }
                    $26_1 = -$26_1;
                    $1_1 = -$1_1;
                  }
                  $12_1 = $12_1 - $22_1 | 0;
                  HEAP32[$21_1 >> 2] = $12_1;
                  if ($1_1 + $26_1 == $1_1) {
                    break label$30;
                  }
                  $11_1 = $12_1 + $11_1 | 0;
                  HEAP32[$21_1 >> 2] = $11_1;
                  label$35: {
                    if ($11_1 >>> 0 < 1e9 >>> 0) {
                      break label$35;
                    }
                    label$36: while (1) {
                      HEAP32[$21_1 >> 2] = 0;
                      label$37: {
                        $21_1 = $21_1 + -4 | 0;
                        if ($21_1 >>> 0 >= $18_1 >>> 0) {
                          break label$37;
                        }
                        $18_1 = $18_1 + -4 | 0;
                        HEAP32[$18_1 >> 2] = 0;
                      }
                      $11_1 = (HEAP32[$21_1 >> 2] | 0) + 1 | 0;
                      HEAP32[$21_1 >> 2] = $11_1;
                      if ($11_1 >>> 0 > 999999999 >>> 0) {
                        continue label$36;
                      }
                      break label$36;
                    };
                  }
                  $3_1 = Math_imul(($17_1 - $18_1 | 0) >> 2 | 0, 9);
                  $11_1 = 10;
                  $12_1 = HEAP32[$18_1 >> 2] | 0;
                  if ($12_1 >>> 0 < 10 >>> 0) {
                    break label$30;
                  }
                  label$38: while (1) {
                    $3_1 = $3_1 + 1 | 0;
                    $11_1 = Math_imul($11_1, 10);
                    if ($12_1 >>> 0 >= $11_1 >>> 0) {
                      continue label$38;
                    }
                    break label$38;
                  };
                }
                $11_1 = $21_1 + 4 | 0;
                $10_1 = $10_1 >>> 0 > $11_1 >>> 0 ? $11_1 : $10_1;
              }
              label$39: {
                label$40: while (1) {
                  $11_1 = $10_1;
                  $12_1 = $10_1 >>> 0 <= $18_1 >>> 0;
                  if ($12_1) {
                    break label$39;
                  }
                  $10_1 = $10_1 + -4 | 0;
                  if (!(HEAP32[$10_1 >> 2] | 0)) {
                    continue label$40;
                  }
                  break label$40;
                };
              }
              label$41: {
                label$42: {
                  if (($14_1 | 0) == (103 | 0)) {
                    break label$42;
                  }
                  $21_1 = $4_1 & 8 | 0;
                  break label$41;
                }
                $10_1 = $15_1 ? $15_1 : 1;
                $21_1 = ($10_1 | 0) > ($3_1 | 0) & ($3_1 | 0) > (-5 | 0) | 0;
                $15_1 = ($21_1 ? $3_1 ^ -1 | 0 : -1) + $10_1 | 0;
                $5_1 = ($21_1 ? -1 : -2) + $5_1 | 0;
                $21_1 = $4_1 & 8 | 0;
                if ($21_1) {
                  break label$41;
                }
                $10_1 = -9;
                label$43: {
                  if ($12_1) {
                    break label$43;
                  }
                  $21_1 = HEAP32[($11_1 + -4 | 0) >> 2] | 0;
                  if (!$21_1) {
                    break label$43;
                  }
                  $12_1 = 10;
                  $10_1 = 0;
                  if (($21_1 >>> 0) % (10 >>> 0) | 0) {
                    break label$43;
                  }
                  label$44: while (1) {
                    $22_1 = $10_1;
                    $10_1 = $10_1 + 1 | 0;
                    $12_1 = Math_imul($12_1, 10);
                    if (!(($21_1 >>> 0) % ($12_1 >>> 0) | 0)) {
                      continue label$44;
                    }
                    break label$44;
                  };
                  $10_1 = $22_1 ^ -1 | 0;
                }
                $12_1 = Math_imul(($11_1 - $17_1 | 0) >> 2 | 0, 9);
                label$45: {
                  if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
                    break label$45;
                  }
                  $21_1 = 0;
                  $10_1 = ($12_1 + $10_1 | 0) + -9 | 0;
                  $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
                  $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
                  break label$41;
                }
                $21_1 = 0;
                $10_1 = (($3_1 + $12_1 | 0) + $10_1 | 0) + -9 | 0;
                $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
                $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
              }
              $12_1 = -1;
              $22_1 = $15_1 | $21_1 | 0;
              if (($15_1 | 0) > (($22_1 ? 2147483645 : 2147483646) | 0)) {
                break label$4;
              }
              $23_1 = ($15_1 + (($22_1 | 0) != (0 | 0)) | 0) + 1 | 0;
              label$46: {
                label$47: {
                  $20_1 = $5_1 & -33 | 0;
                  if (($20_1 | 0) != (70 | 0)) {
                    break label$47;
                  }
                  if (($3_1 | 0) > ($23_1 ^ 2147483647 | 0 | 0)) {
                    break label$4;
                  }
                  $10_1 = ($3_1 | 0) > (0 | 0) ? $3_1 : 0;
                  break label$46;
                }
                label$48: {
                  $10_1 = $3_1 >> 31 | 0;
                  i64toi32_i32$4 = 0;
                  $10_1 = $37(($3_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$4 | 0, $13_1 | 0) | 0;
                  if (($13_1 - $10_1 | 0 | 0) > (1 | 0)) {
                    break label$48;
                  }
                  label$49: while (1) {
                    $10_1 = $10_1 + -1 | 0;
                    HEAP8[$10_1 >> 0] = 48;
                    if (($13_1 - $10_1 | 0 | 0) < (2 | 0)) {
                      continue label$49;
                    }
                    break label$49;
                  };
                }
                $19_1 = $10_1 + -2 | 0;
                HEAP8[$19_1 >> 0] = $5_1;
                $12_1 = -1;
                HEAP8[($10_1 + -1 | 0) >> 0] = ($3_1 | 0) < (0 | 0) ? 45 : 43;
                $10_1 = $13_1 - $19_1 | 0;
                if (($10_1 | 0) > ($23_1 ^ 2147483647 | 0 | 0)) {
                  break label$4;
                }
              }
              $12_1 = -1;
              $10_1 = $10_1 + $23_1 | 0;
              if (($10_1 | 0) > ($8_1 ^ 2147483647 | 0 | 0)) {
                break label$4;
              }
              $23_1 = $10_1 + $8_1 | 0;
              $38($0_1 | 0, 32 | 0, $2_1 | 0, $23_1 | 0, $4_1 | 0);
              $32($0_1 | 0, $9_1 | 0, $8_1 | 0);
              $38($0_1 | 0, 48 | 0, $2_1 | 0, $23_1 | 0, $4_1 ^ 65536 | 0 | 0);
              label$50: {
                label$51: {
                  label$52: {
                    label$53: {
                      if (($20_1 | 0) != (70 | 0)) {
                        break label$53;
                      }
                      $21_1 = $6_1 + 16 | 0 | 8 | 0;
                      $3_1 = $6_1 + 16 | 0 | 9 | 0;
                      $12_1 = $18_1 >>> 0 > $17_1 >>> 0 ? $17_1 : $18_1;
                      $18_1 = $12_1;
                      label$54: while (1) {
                        i64toi32_i32$5 = $18_1;
                        i64toi32_i32$4 = HEAP32[$18_1 >> 2] | 0;
                        i64toi32_i32$0 = 0;
                        $10_1 = $37(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
                        label$55: {
                          label$56: {
                            if (($18_1 | 0) == ($12_1 | 0)) {
                              break label$56;
                            }
                            if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
                              break label$55;
                            }
                            label$57: while (1) {
                              $10_1 = $10_1 + -1 | 0;
                              HEAP8[$10_1 >> 0] = 48;
                              if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
                                continue label$57;
                              }
                              break label$55;
                            };
                          }
                          if (($10_1 | 0) != ($3_1 | 0)) {
                            break label$55;
                          }
                          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
                          $10_1 = $21_1;
                        }
                        $32($0_1 | 0, $10_1 | 0, $3_1 - $10_1 | 0 | 0);
                        $18_1 = $18_1 + 4 | 0;
                        if ($18_1 >>> 0 <= $17_1 >>> 0) {
                          continue label$54;
                        }
                        break label$54;
                      };
                      label$58: {
                        if (!$22_1) {
                          break label$58;
                        }
                        $32($0_1 | 0, 65595 | 0, 1 | 0);
                      }
                      if ($18_1 >>> 0 >= $11_1 >>> 0) {
                        break label$52;
                      }
                      if (($15_1 | 0) < (1 | 0)) {
                        break label$52;
                      }
                      label$59: while (1) {
                        label$60: {
                          i64toi32_i32$5 = $18_1;
                          i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
                          i64toi32_i32$4 = 0;
                          $10_1 = $37(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $3_1 | 0) | 0;
                          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
                            break label$60;
                          }
                          label$61: while (1) {
                            $10_1 = $10_1 + -1 | 0;
                            HEAP8[$10_1 >> 0] = 48;
                            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
                              continue label$61;
                            }
                            break label$61;
                          };
                        }
                        $32($0_1 | 0, $10_1 | 0, (($15_1 | 0) < (9 | 0) ? $15_1 : 9) | 0);
                        $10_1 = $15_1 + -9 | 0;
                        $18_1 = $18_1 + 4 | 0;
                        if ($18_1 >>> 0 >= $11_1 >>> 0) {
                          break label$51;
                        }
                        $12_1 = ($15_1 | 0) > (9 | 0);
                        $15_1 = $10_1;
                        if ($12_1) {
                          continue label$59;
                        }
                        break label$51;
                      };
                    }
                    label$62: {
                      if (($15_1 | 0) < (0 | 0)) {
                        break label$62;
                      }
                      $22_1 = $11_1 >>> 0 > $18_1 >>> 0 ? $11_1 : $18_1 + 4 | 0;
                      $17_1 = $6_1 + 16 | 0 | 8 | 0;
                      $3_1 = $6_1 + 16 | 0 | 9 | 0;
                      $11_1 = $18_1;
                      label$63: while (1) {
                        label$64: {
                          i64toi32_i32$5 = $11_1;
                          i64toi32_i32$4 = HEAP32[$11_1 >> 2] | 0;
                          i64toi32_i32$0 = 0;
                          $10_1 = $37(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
                          if (($10_1 | 0) != ($3_1 | 0)) {
                            break label$64;
                          }
                          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
                          $10_1 = $17_1;
                        }
                        label$65: {
                          label$66: {
                            if (($11_1 | 0) == ($18_1 | 0)) {
                              break label$66;
                            }
                            if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
                              break label$65;
                            }
                            label$67: while (1) {
                              $10_1 = $10_1 + -1 | 0;
                              HEAP8[$10_1 >> 0] = 48;
                              if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
                                continue label$67;
                              }
                              break label$65;
                            };
                          }
                          $32($0_1 | 0, $10_1 | 0, 1 | 0);
                          $10_1 = $10_1 + 1 | 0;
                          if (!($15_1 | $21_1 | 0)) {
                            break label$65;
                          }
                          $32($0_1 | 0, 65595 | 0, 1 | 0);
                        }
                        $12_1 = $3_1 - $10_1 | 0;
                        $32($0_1 | 0, $10_1 | 0, (($15_1 | 0) > ($12_1 | 0) ? $12_1 : $15_1) | 0);
                        $15_1 = $15_1 - $12_1 | 0;
                        $11_1 = $11_1 + 4 | 0;
                        if ($11_1 >>> 0 >= $22_1 >>> 0) {
                          break label$62;
                        }
                        if (($15_1 | 0) > (-1 | 0)) {
                          continue label$63;
                        }
                        break label$63;
                      };
                    }
                    $38($0_1 | 0, 48 | 0, $15_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
                    $32($0_1 | 0, $19_1 | 0, $13_1 - $19_1 | 0 | 0);
                    break label$50;
                  }
                  $10_1 = $15_1;
                }
                $38($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
              }
              $38($0_1 | 0, 32 | 0, $2_1 | 0, $23_1 | 0, $4_1 ^ 8192 | 0 | 0);
              $12_1 = ($23_1 | 0) > ($2_1 | 0) ? $23_1 : $2_1;
              break label$4;
            }
            $23_1 = $9_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
            label$68: {
              if ($3_1 >>> 0 > 11 >>> 0) {
                break label$68;
              }
              $10_1 = 12 - $3_1 | 0;
              $26_1 = 16.0;
              label$69: while (1) {
                $26_1 = $26_1 * 16.0;
                $10_1 = $10_1 + -1 | 0;
                if ($10_1) {
                  continue label$69;
                }
                break label$69;
              };
              label$70: {
                if ((HEAPU8[$23_1 >> 0] | 0 | 0) != (45 | 0)) {
                  break label$70;
                }
                $1_1 = -($26_1 + (-$1_1 - $26_1));
                break label$68;
              }
              $1_1 = $1_1 + $26_1 - $26_1;
            }
            label$71: {
              $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
              $855 = $10_1;
              $10_1 = $10_1 >> 31 | 0;
              i64toi32_i32$0 = 0;
              $10_1 = $37(($855 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$0 | 0, $13_1 | 0) | 0;
              if (($10_1 | 0) != ($13_1 | 0)) {
                break label$71;
              }
              HEAP8[($6_1 + 15 | 0) >> 0] = 48;
              $10_1 = $6_1 + 15 | 0;
            }
            $21_1 = $8_1 | 2 | 0;
            $18_1 = $5_1 & 32 | 0;
            $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
            $22_1 = $10_1 + -2 | 0;
            HEAP8[$22_1 >> 0] = $5_1 + 15 | 0;
            HEAP8[($10_1 + -1 | 0) >> 0] = ($11_1 | 0) < (0 | 0) ? 45 : 43;
            $12_1 = $4_1 & 8 | 0;
            $11_1 = $6_1 + 16 | 0;
            label$72: while (1) {
              $10_1 = $11_1;
              label$73: {
                label$74: {
                  if (!(Math_abs($1_1) < 2147483648.0)) {
                    break label$74;
                  }
                  $11_1 = ~~$1_1;
                  break label$73;
                }
                $11_1 = -2147483648;
              }
              HEAP8[$10_1 >> 0] = HEAPU8[($11_1 + 66080 | 0) >> 0] | 0 | $18_1 | 0;
              $1_1 = ($1_1 - +($11_1 | 0)) * 16.0;
              label$75: {
                $11_1 = $10_1 + 1 | 0;
                if (($11_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
                  break label$75;
                }
                label$76: {
                  if ($12_1) {
                    break label$76;
                  }
                  if (($3_1 | 0) > (0 | 0)) {
                    break label$76;
                  }
                  if ($1_1 == 0.0) {
                    break label$75;
                  }
                }
                HEAP8[($10_1 + 1 | 0) >> 0] = 46;
                $11_1 = $10_1 + 2 | 0;
              }
              if ($1_1 != 0.0) {
                continue label$72;
              }
              break label$72;
            };
            $12_1 = -1;
            $18_1 = $13_1 - $22_1 | 0;
            $19_1 = $21_1 + $18_1 | 0;
            if ((2147483645 - $19_1 | 0 | 0) < ($3_1 | 0)) {
              break label$4;
            }
            $10_1 = $11_1 - ($6_1 + 16 | 0) | 0;
            $3_1 = $3_1 ? ($10_1 + -2 | 0 | 0) < ($3_1 | 0) ? $3_1 + 2 | 0 : $10_1 : $10_1;
            $11_1 = $19_1 + $3_1 | 0;
            $38($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 | 0);
            $32($0_1 | 0, $23_1 | 0, $21_1 | 0);
            $38($0_1 | 0, 48 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 65536 | 0 | 0);
            $32($0_1 | 0, $6_1 + 16 | 0 | 0, $10_1 | 0);
            $38($0_1 | 0, 48 | 0, $3_1 - $10_1 | 0 | 0, 0 | 0, 0 | 0);
            $32($0_1 | 0, $22_1 | 0, $18_1 | 0);
            $38($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 8192 | 0 | 0);
            $12_1 = ($11_1 | 0) > ($2_1 | 0) ? $11_1 : $2_1;
          }
          global$0 = $6_1 + 560 | 0;
          return $12_1 | 0;
        }

        function $41($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var i64toi32_i32$2 = 0,i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,$2_1 = 0,$12_1 = 0,$12$hi = 0,$15_1 = 0,$15$hi = 0,wasm2js_i32$0 = 0,wasm2js_f64$0 = 0.0;
          $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
          HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
          i64toi32_i32$2 = $2_1;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $12_1 = i64toi32_i32$0;
          $12$hi = i64toi32_i32$1;
          i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $15_1 = i64toi32_i32$1;
          $15$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $12$hi;
          i64toi32_i32$1 = $15$hi;
          (wasm2js_i32$0 = $0_1, wasm2js_f64$0 = +$100($12_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
        }

        function $42($0_1) {
          $0_1 = +$0_1;
          var i64toi32_i32$0 = 0,i64toi32_i32$1 = 0;
          wasm2js_scratch_store_f64(+$0_1);
          i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
          i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
          return i64toi32_i32$1 | 0;
        }

        function $43($0_1, $1_1, $2_1, $3_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          $3_1 = $3_1 | 0;
          var $4_1 = 0,$5_1 = 0,$6_1 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $4_1 = global$0 - 160 | 0;
          global$0 = $4_1;
          $5_1 = $1_1 ? $0_1 : $4_1 + 158 | 0;
          HEAP32[($4_1 + 148 | 0) >> 2] = $5_1;
          $0_1 = -1;
          $6_1 = $1_1 + -1 | 0;
          HEAP32[($4_1 + 152 | 0) >> 2] = $6_1 >>> 0 > $1_1 >>> 0 ? 0 : $6_1;
          $4_1 = $16($4_1 | 0, 0 | 0, 144 | 0) | 0;
          HEAP32[($4_1 + 76 | 0) >> 2] = -1;
          HEAP32[($4_1 + 36 | 0) >> 2] = 3;
          HEAP32[($4_1 + 80 | 0) >> 2] = -1;
          HEAP32[($4_1 + 44 | 0) >> 2] = $4_1 + 159 | 0;
          HEAP32[($4_1 + 84 | 0) >> 2] = $4_1 + 148 | 0;
          label$1: {
            label$2: {
              if (($1_1 | 0) > (-1 | 0)) {
                break label$2;
              }
              (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 61), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              break label$1;
            }
            HEAP8[$5_1 >> 0] = 0;
            $0_1 = $39($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
          }
          global$0 = $4_1 + 160 | 0;
          return $0_1 | 0;
        }

        function $44($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $3_1 = 0,$5_1 = 0,$4_1 = 0,$7_1 = 0,$6_1 = 0;
          $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
          $4_1 = HEAP32[$3_1 >> 2] | 0;
          label$1: {
            $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
            $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
            $7_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $6_1 | 0;
            $7_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $5_1 : $7_1;
            if (!$7_1) {
              break label$1;
            }
            $28($4_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
            $4_1 = (HEAP32[$3_1 >> 2] | 0) + $7_1 | 0;
            HEAP32[$3_1 >> 2] = $4_1;
            $5_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $7_1 | 0;
            HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
          }
          label$2: {
            $5_1 = $5_1 >>> 0 < $2_1 >>> 0 ? $5_1 : $2_1;
            if (!$5_1) {
              break label$2;
            }
            $28($4_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
            $4_1 = (HEAP32[$3_1 >> 2] | 0) + $5_1 | 0;
            HEAP32[$3_1 >> 2] = $4_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $5_1 | 0;
          }
          HEAP8[$4_1 >> 0] = 0;
          $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
          HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
          HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
          return $2_1 | 0;
        }

        function $45($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          return $43($0_1 | 0, 2147483647 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
        }

        function $46($0_1) {
          $0_1 = $0_1 | 0;
          var $1_1 = 0,$2_1 = 0;
          $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
          HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
          label$1: {
            if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
              break label$1;
            }
            FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
          }
          HEAP32[($0_1 + 28 | 0) >> 2] = 0;
          HEAP32[($0_1 + 16 | 0) >> 2] = 0;
          HEAP32[($0_1 + 20 | 0) >> 2] = 0;
          label$2: {
            $1_1 = HEAP32[$0_1 >> 2] | 0;
            if (!($1_1 & 4 | 0)) {
              break label$2;
            }
            HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
            return -1 | 0;
          }
          $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
          HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
          HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
          return ($1_1 << 27 | 0) >> 31 | 0 | 0;
        }

        function $47($0_1) {
          $0_1 = $0_1 | 0;
          var $1_1 = 0,$2_1 = 0;
          $1_1 = global$0 - 16 | 0;
          global$0 = $1_1;
          $2_1 = -1;
          label$1: {
            if ($46($0_1 | 0) | 0) {
              break label$1;
            }
            if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
              break label$1;
            }
            $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
          }
          global$0 = $1_1 + 16 | 0;
          return $2_1 | 0;
        }

        function $48($0_1, $1_1, $1$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          var i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,$2_1 = 0,$3_1 = 0,i64toi32_i32$2 = 0,$11_1 = 0,$12_1 = 0,$14_1 = 0,$13_1 = 0,$21$hi = 0,i64toi32_i32$3 = 0;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$1 = $0_1;
          HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
          HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
          $2_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2_1 | 0;
          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
          $13_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $0_1;
          HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13_1;
          HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
          $3_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
          label$1: {
            i64toi32_i32$0 = $1$hi;
            if (!($1_1 | $1$hi | 0)) {
              break label$1;
            }
            i64toi32_i32$1 = $3_1 - $2_1 | 0;
            i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
            $21$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$0 = $21$hi;
            i64toi32_i32$2 = i64toi32_i32$1;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$3 = $1_1;
            if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
              $11_1 = 1;
            } else {
              if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
                if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
                  $12_1 = 0;
                } else {
                  $12_1 = 1;
                }
                $14_1 = $12_1;
              } else {
                $14_1 = 0;
              }
              $11_1 = $14_1;
            }
            if ($11_1) {
              break label$1;
            }
            i64toi32_i32$2 = $1$hi;
            $3_1 = $2_1 + $1_1 | 0;
          }
          HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
        }

        function $49($0_1) {
          $0_1 = $0_1 | 0;
          var i64toi32_i32$2 = 0,i64toi32_i32$1 = 0,i64toi32_i32$5 = 0,i64toi32_i32$0 = 0,i64toi32_i32$4 = 0,i64toi32_i32$3 = 0,$1_1 = 0,$4$hi = 0,$2_1 = 0,$5$hi = 0,$3_1 = 0,$5_1 = 0,$4_1 = 0,$26_1 = 0,$27_1 = 0,$28_1 = 0,$29_1 = 0,$30_1 = 0,$31_1 = 0,$7_1 = 0,$7$hi = 0,$15_1 = 0,$15$hi = 0,$35_1 = 0,$40_1 = 0,$40$hi = 0,$59_1 = 0,$59$hi = 0,$67_1 = 0,$74_1 = 0,$74$hi = 0;
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
          $7_1 = i64toi32_i32$0;
          $7$hi = i64toi32_i32$1;
          $1_1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $2_1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
          i64toi32_i32$0 = $1_1 - $2_1 | 0;
          i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
          $15_1 = i64toi32_i32$0;
          $15$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $7$hi;
          i64toi32_i32$2 = $7_1;
          i64toi32_i32$0 = $15$hi;
          i64toi32_i32$3 = $15_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
          }
          $4_1 = i64toi32_i32$4;
          $4$hi = i64toi32_i32$5;
          label$1: {
            label$2: {
              label$3: {
                i64toi32_i32$1 = $0_1;
                i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
                $5_1 = i64toi32_i32$5;
                $5$hi = i64toi32_i32$2;
                if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
                  break label$3;
                }
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$2 = $5$hi;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$1 = i64toi32_i32$4;
                i64toi32_i32$5 = $5$hi;
                i64toi32_i32$3 = $5_1;
                if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
                  $26_1 = 1;
                } else {
                  if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
                    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                      $27_1 = 0;
                    } else {
                      $27_1 = 1;
                    }
                    $28_1 = $27_1;
                  } else {
                    $28_1 = 0;
                  }
                  $26_1 = $28_1;
                }
                if ($26_1) {
                  break label$2;
                }
              }
              $2_1 = $47($0_1 | 0) | 0;
              if (($2_1 | 0) > (-1 | 0)) {
                break label$1;
              }
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
            }
            i64toi32_i32$2 = $0_1;
            i64toi32_i32$1 = -1;
            HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
            HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
            HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1_1;
            $35_1 = i64toi32_i32$2;
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$2 = $2_1 - $1_1 | 0;
            i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
            $40_1 = i64toi32_i32$2;
            $40$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$3 = $4_1;
            i64toi32_i32$2 = $40$hi;
            i64toi32_i32$5 = $40_1;
            i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
            i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
            }
            i64toi32_i32$3 = $35_1;
            HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
            HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
            return -1 | 0;
          }
          i64toi32_i32$4 = $4$hi;
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$3 = 0;
          i64toi32_i32$5 = 1;
          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
          i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
            i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
          }
          $4_1 = i64toi32_i32$2;
          $4$hi = i64toi32_i32$0;
          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          label$4: {
            i64toi32_i32$4 = $0_1;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
            $5_1 = i64toi32_i32$0;
            $5$hi = i64toi32_i32$1;
            i64toi32_i32$4 = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = 0;
            if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
              break label$4;
            }
            i64toi32_i32$4 = i64toi32_i32$1;
            i64toi32_i32$4 = $4$hi;
            i64toi32_i32$4 = i64toi32_i32$1;
            i64toi32_i32$5 = $5_1;
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$0 = i64toi32_i32$2;
            i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
            i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$1 | 0;
            i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
            $5_1 = i64toi32_i32$3;
            $5$hi = i64toi32_i32$2;
            i64toi32_i32$5 = $3_1 - $1_1 | 0;
            i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
            $59_1 = i64toi32_i32$5;
            $59$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $5$hi;
            i64toi32_i32$4 = i64toi32_i32$3;
            i64toi32_i32$5 = $59$hi;
            i64toi32_i32$0 = $59_1;
            if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
              $29_1 = 1;
            } else {
              if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                  $30_1 = 0;
                } else {
                  $30_1 = 1;
                }
                $31_1 = $30_1;
              } else {
                $31_1 = 0;
              }
              $29_1 = $31_1;
            }
            if ($29_1) {
              break label$4;
            }
            i64toi32_i32$4 = $5$hi;
            $3_1 = $1_1 + $5_1 | 0;
          }
          HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
          $67_1 = $0_1;
          i64toi32_i32$4 = $4$hi;
          $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
          i64toi32_i32$2 = $3_1 - $1_1 | 0;
          i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
          $74_1 = i64toi32_i32$2;
          $74$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $4$hi;
          i64toi32_i32$0 = $4_1;
          i64toi32_i32$2 = $74$hi;
          i64toi32_i32$5 = $74_1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
          i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
            i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
          }
          i64toi32_i32$0 = $67_1;
          HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
          HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
          label$5: {
            if ($1_1 >>> 0 > $3_1 >>> 0) {
              break label$5;
            }
            HEAP8[($1_1 + -1 | 0) >> 0] = $2_1;
          }
          return $2_1 | 0;
        }

        function $50($0_1, $1_1) {
          $0_1 = +$0_1;
          $1_1 = $1_1 | 0;
          var i64toi32_i32$4 = 0,i64toi32_i32$2 = 0,i64toi32_i32$1 = 0,i64toi32_i32$3 = 0,$8_1 = 0,$32_1 = 0.0,i64toi32_i32$0 = 0;
          label$1: {
            label$2: {
              if (($1_1 | 0) < (1024 | 0)) {
                break label$2;
              }
              $0_1 = $0_1 * 8988465674311579538646525.0e283;
              label$3: {
                if ($1_1 >>> 0 >= 2047 >>> 0) {
                  break label$3;
                }
                $1_1 = $1_1 + -1023 | 0;
                break label$1;
              }
              $0_1 = $0_1 * 8988465674311579538646525.0e283;
              $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
              break label$1;
            }
            if (($1_1 | 0) > (-1023 | 0)) {
              break label$1;
            }
            $0_1 = $0_1 * 2.004168360008973e-292;
            label$4: {
              if ($1_1 >>> 0 <= -1992 >>> 0) {
                break label$4;
              }
              $1_1 = $1_1 + 969 | 0;
              break label$1;
            }
            $0_1 = $0_1 * 2.004168360008973e-292;
            $1_1 = (($1_1 | 0) > (-2960 | 0) ? $1_1 : -2960) + 1938 | 0;
          }
          $32_1 = $0_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$2 = $1_1 + 1023 | 0;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 52;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            $8_1 = 0;
          } else {
            i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
            $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          }
          wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
          wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
          return +($32_1 * +wasm2js_scratch_load_f64());
        }

        function $51($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          $3$hi = $3$hi | 0;
          $4_1 = $4_1 | 0;
          $4$hi = $4$hi | 0;
          var i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$4 = 0,i64toi32_i32$3 = 0,$22_1 = 0,$23_1 = 0,$24_1 = 0,$7_1 = 0,$11_1 = 0,$18$hi = 0,$20_1 = 0,$20$hi = 0,$21_1 = 0;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$1 = $0_1;
          HEAP32[i64toi32_i32$1 >> 2] = $1_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $7_1 = i64toi32_i32$1;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 48;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
          }
          $11_1 = $22_1 & 32768 | 0;
          i64toi32_i32$1 = $2$hi;
          i64toi32_i32$0 = $2_1;
          i64toi32_i32$2 = 2147418112;
          i64toi32_i32$3 = 0;
          i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
          i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 48;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $23_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
          }
          i64toi32_i32$0 = 0;
          i64toi32_i32$2 = $11_1 | $23_1 | 0;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 48;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            $24_1 = 0;
          } else {
            i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
            $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          }
          $18$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $2$hi;
          i64toi32_i32$0 = $2_1;
          i64toi32_i32$2 = 65535;
          i64toi32_i32$3 = -1;
          i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
          $20_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
          $20$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $18$hi;
          i64toi32_i32$1 = $24_1;
          i64toi32_i32$0 = $20$hi;
          i64toi32_i32$3 = $20_1;
          i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
          $21_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
          i64toi32_i32$1 = $7_1;
          HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $21_1;
          HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
        }

        function $52($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          var i64toi32_i32$2 = 0,i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,i64toi32_i32$3 = 0,$4_1 = 0,i64toi32_i32$4 = 0,$20_1 = 0,$70_1 = 0,$71_1 = 0,$71$hi = 0,$72_1 = 0,$72$hi = 0,$76$hi = 0,$80_1 = 0,$83_1 = 0;
          $4_1 = global$0 - 80 | 0;
          global$0 = $4_1;
          label$1: {
            label$2: {
              if (($3_1 | 0) < (16384 | 0)) {
                break label$2;
              }
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$1 = $2$hi;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 2147352576;
              $97($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
              i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $2_1 = i64toi32_i32$3;
              $2$hi = i64toi32_i32$2;
              i64toi32_i32$1 = $4_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
              $1_1 = i64toi32_i32$2;
              $1$hi = i64toi32_i32$3;
              label$3: {
                if ($3_1 >>> 0 >= 32767 >>> 0) {
                  break label$3;
                }
                $3_1 = $3_1 + -16383 | 0;
                break label$1;
              }
              i64toi32_i32$3 = $1$hi;
              i64toi32_i32$3 = $2$hi;
              i64toi32_i32$3 = $1$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 2147352576;
              $97($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
              $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
              i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $2_1 = i64toi32_i32$0;
              $2$hi = i64toi32_i32$1;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
              $1_1 = i64toi32_i32$1;
              $1$hi = i64toi32_i32$0;
              break label$1;
            }
            if (($3_1 | 0) > (-16383 | 0)) {
              break label$1;
            }
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$0 = $2$hi;
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$2 = 0;
            i64toi32_i32$3 = 7471104;
            $97($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
            i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
            i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $2_1 = i64toi32_i32$3;
            $2$hi = i64toi32_i32$2;
            i64toi32_i32$1 = $4_1;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
            i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
            $1_1 = i64toi32_i32$2;
            $1$hi = i64toi32_i32$3;
            label$4: {
              if ($3_1 >>> 0 <= -32652 >>> 0) {
                break label$4;
              }
              $3_1 = $3_1 + 16269 | 0;
              break label$1;
            }
            i64toi32_i32$3 = $1$hi;
            i64toi32_i32$3 = $2$hi;
            i64toi32_i32$3 = $1$hi;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 7471104;
            $97($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
            $3_1 = (($3_1 | 0) > (-48920 | 0) ? $3_1 : -48920) + 32538 | 0;
            i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $2_1 = i64toi32_i32$0;
            $2$hi = i64toi32_i32$1;
            i64toi32_i32$2 = $4_1;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
            $1_1 = i64toi32_i32$1;
            $1$hi = i64toi32_i32$0;
          }
          $70_1 = $4_1;
          i64toi32_i32$0 = $1$hi;
          $71_1 = $1_1;
          $71$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $2$hi;
          $72_1 = $2_1;
          $72$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$2 = $3_1 + 16383 | 0;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 48;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            $20_1 = 0;
          } else {
            i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
            $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          }
          $76$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $71$hi;
          i64toi32_i32$2 = $72$hi;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = $76$hi;
          $97($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$2 = $4_1 + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $80_1 = i64toi32_i32$3;
          i64toi32_i32$3 = $0_1;
          HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
          HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $83_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $0_1;
          HEAP32[i64toi32_i32$0 >> 2] = $83_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
          global$0 = i64toi32_i32$2 + 80 | 0;
        }

        function $53($0_1, $0$hi, $1_1, $1$hi) {
          $0_1 = $0_1 | 0;
          $0$hi = $0$hi | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          var i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$3 = 0,i64toi32_i32$4 = 0,$2$hi = 0,$2_1 = 0,$13_1 = 0,$3_1 = 0,$4_1 = 0;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$2 = $1_1;
          i64toi32_i32$1 = 65535;
          i64toi32_i32$3 = -1;
          i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
          $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
          $2$hi = i64toi32_i32$1;
          label$1: {
            label$2: {
              i64toi32_i32$1 = i64toi32_i32$0;
              i64toi32_i32$0 = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 48;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              $3_1 = $13_1 & 32767 | 0;
              if (($3_1 | 0) == (32767 | 0)) {
                break label$2;
              }
              $4_1 = 4;
              if ($3_1) {
                break label$1;
              }
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$2 = $0$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$1 = $2_1;
              i64toi32_i32$0 = $0$hi;
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
              return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
            }
            i64toi32_i32$0 = $2$hi;
            i64toi32_i32$0 = $0$hi;
            i64toi32_i32$0 = $2$hi;
            i64toi32_i32$2 = $2_1;
            i64toi32_i32$1 = $0$hi;
            i64toi32_i32$3 = $0_1;
            i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
            $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
          }
          return $4_1 | 0;
        }

        function $54($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          $3$hi = $3$hi | 0;
          $4_1 = $4_1 | 0;
          $4$hi = $4$hi | 0;
          var i64toi32_i32$3 = 0,i64toi32_i32$2 = 0,i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$4 = 0,$5_1 = 0,i64toi32_i32$5 = 0,$10$hi = 0,$10_1 = 0,$9$hi = 0,$8_1 = 0,$9_1 = 0,i64toi32_i32$6 = 0,$6_1 = 0,$11$hi = 0,$52_1 = 0,$7_1 = 0,$53_1 = 0,$54_1 = 0,$55_1 = 0,$11_1 = 0,$56_1 = 0,$57_1 = 0,$58_1 = 0,$59_1 = 0,$60_1 = 0,$61_1 = 0,$62_1 = 0,$63_1 = 0,$64_1 = 0,$65_1 = 0,$66_1 = 0,$67_1 = 0,$68_1 = 0,$69_1 = 0,$70_1 = 0,$71_1 = 0,$123$hi = 0,$126 = 0,$127$hi = 0,$148 = 0,$148$hi = 0,$150$hi = 0,$153 = 0,$153$hi = 0,$155$hi = 0,$167$hi = 0,$170 = 0,$171$hi = 0,$200 = 0,$200$hi = 0,$202$hi = 0,$211 = 0,$212 = 0,$212$hi = 0,$214 = 0,$214$hi = 0,$220$hi = 0,$221 = 0,$221$hi = 0,$228 = 0,$228$hi = 0,$233$hi = 0;
          $5_1 = global$0 - 128 | 0;
          global$0 = $5_1;
          label$1: {
            label$2: {
              label$3: {
                i64toi32_i32$0 = $3$hi;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$0 = $3$hi;
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$2 = 0;
                i64toi32_i32$3 = 0;
                if (!($87($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
                  break label$3;
                }
                i64toi32_i32$3 = i64toi32_i32$0;
                i64toi32_i32$3 = i64toi32_i32$1;
                i64toi32_i32$3 = i64toi32_i32$0;
                i64toi32_i32$2 = i64toi32_i32$1;
                $6_1 = $53($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$1 = $2_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$0 = 48;
                i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                  i64toi32_i32$3 = 0;
                  $52_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                } else {
                  i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                  $52_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
                }
                $7_1 = $52_1;
                $8_1 = $7_1 & 32767 | 0;
                if (($8_1 | 0) == (32767 | 0)) {
                  break label$3;
                }
                if ($6_1) {
                  break label$2;
                }
              }
              i64toi32_i32$3 = $1$hi;
              i64toi32_i32$3 = $2$hi;
              i64toi32_i32$3 = $3$hi;
              i64toi32_i32$3 = $4$hi;
              i64toi32_i32$3 = $1$hi;
              i64toi32_i32$1 = $2$hi;
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$0 = $4$hi;
              $97($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
              $4_1 = i64toi32_i32$0;
              $4$hi = i64toi32_i32$2;
              i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $3_1 = i64toi32_i32$2;
              $3$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$1 = i64toi32_i32$0;
              i64toi32_i32$3 = i64toi32_i32$2;
              $89($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
              i64toi32_i32$2 = $5_1 + 8 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $2_1 = i64toi32_i32$3;
              $2$hi = i64toi32_i32$1;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $4_1 = i64toi32_i32$1;
              $4$hi = i64toi32_i32$3;
              break label$1;
            }
            label$4: {
              i64toi32_i32$3 = $1$hi;
              i64toi32_i32$3 = $2$hi;
              i64toi32_i32$2 = $2_1;
              i64toi32_i32$1 = 2147483647;
              i64toi32_i32$0 = -1;
              i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
              $9_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
              $9$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $3$hi;
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$3 = $4_1;
              i64toi32_i32$2 = 2147483647;
              i64toi32_i32$0 = -1;
              i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
              $10_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
              $10$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$3 = $9$hi;
              i64toi32_i32$1 = $3$hi;
              i64toi32_i32$0 = $10$hi;
              if (($87($1_1 | 0, i64toi32_i32$2 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
                break label$4;
              }
              label$5: {
                i64toi32_i32$0 = i64toi32_i32$2;
                i64toi32_i32$0 = i64toi32_i32$3;
                i64toi32_i32$0 = i64toi32_i32$1;
                i64toi32_i32$0 = $10$hi;
                i64toi32_i32$0 = i64toi32_i32$2;
                i64toi32_i32$1 = i64toi32_i32$3;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$2 = $10$hi;
                if (!($87($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0)) {
                  break label$5;
                }
                i64toi32_i32$2 = i64toi32_i32$0;
                i64toi32_i32$2 = i64toi32_i32$0;
                $4_1 = $1_1;
                $4$hi = i64toi32_i32$0;
                break label$1;
              }
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$3 = $2$hi;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              $97($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
              i64toi32_i32$3 = $5_1 + 120 | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $2_1 = i64toi32_i32$0;
              $2$hi = i64toi32_i32$1;
              i64toi32_i32$3 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
              $4_1 = i64toi32_i32$1;
              $4$hi = i64toi32_i32$0;
              break label$1;
            }
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$3 = $4_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = 48;
            i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $53_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $53_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            $6_1 = $53_1 & 32767 | 0;
            label$6: {
              label$7: {
                if (!$8_1) {
                  break label$7;
                }
                i64toi32_i32$1 = $1$hi;
                $4_1 = $1_1;
                $4$hi = i64toi32_i32$1;
                break label$6;
              }
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$1 = $9$hi;
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$3 = $9$hi;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = 1081540608;
              $97($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
              i64toi32_i32$3 = $5_1 + 104 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $9_1 = i64toi32_i32$2;
              $9$hi = i64toi32_i32$0;
              i64toi32_i32$3 = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              i64toi32_i32$1 = 48;
              i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $54_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                $54_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
              }
              $8_1 = $54_1 + -120 | 0;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
              $4_1 = i64toi32_i32$2;
              $4$hi = i64toi32_i32$3;
            }
            label$8: {
              if ($6_1) {
                break label$8;
              }
              i64toi32_i32$3 = $3$hi;
              i64toi32_i32$3 = $10$hi;
              i64toi32_i32$3 = $3$hi;
              i64toi32_i32$2 = $10$hi;
              i64toi32_i32$0 = 0;
              i64toi32_i32$1 = 1081540608;
              $97($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
              i64toi32_i32$2 = $5_1 + 88 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $10_1 = i64toi32_i32$1;
              $10$hi = i64toi32_i32$0;
              i64toi32_i32$2 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 48;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $55_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                $55_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
              }
              $6_1 = $55_1 + -120 | 0;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
              $3_1 = i64toi32_i32$1;
              $3$hi = i64toi32_i32$2;
            }
            i64toi32_i32$2 = $10$hi;
            i64toi32_i32$0 = $10_1;
            i64toi32_i32$1 = 65535;
            i64toi32_i32$3 = -1;
            i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
            i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
            i64toi32_i32$0 = 65536;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
            $11_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
            $11$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $9$hi;
            i64toi32_i32$1 = $9_1;
            i64toi32_i32$2 = 65535;
            i64toi32_i32$3 = -1;
            i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
            i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
            i64toi32_i32$1 = 65536;
            i64toi32_i32$3 = 0;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            $9_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
            $9$hi = i64toi32_i32$1;
            label$9: {
              if (($8_1 | 0) <= ($6_1 | 0)) {
                break label$9;
              }
              label$10: while (1) {
                label$11: {
                  label$12: {
                    i64toi32_i32$1 = $9$hi;
                    i64toi32_i32$1 = $11$hi;
                    i64toi32_i32$1 = $9$hi;
                    i64toi32_i32$2 = $9_1;
                    i64toi32_i32$0 = $11$hi;
                    i64toi32_i32$3 = $11_1;
                    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
                    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
                    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
                    $123$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $4$hi;
                    i64toi32_i32$5 = $3$hi;
                    i64toi32_i32$5 = $4$hi;
                    i64toi32_i32$1 = $4_1;
                    i64toi32_i32$2 = $3$hi;
                    i64toi32_i32$3 = $3_1;
                    $126 = $4$hi >>> 0 < i64toi32_i32$2 >>> 0 | (($4$hi | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
                    i64toi32_i32$1 = 0;
                    $127$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $123$hi;
                    i64toi32_i32$3 = i64toi32_i32$4;
                    i64toi32_i32$5 = $127$hi;
                    i64toi32_i32$2 = $126;
                    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
                    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
                    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
                    $10_1 = i64toi32_i32$0;
                    $10$hi = i64toi32_i32$4;
                    i64toi32_i32$1 = i64toi32_i32$0;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$2 = 0;
                    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
                      $56_1 = 1;
                    } else {
                      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
                        if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
                          $57_1 = 0;
                        } else {
                          $57_1 = 1;
                        }
                        $58_1 = $57_1;
                      } else {
                        $58_1 = 0;
                      }
                      $56_1 = $58_1;
                    }
                    if ($56_1) {
                      break label$12;
                    }
                    label$13: {
                      i64toi32_i32$1 = $10$hi;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$1 = $3$hi;
                      i64toi32_i32$1 = $4$hi;
                      i64toi32_i32$2 = $4_1;
                      i64toi32_i32$4 = $3$hi;
                      i64toi32_i32$3 = $3_1;
                      i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
                      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
                      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
                      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
                      $4_1 = i64toi32_i32$5;
                      $4$hi = i64toi32_i32$0;
                      i64toi32_i32$0 = $10$hi;
                      i64toi32_i32$1 = $10_1;
                      i64toi32_i32$2 = $4$hi;
                      i64toi32_i32$3 = $4_1;
                      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$3 = 0;
                      if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
                        break label$13;
                      }
                      i64toi32_i32$0 = $1$hi;
                      i64toi32_i32$0 = $2$hi;
                      i64toi32_i32$0 = $1$hi;
                      i64toi32_i32$2 = $2$hi;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$1 = 0;
                      $97($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
                      i64toi32_i32$2 = $5_1 + 40 | 0;
                      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                      $2_1 = i64toi32_i32$1;
                      $2$hi = i64toi32_i32$3;
                      i64toi32_i32$2 = $5_1;
                      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
                      $4_1 = i64toi32_i32$3;
                      $4$hi = i64toi32_i32$1;
                      break label$1;
                    }
                    i64toi32_i32$1 = $10$hi;
                    i64toi32_i32$2 = $10_1;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$0 = 1;
                    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                      $59_1 = 0;
                    } else {
                      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
                      $59_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                    }
                    $148 = $59_1;
                    $148$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $4$hi;
                    i64toi32_i32$1 = $4_1;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$0 = 63;
                    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                      i64toi32_i32$2 = 0;
                      $60_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                    } else {
                      i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                      $60_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
                    }
                    $150$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $148$hi;
                    i64toi32_i32$3 = $148;
                    i64toi32_i32$1 = $150$hi;
                    i64toi32_i32$0 = $60_1;
                    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                    $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                    $9$hi = i64toi32_i32$1;
                    break label$11;
                  }
                  i64toi32_i32$1 = $9$hi;
                  i64toi32_i32$2 = $9_1;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$0 = 1;
                  i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                    $61_1 = 0;
                  } else {
                    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
                    $61_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                  }
                  $153 = $61_1;
                  $153$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$1 = $4_1;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$0 = 63;
                  i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                    i64toi32_i32$2 = 0;
                    $62_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                  } else {
                    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                    $62_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
                  }
                  $155$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $153$hi;
                  i64toi32_i32$3 = $153;
                  i64toi32_i32$1 = $155$hi;
                  i64toi32_i32$0 = $62_1;
                  i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                  $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                  $9$hi = i64toi32_i32$1;
                }
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$2 = $4_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$0 = 1;
                i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                  $63_1 = 0;
                } else {
                  i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
                  $63_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                }
                $4_1 = $63_1;
                $4$hi = i64toi32_i32$3;
                $8_1 = $8_1 + -1 | 0;
                if (($8_1 | 0) > ($6_1 | 0)) {
                  continue label$10;
                }
                break label$10;
              };
              $8_1 = $6_1;
            }
            label$14: {
              label$15: {
                i64toi32_i32$3 = $9$hi;
                i64toi32_i32$3 = $11$hi;
                i64toi32_i32$3 = $9$hi;
                i64toi32_i32$1 = $9_1;
                i64toi32_i32$2 = $11$hi;
                i64toi32_i32$0 = $11_1;
                i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
                i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
                i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
                i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
                $167$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$5 = $3$hi;
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$3 = $4_1;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$0 = $3_1;
                $170 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
                i64toi32_i32$3 = 0;
                $171$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $167$hi;
                i64toi32_i32$0 = i64toi32_i32$4;
                i64toi32_i32$5 = $171$hi;
                i64toi32_i32$1 = $170;
                i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
                i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
                i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
                $10_1 = i64toi32_i32$2;
                $10$hi = i64toi32_i32$4;
                i64toi32_i32$3 = i64toi32_i32$2;
                i64toi32_i32$0 = 0;
                i64toi32_i32$1 = 0;
                if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
                  $64_1 = 1;
                } else {
                  if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
                    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
                      $65_1 = 0;
                    } else {
                      $65_1 = 1;
                    }
                    $66_1 = $65_1;
                  } else {
                    $66_1 = 0;
                  }
                  $64_1 = $66_1;
                }
                if ($64_1) {
                  break label$15;
                }
                i64toi32_i32$3 = $9$hi;
                $10_1 = $9_1;
                $10$hi = i64toi32_i32$3;
                break label$14;
              }
              i64toi32_i32$3 = $10$hi;
              i64toi32_i32$3 = $4$hi;
              i64toi32_i32$3 = $3$hi;
              i64toi32_i32$3 = $4$hi;
              i64toi32_i32$1 = $4_1;
              i64toi32_i32$4 = $3$hi;
              i64toi32_i32$0 = $3_1;
              i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
              i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
              i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
              i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
              $4_1 = i64toi32_i32$5;
              $4$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $10$hi;
              i64toi32_i32$3 = $10_1;
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$0 = $4_1;
              i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
              i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
                break label$14;
              }
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$1 = $2$hi;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 0;
              $97($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
              i64toi32_i32$1 = $5_1 + 56 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $2_1 = i64toi32_i32$3;
              $2$hi = i64toi32_i32$0;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
              $4_1 = i64toi32_i32$0;
              $4$hi = i64toi32_i32$3;
              break label$1;
            }
            label$16: {
              i64toi32_i32$3 = $10$hi;
              i64toi32_i32$1 = $10_1;
              i64toi32_i32$0 = 65535;
              i64toi32_i32$2 = -1;
              if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
                break label$16;
              }
              label$17: while (1) {
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$2 = $4_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$0 = 63;
                i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                  i64toi32_i32$3 = 0;
                  $67_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                } else {
                  i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                  $67_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
                }
                $3_1 = $67_1;
                $3$hi = i64toi32_i32$3;
                $8_1 = $8_1 + -1 | 0;
                i64toi32_i32$3 = $4$hi;
                i64toi32_i32$1 = $4_1;
                i64toi32_i32$2 = 0;
                i64toi32_i32$0 = 1;
                i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
                  $68_1 = 0;
                } else {
                  i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
                  $68_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
                }
                $4_1 = $68_1;
                $4$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $3$hi;
                $200 = $3_1;
                $200$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $10$hi;
                i64toi32_i32$3 = $10_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$0 = 1;
                i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
                  $69_1 = 0;
                } else {
                  i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
                  $69_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
                }
                $202$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $200$hi;
                i64toi32_i32$2 = $200;
                i64toi32_i32$3 = $202$hi;
                i64toi32_i32$0 = $69_1;
                i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
                $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                $10$hi = i64toi32_i32$3;
                i64toi32_i32$1 = $10_1;
                i64toi32_i32$2 = 65536;
                i64toi32_i32$0 = 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
                  continue label$17;
                }
                break label$17;
              };
            }
            $6_1 = $7_1 & 32768 | 0;
            label$18: {
              if (($8_1 | 0) > (0 | 0)) {
                break label$18;
              }
              $211 = $5_1 + 64 | 0;
              i64toi32_i32$1 = $4$hi;
              $212 = $4_1;
              $212$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $10$hi;
              i64toi32_i32$0 = $10_1;
              i64toi32_i32$3 = 65535;
              i64toi32_i32$2 = -1;
              i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
              $214 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
              $214$hi = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$1 = $8_1 + 120 | 0 | $6_1 | 0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = 48;
              i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
                $70_1 = 0;
              } else {
                i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
                $70_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
              }
              $220$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $214$hi;
              i64toi32_i32$3 = $214;
              i64toi32_i32$1 = $220$hi;
              i64toi32_i32$2 = $70_1;
              i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              $221 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
              $221$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $212$hi;
              i64toi32_i32$3 = $221$hi;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = 1065811968;
              $97($211 | 0, $212 | 0, i64toi32_i32$1 | 0, $221 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
              i64toi32_i32$3 = $5_1 + 72 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $2_1 = i64toi32_i32$2;
              $2$hi = i64toi32_i32$0;
              i64toi32_i32$3 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
              $4_1 = i64toi32_i32$0;
              $4$hi = i64toi32_i32$2;
              break label$1;
            }
            i64toi32_i32$2 = $10$hi;
            i64toi32_i32$3 = $10_1;
            i64toi32_i32$0 = 65535;
            i64toi32_i32$1 = -1;
            i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
            $228 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
            $228$hi = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$2 = $8_1 | $6_1 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$1 = 48;
            i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
              i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
              $71_1 = 0;
            } else {
              i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
              $71_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $233$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $228$hi;
            i64toi32_i32$0 = $228;
            i64toi32_i32$2 = $233$hi;
            i64toi32_i32$1 = $71_1;
            i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
            $2_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
            $2$hi = i64toi32_i32$2;
          }
          i64toi32_i32$2 = $4$hi;
          i64toi32_i32$0 = $0_1;
          HEAP32[i64toi32_i32$0 >> 2] = $4_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$2 = $2$hi;
          HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
          HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
          global$0 = $5_1 + 128 | 0;
        }

        function $55($0_1, $1_1, $1$hi, $2_1, $2$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          var i64toi32_i32$2 = 0,i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,$5_1 = 0;
          i64toi32_i32$0 = $2$hi;
          i64toi32_i32$2 = $2_1;
          i64toi32_i32$1 = 2147483647;
          i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
          $5_1 = i64toi32_i32$2 & -1 | 0;
          i64toi32_i32$2 = $0_1;
          HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
          HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$1 = $1$hi;
          HEAP32[i64toi32_i32$2 >> 2] = $1_1;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
        }

        function $56($0_1, $1_1, $2_1, $3_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          $3_1 = $3_1 | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$1 = 0,i64toi32_i32$3 = 0,$8_1 = 0,$10_1 = 0,$10$hi = 0,$4_1 = 0,$9_1 = 0,$11_1 = 0,$11$hi = 0,$7_1 = 0,$5_1 = 0,$6_1 = 0,$20_1 = 0,$21_1 = 0,$22_1 = 0,$23_1 = 0,$24_1 = 0,$25_1 = 0,$26_1 = 0,$27_1 = 0,$28_1 = 0,$29_1 = 0,$30_1 = 0,$31_1 = 0,$32_1 = 0,$33_1 = 0,$34_1 = 0,$35_1 = 0,$36_1 = 0,$37_1 = 0,$38_1 = 0,$39_1 = 0,$40_1 = 0,$12_1 = 0,$12$hi = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $4_1 = global$0 - 48 | 0;
          global$0 = $4_1;
          i64toi32_i32$0 = 0;
          $10_1 = 0;
          $10$hi = i64toi32_i32$0;
          label$1: {
            label$2: {
              if ($2_1 >>> 0 > 2 >>> 0) {
                break label$2;
              }
              $2_1 = $2_1 << 2 | 0;
              $5_1 = HEAP32[($2_1 + 66156 | 0) >> 2] | 0;
              $6_1 = HEAP32[($2_1 + 66144 | 0) >> 2] | 0;
              label$3: while (1) {
                label$4: {
                  label$5: {
                    $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                    if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                      break label$5;
                    }
                    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                    $2_1 = HEAPU8[$2_1 >> 0] | 0;
                    break label$4;
                  }
                  $2_1 = $49($1_1 | 0) | 0;
                }
                if ($57($2_1 | 0) | 0) {
                  continue label$3;
                }
                break label$3;
              };
              $7_1 = 1;
              label$6: {
                label$7: {
                  switch ($2_1 + -43 | 0 | 0) {
                    case 0:
                    case 2:
                      break label$7;
                    default:
                      break label$6;
                  };
                }
                $7_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
                label$8: {
                  $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                  if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$8;
                  }
                  HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                  $2_1 = HEAPU8[$2_1 >> 0] | 0;
                  break label$6;
                }
                $2_1 = $49($1_1 | 0) | 0;
              }
              $8_1 = 0;
              label$9: {
                label$10: {
                  label$11: {
                    if (($2_1 & -33 | 0 | 0) != (73 | 0)) {
                      break label$11;
                    }
                    label$12: while (1) {
                      if (($8_1 | 0) == (7 | 0)) {
                        break label$10;
                      }
                      label$13: {
                        label$14: {
                          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                            break label$14;
                          }
                          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                          $2_1 = HEAPU8[$2_1 >> 0] | 0;
                          break label$13;
                        }
                        $2_1 = $49($1_1 | 0) | 0;
                      }
                      $9_1 = $8_1 + 65537 | 0;
                      $8_1 = $8_1 + 1 | 0;
                      if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
                        continue label$12;
                      }
                      break label$12;
                    };
                  }
                  label$15: {
                    if (($8_1 | 0) == (3 | 0)) {
                      break label$15;
                    }
                    if (($8_1 | 0) == (8 | 0)) {
                      break label$10;
                    }
                    if (!$3_1) {
                      break label$9;
                    }
                    if ($8_1 >>> 0 < 4 >>> 0) {
                      break label$9;
                    }
                    if (($8_1 | 0) == (8 | 0)) {
                      break label$10;
                    }
                  }
                  label$16: {
                    i64toi32_i32$2 = $1_1;
                    i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
                    $10_1 = i64toi32_i32$0;
                    $10$hi = i64toi32_i32$1;
                    i64toi32_i32$2 = i64toi32_i32$0;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$3 = 0;
                    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                      $20_1 = 1;
                    } else {
                      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                        if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                          $21_1 = 0;
                        } else {
                          $21_1 = 1;
                        }
                        $22_1 = $21_1;
                      } else {
                        $22_1 = 0;
                      }
                      $20_1 = $22_1;
                    }
                    if ($20_1) {
                      break label$16;
                    }
                    HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                  }
                  if (!$3_1) {
                    break label$10;
                  }
                  if ($8_1 >>> 0 < 4 >>> 0) {
                    break label$10;
                  }
                  i64toi32_i32$2 = $10$hi;
                  i64toi32_i32$3 = $10_1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$0 = 0;
                  if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
                    $23_1 = 1;
                  } else {
                    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
                      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                        $24_1 = 0;
                      } else {
                        $24_1 = 1;
                      }
                      $25_1 = $24_1;
                    } else {
                      $25_1 = 0;
                    }
                    $23_1 = $25_1;
                  }
                  $2_1 = $23_1;
                  label$17: while (1) {
                    label$18: {
                      if ($2_1) {
                        break label$18;
                      }
                      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                    }
                    $8_1 = $8_1 + -1 | 0;
                    if ($8_1 >>> 0 > 3 >>> 0) {
                      continue label$17;
                    }
                    break label$17;
                  };
                }
                $91($4_1 | 0, Math_fround(Math_fround(Math_fround($7_1 | 0) * Math_fround(Infinity))));
                i64toi32_i32$0 = $4_1 + 8 | 0;
                i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                $11_1 = i64toi32_i32$3;
                $11$hi = i64toi32_i32$2;
                i64toi32_i32$0 = $4_1;
                i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                $10_1 = i64toi32_i32$2;
                $10$hi = i64toi32_i32$3;
                break label$1;
              }
              label$19: {
                label$20: {
                  label$21: {
                    label$22: {
                      label$23: {
                        if ($8_1) {
                          break label$23;
                        }
                        $8_1 = 0;
                        if (($2_1 & -33 | 0 | 0) != (78 | 0)) {
                          break label$23;
                        }
                        label$24: while (1) {
                          if (($8_1 | 0) == (2 | 0)) {
                            break label$22;
                          }
                          label$25: {
                            label$26: {
                              $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                              if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                                break label$26;
                              }
                              HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                              $2_1 = HEAPU8[$2_1 >> 0] | 0;
                              break label$25;
                            }
                            $2_1 = $49($1_1 | 0) | 0;
                          }
                          $9_1 = $8_1 + 65580 | 0;
                          $8_1 = $8_1 + 1 | 0;
                          if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
                            continue label$24;
                          }
                          break label$24;
                        };
                      }
                      switch ($8_1 | 0) {
                        case 0:
                          break label$19;
                        case 3:
                          break label$22;
                        default:
                          break label$21;
                      };
                    }
                    label$27: {
                      label$28: {
                        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                        if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                          break label$28;
                        }
                        HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                        $2_1 = HEAPU8[$2_1 >> 0] | 0;
                        break label$27;
                      }
                      $2_1 = $49($1_1 | 0) | 0;
                    }
                    label$29: {
                      label$30: {
                        if (($2_1 | 0) != (40 | 0)) {
                          break label$30;
                        }
                        $8_1 = 1;
                        break label$29;
                      }
                      i64toi32_i32$3 = 0;
                      $10_1 = 0;
                      $10$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = 2147450880;
                      $11_1 = 0;
                      $11$hi = i64toi32_i32$3;
                      i64toi32_i32$0 = $1_1;
                      i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
                      i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
                      i64toi32_i32$0 = i64toi32_i32$3;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$1 = 0;
                      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
                        $26_1 = 1;
                      } else {
                        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
                          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
                            $27_1 = 0;
                          } else {
                            $27_1 = 1;
                          }
                          $28_1 = $27_1;
                        } else {
                          $28_1 = 0;
                        }
                        $26_1 = $28_1;
                      }
                      if ($26_1) {
                        break label$1;
                      }
                      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                      break label$1;
                    }
                    label$31: while (1) {
                      label$32: {
                        label$33: {
                          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                            break label$33;
                          }
                          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                          $2_1 = HEAPU8[$2_1 >> 0] | 0;
                          break label$32;
                        }
                        $2_1 = $49($1_1 | 0) | 0;
                      }
                      $9_1 = $2_1 + -65 | 0;
                      label$34: {
                        label$35: {
                          if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
                            break label$35;
                          }
                          if ($9_1 >>> 0 < 26 >>> 0) {
                            break label$35;
                          }
                          $9_1 = $2_1 + -97 | 0;
                          if (($2_1 | 0) == (95 | 0)) {
                            break label$35;
                          }
                          if ($9_1 >>> 0 >= 26 >>> 0) {
                            break label$34;
                          }
                        }
                        $8_1 = $8_1 + 1 | 0;
                        continue label$31;
                      }
                      break label$31;
                    };
                    i64toi32_i32$0 = 2147450880;
                    $11_1 = 0;
                    $11$hi = i64toi32_i32$0;
                    if (($2_1 | 0) == (41 | 0)) {
                      break label$1;
                    }
                    label$36: {
                      i64toi32_i32$1 = $1_1;
                      i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
                      i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
                      $12_1 = i64toi32_i32$0;
                      $12$hi = i64toi32_i32$2;
                      i64toi32_i32$1 = i64toi32_i32$0;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$3 = 0;
                      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
                        $29_1 = 1;
                      } else {
                        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
                          if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
                            $30_1 = 0;
                          } else {
                            $30_1 = 1;
                          }
                          $31_1 = $30_1;
                        } else {
                          $31_1 = 0;
                        }
                        $29_1 = $31_1;
                      }
                      if ($29_1) {
                        break label$36;
                      }
                      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                    }
                    label$37: {
                      label$38: {
                        if (!$3_1) {
                          break label$38;
                        }
                        if ($8_1) {
                          break label$37;
                        }
                        i64toi32_i32$1 = 0;
                        $10_1 = 0;
                        $10$hi = i64toi32_i32$1;
                        break label$1;
                      }
                      (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                      i64toi32_i32$1 = 0;
                      $10_1 = 0;
                      $10$hi = i64toi32_i32$1;
                      break label$20;
                    }
                    label$39: while (1) {
                      label$40: {
                        i64toi32_i32$1 = $12$hi;
                        i64toi32_i32$3 = $12_1;
                        i64toi32_i32$2 = 0;
                        i64toi32_i32$0 = 0;
                        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
                          $32_1 = 1;
                        } else {
                          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
                            if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                              $33_1 = 0;
                            } else {
                              $33_1 = 1;
                            }
                            $34_1 = $33_1;
                          } else {
                            $34_1 = 0;
                          }
                          $32_1 = $34_1;
                        }
                        if ($32_1) {
                          break label$40;
                        }
                        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                      }
                      i64toi32_i32$3 = 0;
                      $10_1 = 0;
                      $10$hi = i64toi32_i32$3;
                      $8_1 = $8_1 + -1 | 0;
                      if ($8_1) {
                        continue label$39;
                      }
                      break label$1;
                    };
                  }
                  i64toi32_i32$3 = 0;
                  $10_1 = 0;
                  $10$hi = i64toi32_i32$3;
                  label$41: {
                    i64toi32_i32$0 = $1_1;
                    i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
                    i64toi32_i32$0 = i64toi32_i32$3;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$2 = 0;
                    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
                      $35_1 = 1;
                    } else {
                      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
                        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
                          $36_1 = 0;
                        } else {
                          $36_1 = 1;
                        }
                        $37_1 = $36_1;
                      } else {
                        $37_1 = 0;
                      }
                      $35_1 = $37_1;
                    }
                    if ($35_1) {
                      break label$41;
                    }
                    HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                  }
                  (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                }
                i64toi32_i32$0 = $10$hi;
                $48($1_1 | 0, $10_1 | 0, i64toi32_i32$0 | 0);
                break label$2;
              }
              label$42: {
                if (($2_1 | 0) != (48 | 0)) {
                  break label$42;
                }
                label$43: {
                  label$44: {
                    $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                    if (($8_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                      break label$44;
                    }
                    HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                    $8_1 = HEAPU8[$8_1 >> 0] | 0;
                    break label$43;
                  }
                  $8_1 = $49($1_1 | 0) | 0;
                }
                label$45: {
                  if (($8_1 & -33 | 0 | 0) != (88 | 0)) {
                    break label$45;
                  }
                  $58($4_1 + 16 | 0 | 0, $1_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
                  i64toi32_i32$2 = $4_1 + 24 | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $11_1 = i64toi32_i32$0;
                  $11$hi = i64toi32_i32$1;
                  i64toi32_i32$2 = $4_1;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
                  $10_1 = i64toi32_i32$1;
                  $10$hi = i64toi32_i32$0;
                  break label$1;
                }
                i64toi32_i32$2 = $1_1;
                i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
                i64toi32_i32$2 = i64toi32_i32$0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$3 = 0;
                if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                  $38_1 = 1;
                } else {
                  if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                    if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                      $39_1 = 0;
                    } else {
                      $39_1 = 1;
                    }
                    $40_1 = $39_1;
                  } else {
                    $40_1 = 0;
                  }
                  $38_1 = $40_1;
                }
                if ($38_1) {
                  break label$42;
                }
                HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
              }
              $59($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
              i64toi32_i32$3 = $4_1 + 40 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $11_1 = i64toi32_i32$2;
              $11$hi = i64toi32_i32$1;
              i64toi32_i32$3 = $4_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
              $10_1 = i64toi32_i32$1;
              $10$hi = i64toi32_i32$2;
              break label$1;
            }
            i64toi32_i32$2 = 0;
            $11_1 = 0;
            $11$hi = i64toi32_i32$2;
          }
          i64toi32_i32$2 = $10$hi;
          i64toi32_i32$1 = $0_1;
          HEAP32[i64toi32_i32$1 >> 2] = $10_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$2 = $11$hi;
          HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
          HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
          global$0 = $4_1 + 48 | 0;
        }

        function $57($0_1) {
          $0_1 = $0_1 | 0;
          return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
        }

        function $58($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          $3_1 = $3_1 | 0;
          $4_1 = $4_1 | 0;
          $5_1 = $5_1 | 0;
          var i64toi32_i32$3 = 0,i64toi32_i32$0 = 0,i64toi32_i32$4 = 0,i64toi32_i32$1 = 0,i64toi32_i32$5 = 0,i64toi32_i32$2 = 0,$6_1 = 0,$7_1 = 0,$16$hi = 0,$19$hi = 0,$16_1 = 0,$19_1 = 0,$15$hi = 0,$17$hi = 0,$14$hi = 0,$15_1 = 0,$17_1 = 0,$18$hi = 0,$14_1 = 0,$10_1 = 0,$18_1 = 0,$8_1 = 0,$9_1 = 0,$20$hi = 0,$12_1 = 0,$20_1 = 0,$11_1 = 0,$13_1 = 0,$104_1 = 0,$105_1 = 0,$106_1 = 0,$107_1 = 0,$108_1 = 0,$109_1 = 0,$110_1 = 0,$111_1 = 0,$112_1 = 0,$113 = 0,$114 = 0,$115 = 0,$116 = 0,$117 = 0,$118 = 0,$119 = 0,$120 = 0,$121 = 0,$122 = 0,$123 = 0,$124 = 0,$125 = 0,$127 = 0,$128 = 0,$129 = 0,$126 = 0,$126$hi = 0,$130 = 0,$130$hi = 0,$141 = 0,$141$hi = 0,$145 = 0,$145$hi = 0,$163 = 0,$163$hi = 0,$167 = 0,$167$hi = 0,$267$hi = 0,$274$hi = 0,$283 = 0,$283$hi = 0,$287 = 0,$287$hi = 0,$291 = 0,$291$hi = 0,$295 = 0,$295$hi = 0,$305 = 0,$305$hi = 0,$321$hi = 0,$131 = 0,$326 = 0,$326$hi = 0,$330$hi = 0,$132 = 0,$333 = 0,$333$hi = 0,$350$hi = 0,$358 = 0,$359 = 0,$362$hi = 0,$386 = 0,$386$hi = 0,$390 = 0,$390$hi = 0,$426 = 0,$426$hi = 0,$430 = 0,$430$hi = 0,$434 = 0,$434$hi = 0,$438 = 0,$438$hi = 0,$447 = 0,$447$hi = 0,$450 = 0,$450$hi = 0,$454 = 0,$454$hi = 0,$458 = 0,$458$hi = 0,$460 = 0,$460$hi = 0,$464 = 0,$464$hi = 0,$468 = 0,$468$hi = 0,$472 = 0,$472$hi = 0,$504 = 0,$504$hi = 0,$508 = 0,$508$hi = 0,$512 = 0,$512$hi = 0,$516 = 0,$516$hi = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $6_1 = global$0 - 432 | 0;
          global$0 = $6_1;
          label$1: {
            label$2: {
              $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
              if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                break label$2;
              }
              HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
              $7_1 = HEAPU8[$7_1 >> 0] | 0;
              break label$1;
            }
            $7_1 = $49($1_1 | 0) | 0;
          }
          $8_1 = 0;
          i64toi32_i32$0 = 0;
          $14_1 = 0;
          $14$hi = i64toi32_i32$0;
          $9_1 = 0;
          label$3: {
            label$4: {
              label$5: {
                label$6: while (1) {
                  label$7: {
                    if (($7_1 | 0) == (48 | 0)) {
                      break label$7;
                    }
                    if (($7_1 | 0) != (46 | 0)) {
                      break label$3;
                    }
                    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                    if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                      break label$5;
                    }
                    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                    $7_1 = HEAPU8[$7_1 >> 0] | 0;
                    break label$4;
                  }
                  label$8: {
                    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                    if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                      break label$8;
                    }
                    $9_1 = 1;
                    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                    $7_1 = HEAPU8[$7_1 >> 0] | 0;
                    continue label$6;
                  }
                  $9_1 = 1;
                  $7_1 = $49($1_1 | 0) | 0;
                  continue label$6;
                };
              }
              $7_1 = $49($1_1 | 0) | 0;
            }
            $8_1 = 1;
            i64toi32_i32$0 = 0;
            $14_1 = 0;
            $14$hi = i64toi32_i32$0;
            if (($7_1 | 0) != (48 | 0)) {
              break label$3;
            }
            label$9: while (1) {
              label$10: {
                label$11: {
                  $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                  if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$11;
                  }
                  HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                  $7_1 = HEAPU8[$7_1 >> 0] | 0;
                  break label$10;
                }
                $7_1 = $49($1_1 | 0) | 0;
              }
              i64toi32_i32$0 = $14$hi;
              i64toi32_i32$2 = $14_1;
              i64toi32_i32$1 = -1;
              i64toi32_i32$3 = -1;
              i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
              i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
              }
              $14_1 = i64toi32_i32$4;
              $14$hi = i64toi32_i32$5;
              if (($7_1 | 0) == (48 | 0)) {
                continue label$9;
              }
              break label$9;
            };
            $8_1 = 1;
            $9_1 = 1;
          }
          i64toi32_i32$5 = 1073676288;
          $15_1 = 0;
          $15$hi = i64toi32_i32$5;
          $10_1 = 0;
          i64toi32_i32$5 = 0;
          $16_1 = 0;
          $16$hi = i64toi32_i32$5;
          i64toi32_i32$5 = 0;
          $17_1 = 0;
          $17$hi = i64toi32_i32$5;
          i64toi32_i32$5 = 0;
          $18_1 = 0;
          $18$hi = i64toi32_i32$5;
          $11_1 = 0;
          i64toi32_i32$5 = 0;
          $19_1 = 0;
          $19$hi = i64toi32_i32$5;
          label$12: {
            label$13: while (1) {
              $12_1 = $7_1;
              label$14: {
                label$15: {
                  $13_1 = $7_1 + -48 | 0;
                  if ($13_1 >>> 0 < 10 >>> 0) {
                    break label$15;
                  }
                  $12_1 = $7_1 | 32 | 0;
                  label$16: {
                    if (($7_1 | 0) == (46 | 0)) {
                      break label$16;
                    }
                    if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
                      break label$12;
                    }
                  }
                  if (($7_1 | 0) != (46 | 0)) {
                    break label$15;
                  }
                  if ($8_1) {
                    break label$12;
                  }
                  $8_1 = 1;
                  i64toi32_i32$5 = $19$hi;
                  $14_1 = $19_1;
                  $14$hi = i64toi32_i32$5;
                  break label$14;
                }
                $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
                label$17: {
                  label$18: {
                    i64toi32_i32$5 = $19$hi;
                    i64toi32_i32$0 = $19_1;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$3 = 7;
                    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
                      $104_1 = 1;
                    } else {
                      if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
                        if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
                          $105_1 = 0;
                        } else {
                          $105_1 = 1;
                        }
                        $106_1 = $105_1;
                      } else {
                        $106_1 = 0;
                      }
                      $104_1 = $106_1;
                    }
                    if ($104_1) {
                      break label$18;
                    }
                    $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
                    break label$17;
                  }
                  label$19: {
                    i64toi32_i32$0 = $19$hi;
                    i64toi32_i32$3 = $19_1;
                    i64toi32_i32$5 = 0;
                    i64toi32_i32$2 = 28;
                    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
                      break label$19;
                    }
                    $92($6_1 + 48 | 0 | 0, $7_1 | 0);
                    i64toi32_i32$3 = $18$hi;
                    i64toi32_i32$3 = $15$hi;
                    i64toi32_i32$3 = $18$hi;
                    i64toi32_i32$0 = $15$hi;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$5 = 1073414144;
                    $97($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
                    i64toi32_i32$0 = $6_1;
                    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
                    $126 = i64toi32_i32$5;
                    $126$hi = i64toi32_i32$2;
                    i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
                    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                    $130 = i64toi32_i32$2;
                    $130$hi = i64toi32_i32$5;
                    i64toi32_i32$0 = $6_1;
                    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
                    $18_1 = i64toi32_i32$5;
                    $18$hi = i64toi32_i32$2;
                    i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
                    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                    $15_1 = i64toi32_i32$2;
                    $15$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $126$hi;
                    i64toi32_i32$2 = $130$hi;
                    i64toi32_i32$0 = $18$hi;
                    i64toi32_i32$3 = $15$hi;
                    $97($6_1 + 16 | 0 | 0, $126 | 0, i64toi32_i32$5 | 0, $130 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0);
                    i64toi32_i32$2 = $6_1;
                    i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                    $141 = i64toi32_i32$3;
                    $141$hi = i64toi32_i32$0;
                    i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
                    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $145 = i64toi32_i32$0;
                    $145$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $16$hi;
                    i64toi32_i32$3 = $17$hi;
                    i64toi32_i32$3 = $141$hi;
                    i64toi32_i32$0 = $145$hi;
                    i64toi32_i32$2 = $16$hi;
                    i64toi32_i32$5 = $17$hi;
                    $85($6_1 | 0, $141 | 0, i64toi32_i32$3 | 0, $145 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
                    i64toi32_i32$0 = $6_1 + 8 | 0;
                    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                    $17_1 = i64toi32_i32$5;
                    $17$hi = i64toi32_i32$2;
                    i64toi32_i32$0 = $6_1;
                    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                    $16_1 = i64toi32_i32$2;
                    $16$hi = i64toi32_i32$5;
                    break label$17;
                  }
                  if (!$7_1) {
                    break label$17;
                  }
                  if ($11_1) {
                    break label$17;
                  }
                  i64toi32_i32$5 = $18$hi;
                  i64toi32_i32$5 = $15$hi;
                  i64toi32_i32$5 = $18$hi;
                  i64toi32_i32$2 = $15$hi;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$3 = 1073610752;
                  $97($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
                  i64toi32_i32$2 = $6_1;
                  i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
                  $163 = i64toi32_i32$3;
                  $163$hi = i64toi32_i32$0;
                  i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $167 = i64toi32_i32$0;
                  $167$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $16$hi;
                  i64toi32_i32$3 = $17$hi;
                  i64toi32_i32$3 = $163$hi;
                  i64toi32_i32$0 = $167$hi;
                  i64toi32_i32$2 = $16$hi;
                  i64toi32_i32$5 = $17$hi;
                  $85($6_1 + 64 | 0 | 0, $163 | 0, i64toi32_i32$3 | 0, $167 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
                  i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
                  i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                  $17_1 = i64toi32_i32$5;
                  $17$hi = i64toi32_i32$2;
                  $11_1 = 1;
                  i64toi32_i32$0 = $6_1;
                  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
                  $16_1 = i64toi32_i32$2;
                  $16$hi = i64toi32_i32$5;
                }
                i64toi32_i32$5 = $19$hi;
                i64toi32_i32$0 = $19_1;
                i64toi32_i32$2 = 0;
                i64toi32_i32$3 = 1;
                i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
                i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                }
                $19_1 = i64toi32_i32$1;
                $19$hi = i64toi32_i32$4;
                $9_1 = 1;
              }
              label$20: {
                $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$20;
                }
                HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                $7_1 = HEAPU8[$7_1 >> 0] | 0;
                continue label$13;
              }
              $7_1 = $49($1_1 | 0) | 0;
              continue label$13;
            };
          }
          label$21: {
            label$22: {
              if ($9_1) {
                break label$22;
              }
              label$23: {
                label$24: {
                  label$25: {
                    i64toi32_i32$5 = $1_1;
                    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
                    i64toi32_i32$5 = i64toi32_i32$4;
                    i64toi32_i32$4 = 0;
                    i64toi32_i32$3 = 0;
                    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
                      $107_1 = 1;
                    } else {
                      if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
                        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                          $108_1 = 0;
                        } else {
                          $108_1 = 1;
                        }
                        $109_1 = $108_1;
                      } else {
                        $109_1 = 0;
                      }
                      $107_1 = $109_1;
                    }
                    if ($107_1) {
                      break label$25;
                    }
                    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
                    if (!$5_1) {
                      break label$24;
                    }
                    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
                    if (!$8_1) {
                      break label$23;
                    }
                    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
                    break label$23;
                  }
                  if ($5_1) {
                    break label$23;
                  }
                }
                i64toi32_i32$5 = 0;
                $48($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
              }
              $90($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
              i64toi32_i32$3 = $6_1 + 104 | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$5;
              $19$hi = i64toi32_i32$0;
              i64toi32_i32$3 = $6_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
              $16_1 = i64toi32_i32$0;
              $16$hi = i64toi32_i32$5;
              break label$21;
            }
            label$26: {
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$3 = $19_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$4 = 7;
              if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
                $110_1 = 1;
              } else {
                if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
                  if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
                    $111_1 = 0;
                  } else {
                    $111_1 = 1;
                  }
                  $112_1 = $111_1;
                } else {
                  $112_1 = 0;
                }
                $110_1 = $112_1;
              }
              if ($110_1) {
                break label$26;
              }
              i64toi32_i32$3 = $19$hi;
              $15_1 = $19_1;
              $15$hi = i64toi32_i32$3;
              label$27: while (1) {
                $10_1 = $10_1 << 4 | 0;
                i64toi32_i32$3 = $15$hi;
                i64toi32_i32$4 = $15_1;
                i64toi32_i32$5 = 0;
                i64toi32_i32$0 = 1;
                i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
                i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
                }
                $15_1 = i64toi32_i32$2;
                $15$hi = i64toi32_i32$1;
                i64toi32_i32$3 = i64toi32_i32$2;
                i64toi32_i32$4 = 0;
                i64toi32_i32$0 = 8;
                if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
                  continue label$27;
                }
                break label$27;
              };
            }
            label$28: {
              label$29: {
                label$30: {
                  label$31: {
                    if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
                      break label$31;
                    }
                    i64toi32_i32$3 = $60($1_1 | 0, $5_1 | 0) | 0;
                    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                    $15_1 = i64toi32_i32$3;
                    $15$hi = i64toi32_i32$1;
                    i64toi32_i32$0 = i64toi32_i32$3;
                    i64toi32_i32$3 = -2147483648;
                    i64toi32_i32$4 = 0;
                    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
                      break label$28;
                    }
                    label$32: {
                      if (!$5_1) {
                        break label$32;
                      }
                      i64toi32_i32$4 = $1_1;
                      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
                      i64toi32_i32$4 = i64toi32_i32$0;
                      i64toi32_i32$0 = -1;
                      i64toi32_i32$3 = -1;
                      if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
                        $113 = 1;
                      } else {
                        if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
                          if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
                            $114 = 0;
                          } else {
                            $114 = 1;
                          }
                          $115 = $114;
                        } else {
                          $115 = 0;
                        }
                        $113 = $115;
                      }
                      if ($113) {
                        break label$30;
                      }
                      break label$29;
                    }
                    i64toi32_i32$4 = 0;
                    $16_1 = 0;
                    $16$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = 0;
                    $48($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
                    i64toi32_i32$4 = 0;
                    $19_1 = 0;
                    $19$hi = i64toi32_i32$4;
                    break label$21;
                  }
                  i64toi32_i32$4 = 0;
                  $15_1 = 0;
                  $15$hi = i64toi32_i32$4;
                  i64toi32_i32$3 = $1_1;
                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
                  i64toi32_i32$3 = i64toi32_i32$4;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$0 = 0;
                  if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                    $116 = 1;
                  } else {
                    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                        $117 = 0;
                      } else {
                        $117 = 1;
                      }
                      $118 = $117;
                    } else {
                      $118 = 0;
                    }
                    $116 = $118;
                  }
                  if ($116) {
                    break label$28;
                  }
                }
                HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
              }
              i64toi32_i32$3 = 0;
              $15_1 = 0;
              $15$hi = i64toi32_i32$3;
            }
            label$33: {
              if ($10_1) {
                break label$33;
              }
              $90($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
              i64toi32_i32$0 = $6_1 + 120 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$3;
              $19$hi = i64toi32_i32$1;
              i64toi32_i32$0 = $6_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
              $16_1 = i64toi32_i32$1;
              $16$hi = i64toi32_i32$3;
              break label$21;
            }
            label$34: {
              i64toi32_i32$3 = $14$hi;
              i64toi32_i32$3 = $19$hi;
              i64toi32_i32$5 = $8_1;
              i64toi32_i32$3 = $14$hi;
              i64toi32_i32$1 = $19$hi;
              i64toi32_i32$4 = i64toi32_i32$5 ? $14_1 : $19_1;
              i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
              i64toi32_i32$5 = i64toi32_i32$4;
              i64toi32_i32$4 = 0;
              i64toi32_i32$3 = 2;
              i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
                $119 = 0;
              } else {
                i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
                $119 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
              }
              $267$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $15$hi;
              i64toi32_i32$4 = $267$hi;
              i64toi32_i32$0 = $119;
              i64toi32_i32$5 = $15$hi;
              i64toi32_i32$3 = $15_1;
              i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
              i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
              }
              i64toi32_i32$4 = i64toi32_i32$1;
              i64toi32_i32$0 = -1;
              i64toi32_i32$3 = -32;
              i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
              i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
              if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
              }
              $19_1 = i64toi32_i32$5;
              $19$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $274$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $19$hi;
              i64toi32_i32$2 = i64toi32_i32$5;
              i64toi32_i32$4 = $274$hi;
              i64toi32_i32$3 = 0 - $3_1 | 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                $120 = 1;
              } else {
                if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                  if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
                    $121 = 0;
                  } else {
                    $121 = 1;
                  }
                  $122 = $121;
                } else {
                  $122 = 0;
                }
                $120 = $122;
              }
              if ($120) {
                break label$34;
              }
              (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              $92($6_1 + 160 | 0 | 0, $4_1 | 0);
              i64toi32_i32$3 = $6_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
              $283 = i64toi32_i32$2;
              $283$hi = i64toi32_i32$1;
              i64toi32_i32$3 = (i64toi32_i32$3 + 160 | 0) + 8 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $287 = i64toi32_i32$1;
              $287$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $283$hi;
              i64toi32_i32$1 = $287$hi;
              i64toi32_i32$3 = -1;
              i64toi32_i32$4 = 2147418111;
              $97($6_1 + 144 | 0 | 0, $283 | 0, i64toi32_i32$2 | 0, $287 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$4 | 0);
              i64toi32_i32$1 = $6_1;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
              $291 = i64toi32_i32$4;
              $291$hi = i64toi32_i32$3;
              i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $295 = i64toi32_i32$3;
              $295$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $291$hi;
              i64toi32_i32$3 = $295$hi;
              i64toi32_i32$1 = -1;
              i64toi32_i32$2 = 2147418111;
              $97($6_1 + 128 | 0 | 0, $291 | 0, i64toi32_i32$4 | 0, $295 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
              i64toi32_i32$3 = ($6_1 + 128 | 0) + 8 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$2;
              $19$hi = i64toi32_i32$1;
              i64toi32_i32$3 = $6_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] | 0;
              $16_1 = i64toi32_i32$1;
              $16$hi = i64toi32_i32$2;
              break label$21;
            }
            label$35: {
              i64toi32_i32$2 = $19$hi;
              i64toi32_i32$1 = $3_1 + -226 | 0;
              i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
              $305 = i64toi32_i32$1;
              $305$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $19$hi;
              i64toi32_i32$3 = $19_1;
              i64toi32_i32$1 = $305$hi;
              i64toi32_i32$4 = $305;
              if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
                $123 = 1;
              } else {
                if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
                  if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0) {
                    $124 = 0;
                  } else {
                    $124 = 1;
                  }
                  $125 = $124;
                } else {
                  $125 = 0;
                }
                $123 = $125;
              }
              if ($123) {
                break label$35;
              }
              label$36: {
                if (($10_1 | 0) <= (-1 | 0)) {
                  break label$36;
                }
                label$37: while (1) {
                  i64toi32_i32$3 = $16$hi;
                  i64toi32_i32$3 = $17$hi;
                  i64toi32_i32$3 = $16$hi;
                  i64toi32_i32$2 = $17$hi;
                  i64toi32_i32$4 = 0;
                  i64toi32_i32$1 = -1073807360;
                  $85($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
                  i64toi32_i32$1 = i64toi32_i32$3;
                  i64toi32_i32$1 = i64toi32_i32$2;
                  i64toi32_i32$1 = i64toi32_i32$3;
                  i64toi32_i32$4 = i64toi32_i32$2;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = 1073610752;
                  $7_1 = $88($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0;
                  i64toi32_i32$3 = i64toi32_i32$1;
                  i64toi32_i32$3 = i64toi32_i32$4;
                  i64toi32_i32$4 = $6_1;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
                  $321$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = i64toi32_i32$1;
                  $7_1 = ($7_1 | 0) > (-1 | 0);
                  i64toi32_i32$0 = $7_1;
                  i64toi32_i32$2 = $321$hi;
                  $131 = i64toi32_i32$3;
                  i64toi32_i32$3 = i64toi32_i32$1;
                  i64toi32_i32$1 = i64toi32_i32$0 ? $131 : $16_1;
                  i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$3;
                  $326 = i64toi32_i32$1;
                  $326$hi = i64toi32_i32$4;
                  i64toi32_i32$0 = ($6_1 + 416 | 0) + 8 | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                  $330$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $17$hi;
                  i64toi32_i32$3 = $7_1;
                  i64toi32_i32$1 = $330$hi;
                  $132 = i64toi32_i32$4;
                  i64toi32_i32$4 = $17$hi;
                  i64toi32_i32$2 = i64toi32_i32$3 ? $132 : $17_1;
                  i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
                  $333 = i64toi32_i32$2;
                  $333$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $16$hi;
                  i64toi32_i32$2 = i64toi32_i32$4;
                  i64toi32_i32$3 = $326$hi;
                  i64toi32_i32$1 = $333$hi;
                  $85($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0, $326 | 0, i64toi32_i32$3 | 0, $333 | 0, i64toi32_i32$1 | 0);
                  i64toi32_i32$1 = $19$hi;
                  i64toi32_i32$2 = $19_1;
                  i64toi32_i32$3 = -1;
                  i64toi32_i32$0 = -1;
                  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                  }
                  $19_1 = i64toi32_i32$4;
                  $19$hi = i64toi32_i32$5;
                  i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
                  i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                  $17_1 = i64toi32_i32$5;
                  $17$hi = i64toi32_i32$2;
                  i64toi32_i32$1 = $6_1;
                  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
                  $16_1 = i64toi32_i32$2;
                  $16$hi = i64toi32_i32$5;
                  $10_1 = $10_1 << 1 | 0 | $7_1 | 0;
                  if (($10_1 | 0) > (-1 | 0)) {
                    continue label$37;
                  }
                  break label$37;
                };
              }
              label$38: {
                label$39: {
                  i64toi32_i32$5 = $19$hi;
                  i64toi32_i32$2 = $3_1;
                  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
                  $350$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $19$hi;
                  i64toi32_i32$1 = $19_1;
                  i64toi32_i32$2 = $350$hi;
                  i64toi32_i32$0 = $3_1;
                  i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
                  i64toi32_i32$4 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$2 | 0;
                  i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
                  i64toi32_i32$5 = i64toi32_i32$3;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$0 = 32;
                  i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
                  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                  }
                  $14_1 = i64toi32_i32$2;
                  $14$hi = i64toi32_i32$3;
                  $7_1 = i64toi32_i32$2;
                  $358 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
                  $359 = $2_1;
                  i64toi32_i32$3 = 0;
                  $362$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $14$hi;
                  i64toi32_i32$4 = i64toi32_i32$2;
                  i64toi32_i32$5 = $362$hi;
                  i64toi32_i32$0 = $2_1;
                  if ((i64toi32_i32$3 | 0) < (i64toi32_i32$5 | 0)) {
                    $127 = 1;
                  } else {
                    if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$5 | 0)) {
                      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$0 >>> 0) {
                        $128 = 0;
                      } else {
                        $128 = 1;
                      }
                      $129 = $128;
                    } else {
                      $129 = 0;
                    }
                    $127 = $129;
                  }
                  $7_1 = $127 ? $358 : $359;
                  if (($7_1 | 0) < (113 | 0)) {
                    break label$39;
                  }
                  $92($6_1 + 384 | 0 | 0, $4_1 | 0);
                  i64toi32_i32$0 = $6_1 + 392 | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                  $14_1 = i64toi32_i32$4;
                  $14$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = 0;
                  $15_1 = 0;
                  $15$hi = i64toi32_i32$3;
                  i64toi32_i32$0 = $6_1;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 384 | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 388 | 0) >> 2] | 0;
                  $18_1 = i64toi32_i32$3;
                  $18$hi = i64toi32_i32$4;
                  i64toi32_i32$4 = 0;
                  $20_1 = 0;
                  $20$hi = i64toi32_i32$4;
                  break label$38;
                }
                $90($6_1 + 352 | 0 | 0, + +$50(+1.0, 144 - $7_1 | 0 | 0));
                $92($6_1 + 336 | 0 | 0, $4_1 | 0);
                i64toi32_i32$0 = $6_1;
                i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 352 | 0) >> 2] | 0;
                i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 356 | 0) >> 2] | 0;
                $386 = i64toi32_i32$4;
                $386$hi = i64toi32_i32$3;
                i64toi32_i32$0 = (i64toi32_i32$0 + 352 | 0) + 8 | 0;
                i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                $390 = i64toi32_i32$3;
                $390$hi = i64toi32_i32$4;
                i64toi32_i32$0 = $6_1;
                i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] | 0;
                i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] | 0;
                $18_1 = i64toi32_i32$4;
                $18$hi = i64toi32_i32$3;
                i64toi32_i32$0 = (i64toi32_i32$0 + 336 | 0) + 8 | 0;
                i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                $14_1 = i64toi32_i32$3;
                $14$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $386$hi;
                i64toi32_i32$3 = $390$hi;
                i64toi32_i32$0 = $18$hi;
                i64toi32_i32$5 = $14$hi;
                $51($6_1 + 368 | 0 | 0, $386 | 0, i64toi32_i32$4 | 0, $390 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$5 | 0);
                i64toi32_i32$3 = ($6_1 + 368 | 0) + 8 | 0;
                i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                $20_1 = i64toi32_i32$5;
                $20$hi = i64toi32_i32$0;
                i64toi32_i32$3 = $6_1;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 368 | 0) >> 2] | 0;
                i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 372 | 0) >> 2] | 0;
                $15_1 = i64toi32_i32$0;
                $15$hi = i64toi32_i32$5;
              }
              i64toi32_i32$5 = $16$hi;
              i64toi32_i32$5 = $17$hi;
              i64toi32_i32$5 = $16$hi;
              i64toi32_i32$0 = $17$hi;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 0;
              $7_1 = !($10_1 & 1 | 0) & (($7_1 | 0) < (32 | 0) & ($87($16_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
              $93($6_1 + 320 | 0 | 0, $10_1 | $7_1 | 0 | 0);
              i64toi32_i32$4 = $18$hi;
              i64toi32_i32$4 = $14$hi;
              i64toi32_i32$0 = $6_1;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
              $426 = i64toi32_i32$4;
              $426$hi = i64toi32_i32$3;
              i64toi32_i32$0 = (i64toi32_i32$0 + 320 | 0) + 8 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $430 = i64toi32_i32$3;
              $430$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $18$hi;
              i64toi32_i32$3 = $14$hi;
              i64toi32_i32$0 = $426$hi;
              i64toi32_i32$5 = $430$hi;
              $97($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$3 | 0, $426 | 0, i64toi32_i32$0 | 0, $430 | 0, i64toi32_i32$5 | 0);
              i64toi32_i32$3 = $6_1;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 304 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 308 | 0) >> 2] | 0;
              $434 = i64toi32_i32$5;
              $434$hi = i64toi32_i32$0;
              i64toi32_i32$3 = (i64toi32_i32$3 + 304 | 0) + 8 | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $438 = i64toi32_i32$0;
              $438$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $15$hi;
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$5 = $434$hi;
              i64toi32_i32$0 = $438$hi;
              i64toi32_i32$3 = $15$hi;
              i64toi32_i32$4 = $20$hi;
              $85($6_1 + 272 | 0 | 0, $434 | 0, i64toi32_i32$5 | 0, $438 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$4 | 0);
              i64toi32_i32$4 = $18$hi;
              i64toi32_i32$4 = $14$hi;
              i64toi32_i32$4 = $16$hi;
              i64toi32_i32$1 = $7_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$3 = $16$hi;
              i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $16_1;
              i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$4 : i64toi32_i32$3;
              $447 = i64toi32_i32$5;
              $447$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $17$hi;
              i64toi32_i32$3 = i64toi32_i32$1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$5 = $17$hi;
              i64toi32_i32$4 = i64toi32_i32$3 ? 0 : $17_1;
              i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$5;
              $450 = i64toi32_i32$4;
              $450$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $18$hi;
              i64toi32_i32$4 = $14$hi;
              i64toi32_i32$3 = $447$hi;
              i64toi32_i32$0 = $450$hi;
              $97($6_1 + 288 | 0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $447 | 0, i64toi32_i32$3 | 0, $450 | 0, i64toi32_i32$0 | 0);
              i64toi32_i32$4 = $6_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 288 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 292 | 0) >> 2] | 0;
              $454 = i64toi32_i32$0;
              $454$hi = i64toi32_i32$3;
              i64toi32_i32$4 = (i64toi32_i32$4 + 288 | 0) + 8 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $458 = i64toi32_i32$3;
              $458$hi = i64toi32_i32$0;
              i64toi32_i32$4 = $6_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 272 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 276 | 0) >> 2] | 0;
              $460 = i64toi32_i32$0;
              $460$hi = i64toi32_i32$3;
              i64toi32_i32$4 = (i64toi32_i32$4 + 272 | 0) + 8 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $464 = i64toi32_i32$3;
              $464$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $454$hi;
              i64toi32_i32$3 = $458$hi;
              i64toi32_i32$4 = $460$hi;
              i64toi32_i32$1 = $464$hi;
              $85($6_1 + 256 | 0 | 0, $454 | 0, i64toi32_i32$0 | 0, $458 | 0, i64toi32_i32$3 | 0, $460 | 0, i64toi32_i32$4 | 0, $464 | 0, i64toi32_i32$1 | 0);
              i64toi32_i32$3 = $6_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 256 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 260 | 0) >> 2] | 0;
              $468 = i64toi32_i32$1;
              $468$hi = i64toi32_i32$4;
              i64toi32_i32$3 = (i64toi32_i32$3 + 256 | 0) + 8 | 0;
              i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $472 = i64toi32_i32$4;
              $472$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $15$hi;
              i64toi32_i32$1 = $20$hi;
              i64toi32_i32$1 = $468$hi;
              i64toi32_i32$4 = $472$hi;
              i64toi32_i32$3 = $15$hi;
              i64toi32_i32$0 = $20$hi;
              $99($6_1 + 240 | 0 | 0, $468 | 0, i64toi32_i32$1 | 0, $472 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$0 | 0);
              label$40: {
                i64toi32_i32$4 = $6_1;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 240 | 0) >> 2] | 0;
                i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 244 | 0) >> 2] | 0;
                $16_1 = i64toi32_i32$0;
                $16$hi = i64toi32_i32$3;
                i64toi32_i32$4 = (i64toi32_i32$4 + 240 | 0) + 8 | 0;
                i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                $17_1 = i64toi32_i32$3;
                $17$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $16$hi;
                i64toi32_i32$3 = $17$hi;
                i64toi32_i32$4 = 0;
                i64toi32_i32$1 = 0;
                if ($87($16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
                  break label$40;
                }
                (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              }
              i64toi32_i32$1 = $16$hi;
              i64toi32_i32$1 = $17$hi;
              i64toi32_i32$1 = $19$hi;
              i64toi32_i32$1 = $16$hi;
              i64toi32_i32$4 = $17$hi;
              $52($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0);
              i64toi32_i32$3 = ($6_1 + 224 | 0) + 8 | 0;
              i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$4;
              $19$hi = i64toi32_i32$1;
              i64toi32_i32$3 = $6_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 224 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 228 | 0) >> 2] | 0;
              $16_1 = i64toi32_i32$1;
              $16$hi = i64toi32_i32$4;
              break label$21;
            }
            (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
            $92($6_1 + 208 | 0 | 0, $4_1 | 0);
            i64toi32_i32$3 = $6_1;
            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 208 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 212 | 0) >> 2] | 0;
            $504 = i64toi32_i32$4;
            $504$hi = i64toi32_i32$1;
            i64toi32_i32$3 = (i64toi32_i32$3 + 208 | 0) + 8 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
            $508 = i64toi32_i32$1;
            $508$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $504$hi;
            i64toi32_i32$1 = $508$hi;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 65536;
            $97($6_1 + 192 | 0 | 0, $504 | 0, i64toi32_i32$4 | 0, $508 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
            i64toi32_i32$1 = $6_1;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
            i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
            $512 = i64toi32_i32$0;
            $512$hi = i64toi32_i32$3;
            i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
            i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $516 = i64toi32_i32$3;
            $516$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $512$hi;
            i64toi32_i32$3 = $516$hi;
            i64toi32_i32$1 = 0;
            i64toi32_i32$4 = 65536;
            $97($6_1 + 176 | 0 | 0, $512 | 0, i64toi32_i32$0 | 0, $516 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
            i64toi32_i32$3 = ($6_1 + 176 | 0) + 8 | 0;
            i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
            $19_1 = i64toi32_i32$4;
            $19$hi = i64toi32_i32$1;
            i64toi32_i32$3 = $6_1;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 176 | 0) >> 2] | 0;
            i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 180 | 0) >> 2] | 0;
            $16_1 = i64toi32_i32$1;
            $16$hi = i64toi32_i32$4;
          }
          i64toi32_i32$4 = $16$hi;
          i64toi32_i32$1 = $0_1;
          HEAP32[i64toi32_i32$1 >> 2] = $16_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
          i64toi32_i32$4 = $19$hi;
          HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
          HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
          global$0 = $6_1 + 432 | 0;
        }

        function $59($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          $3_1 = $3_1 | 0;
          $4_1 = $4_1 | 0;
          $5_1 = $5_1 | 0;
          $6_1 = $6_1 | 0;
          var i64toi32_i32$4 = 0,i64toi32_i32$5 = 0,i64toi32_i32$1 = 0,$7_1 = 0,i64toi32_i32$3 = 0,i64toi32_i32$2 = 0,$18$hi = 0,$14_1 = 0,$18_1 = 0,$19$hi = 0,$19_1 = 0,$13_1 = 0,i64toi32_i32$0 = 0,$15_1 = 0,$16_1 = 0,$11_1 = 0,$21$hi = 0,$20$hi = 0,$8_1 = 0,$12_1 = 0,$21_1 = 0,$20_1 = 0,$9_1 = 0,$22$hi = 0,$23$hi = 0,$22_1 = 0,$23_1 = 0,$10_1 = 0,$165 = 0,$166 = 0,$167 = 0,$168 = 0,$169 = 0,$170 = 0,$171 = 0,$172 = 0,$173 = 0,$174 = 0,$175 = 0,$176 = 0,$177 = 0,$178 = 0,$179 = 0,$180 = 0,$17_1 = 0,$24_1 = 0.0,$124 = 0,$230 = 0,$230$hi = 0,$234 = 0,$234$hi = 0,$236 = 0,$236$hi = 0,$240 = 0,$240$hi = 0,$250$hi = 0,$259 = 0,$259$hi = 0,$263 = 0,$263$hi = 0,$267 = 0,$267$hi = 0,$271 = 0,$271$hi = 0,$281 = 0,$281$hi = 0,$290 = 0,$290$hi = 0,$294 = 0,$294$hi = 0,$298 = 0,$298$hi = 0,$302 = 0,$302$hi = 0,$351 = 0,$351$hi = 0,$355 = 0,$355$hi = 0,$357 = 0,$357$hi = 0,$361 = 0,$361$hi = 0,$380 = 0,$380$hi = 0,$384 = 0,$384$hi = 0,$386 = 0,$386$hi = 0,$390 = 0,$390$hi = 0,$401 = 0,$401$hi = 0,$405 = 0,$405$hi = 0,$407 = 0,$407$hi = 0,$411 = 0,$411$hi = 0,$439 = 0,$439$hi = 0,$443 = 0,$443$hi = 0,$445 = 0,$445$hi = 0,$449 = 0,$449$hi = 0,$459 = 0,$459$hi = 0,$463 = 0,$463$hi = 0,$465 = 0,$465$hi = 0,$469 = 0,$469$hi = 0,$508 = 0,$586$hi = 0,$588$hi = 0,$596 = 0,$596$hi = 0,$738 = 0,$738$hi = 0,$742 = 0,$742$hi = 0,$744 = 0,$744$hi = 0,$748 = 0,$748$hi = 0,$767 = 0,$767$hi = 0,$771 = 0,$771$hi = 0,$813 = 0,$874 = 0,$874$hi = 0,$878 = 0,$878$hi = 0,$897 = 0,$897$hi = 0,$901 = 0,$901$hi = 0,$919 = 0,$919$hi = 0,$923 = 0,$923$hi = 0,$960 = 0,$960$hi = 0,$964 = 0,$964$hi = 0,$983 = 0,$983$hi = 0,$987 = 0,$987$hi = 0,$1010 = 0,$1010$hi = 0,$1014 = 0,$1014$hi = 0,$1030 = 0,$1030$hi = 0,$1034 = 0,$1034$hi = 0,$1048 = 0,$1048$hi = 0,$1052 = 0,$1052$hi = 0,$1073 = 0,$1073$hi = 0,$1077 = 0,$1077$hi = 0,$1100 = 0,$1100$hi = 0,$1104 = 0,$1104$hi = 0,$1109$hi = 0,$181 = 0,$1116$hi = 0,$182 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $7_1 = global$0 - 8976 | 0;
          global$0 = $7_1;
          $8_1 = 0;
          $9_1 = 0 - $4_1 | 0;
          $10_1 = $9_1 - $3_1 | 0;
          i64toi32_i32$0 = 0;
          $18_1 = 0;
          $18$hi = i64toi32_i32$0;
          $11_1 = 0;
          label$1: {
            label$2: {
              label$3: {
                label$4: while (1) {
                  label$5: {
                    if (($2_1 | 0) == (48 | 0)) {
                      break label$5;
                    }
                    if (($2_1 | 0) != (46 | 0)) {
                      break label$1;
                    }
                    $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                    if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                      break label$3;
                    }
                    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                    $2_1 = HEAPU8[$2_1 >> 0] | 0;
                    break label$2;
                  }
                  label$6: {
                    $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                    if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                      break label$6;
                    }
                    $11_1 = 1;
                    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                    $2_1 = HEAPU8[$2_1 >> 0] | 0;
                    continue label$4;
                  }
                  $11_1 = 1;
                  $2_1 = $49($1_1 | 0) | 0;
                  continue label$4;
                };
              }
              $2_1 = $49($1_1 | 0) | 0;
            }
            $8_1 = 1;
            i64toi32_i32$0 = 0;
            $18_1 = 0;
            $18$hi = i64toi32_i32$0;
            if (($2_1 | 0) != (48 | 0)) {
              break label$1;
            }
            label$7: while (1) {
              label$8: {
                label$9: {
                  $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                  if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$9;
                  }
                  HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                  $2_1 = HEAPU8[$2_1 >> 0] | 0;
                  break label$8;
                }
                $2_1 = $49($1_1 | 0) | 0;
              }
              i64toi32_i32$0 = $18$hi;
              i64toi32_i32$2 = $18_1;
              i64toi32_i32$1 = -1;
              i64toi32_i32$3 = -1;
              i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
              i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
              }
              $18_1 = i64toi32_i32$4;
              $18$hi = i64toi32_i32$5;
              if (($2_1 | 0) == (48 | 0)) {
                continue label$7;
              }
              break label$7;
            };
            $11_1 = 1;
            $8_1 = 1;
          }
          $12_1 = 0;
          HEAP32[($7_1 + 784 | 0) >> 2] = 0;
          $13_1 = $2_1 + -48 | 0;
          label$10: {
            label$11: {
              label$12: {
                label$13: {
                  label$14: {
                    label$15: {
                      label$16: {
                        $14_1 = ($2_1 | 0) == (46 | 0);
                        if ($14_1) {
                          break label$16;
                        }
                        i64toi32_i32$5 = 0;
                        $19_1 = 0;
                        $19$hi = i64toi32_i32$5;
                        if ($13_1 >>> 0 <= 9 >>> 0) {
                          break label$16;
                        }
                        $15_1 = 0;
                        $16_1 = 0;
                        break label$15;
                      }
                      i64toi32_i32$5 = 0;
                      $19_1 = 0;
                      $19$hi = i64toi32_i32$5;
                      $16_1 = 0;
                      $15_1 = 0;
                      $12_1 = 0;
                      label$17: while (1) {
                        label$18: {
                          label$19: {
                            if (!($14_1 & 1 | 0)) {
                              break label$19;
                            }
                            label$20: {
                              if ($8_1) {
                                break label$20;
                              }
                              i64toi32_i32$5 = $19$hi;
                              $18_1 = $19_1;
                              $18$hi = i64toi32_i32$5;
                              $8_1 = 1;
                              break label$18;
                            }
                            $14_1 = !$11_1;
                            break label$14;
                          }
                          i64toi32_i32$5 = $19$hi;
                          i64toi32_i32$0 = $19_1;
                          i64toi32_i32$2 = 0;
                          i64toi32_i32$3 = 1;
                          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
                          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
                          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                          }
                          $19_1 = i64toi32_i32$1;
                          $19$hi = i64toi32_i32$4;
                          label$21: {
                            if (($15_1 | 0) > (2044 | 0)) {
                              break label$21;
                            }
                            $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
                            label$22: {
                              if (!$16_1) {
                                break label$22;
                              }
                              $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
                            }
                            i64toi32_i32$4 = $19$hi;
                            $12_1 = ($2_1 | 0) == (48 | 0) ? $12_1 : $19_1;
                            HEAP32[$14_1 >> 2] = $13_1;
                            $11_1 = 1;
                            $2_1 = $16_1 + 1 | 0;
                            $124 = $2_1;
                            $2_1 = ($2_1 | 0) == (9 | 0);
                            $16_1 = $2_1 ? 0 : $124;
                            $15_1 = $15_1 + $2_1 | 0;
                            break label$18;
                          }
                          if (($2_1 | 0) == (48 | 0)) {
                            break label$18;
                          }
                          HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
                          $12_1 = 18396;
                        }
                        label$23: {
                          label$24: {
                            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                            if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
                              break label$24;
                            }
                            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                            $2_1 = HEAPU8[$2_1 >> 0] | 0;
                            break label$23;
                          }
                          $2_1 = $49($1_1 | 0) | 0;
                        }
                        $13_1 = $2_1 + -48 | 0;
                        $14_1 = ($2_1 | 0) == (46 | 0);
                        if ($14_1) {
                          continue label$17;
                        }
                        if ($13_1 >>> 0 < 10 >>> 0) {
                          continue label$17;
                        }
                        break label$17;
                      };
                    }
                    i64toi32_i32$4 = $18$hi;
                    i64toi32_i32$4 = $19$hi;
                    i64toi32_i32$2 = $8_1;
                    i64toi32_i32$4 = $18$hi;
                    i64toi32_i32$0 = $19$hi;
                    i64toi32_i32$3 = i64toi32_i32$2 ? $18_1 : $19_1;
                    i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
                    $18_1 = i64toi32_i32$3;
                    $18$hi = i64toi32_i32$5;
                    label$25: {
                      if (!$11_1) {
                        break label$25;
                      }
                      if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
                        break label$25;
                      }
                      label$26: {
                        i64toi32_i32$5 = $60($1_1 | 0, $6_1 | 0) | 0;
                        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                        $20_1 = i64toi32_i32$5;
                        $20$hi = i64toi32_i32$3;
                        i64toi32_i32$2 = i64toi32_i32$5;
                        i64toi32_i32$5 = -2147483648;
                        i64toi32_i32$4 = 0;
                        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                          break label$26;
                        }
                        if (!$6_1) {
                          break label$12;
                        }
                        i64toi32_i32$2 = 0;
                        $20_1 = 0;
                        $20$hi = i64toi32_i32$2;
                        i64toi32_i32$4 = $1_1;
                        i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
                        i64toi32_i32$4 = i64toi32_i32$2;
                        i64toi32_i32$2 = 0;
                        i64toi32_i32$5 = 0;
                        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
                          $165 = 1;
                        } else {
                          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
                            if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
                              $166 = 0;
                            } else {
                              $166 = 1;
                            }
                            $167 = $166;
                          } else {
                            $167 = 0;
                          }
                          $165 = $167;
                        }
                        if ($165) {
                          break label$26;
                        }
                        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                      }
                      i64toi32_i32$4 = $20$hi;
                      i64toi32_i32$4 = $18$hi;
                      i64toi32_i32$4 = $20$hi;
                      i64toi32_i32$5 = $20_1;
                      i64toi32_i32$3 = $18$hi;
                      i64toi32_i32$2 = $18_1;
                      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
                      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
                      }
                      $18_1 = i64toi32_i32$0;
                      $18$hi = i64toi32_i32$1;
                      break label$11;
                    }
                    $14_1 = !$11_1;
                    if (($2_1 | 0) < (0 | 0)) {
                      break label$13;
                    }
                  }
                  i64toi32_i32$4 = $1_1;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
                  i64toi32_i32$4 = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$2 = 0;
                  if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
                    $168 = 1;
                  } else {
                    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
                      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
                        $169 = 0;
                      } else {
                        $169 = 1;
                      }
                      $170 = $169;
                    } else {
                      $170 = 0;
                    }
                    $168 = $170;
                  }
                  if ($168) {
                    break label$13;
                  }
                  HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                }
                if (!$14_1) {
                  break label$11;
                }
                (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              }
              i64toi32_i32$4 = 0;
              $19_1 = 0;
              $19$hi = i64toi32_i32$4;
              i64toi32_i32$4 = 0;
              $48($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
              i64toi32_i32$4 = 0;
              $18_1 = 0;
              $18$hi = i64toi32_i32$4;
              break label$10;
            }
            label$27: {
              $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
              if ($1_1) {
                break label$27;
              }
              $90($7_1 | 0, +(+($5_1 | 0) * 0.0));
              i64toi32_i32$2 = $7_1 + 8 | 0;
              i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $18_1 = i64toi32_i32$4;
              $18$hi = i64toi32_i32$5;
              i64toi32_i32$2 = $7_1;
              i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$5;
              $19$hi = i64toi32_i32$4;
              break label$10;
            }
            label$28: {
              i64toi32_i32$4 = $19$hi;
              i64toi32_i32$2 = $19_1;
              i64toi32_i32$5 = 0;
              i64toi32_i32$1 = 9;
              if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
                $171 = 1;
              } else {
                if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
                  if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
                    $172 = 0;
                  } else {
                    $172 = 1;
                  }
                  $173 = $172;
                } else {
                  $173 = 0;
                }
                $171 = $173;
              }
              if ($171) {
                break label$28;
              }
              i64toi32_i32$2 = $18$hi;
              i64toi32_i32$2 = $19$hi;
              i64toi32_i32$2 = $18$hi;
              i64toi32_i32$1 = $18_1;
              i64toi32_i32$4 = $19$hi;
              i64toi32_i32$5 = $19_1;
              if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) {
                break label$28;
              }
              label$29: {
                if (($3_1 | 0) > (30 | 0)) {
                  break label$29;
                }
                if ($1_1 >>> $3_1 | 0) {
                  break label$28;
                }
              }
              $92($7_1 + 48 | 0 | 0, $5_1 | 0);
              $93($7_1 + 32 | 0 | 0, $1_1 | 0);
              i64toi32_i32$5 = $7_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
              $230 = i64toi32_i32$1;
              $230$hi = i64toi32_i32$2;
              i64toi32_i32$5 = (i64toi32_i32$5 + 48 | 0) + 8 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
              $234 = i64toi32_i32$2;
              $234$hi = i64toi32_i32$1;
              i64toi32_i32$5 = $7_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
              $236 = i64toi32_i32$1;
              $236$hi = i64toi32_i32$2;
              i64toi32_i32$5 = (i64toi32_i32$5 + 32 | 0) + 8 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
              $240 = i64toi32_i32$2;
              $240$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $230$hi;
              i64toi32_i32$2 = $234$hi;
              i64toi32_i32$5 = $236$hi;
              i64toi32_i32$4 = $240$hi;
              $97($7_1 + 16 | 0 | 0, $230 | 0, i64toi32_i32$1 | 0, $234 | 0, i64toi32_i32$2 | 0, $236 | 0, i64toi32_i32$5 | 0, $240 | 0, i64toi32_i32$4 | 0);
              i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
              i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $18_1 = i64toi32_i32$4;
              $18$hi = i64toi32_i32$5;
              i64toi32_i32$2 = $7_1;
              i64toi32_i32$5 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$5;
              $19$hi = i64toi32_i32$4;
              break label$10;
            }
            label$30: {
              i64toi32_i32$4 = $18$hi;
              i64toi32_i32$4 = 0;
              $250$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $18$hi;
              i64toi32_i32$2 = $18_1;
              i64toi32_i32$5 = $250$hi;
              i64toi32_i32$1 = $9_1 >>> 1 | 0;
              if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
                $174 = 1;
              } else {
                if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
                  if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
                    $175 = 0;
                  } else {
                    $175 = 1;
                  }
                  $176 = $175;
                } else {
                  $176 = 0;
                }
                $174 = $176;
              }
              if ($174) {
                break label$30;
              }
              (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              $92($7_1 + 96 | 0 | 0, $5_1 | 0);
              i64toi32_i32$1 = $7_1;
              i64toi32_i32$2 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
              $259 = i64toi32_i32$2;
              $259$hi = i64toi32_i32$4;
              i64toi32_i32$1 = ($7_1 + 96 | 0) + 8 | 0;
              i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $263 = i64toi32_i32$4;
              $263$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $259$hi;
              i64toi32_i32$4 = $263$hi;
              i64toi32_i32$1 = -1;
              i64toi32_i32$5 = 2147418111;
              $97($7_1 + 80 | 0 | 0, $259 | 0, i64toi32_i32$2 | 0, $263 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
              i64toi32_i32$4 = $7_1;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
              $267 = i64toi32_i32$5;
              $267$hi = i64toi32_i32$1;
              i64toi32_i32$4 = (i64toi32_i32$4 + 80 | 0) + 8 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $271 = i64toi32_i32$1;
              $271$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $267$hi;
              i64toi32_i32$1 = $271$hi;
              i64toi32_i32$4 = -1;
              i64toi32_i32$2 = 2147418111;
              $97($7_1 + 64 | 0 | 0, $267 | 0, i64toi32_i32$5 | 0, $271 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$2 | 0);
              i64toi32_i32$1 = ($7_1 + 64 | 0) + 8 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $18_1 = i64toi32_i32$2;
              $18$hi = i64toi32_i32$4;
              i64toi32_i32$1 = $7_1;
              i64toi32_i32$4 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$4;
              $19$hi = i64toi32_i32$2;
              break label$10;
            }
            label$31: {
              i64toi32_i32$2 = $18$hi;
              i64toi32_i32$4 = $4_1 + -226 | 0;
              i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
              $281 = i64toi32_i32$4;
              $281$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $18$hi;
              i64toi32_i32$1 = $18_1;
              i64toi32_i32$4 = $281$hi;
              i64toi32_i32$5 = $281;
              if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
                $177 = 1;
              } else {
                if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
                  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                    $178 = 0;
                  } else {
                    $178 = 1;
                  }
                  $179 = $178;
                } else {
                  $179 = 0;
                }
                $177 = $179;
              }
              if ($177) {
                break label$31;
              }
              (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              $92($7_1 + 144 | 0 | 0, $5_1 | 0);
              i64toi32_i32$5 = $7_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
              $290 = i64toi32_i32$1;
              $290$hi = i64toi32_i32$2;
              i64toi32_i32$5 = (i64toi32_i32$5 + 144 | 0) + 8 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
              $294 = i64toi32_i32$2;
              $294$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $290$hi;
              i64toi32_i32$2 = $294$hi;
              i64toi32_i32$5 = 0;
              i64toi32_i32$4 = 65536;
              $97($7_1 + 128 | 0 | 0, $290 | 0, i64toi32_i32$1 | 0, $294 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0);
              i64toi32_i32$2 = $7_1;
              i64toi32_i32$4 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
              $298 = i64toi32_i32$4;
              $298$hi = i64toi32_i32$5;
              i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $302 = i64toi32_i32$5;
              $302$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $298$hi;
              i64toi32_i32$5 = $302$hi;
              i64toi32_i32$2 = 0;
              i64toi32_i32$1 = 65536;
              $97($7_1 + 112 | 0 | 0, $298 | 0, i64toi32_i32$4 | 0, $302 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
              i64toi32_i32$5 = ($7_1 + 112 | 0) + 8 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
              $18_1 = i64toi32_i32$1;
              $18$hi = i64toi32_i32$2;
              i64toi32_i32$5 = $7_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$2;
              $19$hi = i64toi32_i32$1;
              break label$10;
            }
            label$32: {
              if (!$16_1) {
                break label$32;
              }
              label$33: {
                if (($16_1 | 0) > (8 | 0)) {
                  break label$33;
                }
                $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                label$34: while (1) {
                  $1_1 = Math_imul($1_1, 10);
                  $16_1 = $16_1 + 1 | 0;
                  if (($16_1 | 0) != (9 | 0)) {
                    continue label$34;
                  }
                  break label$34;
                };
                HEAP32[$2_1 >> 2] = $1_1;
              }
              $15_1 = $15_1 + 1 | 0;
            }
            i64toi32_i32$1 = $18$hi;
            $16_1 = $18_1;
            label$35: {
              if (($12_1 | 0) >= (9 | 0)) {
                break label$35;
              }
              if (($12_1 | 0) > ($16_1 | 0)) {
                break label$35;
              }
              if (($16_1 | 0) > (17 | 0)) {
                break label$35;
              }
              label$36: {
                if (($16_1 | 0) != (9 | 0)) {
                  break label$36;
                }
                $92($7_1 + 192 | 0 | 0, $5_1 | 0);
                $93($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
                i64toi32_i32$5 = $7_1;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 192 | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 196 | 0) >> 2] | 0;
                $351 = i64toi32_i32$1;
                $351$hi = i64toi32_i32$2;
                i64toi32_i32$5 = (i64toi32_i32$5 + 192 | 0) + 8 | 0;
                i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                $355 = i64toi32_i32$2;
                $355$hi = i64toi32_i32$1;
                i64toi32_i32$5 = $7_1;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
                $357 = i64toi32_i32$1;
                $357$hi = i64toi32_i32$2;
                i64toi32_i32$5 = (i64toi32_i32$5 + 176 | 0) + 8 | 0;
                i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                $361 = i64toi32_i32$2;
                $361$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $351$hi;
                i64toi32_i32$2 = $355$hi;
                i64toi32_i32$5 = $357$hi;
                i64toi32_i32$4 = $361$hi;
                $97($7_1 + 160 | 0 | 0, $351 | 0, i64toi32_i32$1 | 0, $355 | 0, i64toi32_i32$2 | 0, $357 | 0, i64toi32_i32$5 | 0, $361 | 0, i64toi32_i32$4 | 0);
                i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
                i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                $18_1 = i64toi32_i32$4;
                $18$hi = i64toi32_i32$5;
                i64toi32_i32$2 = $7_1;
                i64toi32_i32$5 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
                i64toi32_i32$4 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
                $19_1 = i64toi32_i32$5;
                $19$hi = i64toi32_i32$4;
                break label$10;
              }
              label$37: {
                if (($16_1 | 0) > (8 | 0)) {
                  break label$37;
                }
                $92($7_1 + 272 | 0 | 0, $5_1 | 0);
                $93($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
                i64toi32_i32$2 = $7_1;
                i64toi32_i32$4 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
                i64toi32_i32$5 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
                $380 = i64toi32_i32$4;
                $380$hi = i64toi32_i32$5;
                i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
                i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                $384 = i64toi32_i32$5;
                $384$hi = i64toi32_i32$4;
                i64toi32_i32$2 = $7_1;
                i64toi32_i32$4 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
                i64toi32_i32$5 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
                $386 = i64toi32_i32$4;
                $386$hi = i64toi32_i32$5;
                i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
                i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                $390 = i64toi32_i32$5;
                $390$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $380$hi;
                i64toi32_i32$5 = $384$hi;
                i64toi32_i32$2 = $386$hi;
                i64toi32_i32$1 = $390$hi;
                $97($7_1 + 240 | 0 | 0, $380 | 0, i64toi32_i32$4 | 0, $384 | 0, i64toi32_i32$5 | 0, $386 | 0, i64toi32_i32$2 | 0, $390 | 0, i64toi32_i32$1 | 0);
                $92($7_1 + 224 | 0 | 0, HEAP32[(((8 - $16_1 | 0) << 2 | 0) + 66112 | 0) >> 2] | 0 | 0);
                i64toi32_i32$5 = $7_1;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
                $401 = i64toi32_i32$1;
                $401$hi = i64toi32_i32$2;
                i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
                i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                $405 = i64toi32_i32$2;
                $405$hi = i64toi32_i32$1;
                i64toi32_i32$5 = $7_1;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 224 | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 228 | 0) >> 2] | 0;
                $407 = i64toi32_i32$1;
                $407$hi = i64toi32_i32$2;
                i64toi32_i32$5 = (i64toi32_i32$5 + 224 | 0) + 8 | 0;
                i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                $411 = i64toi32_i32$2;
                $411$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $401$hi;
                i64toi32_i32$2 = $405$hi;
                i64toi32_i32$5 = $407$hi;
                i64toi32_i32$4 = $411$hi;
                $89($7_1 + 208 | 0 | 0, $401 | 0, i64toi32_i32$1 | 0, $405 | 0, i64toi32_i32$2 | 0, $407 | 0, i64toi32_i32$5 | 0, $411 | 0, i64toi32_i32$4 | 0);
                i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
                i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                $18_1 = i64toi32_i32$4;
                $18$hi = i64toi32_i32$5;
                i64toi32_i32$2 = $7_1;
                i64toi32_i32$5 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
                i64toi32_i32$4 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
                $19_1 = i64toi32_i32$5;
                $19$hi = i64toi32_i32$4;
                break label$10;
              }
              $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
              label$38: {
                $2_1 = ($3_1 + Math_imul($16_1, -3) | 0) + 27 | 0;
                if (($2_1 | 0) > (30 | 0)) {
                  break label$38;
                }
                if ($1_1 >>> $2_1 | 0) {
                  break label$35;
                }
              }
              $92($7_1 + 352 | 0 | 0, $5_1 | 0);
              $93($7_1 + 336 | 0 | 0, $1_1 | 0);
              i64toi32_i32$2 = $7_1;
              i64toi32_i32$4 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
              $439 = i64toi32_i32$4;
              $439$hi = i64toi32_i32$5;
              i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $443 = i64toi32_i32$5;
              $443$hi = i64toi32_i32$4;
              i64toi32_i32$2 = $7_1;
              i64toi32_i32$4 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
              $445 = i64toi32_i32$4;
              $445$hi = i64toi32_i32$5;
              i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $449 = i64toi32_i32$5;
              $449$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $439$hi;
              i64toi32_i32$5 = $443$hi;
              i64toi32_i32$2 = $445$hi;
              i64toi32_i32$1 = $449$hi;
              $97($7_1 + 320 | 0 | 0, $439 | 0, i64toi32_i32$4 | 0, $443 | 0, i64toi32_i32$5 | 0, $445 | 0, i64toi32_i32$2 | 0, $449 | 0, i64toi32_i32$1 | 0);
              $92($7_1 + 304 | 0 | 0, HEAP32[(($16_1 << 2 | 0) + 66072 | 0) >> 2] | 0 | 0);
              i64toi32_i32$5 = $7_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 320 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 324 | 0) >> 2] | 0;
              $459 = i64toi32_i32$1;
              $459$hi = i64toi32_i32$2;
              i64toi32_i32$5 = (i64toi32_i32$5 + 320 | 0) + 8 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
              $463 = i64toi32_i32$2;
              $463$hi = i64toi32_i32$1;
              i64toi32_i32$5 = $7_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 304 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 308 | 0) >> 2] | 0;
              $465 = i64toi32_i32$1;
              $465$hi = i64toi32_i32$2;
              i64toi32_i32$5 = (i64toi32_i32$5 + 304 | 0) + 8 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
              $469 = i64toi32_i32$2;
              $469$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $459$hi;
              i64toi32_i32$2 = $463$hi;
              i64toi32_i32$5 = $465$hi;
              i64toi32_i32$4 = $469$hi;
              $97($7_1 + 288 | 0 | 0, $459 | 0, i64toi32_i32$1 | 0, $463 | 0, i64toi32_i32$2 | 0, $465 | 0, i64toi32_i32$5 | 0, $469 | 0, i64toi32_i32$4 | 0);
              i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
              i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $18_1 = i64toi32_i32$4;
              $18$hi = i64toi32_i32$5;
              i64toi32_i32$2 = $7_1;
              i64toi32_i32$5 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$5;
              $19$hi = i64toi32_i32$4;
              break label$10;
            }
            label$39: while (1) {
              $14_1 = $15_1;
              $15_1 = $14_1 + -1 | 0;
              if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
                continue label$39;
              }
              break label$39;
            };
            $12_1 = 0;
            label$40: {
              label$41: {
                $1_1 = ($16_1 | 0) % (9 | 0) | 0;
                if ($1_1) {
                  break label$41;
                }
                $13_1 = 0;
                break label$40;
              }
              $13_1 = 0;
              $9_1 = ($16_1 | 0) < (0 | 0) ? $1_1 + 9 | 0 : $1_1;
              label$42: {
                label$43: {
                  if ($14_1) {
                    break label$43;
                  }
                  $14_1 = 0;
                  break label$42;
                }
                $11_1 = HEAP32[(((8 - $9_1 | 0) << 2 | 0) + 66112 | 0) >> 2] | 0;
                $6_1 = (1e9 | 0) / ($11_1 | 0) | 0;
                $2_1 = 0;
                $1_1 = 0;
                $13_1 = 0;
                label$44: while (1) {
                  $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
                  $508 = $15_1;
                  $15_1 = HEAP32[$15_1 >> 2] | 0;
                  $8_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
                  $2_1 = $8_1 + $2_1 | 0;
                  HEAP32[$508 >> 2] = $2_1;
                  $2_1 = ($1_1 | 0) == ($13_1 | 0) & !$2_1 | 0;
                  $13_1 = $2_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
                  $16_1 = $2_1 ? $16_1 + -9 | 0 : $16_1;
                  $2_1 = Math_imul($6_1, $15_1 - Math_imul($8_1, $11_1) | 0);
                  $1_1 = $1_1 + 1 | 0;
                  if (($1_1 | 0) != ($14_1 | 0)) {
                    continue label$44;
                  }
                  break label$44;
                };
                if (!$2_1) {
                  break label$42;
                }
                HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $2_1;
                $14_1 = $14_1 + 1 | 0;
              }
              $16_1 = ($16_1 - $9_1 | 0) + 9 | 0;
            }
            label$45: while (1) {
              $9_1 = ($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0;
              $6_1 = ($16_1 | 0) < (36 | 0);
              label$46: {
                label$47: while (1) {
                  label$48: {
                    if ($6_1) {
                      break label$48;
                    }
                    if (($16_1 | 0) != (36 | 0)) {
                      break label$46;
                    }
                    if ((HEAP32[$9_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
                      break label$46;
                    }
                  }
                  $15_1 = $14_1 + 2047 | 0;
                  $11_1 = 0;
                  label$49: while (1) {
                    $2_1 = $14_1;
                    label$50: {
                      label$51: {
                        $1_1 = $15_1 & 2047 | 0;
                        $14_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
                        i64toi32_i32$2 = $14_1;
                        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                        i64toi32_i32$5 = 0;
                        i64toi32_i32$2 = i64toi32_i32$4;
                        i64toi32_i32$4 = 0;
                        i64toi32_i32$1 = 29;
                        i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
                        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                          i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
                          $180 = 0;
                        } else {
                          i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
                          $180 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
                        }
                        $586$hi = i64toi32_i32$4;
                        i64toi32_i32$4 = 0;
                        $588$hi = i64toi32_i32$4;
                        i64toi32_i32$4 = $586$hi;
                        i64toi32_i32$5 = $180;
                        i64toi32_i32$2 = $588$hi;
                        i64toi32_i32$1 = $11_1;
                        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
                        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
                        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
                          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                        }
                        $18_1 = i64toi32_i32$3;
                        $18$hi = i64toi32_i32$0;
                        i64toi32_i32$4 = i64toi32_i32$3;
                        i64toi32_i32$5 = 0;
                        i64toi32_i32$1 = 1000000001;
                        if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
                          break label$51;
                        }
                        $11_1 = 0;
                        break label$50;
                      }
                      i64toi32_i32$4 = $18$hi;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$0 = __wasm_i64_udiv($18_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
                      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                      $19_1 = i64toi32_i32$0;
                      $19$hi = i64toi32_i32$4;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$0 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
                      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                      $596 = i64toi32_i32$0;
                      $596$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $18$hi;
                      i64toi32_i32$1 = $18_1;
                      i64toi32_i32$0 = $596$hi;
                      i64toi32_i32$5 = $596;
                      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
                      i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$0 | 0;
                      i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
                      $18_1 = i64toi32_i32$2;
                      $18$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $19$hi;
                      $11_1 = $19_1;
                    }
                    i64toi32_i32$3 = $18$hi;
                    $15_1 = $18_1;
                    HEAP32[$14_1 >> 2] = $15_1;
                    $8_1 = ($2_1 + -1 | 0) & 2047 | 0;
                    $14_1 = ($1_1 | 0) != ($8_1 | 0) ? $2_1 : ($1_1 | 0) == ($13_1 | 0) ? $2_1 : $15_1 ? $2_1 : $1_1;
                    $15_1 = $1_1 + -1 | 0;
                    if (($1_1 | 0) != ($13_1 | 0)) {
                      continue label$49;
                    }
                    break label$49;
                  };
                  $12_1 = $12_1 + -29 | 0;
                  $14_1 = $2_1;
                  if (!$11_1) {
                    continue label$47;
                  }
                  break label$47;
                };
                label$52: {
                  label$53: {
                    $13_1 = ($13_1 + -1 | 0) & 2047 | 0;
                    if (($13_1 | 0) == ($2_1 | 0)) {
                      break label$53;
                    }
                    $14_1 = $2_1;
                    break label$52;
                  }
                  $1_1 = ($7_1 + 784 | 0) + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
                  HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0) | 0;
                  $14_1 = $8_1;
                }
                $16_1 = $16_1 + 9 | 0;
                HEAP32[(($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0) >> 2] = $11_1;
                continue label$45;
              }
              break label$45;
            };
            label$54: {
              label$55: while (1) {
                $17_1 = ($14_1 + 1 | 0) & 2047 | 0;
                $9_1 = ($7_1 + 784 | 0) + ((($14_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
                label$56: while (1) {
                  $15_1 = ($16_1 | 0) > (45 | 0) ? 9 : 1;
                  label$57: {
                    label$58: while (1) {
                      $11_1 = $13_1;
                      $1_1 = 0;
                      label$59: {
                        label$60: {
                          label$61: while (1) {
                            $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
                            if (($2_1 | 0) == ($14_1 | 0)) {
                              break label$60;
                            }
                            $2_1 = HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0;
                            $13_1 = HEAP32[(($1_1 << 2 | 0) + 66096 | 0) >> 2] | 0;
                            if ($2_1 >>> 0 < $13_1 >>> 0) {
                              break label$60;
                            }
                            if ($2_1 >>> 0 > $13_1 >>> 0) {
                              break label$59;
                            }
                            $1_1 = $1_1 + 1 | 0;
                            if (($1_1 | 0) != (4 | 0)) {
                              continue label$61;
                            }
                            break label$61;
                          };
                        }
                        if (($16_1 | 0) != (36 | 0)) {
                          break label$59;
                        }
                        i64toi32_i32$3 = 0;
                        $18_1 = 0;
                        $18$hi = i64toi32_i32$3;
                        $1_1 = 0;
                        i64toi32_i32$3 = 0;
                        $19_1 = 0;
                        $19$hi = i64toi32_i32$3;
                        label$62: while (1) {
                          label$63: {
                            $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
                            if (($2_1 | 0) != ($14_1 | 0)) {
                              break label$63;
                            }
                            $14_1 = ($14_1 + 1 | 0) & 2047 | 0;
                            HEAP32[((($14_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
                          }
                          $93($7_1 + 768 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
                          i64toi32_i32$3 = $18$hi;
                          i64toi32_i32$3 = $19$hi;
                          i64toi32_i32$3 = $18$hi;
                          i64toi32_i32$1 = $19$hi;
                          i64toi32_i32$4 = 0;
                          i64toi32_i32$5 = 1075633366;
                          $97($7_1 + 752 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 1342177280 | 0, i64toi32_i32$5 | 0);
                          i64toi32_i32$1 = $7_1;
                          i64toi32_i32$5 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
                          i64toi32_i32$4 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
                          $738 = i64toi32_i32$5;
                          $738$hi = i64toi32_i32$4;
                          i64toi32_i32$1 = ($7_1 + 752 | 0) + 8 | 0;
                          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                          $742 = i64toi32_i32$4;
                          $742$hi = i64toi32_i32$5;
                          i64toi32_i32$1 = $7_1;
                          i64toi32_i32$5 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
                          i64toi32_i32$4 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
                          $744 = i64toi32_i32$5;
                          $744$hi = i64toi32_i32$4;
                          i64toi32_i32$1 = ($7_1 + 768 | 0) + 8 | 0;
                          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                          $748 = i64toi32_i32$4;
                          $748$hi = i64toi32_i32$5;
                          i64toi32_i32$5 = $738$hi;
                          i64toi32_i32$4 = $742$hi;
                          i64toi32_i32$1 = $744$hi;
                          i64toi32_i32$3 = $748$hi;
                          $85($7_1 + 736 | 0 | 0, $738 | 0, i64toi32_i32$5 | 0, $742 | 0, i64toi32_i32$4 | 0, $744 | 0, i64toi32_i32$1 | 0, $748 | 0, i64toi32_i32$3 | 0);
                          i64toi32_i32$4 = ($7_1 + 736 | 0) + 8 | 0;
                          i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                          $19_1 = i64toi32_i32$3;
                          $19$hi = i64toi32_i32$1;
                          i64toi32_i32$4 = $7_1;
                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 736 | 0) >> 2] | 0;
                          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 740 | 0) >> 2] | 0;
                          $18_1 = i64toi32_i32$1;
                          $18$hi = i64toi32_i32$3;
                          $1_1 = $1_1 + 1 | 0;
                          if (($1_1 | 0) != (4 | 0)) {
                            continue label$62;
                          }
                          break label$62;
                        };
                        $92(i64toi32_i32$4 + 720 | 0 | 0, $5_1 | 0);
                        i64toi32_i32$3 = $19$hi;
                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 720 | 0) >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 724 | 0) >> 2] | 0;
                        $767 = i64toi32_i32$3;
                        $767$hi = i64toi32_i32$1;
                        i64toi32_i32$4 = (i64toi32_i32$4 + 720 | 0) + 8 | 0;
                        i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                        $771 = i64toi32_i32$1;
                        $771$hi = i64toi32_i32$3;
                        i64toi32_i32$3 = $18$hi;
                        i64toi32_i32$1 = $19$hi;
                        i64toi32_i32$4 = $767$hi;
                        i64toi32_i32$5 = $771$hi;
                        $97($7_1 + 704 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $767 | 0, i64toi32_i32$4 | 0, $771 | 0, i64toi32_i32$5 | 0);
                        i64toi32_i32$1 = ($7_1 + 704 | 0) + 8 | 0;
                        i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                        $19_1 = i64toi32_i32$5;
                        $19$hi = i64toi32_i32$4;
                        i64toi32_i32$4 = 0;
                        $18_1 = 0;
                        $18$hi = i64toi32_i32$4;
                        i64toi32_i32$1 = $7_1;
                        i64toi32_i32$4 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
                        i64toi32_i32$5 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
                        $20_1 = i64toi32_i32$4;
                        $20$hi = i64toi32_i32$5;
                        $13_1 = $12_1 + 113 | 0;
                        $1_1 = $13_1 - $4_1 | 0;
                        $8_1 = ($1_1 | 0) < ($3_1 | 0);
                        $2_1 = $8_1 ? ($1_1 | 0) > (0 | 0) ? $1_1 : 0 : $3_1;
                        if (($2_1 | 0) <= (112 | 0)) {
                          break label$57;
                        }
                        i64toi32_i32$5 = 0;
                        $21_1 = 0;
                        $21$hi = i64toi32_i32$5;
                        i64toi32_i32$5 = 0;
                        $22_1 = 0;
                        $22$hi = i64toi32_i32$5;
                        i64toi32_i32$5 = 0;
                        $23_1 = 0;
                        $23$hi = i64toi32_i32$5;
                        break label$54;
                      }
                      $12_1 = $15_1 + $12_1 | 0;
                      $13_1 = $14_1;
                      if (($11_1 | 0) == ($14_1 | 0)) {
                        continue label$58;
                      }
                      break label$58;
                    };
                    $8_1 = 1e9 >>> $15_1 | 0;
                    $6_1 = (-1 << $15_1 | 0) ^ -1 | 0;
                    $1_1 = 0;
                    $13_1 = $11_1;
                    label$64: while (1) {
                      $2_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
                      $813 = $2_1;
                      $2_1 = HEAP32[$2_1 >> 2] | 0;
                      $1_1 = ($2_1 >>> $15_1 | 0) + $1_1 | 0;
                      HEAP32[$813 >> 2] = $1_1;
                      $1_1 = ($11_1 | 0) == ($13_1 | 0) & !$1_1 | 0;
                      $13_1 = $1_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
                      $16_1 = $1_1 ? $16_1 + -9 | 0 : $16_1;
                      $1_1 = Math_imul($2_1 & $6_1 | 0, $8_1);
                      $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
                      if (($11_1 | 0) != ($14_1 | 0)) {
                        continue label$64;
                      }
                      break label$64;
                    };
                    if (!$1_1) {
                      continue label$56;
                    }
                    label$65: {
                      if (($17_1 | 0) == ($13_1 | 0)) {
                        break label$65;
                      }
                      HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $1_1;
                      $14_1 = $17_1;
                      continue label$55;
                    }
                    HEAP32[$9_1 >> 2] = HEAP32[$9_1 >> 2] | 0 | 1 | 0;
                    continue label$56;
                  }
                  break label$56;
                };
                break label$55;
              };
              $90($7_1 + 656 | 0 | 0, + +$50(+1.0, 225 - $2_1 | 0 | 0));
              i64toi32_i32$1 = $7_1;
              i64toi32_i32$5 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
              $874 = i64toi32_i32$5;
              $874$hi = i64toi32_i32$4;
              i64toi32_i32$1 = ($7_1 + 656 | 0) + 8 | 0;
              i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $878 = i64toi32_i32$4;
              $878$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$5 = $874$hi;
              i64toi32_i32$4 = $878$hi;
              i64toi32_i32$1 = $20$hi;
              i64toi32_i32$3 = $19$hi;
              $51($7_1 + 688 | 0 | 0, $874 | 0, i64toi32_i32$5 | 0, $878 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
              i64toi32_i32$4 = ($7_1 + 688 | 0) + 8 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $23_1 = i64toi32_i32$3;
              $23$hi = i64toi32_i32$1;
              i64toi32_i32$4 = $7_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 688 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 692 | 0) >> 2] | 0;
              $22_1 = i64toi32_i32$1;
              $22$hi = i64toi32_i32$3;
              $90(i64toi32_i32$4 + 640 | 0 | 0, + +$50(+1.0, 113 - $2_1 | 0 | 0));
              i64toi32_i32$3 = $20$hi;
              i64toi32_i32$3 = $19$hi;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 640 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 644 | 0) >> 2] | 0;
              $897 = i64toi32_i32$3;
              $897$hi = i64toi32_i32$1;
              i64toi32_i32$4 = (i64toi32_i32$4 + 640 | 0) + 8 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $901 = i64toi32_i32$1;
              $901$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $20$hi;
              i64toi32_i32$1 = $19$hi;
              i64toi32_i32$4 = $897$hi;
              i64toi32_i32$5 = $901$hi;
              $54($7_1 + 672 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $897 | 0, i64toi32_i32$4 | 0, $901 | 0, i64toi32_i32$5 | 0);
              i64toi32_i32$5 = i64toi32_i32$3;
              i64toi32_i32$5 = i64toi32_i32$1;
              i64toi32_i32$1 = $7_1;
              i64toi32_i32$5 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
              $18_1 = i64toi32_i32$5;
              $18$hi = i64toi32_i32$4;
              i64toi32_i32$1 = ($7_1 + 672 | 0) + 8 | 0;
              i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $21_1 = i64toi32_i32$4;
              $21$hi = i64toi32_i32$5;
              i64toi32_i32$5 = i64toi32_i32$3;
              i64toi32_i32$4 = $19$hi;
              i64toi32_i32$1 = $18$hi;
              i64toi32_i32$3 = $21$hi;
              $99($7_1 + 624 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$3 | 0);
              i64toi32_i32$3 = $22$hi;
              i64toi32_i32$3 = $23$hi;
              i64toi32_i32$4 = $7_1;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 624 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 628 | 0) >> 2] | 0;
              $919 = i64toi32_i32$3;
              $919$hi = i64toi32_i32$1;
              i64toi32_i32$4 = (i64toi32_i32$4 + 624 | 0) + 8 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $923 = i64toi32_i32$1;
              $923$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $22$hi;
              i64toi32_i32$1 = $23$hi;
              i64toi32_i32$4 = $919$hi;
              i64toi32_i32$5 = $923$hi;
              $85($7_1 + 608 | 0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $23_1 | 0, i64toi32_i32$1 | 0, $919 | 0, i64toi32_i32$4 | 0, $923 | 0, i64toi32_i32$5 | 0);
              i64toi32_i32$1 = ($7_1 + 608 | 0) + 8 | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $19_1 = i64toi32_i32$5;
              $19$hi = i64toi32_i32$4;
              i64toi32_i32$1 = $7_1;
              i64toi32_i32$4 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
              $20_1 = i64toi32_i32$4;
              $20$hi = i64toi32_i32$5;
            }
            label$66: {
              $15_1 = ($11_1 + 4 | 0) & 2047 | 0;
              if (($15_1 | 0) == ($14_1 | 0)) {
                break label$66;
              }
              label$67: {
                label$68: {
                  $15_1 = HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0;
                  if ($15_1 >>> 0 > 499999999 >>> 0) {
                    break label$68;
                  }
                  label$69: {
                    if ($15_1) {
                      break label$69;
                    }
                    if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($14_1 | 0)) {
                      break label$67;
                    }
                  }
                  $90($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
                  i64toi32_i32$5 = $18$hi;
                  i64toi32_i32$5 = $21$hi;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$5 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
                  $960 = i64toi32_i32$5;
                  $960$hi = i64toi32_i32$4;
                  i64toi32_i32$1 = ($7_1 + 496 | 0) + 8 | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                  $964 = i64toi32_i32$4;
                  $964$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $18$hi;
                  i64toi32_i32$4 = $21$hi;
                  i64toi32_i32$1 = $960$hi;
                  i64toi32_i32$3 = $964$hi;
                  $85($7_1 + 480 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $960 | 0, i64toi32_i32$1 | 0, $964 | 0, i64toi32_i32$3 | 0);
                  i64toi32_i32$4 = ($7_1 + 480 | 0) + 8 | 0;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                  $21_1 = i64toi32_i32$3;
                  $21$hi = i64toi32_i32$1;
                  i64toi32_i32$4 = $7_1;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 480 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 484 | 0) >> 2] | 0;
                  $18_1 = i64toi32_i32$1;
                  $18$hi = i64toi32_i32$3;
                  break label$67;
                }
                label$70: {
                  if (($15_1 | 0) == (5e8 | 0)) {
                    break label$70;
                  }
                  $90($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
                  i64toi32_i32$3 = $18$hi;
                  i64toi32_i32$3 = $21$hi;
                  i64toi32_i32$4 = $7_1;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 592 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 596 | 0) >> 2] | 0;
                  $983 = i64toi32_i32$3;
                  $983$hi = i64toi32_i32$1;
                  i64toi32_i32$4 = (i64toi32_i32$4 + 592 | 0) + 8 | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                  $987 = i64toi32_i32$1;
                  $987$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $18$hi;
                  i64toi32_i32$1 = $21$hi;
                  i64toi32_i32$4 = $983$hi;
                  i64toi32_i32$5 = $987$hi;
                  $85($7_1 + 576 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $983 | 0, i64toi32_i32$4 | 0, $987 | 0, i64toi32_i32$5 | 0);
                  i64toi32_i32$1 = ($7_1 + 576 | 0) + 8 | 0;
                  i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                  $21_1 = i64toi32_i32$5;
                  $21$hi = i64toi32_i32$4;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$4 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
                  $18_1 = i64toi32_i32$4;
                  $18$hi = i64toi32_i32$5;
                  break label$67;
                }
                $24_1 = +($5_1 | 0);
                label$71: {
                  if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($14_1 | 0)) {
                    break label$71;
                  }
                  $90($7_1 + 528 | 0 | 0, +($24_1 * .5));
                  i64toi32_i32$5 = $18$hi;
                  i64toi32_i32$5 = $21$hi;
                  i64toi32_i32$1 = $7_1;
                  i64toi32_i32$5 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
                  $1010 = i64toi32_i32$5;
                  $1010$hi = i64toi32_i32$4;
                  i64toi32_i32$1 = ($7_1 + 528 | 0) + 8 | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                  $1014 = i64toi32_i32$4;
                  $1014$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = $18$hi;
                  i64toi32_i32$4 = $21$hi;
                  i64toi32_i32$1 = $1010$hi;
                  i64toi32_i32$3 = $1014$hi;
                  $85($7_1 + 512 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $1010 | 0, i64toi32_i32$1 | 0, $1014 | 0, i64toi32_i32$3 | 0);
                  i64toi32_i32$4 = ($7_1 + 512 | 0) + 8 | 0;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                  $21_1 = i64toi32_i32$3;
                  $21$hi = i64toi32_i32$1;
                  i64toi32_i32$4 = $7_1;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 512 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 516 | 0) >> 2] | 0;
                  $18_1 = i64toi32_i32$1;
                  $18$hi = i64toi32_i32$3;
                  break label$67;
                }
                $90($7_1 + 560 | 0 | 0, +($24_1 * .75));
                i64toi32_i32$3 = $18$hi;
                i64toi32_i32$3 = $21$hi;
                i64toi32_i32$4 = $7_1;
                i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 560 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 564 | 0) >> 2] | 0;
                $1030 = i64toi32_i32$3;
                $1030$hi = i64toi32_i32$1;
                i64toi32_i32$4 = (i64toi32_i32$4 + 560 | 0) + 8 | 0;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                $1034 = i64toi32_i32$1;
                $1034$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $18$hi;
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$4 = $1030$hi;
                i64toi32_i32$5 = $1034$hi;
                $85($7_1 + 544 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $1030 | 0, i64toi32_i32$4 | 0, $1034 | 0, i64toi32_i32$5 | 0);
                i64toi32_i32$1 = ($7_1 + 544 | 0) + 8 | 0;
                i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                $21_1 = i64toi32_i32$5;
                $21$hi = i64toi32_i32$4;
                i64toi32_i32$1 = $7_1;
                i64toi32_i32$4 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
                i64toi32_i32$5 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
                $18_1 = i64toi32_i32$4;
                $18$hi = i64toi32_i32$5;
              }
              if (($2_1 | 0) > (111 | 0)) {
                break label$66;
              }
              i64toi32_i32$5 = $18$hi;
              i64toi32_i32$5 = $21$hi;
              i64toi32_i32$5 = $18$hi;
              i64toi32_i32$4 = $21$hi;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 1073676288;
              $54($7_1 + 464 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
              i64toi32_i32$4 = $7_1;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 464 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 468 | 0) >> 2] | 0;
              $1048 = i64toi32_i32$3;
              $1048$hi = i64toi32_i32$1;
              i64toi32_i32$4 = (i64toi32_i32$4 + 464 | 0) + 8 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $1052 = i64toi32_i32$1;
              $1052$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $1048$hi;
              i64toi32_i32$1 = $1052$hi;
              i64toi32_i32$4 = 0;
              i64toi32_i32$5 = 0;
              if ($87($1048 | 0, i64toi32_i32$3 | 0, $1052 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
                break label$66;
              }
              i64toi32_i32$5 = $18$hi;
              i64toi32_i32$5 = $21$hi;
              i64toi32_i32$5 = $18$hi;
              i64toi32_i32$4 = $21$hi;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 1073676288;
              $85($7_1 + 448 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
              i64toi32_i32$4 = ($7_1 + 448 | 0) + 8 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $21_1 = i64toi32_i32$3;
              $21$hi = i64toi32_i32$1;
              i64toi32_i32$4 = $7_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 448 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 452 | 0) >> 2] | 0;
              $18_1 = i64toi32_i32$1;
              $18$hi = i64toi32_i32$3;
            }
            i64toi32_i32$3 = $20$hi;
            i64toi32_i32$3 = $19$hi;
            i64toi32_i32$3 = $18$hi;
            i64toi32_i32$3 = $21$hi;
            i64toi32_i32$3 = $20$hi;
            i64toi32_i32$1 = $19$hi;
            i64toi32_i32$4 = $18$hi;
            i64toi32_i32$5 = $21$hi;
            $85($7_1 + 432 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$5 | 0);
            i64toi32_i32$1 = $7_1;
            i64toi32_i32$5 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
            i64toi32_i32$4 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
            $1073 = i64toi32_i32$5;
            $1073$hi = i64toi32_i32$4;
            i64toi32_i32$1 = ($7_1 + 432 | 0) + 8 | 0;
            i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $1077 = i64toi32_i32$4;
            $1077$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $22$hi;
            i64toi32_i32$5 = $23$hi;
            i64toi32_i32$5 = $1073$hi;
            i64toi32_i32$4 = $1077$hi;
            i64toi32_i32$1 = $22$hi;
            i64toi32_i32$3 = $23$hi;
            $99($7_1 + 416 | 0 | 0, $1073 | 0, i64toi32_i32$5 | 0, $1077 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$3 | 0);
            i64toi32_i32$4 = ($7_1 + 416 | 0) + 8 | 0;
            i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
            $19_1 = i64toi32_i32$3;
            $19$hi = i64toi32_i32$1;
            i64toi32_i32$4 = $7_1;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
            i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
            $20_1 = i64toi32_i32$1;
            $20$hi = i64toi32_i32$3;
            label$72: {
              if (($13_1 & 2147483647 | 0 | 0) <= ($10_1 + -2 | 0 | 0)) {
                break label$72;
              }
              i64toi32_i32$3 = $19$hi;
              i64toi32_i32$3 = $20$hi;
              i64toi32_i32$1 = $19$hi;
              $55(i64toi32_i32$4 + 400 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
              i64toi32_i32$1 = i64toi32_i32$3;
              i64toi32_i32$1 = $19$hi;
              i64toi32_i32$1 = i64toi32_i32$3;
              i64toi32_i32$3 = $19$hi;
              i64toi32_i32$4 = 0;
              i64toi32_i32$5 = 1073610752;
              $97($7_1 + 384 | 0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0);
              i64toi32_i32$3 = $7_1;
              i64toi32_i32$5 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
              $1100 = i64toi32_i32$5;
              $1100$hi = i64toi32_i32$4;
              i64toi32_i32$3 = ($7_1 + 400 | 0) + 8 | 0;
              i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $1104 = i64toi32_i32$4;
              $1104$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $1100$hi;
              i64toi32_i32$4 = $1104$hi;
              i64toi32_i32$3 = 0;
              i64toi32_i32$1 = 1081081856;
              $13_1 = $88($1100 | 0, i64toi32_i32$5 | 0, $1104 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$4 = ($7_1 + 384 | 0) + 8 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $1109$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $19$hi;
              $14_1 = ($13_1 | 0) > (-1 | 0);
              i64toi32_i32$0 = $14_1;
              i64toi32_i32$3 = $1109$hi;
              $181 = i64toi32_i32$1;
              i64toi32_i32$1 = $19$hi;
              i64toi32_i32$5 = $14_1 ? $181 : $19_1;
              i64toi32_i32$4 = $14_1 ? i64toi32_i32$3 : i64toi32_i32$1;
              $19_1 = i64toi32_i32$5;
              $19$hi = i64toi32_i32$4;
              i64toi32_i32$0 = $7_1;
              i64toi32_i32$4 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
              $1116$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$1 = $14_1;
              i64toi32_i32$5 = $1116$hi;
              $182 = i64toi32_i32$4;
              i64toi32_i32$4 = $20$hi;
              i64toi32_i32$3 = i64toi32_i32$1 ? $182 : $20_1;
              i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
              $20_1 = i64toi32_i32$3;
              $20$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $18$hi;
              i64toi32_i32$0 = $21$hi;
              i64toi32_i32$0 = $18$hi;
              i64toi32_i32$3 = $21$hi;
              i64toi32_i32$1 = 0;
              i64toi32_i32$5 = 0;
              $11_1 = $87($18_1 | 0, $18$hi | 0, $21_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
              label$73: {
                $12_1 = $12_1 + $14_1 | 0;
                if (($12_1 + 110 | 0 | 0) > ($10_1 | 0)) {
                  break label$73;
                }
                if (!(($8_1 & (($2_1 | 0) != ($1_1 | 0) | ($13_1 | 0) < (0 | 0) | 0) | 0) & ($11_1 | 0) != (0 | 0) | 0)) {
                  break label$72;
                }
              }
              (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
            }
            i64toi32_i32$5 = $20$hi;
            i64toi32_i32$5 = $19$hi;
            i64toi32_i32$5 = $20$hi;
            i64toi32_i32$1 = $19$hi;
            $52($7_1 + 368 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $12_1 | 0);
            i64toi32_i32$3 = ($7_1 + 368 | 0) + 8 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
            $18_1 = i64toi32_i32$1;
            $18$hi = i64toi32_i32$5;
            i64toi32_i32$3 = $7_1;
            i64toi32_i32$5 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
            $19_1 = i64toi32_i32$5;
            $19$hi = i64toi32_i32$1;
          }
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$5 = $0_1;
          HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $18_1;
          HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$1 = $19$hi;
          HEAP32[i64toi32_i32$5 >> 2] = $19_1;
          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
          global$0 = $7_1 + 8976 | 0;
        }

        function $60($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var $2_1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$5 = 0,i64toi32_i32$1 = 0,i64toi32_i32$4 = 0,$3_1 = 0,$6$hi = 0,$6_1 = 0,$5_1 = 0,i64toi32_i32$3 = 0,$4_1 = 0,$18_1 = 0,$19_1 = 0,$20_1 = 0,$21_1 = 0,$22_1 = 0,$23_1 = 0,$24_1 = 0,$25_1 = 0,$26_1 = 0,$27_1 = 0,$28_1 = 0,$29_1 = 0,$88$hi = 0,$90_1 = 0,$90$hi = 0,$139$hi = 0;
          label$1: {
            label$2: {
              $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                break label$2;
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
              $3_1 = HEAPU8[$2_1 >> 0] | 0;
              break label$1;
            }
            $3_1 = $49($0_1 | 0) | 0;
          }
          label$3: {
            label$4: {
              label$5: {
                label$6: {
                  switch ($3_1 + -43 | 0 | 0) {
                    case 0:
                    case 2:
                      label$8: {
                        label$9: {
                          $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                          if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                            break label$9;
                          }
                          HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                          $2_1 = HEAPU8[$2_1 >> 0] | 0;
                          break label$8;
                        }
                        $2_1 = $49($0_1 | 0) | 0;
                      }
                      $4_1 = ($3_1 | 0) == (45 | 0);
                      $5_1 = $2_1 + -58 | 0;
                      if (!$1_1) {
                        break label$5;
                      }
                      if ($5_1 >>> 0 > -11 >>> 0) {
                        break label$5;
                      }
                      i64toi32_i32$2 = $0_1;
                      i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                      i64toi32_i32$2 = i64toi32_i32$0;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$3 = 0;
                      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                        $18_1 = 1;
                      } else {
                        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                            $19_1 = 0;
                          } else {
                            $19_1 = 1;
                          }
                          $20_1 = $19_1;
                        } else {
                          $20_1 = 0;
                        }
                        $18_1 = $20_1;
                      }
                      if ($18_1) {
                        break label$4;
                      }
                      HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                      break label$4;
                    default:
                      break label$6;
                  };
                }
                $5_1 = $3_1 + -58 | 0;
                $4_1 = 0;
                $2_1 = $3_1;
              }
              if ($5_1 >>> 0 < -10 >>> 0) {
                break label$4;
              }
              i64toi32_i32$2 = 0;
              $6_1 = 0;
              $6$hi = i64toi32_i32$2;
              label$10: {
                if (($2_1 + -48 | 0) >>> 0 >= 10 >>> 0) {
                  break label$10;
                }
                $3_1 = 0;
                label$11: while (1) {
                  $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
                  label$12: {
                    label$13: {
                      $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                      if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                        break label$13;
                      }
                      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                      $2_1 = HEAPU8[$2_1 >> 0] | 0;
                      break label$12;
                    }
                    $2_1 = $49($0_1 | 0) | 0;
                  }
                  $3_1 = $3_1 + -48 | 0;
                  label$14: {
                    $5_1 = $2_1 + -48 | 0;
                    if ($5_1 >>> 0 > 9 >>> 0) {
                      break label$14;
                    }
                    if (($3_1 | 0) < (214748364 | 0)) {
                      continue label$11;
                    }
                  }
                  break label$11;
                };
                i64toi32_i32$1 = $3_1;
                i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
                $6_1 = i64toi32_i32$1;
                $6$hi = i64toi32_i32$2;
                if ($5_1 >>> 0 >= 10 >>> 0) {
                  break label$10;
                }
                label$15: while (1) {
                  i64toi32_i32$2 = 0;
                  $88$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $6$hi;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
                  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                  $90_1 = i64toi32_i32$1;
                  $90$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $88$hi;
                  i64toi32_i32$3 = $2_1;
                  i64toi32_i32$1 = $90$hi;
                  i64toi32_i32$0 = $90_1;
                  i64toi32_i32$4 = $2_1 + i64toi32_i32$0 | 0;
                  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                  }
                  $6_1 = i64toi32_i32$4;
                  $6$hi = i64toi32_i32$5;
                  label$16: {
                    label$17: {
                      $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                      if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                        break label$17;
                      }
                      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                      $2_1 = HEAPU8[$2_1 >> 0] | 0;
                      break label$16;
                    }
                    $2_1 = $49($0_1 | 0) | 0;
                  }
                  i64toi32_i32$5 = $6$hi;
                  i64toi32_i32$2 = $6_1;
                  i64toi32_i32$3 = -1;
                  i64toi32_i32$0 = -48;
                  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
                    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                  }
                  $6_1 = i64toi32_i32$1;
                  $6$hi = i64toi32_i32$4;
                  label$18: {
                    $3_1 = $2_1 + -48 | 0;
                    if ($3_1 >>> 0 > 9 >>> 0) {
                      break label$18;
                    }
                    i64toi32_i32$5 = i64toi32_i32$1;
                    i64toi32_i32$2 = 21474836;
                    i64toi32_i32$0 = 2061584302;
                    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
                      $21_1 = 1;
                    } else {
                      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
                        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                          $22_1 = 0;
                        } else {
                          $22_1 = 1;
                        }
                        $23_1 = $22_1;
                      } else {
                        $23_1 = 0;
                      }
                      $21_1 = $23_1;
                    }
                    if ($21_1) {
                      continue label$15;
                    }
                  }
                  break label$15;
                };
                if ($3_1 >>> 0 >= 10 >>> 0) {
                  break label$10;
                }
                label$19: while (1) {
                  label$20: {
                    label$21: {
                      $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                      if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                        break label$21;
                      }
                      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                      $2_1 = HEAPU8[$2_1 >> 0] | 0;
                      break label$20;
                    }
                    $2_1 = $49($0_1 | 0) | 0;
                  }
                  if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
                    continue label$19;
                  }
                  break label$19;
                };
              }
              label$22: {
                i64toi32_i32$0 = $0_1;
                i64toi32_i32$5 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$5 = 0;
                i64toi32_i32$2 = 0;
                if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
                  $24_1 = 1;
                } else {
                  if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
                    if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
                      $25_1 = 0;
                    } else {
                      $25_1 = 1;
                    }
                    $26_1 = $25_1;
                  } else {
                    $26_1 = 0;
                  }
                  $24_1 = $26_1;
                }
                if ($24_1) {
                  break label$22;
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
              }
              i64toi32_i32$0 = $6$hi;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = 0;
              i64toi32_i32$4 = $6$hi;
              i64toi32_i32$5 = $6_1;
              i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
              i64toi32_i32$1 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
              i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
              $139$hi = i64toi32_i32$1;
              i64toi32_i32$1 = i64toi32_i32$4;
              i64toi32_i32$4 = $4_1;
              i64toi32_i32$1 = $139$hi;
              i64toi32_i32$2 = $6$hi;
              i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
              i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
              $6_1 = i64toi32_i32$5;
              $6$hi = i64toi32_i32$0;
              break label$3;
            }
            i64toi32_i32$0 = -2147483648;
            $6_1 = 0;
            $6$hi = i64toi32_i32$0;
            i64toi32_i32$4 = $0_1;
            i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
            i64toi32_i32$5 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
            i64toi32_i32$4 = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$1 = 0;
            if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
              $27_1 = 1;
            } else {
              if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
                if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0) {
                  $28_1 = 0;
                } else {
                  $28_1 = 1;
                }
                $29_1 = $28_1;
              } else {
                $29_1 = 0;
              }
              $27_1 = $29_1;
            }
            if ($27_1) {
              break label$3;
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
            i64toi32_i32$4 = -2147483648;
            i64toi32_i32$5 = 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
            return i64toi32_i32$5 | 0;
          }
          i64toi32_i32$5 = $6$hi;
          i64toi32_i32$4 = $6_1;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
          return i64toi32_i32$4 | 0;
        }

        function $61($0_1, $1_1, $2_1, $3_1, $3$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          $3_1 = $3_1 | 0;
          $3$hi = $3$hi | 0;
          var i64toi32_i32$3 = 0,i64toi32_i32$2 = 0,$5_1 = 0,i64toi32_i32$5 = 0,i64toi32_i32$0 = 0,i64toi32_i32$4 = 0,i64toi32_i32$1 = 0,$9$hi = 0,$9_1 = 0,$7_1 = 0,$10$hi = 0,$11$hi = 0,$10_1 = 0,$11_1 = 0,$12$hi = 0,$6_1 = 0,$12_1 = 0,$4_1 = 0,$30_1 = 0,$31_1 = 0,$32_1 = 0,$33_1 = 0,$34_1 = 0,$35_1 = 0,$8_1 = 0,$36_1 = 0,$37_1 = 0,$38_1 = 0,$39_1 = 0,$40_1 = 0,$194 = 0,$194$hi = 0,$248 = 0,$248$hi = 0,$346$hi = 0,$413$hi = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $4_1 = global$0 - 16 | 0;
          global$0 = $4_1;
          label$1: {
            label$2: {
              label$3: {
                if ($1_1 >>> 0 > 36 >>> 0) {
                  break label$3;
                }
                if (($1_1 | 0) != (1 | 0)) {
                  break label$2;
                }
              }
              (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              i64toi32_i32$0 = 0;
              $3_1 = 0;
              $3$hi = i64toi32_i32$0;
              break label$1;
            }
            label$4: while (1) {
              label$5: {
                label$6: {
                  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$6;
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                  $5_1 = HEAPU8[$5_1 >> 0] | 0;
                  break label$5;
                }
                $5_1 = $49($0_1 | 0) | 0;
              }
              if ($62($5_1 | 0) | 0) {
                continue label$4;
              }
              break label$4;
            };
            $6_1 = 0;
            label$7: {
              label$8: {
                switch ($5_1 + -43 | 0 | 0) {
                  case 0:
                  case 2:
                    break label$8;
                  default:
                    break label$7;
                };
              }
              $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
              label$9: {
                $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$9;
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                $5_1 = HEAPU8[$5_1 >> 0] | 0;
                break label$7;
              }
              $5_1 = $49($0_1 | 0) | 0;
            }
            label$10: {
              label$11: {
                label$12: {
                  label$13: {
                    label$14: {
                      if (($1_1 | 0) != (0 | 0) & ($1_1 | 0) != (16 | 0) | 0) {
                        break label$14;
                      }
                      if (($5_1 | 0) != (48 | 0)) {
                        break label$14;
                      }
                      label$15: {
                        label$16: {
                          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                            break label$16;
                          }
                          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                          $5_1 = HEAPU8[$5_1 >> 0] | 0;
                          break label$15;
                        }
                        $5_1 = $49($0_1 | 0) | 0;
                      }
                      label$17: {
                        if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
                          break label$17;
                        }
                        label$18: {
                          label$19: {
                            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                            if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                              break label$19;
                            }
                            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                            $5_1 = HEAPU8[$5_1 >> 0] | 0;
                            break label$18;
                          }
                          $5_1 = $49($0_1 | 0) | 0;
                        }
                        $1_1 = 16;
                        if ((HEAPU8[($5_1 + 66177 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
                          break label$12;
                        }
                        i64toi32_i32$0 = 0;
                        $3_1 = 0;
                        $3$hi = i64toi32_i32$0;
                        label$20: {
                          label$21: {
                            i64toi32_i32$2 = $0_1;
                            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
                            i64toi32_i32$2 = i64toi32_i32$0;
                            i64toi32_i32$0 = 0;
                            i64toi32_i32$3 = 0;
                            if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                              $30_1 = 1;
                            } else {
                              if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                                  $31_1 = 0;
                                } else {
                                  $31_1 = 1;
                                }
                                $32_1 = $31_1;
                              } else {
                                $32_1 = 0;
                              }
                              $30_1 = $32_1;
                            }
                            if ($30_1) {
                              break label$21;
                            }
                            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
                            if (!$2_1) {
                              break label$20;
                            }
                            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
                            break label$1;
                          }
                          if ($2_1) {
                            break label$1;
                          }
                        }
                        i64toi32_i32$2 = 0;
                        $3_1 = 0;
                        $3$hi = i64toi32_i32$2;
                        i64toi32_i32$2 = 0;
                        $48($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
                        break label$1;
                      }
                      if ($1_1) {
                        break label$13;
                      }
                      $1_1 = 8;
                      break label$12;
                    }
                    $1_1 = $1_1 ? $1_1 : 10;
                    if ($1_1 >>> 0 > (HEAPU8[($5_1 + 66177 | 0) >> 0] | 0) >>> 0) {
                      break label$13;
                    }
                    i64toi32_i32$2 = 0;
                    $3_1 = 0;
                    $3$hi = i64toi32_i32$2;
                    label$22: {
                      i64toi32_i32$3 = $0_1;
                      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
                      i64toi32_i32$3 = i64toi32_i32$2;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$0 = 0;
                      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
                        $33_1 = 1;
                      } else {
                        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
                          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                            $34_1 = 0;
                          } else {
                            $34_1 = 1;
                          }
                          $35_1 = $34_1;
                        } else {
                          $35_1 = 0;
                        }
                        $33_1 = $35_1;
                      }
                      if ($33_1) {
                        break label$22;
                      }
                      HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                    }
                    i64toi32_i32$3 = 0;
                    $48($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
                    (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                    break label$1;
                  }
                  if (($1_1 | 0) != (10 | 0)) {
                    break label$12;
                  }
                  i64toi32_i32$3 = 0;
                  $9_1 = 0;
                  $9$hi = i64toi32_i32$3;
                  label$23: {
                    $2_1 = $5_1 + -48 | 0;
                    if ($2_1 >>> 0 > 9 >>> 0) {
                      break label$23;
                    }
                    $5_1 = 0;
                    label$24: while (1) {
                      label$25: {
                        label$26: {
                          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                          if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                            break label$26;
                          }
                          HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                          $1_1 = HEAPU8[$1_1 >> 0] | 0;
                          break label$25;
                        }
                        $1_1 = $49($0_1 | 0) | 0;
                      }
                      $5_1 = Math_imul($5_1, 10) + $2_1 | 0;
                      label$27: {
                        $2_1 = $1_1 + -48 | 0;
                        if ($2_1 >>> 0 > 9 >>> 0) {
                          break label$27;
                        }
                        if ($5_1 >>> 0 < 429496729 >>> 0) {
                          continue label$24;
                        }
                      }
                      break label$24;
                    };
                    i64toi32_i32$3 = 0;
                    $9_1 = $5_1;
                    $9$hi = i64toi32_i32$3;
                  }
                  if ($2_1 >>> 0 > 9 >>> 0) {
                    break label$10;
                  }
                  i64toi32_i32$3 = $9$hi;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$1 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
                  i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                  $10_1 = i64toi32_i32$1;
                  $10$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = 0;
                  $11_1 = $2_1;
                  $11$hi = i64toi32_i32$3;
                  label$28: while (1) {
                    label$29: {
                      label$30: {
                        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                          break label$30;
                        }
                        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                        $5_1 = HEAPU8[$5_1 >> 0] | 0;
                        break label$29;
                      }
                      $5_1 = $49($0_1 | 0) | 0;
                    }
                    i64toi32_i32$3 = $10$hi;
                    i64toi32_i32$3 = $11$hi;
                    i64toi32_i32$3 = $10$hi;
                    i64toi32_i32$0 = $10_1;
                    i64toi32_i32$1 = $11$hi;
                    i64toi32_i32$2 = $11_1;
                    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
                      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                    }
                    $9_1 = i64toi32_i32$4;
                    $9$hi = i64toi32_i32$5;
                    label$31: {
                      label$32: {
                        $2_1 = $5_1 + -48 | 0;
                        if ($2_1 >>> 0 > 9 >>> 0) {
                          break label$32;
                        }
                        i64toi32_i32$3 = i64toi32_i32$4;
                        i64toi32_i32$0 = 429496729;
                        i64toi32_i32$2 = -1717986918;
                        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
                          break label$31;
                        }
                      }
                      $1_1 = 10;
                      if ($2_1 >>> 0 <= 9 >>> 0) {
                        break label$11;
                      }
                      break label$10;
                    }
                    i64toi32_i32$3 = $9$hi;
                    i64toi32_i32$5 = 0;
                    i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
                    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                    $10_1 = i64toi32_i32$5;
                    $10$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = 0;
                    $11_1 = $2_1;
                    $11$hi = i64toi32_i32$3;
                    i64toi32_i32$2 = $2_1;
                    i64toi32_i32$5 = -1;
                    i64toi32_i32$0 = -1;
                    i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
                    $194 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
                    $194$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $10$hi;
                    i64toi32_i32$3 = $10_1;
                    i64toi32_i32$2 = $194$hi;
                    i64toi32_i32$0 = $194;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
                      continue label$28;
                    }
                    break label$28;
                  };
                  $1_1 = 10;
                  break label$11;
                }
                label$33: {
                  if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
                    break label$33;
                  }
                  i64toi32_i32$3 = 0;
                  $9_1 = 0;
                  $9$hi = i64toi32_i32$3;
                  label$34: {
                    $7_1 = HEAPU8[($5_1 + 66177 | 0) >> 0] | 0;
                    if ($1_1 >>> 0 <= $7_1 >>> 0) {
                      break label$34;
                    }
                    $2_1 = 0;
                    label$35: while (1) {
                      label$36: {
                        label$37: {
                          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                            break label$37;
                          }
                          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                          $5_1 = HEAPU8[$5_1 >> 0] | 0;
                          break label$36;
                        }
                        $5_1 = $49($0_1 | 0) | 0;
                      }
                      $2_1 = $7_1 + Math_imul($2_1, $1_1) | 0;
                      label$38: {
                        $7_1 = HEAPU8[($5_1 + 66177 | 0) >> 0] | 0;
                        if ($1_1 >>> 0 <= $7_1 >>> 0) {
                          break label$38;
                        }
                        if ($2_1 >>> 0 < 119304647 >>> 0) {
                          continue label$35;
                        }
                      }
                      break label$35;
                    };
                    i64toi32_i32$3 = 0;
                    $9_1 = $2_1;
                    $9$hi = i64toi32_i32$3;
                  }
                  if ($1_1 >>> 0 <= $7_1 >>> 0) {
                    break label$11;
                  }
                  i64toi32_i32$3 = 0;
                  $10_1 = $1_1;
                  $10$hi = i64toi32_i32$3;
                  label$39: while (1) {
                    i64toi32_i32$3 = $9$hi;
                    i64toi32_i32$3 = $10$hi;
                    i64toi32_i32$3 = $9$hi;
                    i64toi32_i32$5 = $10$hi;
                    i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
                    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                    $11_1 = i64toi32_i32$5;
                    $11$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$0 = $7_1;
                    i64toi32_i32$5 = 0;
                    i64toi32_i32$2 = 255;
                    i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
                    $12_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
                    $12$hi = i64toi32_i32$5;
                    i64toi32_i32$3 = $12_1;
                    i64toi32_i32$0 = -1;
                    i64toi32_i32$2 = -1;
                    i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
                    $248 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
                    $248$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $11$hi;
                    i64toi32_i32$5 = $11_1;
                    i64toi32_i32$3 = $248$hi;
                    i64toi32_i32$2 = $248;
                    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
                      break label$11;
                    }
                    label$40: {
                      label$41: {
                        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                          break label$41;
                        }
                        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                        $5_1 = HEAPU8[$5_1 >> 0] | 0;
                        break label$40;
                      }
                      $5_1 = $49($0_1 | 0) | 0;
                    }
                    i64toi32_i32$5 = $11$hi;
                    i64toi32_i32$5 = $12$hi;
                    i64toi32_i32$5 = $11$hi;
                    i64toi32_i32$2 = $11_1;
                    i64toi32_i32$0 = $12$hi;
                    i64toi32_i32$3 = $12_1;
                    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
                    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                    }
                    $9_1 = i64toi32_i32$1;
                    $9$hi = i64toi32_i32$4;
                    $7_1 = HEAPU8[($5_1 + 66177 | 0) >> 0] | 0;
                    if ($1_1 >>> 0 <= $7_1 >>> 0) {
                      break label$11;
                    }
                    i64toi32_i32$4 = $10$hi;
                    i64toi32_i32$4 = $9$hi;
                    i64toi32_i32$4 = $10$hi;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$5 = $9$hi;
                    i64toi32_i32$3 = 0;
                    $98($4_1 | 0, $10_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
                    i64toi32_i32$2 = $4_1;
                    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
                    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
                    i64toi32_i32$2 = i64toi32_i32$3;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$4 = 0;
                    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
                      break label$11;
                    }
                    continue label$39;
                  };
                }
                $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 66433 | 0) >> 0] | 0;
                i64toi32_i32$2 = 0;
                $9_1 = 0;
                $9$hi = i64toi32_i32$2;
                label$42: {
                  $2_1 = HEAPU8[($5_1 + 66177 | 0) >> 0] | 0;
                  if ($1_1 >>> 0 <= $2_1 >>> 0) {
                    break label$42;
                  }
                  $7_1 = 0;
                  label$43: while (1) {
                    label$44: {
                      label$45: {
                        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                          break label$45;
                        }
                        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                        $5_1 = HEAPU8[$5_1 >> 0] | 0;
                        break label$44;
                      }
                      $5_1 = $49($0_1 | 0) | 0;
                    }
                    $7_1 = $2_1 | ($7_1 << $8_1 | 0) | 0;
                    label$46: {
                      $2_1 = HEAPU8[($5_1 + 66177 | 0) >> 0] | 0;
                      if ($1_1 >>> 0 <= $2_1 >>> 0) {
                        break label$46;
                      }
                      if ($7_1 >>> 0 < 134217728 >>> 0) {
                        continue label$43;
                      }
                    }
                    break label$43;
                  };
                  i64toi32_i32$2 = 0;
                  $9_1 = $7_1;
                  $9$hi = i64toi32_i32$2;
                }
                if ($1_1 >>> 0 <= $2_1 >>> 0) {
                  break label$11;
                }
                i64toi32_i32$2 = 0;
                $11_1 = $8_1;
                $11$hi = i64toi32_i32$2;
                i64toi32_i32$2 = -1;
                i64toi32_i32$4 = -1;
                i64toi32_i32$5 = $11$hi;
                i64toi32_i32$3 = $11_1;
                i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                  i64toi32_i32$5 = 0;
                  $36_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
                } else {
                  i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
                  $36_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
                }
                $12_1 = $36_1;
                $12$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $9$hi;
                i64toi32_i32$5 = $12$hi;
                i64toi32_i32$2 = $12_1;
                i64toi32_i32$4 = $9$hi;
                i64toi32_i32$3 = $9_1;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
                  break label$11;
                }
                label$47: while (1) {
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$3 = $2_1;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$4 = 255;
                  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
                  $10_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
                  $10$hi = i64toi32_i32$5;
                  label$48: {
                    label$49: {
                      $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                      if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                        break label$49;
                      }
                      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                      $5_1 = HEAPU8[$5_1 >> 0] | 0;
                      break label$48;
                    }
                    $5_1 = $49($0_1 | 0) | 0;
                  }
                  i64toi32_i32$5 = $9$hi;
                  i64toi32_i32$5 = $11$hi;
                  i64toi32_i32$5 = $9$hi;
                  i64toi32_i32$2 = $9_1;
                  i64toi32_i32$3 = $11$hi;
                  i64toi32_i32$4 = $11_1;
                  i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
                  if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
                    $37_1 = 0;
                  } else {
                    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
                    $37_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
                  }
                  $346$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $10$hi;
                  i64toi32_i32$3 = $346$hi;
                  i64toi32_i32$5 = $37_1;
                  i64toi32_i32$2 = $10$hi;
                  i64toi32_i32$4 = $10_1;
                  i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                  $9_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
                  $9$hi = i64toi32_i32$2;
                  $2_1 = HEAPU8[($5_1 + 66177 | 0) >> 0] | 0;
                  if ($1_1 >>> 0 <= $2_1 >>> 0) {
                    break label$11;
                  }
                  i64toi32_i32$2 = $12$hi;
                  i64toi32_i32$2 = $9$hi;
                  i64toi32_i32$3 = $9_1;
                  i64toi32_i32$5 = $12$hi;
                  i64toi32_i32$4 = $12_1;
                  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
                    continue label$47;
                  }
                  break label$47;
                };
              }
              if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 66177 | 0) >> 0] | 0) >>> 0) {
                break label$10;
              }
              label$50: while (1) {
                label$51: {
                  label$52: {
                    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                    if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                      break label$52;
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                    $5_1 = HEAPU8[$5_1 >> 0] | 0;
                    break label$51;
                  }
                  $5_1 = $49($0_1 | 0) | 0;
                }
                if ($1_1 >>> 0 > (HEAPU8[($5_1 + 66177 | 0) >> 0] | 0) >>> 0) {
                  continue label$50;
                }
                break label$50;
              };
              (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              i64toi32_i32$3 = $3$hi;
              i64toi32_i32$4 = $3_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$5 = 1;
              i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
              $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0) ? $6_1 : 0;
              i64toi32_i32$2 = i64toi32_i32$3;
              i64toi32_i32$2 = i64toi32_i32$3;
              $9_1 = i64toi32_i32$4;
              $9$hi = i64toi32_i32$3;
            }
            label$53: {
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
              i64toi32_i32$3 = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              i64toi32_i32$5 = 0;
              if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
                $38_1 = 1;
              } else {
                if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
                  if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
                    $39_1 = 0;
                  } else {
                    $39_1 = 1;
                  }
                  $40_1 = $39_1;
                } else {
                  $40_1 = 0;
                }
                $38_1 = $40_1;
              }
              if ($38_1) {
                break label$53;
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
            }
            label$54: {
              i64toi32_i32$3 = $9$hi;
              i64toi32_i32$3 = $3$hi;
              i64toi32_i32$3 = $9$hi;
              i64toi32_i32$5 = $9_1;
              i64toi32_i32$4 = $3$hi;
              i64toi32_i32$2 = $3_1;
              if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
                break label$54;
              }
              label$55: {
                i64toi32_i32$5 = i64toi32_i32$4;
                if (i64toi32_i32$2 & 1 | 0) {
                  break label$55;
                }
                if ($6_1) {
                  break label$55;
                }
                (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                i64toi32_i32$3 = -1;
                i64toi32_i32$4 = -1;
                i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
                i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
                }
                $3_1 = i64toi32_i32$0;
                $3$hi = i64toi32_i32$1;
                break label$1;
              }
              i64toi32_i32$1 = $9$hi;
              i64toi32_i32$1 = $3$hi;
              i64toi32_i32$1 = $9$hi;
              i64toi32_i32$5 = $9_1;
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$4 = $3_1;
              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
                break label$54;
              }
              (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              break label$1;
            }
            i64toi32_i32$5 = $9$hi;
            i64toi32_i32$1 = $6_1;
            i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
            $3_1 = i64toi32_i32$1;
            $3$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $9$hi;
            i64toi32_i32$4 = $9_1;
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$2 = $3_1;
            i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
            $413$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$1 = $413$hi;
            i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
            i64toi32_i32$4 = $3$hi;
            i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
            i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$4 | 0;
            i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
            $3_1 = i64toi32_i32$3;
            $3$hi = i64toi32_i32$0;
          }
          global$0 = $4_1 + 16 | 0;
          i64toi32_i32$0 = $3$hi;
          i64toi32_i32$5 = $3_1;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
          return i64toi32_i32$5 | 0;
        }

        function $62($0_1) {
          $0_1 = $0_1 | 0;
          return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
        }

        function $63() {
          return 42 | 0;
        }

        function $64() {
          return $63() | 0 | 0;
        }

        function $65() {
          return 99496 | 0;
        }

        function $66() {
          var wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          HEAP32[(0 + 99592 | 0) >> 2] = 99472;
          (wasm2js_i32$0 = 0, wasm2js_i32$1 = $64() | 0), HEAP32[(wasm2js_i32$0 + 99520 | 0) >> 2] = wasm2js_i32$1;
        }

        function $67($0_1, $1_1, $2_1, $3_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          $3_1 = $3_1 | 0;
          var $5_1 = 0,$4_1 = 0,$6_1 = 0,$7_1 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $4_1 = $3_1 ? $3_1 : 99628;
          $3_1 = HEAP32[$4_1 >> 2] | 0;
          label$1: {
            label$2: {
              label$3: {
                label$4: {
                  if ($1_1) {
                    break label$4;
                  }
                  if ($3_1) {
                    break label$3;
                  }
                  return 0 | 0;
                }
                $5_1 = -2;
                if (!$2_1) {
                  break label$2;
                }
                label$5: {
                  label$6: {
                    if (!$3_1) {
                      break label$6;
                    }
                    $5_1 = $2_1;
                    break label$5;
                  }
                  label$7: {
                    $5_1 = HEAPU8[$1_1 >> 0] | 0;
                    $3_1 = $5_1 << 24 >> 24;
                    if (($3_1 | 0) < (0 | 0)) {
                      break label$7;
                    }
                    label$8: {
                      if (!$0_1) {
                        break label$8;
                      }
                      HEAP32[$0_1 >> 2] = $5_1;
                    }
                    return ($3_1 | 0) != (0 | 0) | 0;
                  }
                  label$9: {
                    if (HEAP32[(HEAP32[(($65() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
                      break label$9;
                    }
                    $5_1 = 1;
                    if (!$0_1) {
                      break label$2;
                    }
                    HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
                    return 1 | 0;
                  }
                  $3_1 = $5_1 + -194 | 0;
                  if ($3_1 >>> 0 > 50 >>> 0) {
                    break label$3;
                  }
                  $3_1 = HEAP32[(($3_1 << 2 | 0) + 66448 | 0) >> 2] | 0;
                  $5_1 = $2_1 + -1 | 0;
                  if (!$5_1) {
                    break label$1;
                  }
                  $1_1 = $1_1 + 1 | 0;
                }
                $6_1 = HEAPU8[$1_1 >> 0] | 0;
                $7_1 = $6_1 >>> 3 | 0;
                if (($7_1 + -16 | 0 | (($3_1 >> 26 | 0) + $7_1 | 0) | 0) >>> 0 > 7 >>> 0) {
                  break label$3;
                }
                label$10: while (1) {
                  $5_1 = $5_1 + -1 | 0;
                  label$11: {
                    $3_1 = ($6_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
                    if (($3_1 | 0) < (0 | 0)) {
                      break label$11;
                    }
                    HEAP32[$4_1 >> 2] = 0;
                    label$12: {
                      if (!$0_1) {
                        break label$12;
                      }
                      HEAP32[$0_1 >> 2] = $3_1;
                    }
                    return $2_1 - $5_1 | 0 | 0;
                  }
                  if (!$5_1) {
                    break label$1;
                  }
                  $1_1 = $1_1 + 1 | 0;
                  $6_1 = HEAPU8[$1_1 >> 0] | 0;
                  if (($6_1 & 192 | 0 | 0) == (128 | 0)) {
                    continue label$10;
                  }
                  break label$10;
                };
              }
              HEAP32[$4_1 >> 2] = 0;
              (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              $5_1 = -1;
            }
            return $5_1 | 0;
          }
          HEAP32[$4_1 >> 2] = $3_1;
          return -2 | 0;
        }

        function $68($0_1) {
          $0_1 = $0_1 | 0;
          label$1: {
            if ($0_1) {
              break label$1;
            }
            return 1 | 0;
          }
          return !(HEAP32[$0_1 >> 2] | 0) | 0;
        }

        function $69($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var i64toi32_i32$1 = 0,i64toi32_i32$4 = 0,i64toi32_i32$3 = 0,i64toi32_i32$0 = 0,$5_1 = 0,i64toi32_i32$2 = 0,$9_1 = 0,i64toi32_i32$5 = 0,$14_1 = 0,$3_1 = 0,$11_1 = 0,$8_1 = 0,$13_1 = 0,$19$hi = 0,$12_1 = 0,$15_1 = 0,$20$hi = 0,$17_1 = 0,$6_1 = 0,$19_1 = 0,$10_1 = 0,$20_1 = 0,$21$hi = 0,$16_1 = 0,$18_1 = 0,$21_1 = 0,i64toi32_i32$6 = 0,$4_1 = 0,$62_1 = 0,$63_1 = 0,$64_1 = 0,$65_1 = 0,$66_1 = 0,$67_1 = 0,$68_1 = 0,$69_1 = 0,$70_1 = 0,$71_1 = 0,$72_1 = 0,$73_1 = 0,$74_1 = 0,$75_1 = 0,$76_1 = 0,$77_1 = 0,$7_1 = 0,$80$hi = 0,$82$hi = 0,$87_1 = 0,$87$hi = 0,$146$hi = 0,$148$hi = 0,$154 = 0,$154$hi = 0,$282$hi = 0,$284$hi = 0,$289 = 0,$289$hi = 0,$329 = 0,$329$hi = 0,$335 = 0,$335$hi = 0,$336$hi = 0,$435 = 0,$435$hi = 0,$441 = 0,$441$hi = 0,$442$hi = 0,$653 = 0,$653$hi = 0,$658 = 0,$658$hi = 0,$686$hi = 0,$688$hi = 0,$694 = 0,$694$hi = 0,wasm2js_i32$0 = 0,wasm2js_f32$0 = Math_fround(0),wasm2js_f64$0 = 0.0;
          $3_1 = global$0 - 304 | 0;
          global$0 = $3_1;
          label$1: {
            label$2: {
              if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
                break label$2;
              }
              $4_1 = 1;
              break label$1;
            }
            $4_1 = !($18($0_1 | 0) | 0);
          }
          label$3: {
            label$4: {
              label$5: {
                if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
                  break label$5;
                }
                $46($0_1 | 0) | 0;
                if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
                  break label$4;
                }
              }
              label$6: {
                $5_1 = HEAPU8[$1_1 >> 0] | 0;
                if ($5_1) {
                  break label$6;
                }
                $6_1 = 0;
                break label$3;
              }
              $7_1 = $3_1 + 16 | 0;
              i64toi32_i32$0 = 0;
              $19_1 = 0;
              $19$hi = i64toi32_i32$0;
              $6_1 = 0;
              label$7: {
                label$8: {
                  label$9: {
                    label$10: {
                      label$11: {
                        label$12: {
                          label$13: while (1) {
                            label$14: {
                              label$15: {
                                $5_1 = $5_1 & 255 | 0;
                                if (!($70($5_1 | 0) | 0)) {
                                  break label$15;
                                }
                                label$16: while (1) {
                                  $5_1 = $1_1;
                                  $1_1 = $1_1 + 1 | 0;
                                  if ($70(HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
                                    continue label$16;
                                  }
                                  break label$16;
                                };
                                i64toi32_i32$0 = 0;
                                $48($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
                                label$17: while (1) {
                                  label$18: {
                                    label$19: {
                                      $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                      if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                                        break label$19;
                                      }
                                      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                                      $1_1 = HEAPU8[$1_1 >> 0] | 0;
                                      break label$18;
                                    }
                                    $1_1 = $49($0_1 | 0) | 0;
                                  }
                                  if ($70($1_1 | 0) | 0) {
                                    continue label$17;
                                  }
                                  break label$17;
                                };
                                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                label$20: {
                                  i64toi32_i32$2 = $0_1;
                                  i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                                  i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                                  i64toi32_i32$2 = i64toi32_i32$0;
                                  i64toi32_i32$0 = 0;
                                  i64toi32_i32$3 = 0;
                                  if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                                    $62_1 = 1;
                                  } else {
                                    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                                      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                                        $63_1 = 0;
                                      } else {
                                        $63_1 = 1;
                                      }
                                      $64_1 = $63_1;
                                    } else {
                                      $64_1 = 0;
                                    }
                                    $62_1 = $64_1;
                                  }
                                  if ($62_1) {
                                    break label$20;
                                  }
                                  $1_1 = $1_1 + -1 | 0;
                                  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
                                }
                                i64toi32_i32$3 = $0_1;
                                i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                                i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                                $80$hi = i64toi32_i32$1;
                                i64toi32_i32$1 = $19$hi;
                                i64toi32_i32$1 = $80$hi;
                                i64toi32_i32$3 = i64toi32_i32$2;
                                i64toi32_i32$2 = $19$hi;
                                i64toi32_i32$0 = $19_1;
                                i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
                                i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
                                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                                }
                                $82$hi = i64toi32_i32$5;
                                i64toi32_i32$3 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                                i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
                                $87_1 = i64toi32_i32$3;
                                $87$hi = i64toi32_i32$5;
                                i64toi32_i32$5 = $82$hi;
                                i64toi32_i32$1 = i64toi32_i32$4;
                                i64toi32_i32$3 = $87$hi;
                                i64toi32_i32$0 = $87_1;
                                i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                                i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                                  i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                                }
                                $19_1 = i64toi32_i32$2;
                                $19$hi = i64toi32_i32$4;
                                break label$14;
                              }
                              label$21: {
                                label$22: {
                                  label$23: {
                                    label$24: {
                                      if (($5_1 | 0) != (37 | 0)) {
                                        break label$24;
                                      }
                                      $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                                      if (($5_1 | 0) == (42 | 0)) {
                                        break label$23;
                                      }
                                      if (($5_1 | 0) != (37 | 0)) {
                                        break label$22;
                                      }
                                    }
                                    i64toi32_i32$4 = 0;
                                    $48($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
                                    label$25: {
                                      label$26: {
                                        if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (37 | 0)) {
                                          break label$26;
                                        }
                                        label$27: while (1) {
                                          label$28: {
                                            label$29: {
                                              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                              if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                break label$29;
                                              }
                                              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                              $5_1 = HEAPU8[$5_1 >> 0] | 0;
                                              break label$28;
                                            }
                                            $5_1 = $49($0_1 | 0) | 0;
                                          }
                                          if ($70($5_1 | 0) | 0) {
                                            continue label$27;
                                          }
                                          break label$27;
                                        };
                                        $1_1 = $1_1 + 1 | 0;
                                        break label$25;
                                      }
                                      label$30: {
                                        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                                          break label$30;
                                        }
                                        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                        $5_1 = HEAPU8[$5_1 >> 0] | 0;
                                        break label$25;
                                      }
                                      $5_1 = $49($0_1 | 0) | 0;
                                    }
                                    label$31: {
                                      if (($5_1 | 0) == (HEAPU8[$1_1 >> 0] | 0 | 0)) {
                                        break label$31;
                                      }
                                      label$32: {
                                        i64toi32_i32$5 = $0_1;
                                        i64toi32_i32$4 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                                        i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                                        i64toi32_i32$5 = i64toi32_i32$4;
                                        i64toi32_i32$4 = 0;
                                        i64toi32_i32$0 = 0;
                                        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                                          $65_1 = 1;
                                        } else {
                                          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                                            if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                                              $66_1 = 0;
                                            } else {
                                              $66_1 = 1;
                                            }
                                            $67_1 = $66_1;
                                          } else {
                                            $67_1 = 0;
                                          }
                                          $65_1 = $67_1;
                                        }
                                        if ($65_1) {
                                          break label$32;
                                        }
                                        HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                                      }
                                      if (($5_1 | 0) > (-1 | 0)) {
                                        break label$3;
                                      }
                                      if ($6_1) {
                                        break label$3;
                                      }
                                      break label$4;
                                    }
                                    i64toi32_i32$0 = $0_1;
                                    i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                                    i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                                    $146$hi = i64toi32_i32$1;
                                    i64toi32_i32$1 = $19$hi;
                                    i64toi32_i32$1 = $146$hi;
                                    i64toi32_i32$0 = i64toi32_i32$5;
                                    i64toi32_i32$5 = $19$hi;
                                    i64toi32_i32$4 = $19_1;
                                    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
                                    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
                                    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                                      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                                    }
                                    $148$hi = i64toi32_i32$2;
                                    i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                                    i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                                    $154 = i64toi32_i32$0;
                                    $154$hi = i64toi32_i32$2;
                                    i64toi32_i32$2 = $148$hi;
                                    i64toi32_i32$1 = i64toi32_i32$3;
                                    i64toi32_i32$0 = $154$hi;
                                    i64toi32_i32$4 = $154;
                                    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
                                    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                                      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                                    }
                                    $19_1 = i64toi32_i32$5;
                                    $19$hi = i64toi32_i32$3;
                                    $5_1 = $1_1;
                                    break label$14;
                                  }
                                  $5_1 = $1_1 + 2 | 0;
                                  $8_1 = 0;
                                  break label$21;
                                }
                                label$33: {
                                  $9_1 = $5_1 + -48 | 0;
                                  if ($9_1 >>> 0 > 9 >>> 0) {
                                    break label$33;
                                  }
                                  if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                                    break label$33;
                                  }
                                  $5_1 = $1_1 + 3 | 0;
                                  $8_1 = $71($2_1 | 0, $9_1 | 0) | 0;
                                  break label$21;
                                }
                                $5_1 = $1_1 + 1 | 0;
                                $8_1 = HEAP32[$2_1 >> 2] | 0;
                                $2_1 = $2_1 + 4 | 0;
                              }
                              $10_1 = 0;
                              $9_1 = 0;
                              label$34: {
                                $1_1 = HEAPU8[$5_1 >> 0] | 0;
                                if (($1_1 + -48 | 0) >>> 0 > 9 >>> 0) {
                                  break label$34;
                                }
                                label$35: while (1) {
                                  $9_1 = (Math_imul($9_1, 10) + $1_1 | 0) + -48 | 0;
                                  $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                                  $5_1 = $5_1 + 1 | 0;
                                  if (($1_1 + -48 | 0) >>> 0 < 10 >>> 0) {
                                    continue label$35;
                                  }
                                  break label$35;
                                };
                              }
                              label$36: {
                                label$37: {
                                  if (($1_1 | 0) == (109 | 0)) {
                                    break label$37;
                                  }
                                  $11_1 = $5_1;
                                  break label$36;
                                }
                                $11_1 = $5_1 + 1 | 0;
                                $12_1 = 0;
                                $10_1 = ($8_1 | 0) != (0 | 0);
                                $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                                $13_1 = 0;
                              }
                              $5_1 = $11_1 + 1 | 0;
                              $14_1 = 3;
                              $15_1 = $10_1;
                              label$38: {
                                label$39: {
                                  switch (($1_1 & 255 | 0) + -65 | 0 | 0) {
                                    case 39:
                                      $1_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
                                      $5_1 = $1_1 ? $11_1 + 2 | 0 : $5_1;
                                      $14_1 = $1_1 ? -2 : -1;
                                      break label$38;
                                    case 43:
                                      $1_1 = (HEAPU8[($11_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
                                      $5_1 = $1_1 ? $11_1 + 2 | 0 : $5_1;
                                      $14_1 = $1_1 ? 3 : 1;
                                      break label$38;
                                    case 51:
                                    case 57:
                                      $14_1 = 1;
                                      break label$38;
                                    case 11:
                                      $14_1 = 2;
                                      break label$38;
                                    case 41:
                                      break label$38;
                                    case 0:
                                    case 2:
                                    case 4:
                                    case 5:
                                    case 6:
                                    case 18:
                                    case 23:
                                    case 26:
                                    case 32:
                                    case 34:
                                    case 35:
                                    case 36:
                                    case 37:
                                    case 38:
                                    case 40:
                                    case 45:
                                    case 46:
                                    case 47:
                                    case 50:
                                    case 52:
                                    case 55:
                                      break label$39;
                                    default:
                                      break label$8;
                                  };
                                }
                                $14_1 = 0;
                                $5_1 = $11_1;
                              }
                              $1_1 = HEAPU8[$5_1 >> 0] | 0;
                              $11_1 = ($1_1 & 47 | 0 | 0) == (3 | 0);
                              $16_1 = $11_1 ? 1 : $14_1;
                              label$44: {
                                $17_1 = $11_1 ? $1_1 | 32 | 0 : $1_1;
                                if (($17_1 | 0) == (91 | 0)) {
                                  break label$44;
                                }
                                label$45: {
                                  label$46: {
                                    if (($17_1 | 0) == (110 | 0)) {
                                      break label$46;
                                    }
                                    if (($17_1 | 0) != (99 | 0)) {
                                      break label$45;
                                    }
                                    $9_1 = ($9_1 | 0) > (1 | 0) ? $9_1 : 1;
                                    break label$44;
                                  }
                                  i64toi32_i32$3 = $19$hi;
                                  $72($8_1 | 0, $16_1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
                                  break label$14;
                                }
                                i64toi32_i32$3 = 0;
                                $48($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
                                label$47: while (1) {
                                  label$48: {
                                    label$49: {
                                      $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                      if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                                        break label$49;
                                      }
                                      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                                      $1_1 = HEAPU8[$1_1 >> 0] | 0;
                                      break label$48;
                                    }
                                    $1_1 = $49($0_1 | 0) | 0;
                                  }
                                  if ($70($1_1 | 0) | 0) {
                                    continue label$47;
                                  }
                                  break label$47;
                                };
                                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                label$50: {
                                  i64toi32_i32$2 = $0_1;
                                  i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                                  i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                                  i64toi32_i32$2 = i64toi32_i32$3;
                                  i64toi32_i32$3 = 0;
                                  i64toi32_i32$4 = 0;
                                  if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
                                    $68_1 = 1;
                                  } else {
                                    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
                                      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
                                        $69_1 = 0;
                                      } else {
                                        $69_1 = 1;
                                      }
                                      $70_1 = $69_1;
                                    } else {
                                      $70_1 = 0;
                                    }
                                    $68_1 = $70_1;
                                  }
                                  if ($68_1) {
                                    break label$50;
                                  }
                                  $1_1 = $1_1 + -1 | 0;
                                  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
                                }
                                i64toi32_i32$4 = $0_1;
                                i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                                i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                                $282$hi = i64toi32_i32$1;
                                i64toi32_i32$1 = $19$hi;
                                i64toi32_i32$1 = $282$hi;
                                i64toi32_i32$4 = i64toi32_i32$2;
                                i64toi32_i32$2 = $19$hi;
                                i64toi32_i32$3 = $19_1;
                                i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                                i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
                                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                                }
                                $284$hi = i64toi32_i32$5;
                                i64toi32_i32$4 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                                i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
                                $289 = i64toi32_i32$4;
                                $289$hi = i64toi32_i32$5;
                                i64toi32_i32$5 = $284$hi;
                                i64toi32_i32$1 = i64toi32_i32$0;
                                i64toi32_i32$4 = $289$hi;
                                i64toi32_i32$3 = $289;
                                i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                                i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                                }
                                $19_1 = i64toi32_i32$2;
                                $19$hi = i64toi32_i32$0;
                              }
                              i64toi32_i32$1 = $9_1;
                              i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                              $20_1 = i64toi32_i32$1;
                              $20$hi = i64toi32_i32$0;
                              $48($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
                              label$51: {
                                label$52: {
                                  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                  if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                                    break label$52;
                                  }
                                  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                                  break label$51;
                                }
                                if (($49($0_1 | 0) | 0 | 0) < (0 | 0)) {
                                  break label$9;
                                }
                              }
                              label$53: {
                                i64toi32_i32$5 = $0_1;
                                i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                                i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                                i64toi32_i32$5 = i64toi32_i32$0;
                                i64toi32_i32$0 = 0;
                                i64toi32_i32$3 = 0;
                                if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                                  $71_1 = 1;
                                } else {
                                  if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                                    if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                                      $72_1 = 0;
                                    } else {
                                      $72_1 = 1;
                                    }
                                    $73_1 = $72_1;
                                  } else {
                                    $73_1 = 0;
                                  }
                                  $71_1 = $73_1;
                                }
                                if ($71_1) {
                                  break label$53;
                                }
                                HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
                              }
                              $1_1 = 16;
                              label$54: {
                                label$55: {
                                  label$56: {
                                    label$57: {
                                      label$58: {
                                        switch ($17_1 + -88 | 0 | 0) {
                                          default:
                                            $1_1 = $17_1 + -65 | 0;
                                            if ($1_1 >>> 0 > 6 >>> 0) {
                                              break label$54;
                                            }
                                            if (!((1 << $1_1 | 0) & 113 | 0)) {
                                              break label$54;
                                            }
                                          case 9:
                                          case 13:
                                          case 14:
                                          case 15:
                                            $56($3_1 + 8 | 0 | 0, $0_1 | 0, $16_1 | 0, 0 | 0);
                                            i64toi32_i32$3 = $0_1;
                                            i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                                            i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                                            $329 = i64toi32_i32$5;
                                            $329$hi = i64toi32_i32$1;
                                            i64toi32_i32$5 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                                            i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                                            $335 = i64toi32_i32$5;
                                            $335$hi = i64toi32_i32$1;
                                            i64toi32_i32$1 = 0;
                                            i64toi32_i32$3 = 0;
                                            i64toi32_i32$5 = $335$hi;
                                            i64toi32_i32$0 = $335;
                                            i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                                            i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                                            i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                                            i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                                            $336$hi = i64toi32_i32$2;
                                            i64toi32_i32$2 = $329$hi;
                                            i64toi32_i32$1 = $329;
                                            i64toi32_i32$3 = $336$hi;
                                            i64toi32_i32$0 = i64toi32_i32$4;
                                            if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                                              break label$56;
                                            }
                                            break label$10;
                                          case 3:
                                          case 11:
                                          case 27:
                                            label$64: {
                                              if (($17_1 | 16 | 0 | 0) != (115 | 0)) {
                                                break label$64;
                                              }
                                              $16($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                                              HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                                              if (($17_1 | 0) != (115 | 0)) {
                                                break label$55;
                                              }
                                              HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                                              HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                                              $74_1 = 0;
                                              HEAP16[($3_1 + 42 | 0) >> 1] = $74_1;
                                              HEAP16[($3_1 + 44 | 0) >> 1] = $74_1 >>> 16 | 0;
                                              break label$55;
                                            }
                                            $14_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                                            $1_1 = ($14_1 | 0) == (94 | 0);
                                            $16($3_1 + 32 | 0 | 0, $1_1 | 0, 257 | 0) | 0;
                                            HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                                            $15_1 = $1_1 ? $5_1 + 2 | 0 : $5_1 + 1 | 0;
                                            label$65: {
                                              label$66: {
                                                label$67: {
                                                  label$68: {
                                                    $1_1 = HEAPU8[($5_1 + ($1_1 ? 2 : 1) | 0) >> 0] | 0;
                                                    if (($1_1 | 0) == (45 | 0)) {
                                                      break label$68;
                                                    }
                                                    if (($1_1 | 0) == (93 | 0)) {
                                                      break label$67;
                                                    }
                                                    $11_1 = ($14_1 | 0) != (94 | 0);
                                                    $5_1 = $15_1;
                                                    break label$65;
                                                  }
                                                  $11_1 = ($14_1 | 0) != (94 | 0);
                                                  HEAP8[($3_1 + 78 | 0) >> 0] = $11_1;
                                                  break label$66;
                                                }
                                                $11_1 = ($14_1 | 0) != (94 | 0);
                                                HEAP8[($3_1 + 126 | 0) >> 0] = $11_1;
                                              }
                                              $5_1 = $15_1 + 1 | 0;
                                            }
                                            label$69: while (1) {
                                              label$70: {
                                                label$71: {
                                                  $14_1 = HEAPU8[$5_1 >> 0] | 0;
                                                  if (($14_1 | 0) == (45 | 0)) {
                                                    break label$71;
                                                  }
                                                  if (!$14_1) {
                                                    break label$9;
                                                  }
                                                  if (($14_1 | 0) == (93 | 0)) {
                                                    break label$55;
                                                  }
                                                  break label$70;
                                                }
                                                $14_1 = 45;
                                                $18_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                                                if (!$18_1) {
                                                  break label$70;
                                                }
                                                if (($18_1 | 0) == (93 | 0)) {
                                                  break label$70;
                                                }
                                                $15_1 = $5_1 + 1 | 0;
                                                label$72: {
                                                  label$73: {
                                                    $1_1 = HEAPU8[($5_1 + -1 | 0) >> 0] | 0;
                                                    if ($1_1 >>> 0 < $18_1 >>> 0) {
                                                      break label$73;
                                                    }
                                                    $14_1 = $18_1;
                                                    break label$72;
                                                  }
                                                  label$74: while (1) {
                                                    $1_1 = $1_1 + 1 | 0;
                                                    HEAP8[(($3_1 + 32 | 0) + $1_1 | 0) >> 0] = $11_1;
                                                    $14_1 = HEAPU8[$15_1 >> 0] | 0;
                                                    if ($1_1 >>> 0 < $14_1 >>> 0) {
                                                      continue label$74;
                                                    }
                                                    break label$74;
                                                  };
                                                }
                                                $5_1 = $15_1;
                                              }
                                              HEAP8[(($14_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $11_1;
                                              $5_1 = $5_1 + 1 | 0;
                                              continue label$69;
                                            };
                                          case 23:
                                            $1_1 = 8;
                                            break label$57;
                                          case 12:
                                          case 29:
                                            $1_1 = 10;
                                            break label$57;
                                          case 1:
                                          case 2:
                                          case 4:
                                          case 5:
                                          case 6:
                                          case 7:
                                          case 8:
                                          case 10:
                                          case 16:
                                          case 18:
                                          case 19:
                                          case 20:
                                          case 21:
                                          case 22:
                                          case 25:
                                          case 26:
                                          case 28:
                                          case 30:
                                          case 31:
                                            break label$54;
                                          case 0:
                                          case 24:
                                          case 32:
                                            break label$57;
                                          case 17:
                                            break label$58;
                                        };
                                      }
                                      $1_1 = 0;
                                    }
                                    i64toi32_i32$1 = -1;
                                    i64toi32_i32$1 = $61($0_1 | 0, $1_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
                                    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                                    $20_1 = i64toi32_i32$1;
                                    $20$hi = i64toi32_i32$2;
                                    i64toi32_i32$0 = $0_1;
                                    i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                                    i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                                    $435 = i64toi32_i32$2;
                                    $435$hi = i64toi32_i32$1;
                                    i64toi32_i32$2 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                                    i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
                                    $441 = i64toi32_i32$2;
                                    $441$hi = i64toi32_i32$1;
                                    i64toi32_i32$1 = 0;
                                    i64toi32_i32$0 = 0;
                                    i64toi32_i32$2 = $441$hi;
                                    i64toi32_i32$3 = $441;
                                    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
                                    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
                                    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
                                    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
                                    $442$hi = i64toi32_i32$4;
                                    i64toi32_i32$4 = $435$hi;
                                    i64toi32_i32$1 = $435;
                                    i64toi32_i32$0 = $442$hi;
                                    i64toi32_i32$3 = i64toi32_i32$5;
                                    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0) {
                                      break label$10;
                                    }
                                    label$75: {
                                      if (($17_1 | 0) != (112 | 0)) {
                                        break label$75;
                                      }
                                      if (!$8_1) {
                                        break label$75;
                                      }
                                      i64toi32_i32$1 = $20$hi;
                                      HEAP32[$8_1 >> 2] = $20_1;
                                      break label$54;
                                    }
                                    i64toi32_i32$1 = $20$hi;
                                    $72($8_1 | 0, $16_1 | 0, $20_1 | 0, i64toi32_i32$1 | 0);
                                    break label$54;
                                  }
                                  if (!$8_1) {
                                    break label$54;
                                  }
                                  i64toi32_i32$3 = $7_1;
                                  i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                                  $20_1 = i64toi32_i32$1;
                                  $20$hi = i64toi32_i32$4;
                                  i64toi32_i32$3 = $3_1;
                                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                                  $21_1 = i64toi32_i32$4;
                                  $21$hi = i64toi32_i32$1;
                                  label$76: {
                                    switch ($16_1 | 0) {
                                      case 0:
                                        i64toi32_i32$1 = $21$hi;
                                        i64toi32_i32$1 = $20$hi;
                                        i64toi32_i32$1 = $21$hi;
                                        i64toi32_i32$4 = $20$hi;
                                        (wasm2js_i32$0 = $8_1, wasm2js_f32$0 = Math_fround($101($21_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$4 | 0))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
                                        break label$54;
                                      case 1:
                                        i64toi32_i32$4 = $21$hi;
                                        i64toi32_i32$4 = $20$hi;
                                        i64toi32_i32$4 = $21$hi;
                                        i64toi32_i32$1 = $20$hi;
                                        (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +$100($21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
                                        break label$54;
                                      case 2:
                                        break label$76;
                                      default:
                                        break label$54;
                                    };
                                  }
                                  i64toi32_i32$1 = $21$hi;
                                  i64toi32_i32$4 = $8_1;
                                  HEAP32[i64toi32_i32$4 >> 2] = $21_1;
                                  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
                                  i64toi32_i32$1 = $20$hi;
                                  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $20_1;
                                  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
                                  break label$54;
                                }
                                $11_1 = ($17_1 | 0) != (99 | 0);
                                $14_1 = $11_1 ? 31 : $9_1 + 1 | 0;
                                label$79: {
                                  label$80: {
                                    if (($16_1 | 0) != (1 | 0)) {
                                      break label$80;
                                    }
                                    $9_1 = $8_1;
                                    label$81: {
                                      if (!$10_1) {
                                        break label$81;
                                      }
                                      $9_1 = $79($14_1 << 2 | 0 | 0) | 0;
                                      if (!$9_1) {
                                        break label$11;
                                      }
                                    }
                                    i64toi32_i32$4 = $3_1;
                                    i64toi32_i32$1 = 0;
                                    HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
                                    HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$1;
                                    $1_1 = 0;
                                    label$82: while (1) {
                                      $13_1 = $9_1;
                                      label$83: {
                                        label$84: while (1) {
                                          label$85: {
                                            label$86: {
                                              $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                              if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                                                break label$86;
                                              }
                                              HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                                              $9_1 = HEAPU8[$9_1 >> 0] | 0;
                                              break label$85;
                                            }
                                            $9_1 = $49($0_1 | 0) | 0;
                                          }
                                          if (!(HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                                            break label$83;
                                          }
                                          HEAP8[($3_1 + 27 | 0) >> 0] = $9_1;
                                          $9_1 = $67($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
                                          if (($9_1 | 0) == (-2 | 0)) {
                                            continue label$84;
                                          }
                                          label$87: {
                                            if (($9_1 | 0) != (-1 | 0)) {
                                              break label$87;
                                            }
                                            $12_1 = 0;
                                            break label$9;
                                          }
                                          label$88: {
                                            if (!$13_1) {
                                              break label$88;
                                            }
                                            HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                                            $1_1 = $1_1 + 1 | 0;
                                          }
                                          if (!$10_1) {
                                            continue label$84;
                                          }
                                          if (($1_1 | 0) != ($14_1 | 0)) {
                                            continue label$84;
                                          }
                                          break label$84;
                                        };
                                        $15_1 = 1;
                                        $12_1 = 0;
                                        $14_1 = $14_1 << 1 | 0 | 1 | 0;
                                        $9_1 = $82($13_1 | 0, $14_1 << 2 | 0 | 0) | 0;
                                        if ($9_1) {
                                          continue label$82;
                                        }
                                        break label$8;
                                      }
                                      break label$82;
                                    };
                                    $12_1 = 0;
                                    $14_1 = $13_1;
                                    if (!($68($3_1 + 296 | 0 | 0) | 0)) {
                                      break label$9;
                                    }
                                    break label$79;
                                  }
                                  label$89: {
                                    if (!$10_1) {
                                      break label$89;
                                    }
                                    $1_1 = 0;
                                    $9_1 = $79($14_1 | 0) | 0;
                                    if (!$9_1) {
                                      break label$11;
                                    }
                                    label$90: while (1) {
                                      $13_1 = $9_1;
                                      label$91: while (1) {
                                        label$92: {
                                          label$93: {
                                            $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                            if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                                              break label$93;
                                            }
                                            HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                                            $9_1 = HEAPU8[$9_1 >> 0] | 0;
                                            break label$92;
                                          }
                                          $9_1 = $49($0_1 | 0) | 0;
                                        }
                                        label$94: {
                                          if (HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                                            break label$94;
                                          }
                                          $14_1 = 0;
                                          $12_1 = $13_1;
                                          break label$79;
                                        }
                                        HEAP8[($13_1 + $1_1 | 0) >> 0] = $9_1;
                                        $1_1 = $1_1 + 1 | 0;
                                        if (($1_1 | 0) != ($14_1 | 0)) {
                                          continue label$91;
                                        }
                                        break label$91;
                                      };
                                      $15_1 = 1;
                                      $14_1 = $14_1 << 1 | 0 | 1 | 0;
                                      $9_1 = $82($13_1 | 0, $14_1 | 0) | 0;
                                      if ($9_1) {
                                        continue label$90;
                                      }
                                      break label$90;
                                    };
                                    $12_1 = $13_1;
                                    $13_1 = 0;
                                    break label$8;
                                  }
                                  $1_1 = 0;
                                  label$95: {
                                    if (!$8_1) {
                                      break label$95;
                                    }
                                    label$96: while (1) {
                                      label$97: {
                                        label$98: {
                                          $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                          if (($9_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                                            break label$98;
                                          }
                                          HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + 1 | 0;
                                          $9_1 = HEAPU8[$9_1 >> 0] | 0;
                                          break label$97;
                                        }
                                        $9_1 = $49($0_1 | 0) | 0;
                                      }
                                      label$99: {
                                        if (HEAPU8[(($9_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                                          break label$99;
                                        }
                                        $14_1 = 0;
                                        $13_1 = $8_1;
                                        $12_1 = $8_1;
                                        break label$79;
                                      }
                                      HEAP8[($8_1 + $1_1 | 0) >> 0] = $9_1;
                                      $1_1 = $1_1 + 1 | 0;
                                      continue label$96;
                                    };
                                  }
                                  label$100: while (1) {
                                    label$101: {
                                      label$102: {
                                        $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                        if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                                          break label$102;
                                        }
                                        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                                        $1_1 = HEAPU8[$1_1 >> 0] | 0;
                                        break label$101;
                                      }
                                      $1_1 = $49($0_1 | 0) | 0;
                                    }
                                    if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                                      continue label$100;
                                    }
                                    break label$100;
                                  };
                                  $13_1 = 0;
                                  $12_1 = 0;
                                  $14_1 = 0;
                                  $1_1 = 0;
                                }
                                $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                label$103: {
                                  i64toi32_i32$3 = $0_1;
                                  i64toi32_i32$1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
                                  i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
                                  i64toi32_i32$3 = i64toi32_i32$1;
                                  i64toi32_i32$1 = 0;
                                  i64toi32_i32$0 = 0;
                                  if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
                                    $75_1 = 1;
                                  } else {
                                    if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
                                      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                                        $76_1 = 0;
                                      } else {
                                        $76_1 = 1;
                                      }
                                      $77_1 = $76_1;
                                    } else {
                                      $77_1 = 0;
                                    }
                                    $75_1 = $77_1;
                                  }
                                  if ($75_1) {
                                    break label$103;
                                  }
                                  $9_1 = $9_1 + -1 | 0;
                                  HEAP32[($0_1 + 4 | 0) >> 2] = $9_1;
                                }
                                i64toi32_i32$0 = $0_1;
                                i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                                i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                                $653 = i64toi32_i32$3;
                                $653$hi = i64toi32_i32$4;
                                i64toi32_i32$3 = $9_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                                i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
                                $658 = i64toi32_i32$3;
                                $658$hi = i64toi32_i32$4;
                                i64toi32_i32$4 = $653$hi;
                                i64toi32_i32$0 = $653;
                                i64toi32_i32$3 = $658$hi;
                                i64toi32_i32$1 = $658;
                                i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
                                i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                                }
                                $21_1 = i64toi32_i32$2;
                                $21$hi = i64toi32_i32$5;
                                if (!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
                                  break label$12;
                                }
                                i64toi32_i32$5 = $20$hi;
                                i64toi32_i32$5 = $21$hi;
                                i64toi32_i32$4 = i64toi32_i32$2;
                                i64toi32_i32$0 = $20$hi;
                                i64toi32_i32$1 = $20_1;
                                if (!($11_1 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0) | 0)) {
                                  break label$12;
                                }
                                label$104: {
                                  if (!$10_1) {
                                    break label$104;
                                  }
                                  HEAP32[$8_1 >> 2] = $13_1;
                                }
                                label$105: {
                                  if (($17_1 | 0) == (99 | 0)) {
                                    break label$105;
                                  }
                                  label$106: {
                                    if (!$14_1) {
                                      break label$106;
                                    }
                                    HEAP32[($14_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
                                  }
                                  label$107: {
                                    if ($12_1) {
                                      break label$107;
                                    }
                                    $12_1 = 0;
                                    break label$105;
                                  }
                                  HEAP8[($12_1 + $1_1 | 0) >> 0] = 0;
                                }
                                $13_1 = $14_1;
                              }
                              i64toi32_i32$1 = $0_1;
                              i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                              i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                              $686$hi = i64toi32_i32$5;
                              i64toi32_i32$5 = $19$hi;
                              i64toi32_i32$5 = $686$hi;
                              i64toi32_i32$1 = i64toi32_i32$4;
                              i64toi32_i32$4 = $19$hi;
                              i64toi32_i32$0 = $19_1;
                              i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                              i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                              if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
                                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                              }
                              $688$hi = i64toi32_i32$2;
                              i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                              i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
                              $694 = i64toi32_i32$1;
                              $694$hi = i64toi32_i32$2;
                              i64toi32_i32$2 = $688$hi;
                              i64toi32_i32$5 = i64toi32_i32$3;
                              i64toi32_i32$1 = $694$hi;
                              i64toi32_i32$0 = $694;
                              i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
                              i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                                i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                              }
                              $19_1 = i64toi32_i32$4;
                              $19$hi = i64toi32_i32$3;
                              $6_1 = $6_1 + (($8_1 | 0) != (0 | 0)) | 0;
                            }
                            $1_1 = $5_1 + 1 | 0;
                            $5_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                            if ($5_1) {
                              continue label$13;
                            }
                            break label$3;
                          };
                        }
                        $13_1 = $14_1;
                        break label$10;
                      }
                      $15_1 = 1;
                      $12_1 = 0;
                      $13_1 = 0;
                      break label$8;
                    }
                    $15_1 = $10_1;
                    break label$7;
                  }
                  $15_1 = $10_1;
                }
                $6_1 = $6_1 ? $6_1 : -1;
              }
              if (!$15_1) {
                break label$3;
              }
              $81($12_1 | 0);
              $81($13_1 | 0);
              break label$3;
            }
            $6_1 = -1;
          }
          label$108: {
            if ($4_1) {
              break label$108;
            }
            $19($0_1 | 0);
          }
          global$0 = $3_1 + 304 | 0;
          return $6_1 | 0;
        }

        function $70($0_1) {
          $0_1 = $0_1 | 0;
          return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
        }

        function $71($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var $2_1 = 0;
          $2_1 = global$0 - 16 | 0;
          HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
          $0_1 = $1_1 >>> 0 > 1 >>> 0 ? ($0_1 + ($1_1 << 2 | 0) | 0) + -4 | 0 : $0_1;
          HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
          return HEAP32[$0_1 >> 2] | 0 | 0;
        }

        function $72($0_1, $1_1, $2_1, $2$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          var i64toi32_i32$0 = 0;
          label$1: {
            if (!$0_1) {
              break label$1;
            }
            label$2: {
              switch ($1_1 + 2 | 0 | 0) {
                case 0:
                  i64toi32_i32$0 = $2$hi;
                  HEAP8[$0_1 >> 0] = $2_1;
                  return;
                case 1:
                  i64toi32_i32$0 = $2$hi;
                  HEAP16[$0_1 >> 1] = $2_1;
                  return;
                case 2:
                case 3:
                  i64toi32_i32$0 = $2$hi;
                  HEAP32[$0_1 >> 2] = $2_1;
                  return;
                case 5:
                  break label$2;
                default:
                  break label$1;
              };
            }
            i64toi32_i32$0 = $2$hi;
            HEAP32[$0_1 >> 2] = $2_1;
            HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
          }
        }

        function $73($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $3_1 = 0;
          $3_1 = global$0 - 144 | 0;
          global$0 = $3_1;
          $3_1 = $16($3_1 | 0, 0 | 0, 144 | 0) | 0;
          HEAP32[($3_1 + 76 | 0) >> 2] = -1;
          HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
          HEAP32[($3_1 + 32 | 0) >> 2] = 4;
          HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
          $0_1 = $69($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
          global$0 = $3_1 + 144 | 0;
          return $0_1 | 0;
        }

        function $74($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $4_1 = 0,$3_1 = 0,$5_1 = 0;
          $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
          $4_1 = $2_1 + 256 | 0;
          $5_1 = $25($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
          $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
          $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
          $28($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
          $4_1 = $3_1 + $4_1 | 0;
          HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
          HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
          HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
          return $2_1 | 0;
        }

        function $75($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $3_1 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $3_1 = 1;
          label$1: {
            label$2: {
              if (!$0_1) {
                break label$2;
              }
              if ($1_1 >>> 0 <= 127 >>> 0) {
                break label$1;
              }
              label$3: {
                label$4: {
                  if (HEAP32[(HEAP32[(($65() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
                    break label$4;
                  }
                  if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
                    break label$1;
                  }
                  (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                  break label$3;
                }
                label$5: {
                  if ($1_1 >>> 0 > 2047 >>> 0) {
                    break label$5;
                  }
                  HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
                  HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
                  return 2 | 0;
                }
                label$6: {
                  label$7: {
                    if ($1_1 >>> 0 < 55296 >>> 0) {
                      break label$7;
                    }
                    if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
                      break label$6;
                    }
                  }
                  HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
                  HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
                  HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
                  return 3 | 0;
                }
                label$8: {
                  if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
                    break label$8;
                  }
                  HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
                  HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
                  HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
                  HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
                  return 4 | 0;
                }
                (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              }
              $3_1 = -1;
            }
            return $3_1 | 0;
          }
          HEAP8[$0_1 >> 0] = $1_1;
          return 1 | 0;
        }

        function $76($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          label$1: {
            if ($0_1) {
              break label$1;
            }
            return 0 | 0;
          }
          return $75($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
        }

        function $77() {
          return __wasm_memory_size() << 16 | 0 | 0;
        }

        function $78($0_1) {
          $0_1 = $0_1 | 0;
          var $1_1 = 0,$2_1 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $1_1 = HEAP32[(0 + 66652 | 0) >> 2] | 0;
          $2_1 = ($0_1 + 7 | 0) & -8 | 0;
          $0_1 = $1_1 + $2_1 | 0;
          label$1: {
            label$2: {
              label$3: {
                if (!$2_1) {
                  break label$3;
                }
                if ($0_1 >>> 0 <= $1_1 >>> 0) {
                  break label$2;
                }
              }
              if ($0_1 >>> 0 <= ($77() | 0) >>> 0) {
                break label$1;
              }
              if (fimport$1($0_1 | 0) | 0) {
                break label$1;
              }
            }
            (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
            return -1 | 0;
          }
          HEAP32[(0 + 66652 | 0) >> 2] = $0_1;
          return $1_1 | 0;
        }

        function $79($0_1) {
          $0_1 = $0_1 | 0;
          var $5_1 = 0,$4_1 = 0,$7_1 = 0,$8_1 = 0,$3_1 = 0,$2_1 = 0,$6_1 = 0,$10_1 = 0,$11_1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,i64toi32_i32$2 = 0,$1_1 = 0,$9_1 = 0,$79_1 = 0,$183 = 0,$782 = 0,$784 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $1_1 = global$0 - 16 | 0;
          global$0 = $1_1;
          label$1: {
            label$2: {
              label$3: {
                label$4: {
                  label$5: {
                    label$6: {
                      label$7: {
                        label$8: {
                          label$9: {
                            label$10: {
                              label$11: {
                                if ($0_1 >>> 0 > 244 >>> 0) {
                                  break label$11;
                                }
                                label$12: {
                                  $2_1 = HEAP32[(0 + 99632 | 0) >> 2] | 0;
                                  $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & 504 | 0;
                                  $4_1 = $3_1 >>> 3 | 0;
                                  $0_1 = $2_1 >>> $4_1 | 0;
                                  if (!($0_1 & 3 | 0)) {
                                    break label$12;
                                  }
                                  label$13: {
                                    label$14: {
                                      $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                                      $4_1 = $3_1 << 3 | 0;
                                      $0_1 = $4_1 + 99672 | 0;
                                      $4_1 = HEAP32[($4_1 + 99680 | 0) >> 2] | 0;
                                      $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                                      if (($0_1 | 0) != ($5_1 | 0)) {
                                        break label$14;
                                      }
                                      (wasm2js_i32$0 = 0, wasm2js_i32$1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99632 | 0) >> 2] = wasm2js_i32$1;
                                      break label$13;
                                    }
                                    HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
                                    HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
                                  }
                                  $0_1 = $4_1 + 8 | 0;
                                  $3_1 = $3_1 << 3 | 0;
                                  HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                                  $4_1 = $4_1 + $3_1 | 0;
                                  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                                  break label$1;
                                }
                                $6_1 = HEAP32[(0 + 99640 | 0) >> 2] | 0;
                                if ($3_1 >>> 0 <= $6_1 >>> 0) {
                                  break label$10;
                                }
                                label$15: {
                                  if (!$0_1) {
                                    break label$15;
                                  }
                                  label$16: {
                                    label$17: {
                                      $79_1 = $0_1 << $4_1 | 0;
                                      $0_1 = 2 << $4_1 | 0;
                                      $4_1 = __wasm_ctz_i32($79_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0 | 0) | 0;
                                      $0_1 = $4_1 << 3 | 0;
                                      $5_1 = $0_1 + 99672 | 0;
                                      $0_1 = HEAP32[($0_1 + 99680 | 0) >> 2] | 0;
                                      $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                                      if (($5_1 | 0) != ($7_1 | 0)) {
                                        break label$17;
                                      }
                                      $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
                                      HEAP32[(0 + 99632 | 0) >> 2] = $2_1;
                                      break label$16;
                                    }
                                    HEAP32[($7_1 + 12 | 0) >> 2] = $5_1;
                                    HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
                                  }
                                  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                                  $7_1 = $0_1 + $3_1 | 0;
                                  $4_1 = $4_1 << 3 | 0;
                                  $3_1 = $4_1 - $3_1 | 0;
                                  HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
                                  HEAP32[($0_1 + $4_1 | 0) >> 2] = $3_1;
                                  label$18: {
                                    if (!$6_1) {
                                      break label$18;
                                    }
                                    $5_1 = ($6_1 & -8 | 0) + 99672 | 0;
                                    $4_1 = HEAP32[(0 + 99652 | 0) >> 2] | 0;
                                    label$19: {
                                      label$20: {
                                        $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
                                        if ($2_1 & $8_1 | 0) {
                                          break label$20;
                                        }
                                        HEAP32[(0 + 99632 | 0) >> 2] = $2_1 | $8_1 | 0;
                                        $8_1 = $5_1;
                                        break label$19;
                                      }
                                      $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                                    }
                                    HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
                                    HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                                    HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
                                    HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
                                  }
                                  $0_1 = $0_1 + 8 | 0;
                                  HEAP32[(0 + 99652 | 0) >> 2] = $7_1;
                                  HEAP32[(0 + 99640 | 0) >> 2] = $3_1;
                                  break label$1;
                                }
                                $9_1 = HEAP32[(0 + 99636 | 0) >> 2] | 0;
                                if (!$9_1) {
                                  break label$10;
                                }
                                $7_1 = HEAP32[(((__wasm_ctz_i32($9_1 | 0) | 0) << 2 | 0) + 99936 | 0) >> 2] | 0;
                                $4_1 = ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                                $5_1 = $7_1;
                                label$21: {
                                  label$22: while (1) {
                                    label$23: {
                                      $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                                      if ($0_1) {
                                        break label$23;
                                      }
                                      $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                                      if (!$0_1) {
                                        break label$21;
                                      }
                                    }
                                    $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                                    $183 = $5_1;
                                    $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
                                    $4_1 = $5_1 ? $183 : $4_1;
                                    $7_1 = $5_1 ? $0_1 : $7_1;
                                    $5_1 = $0_1;
                                    continue label$22;
                                  };
                                }
                                $10_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
                                label$24: {
                                  $0_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
                                  if (($0_1 | 0) == ($7_1 | 0)) {
                                    break label$24;
                                  }
                                  $5_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
                                  HEAP32[(0 + 99648 | 0) >> 2] | 0;
                                  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
                                  HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
                                  break label$2;
                                }
                                label$25: {
                                  label$26: {
                                    $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
                                    if (!$5_1) {
                                      break label$26;
                                    }
                                    $8_1 = $7_1 + 20 | 0;
                                    break label$25;
                                  }
                                  $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
                                  if (!$5_1) {
                                    break label$9;
                                  }
                                  $8_1 = $7_1 + 16 | 0;
                                }
                                label$27: while (1) {
                                  $11_1 = $8_1;
                                  $0_1 = $5_1;
                                  $8_1 = $0_1 + 20 | 0;
                                  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                                  if ($5_1) {
                                    continue label$27;
                                  }
                                  $8_1 = $0_1 + 16 | 0;
                                  $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                                  if ($5_1) {
                                    continue label$27;
                                  }
                                  break label$27;
                                };
                                HEAP32[$11_1 >> 2] = 0;
                                break label$2;
                              }
                              $3_1 = -1;
                              if ($0_1 >>> 0 > -65 >>> 0) {
                                break label$10;
                              }
                              $0_1 = $0_1 + 11 | 0;
                              $3_1 = $0_1 & -8 | 0;
                              $10_1 = HEAP32[(0 + 99636 | 0) >> 2] | 0;
                              if (!$10_1) {
                                break label$10;
                              }
                              $6_1 = 0;
                              label$28: {
                                if ($3_1 >>> 0 < 256 >>> 0) {
                                  break label$28;
                                }
                                $6_1 = 31;
                                if ($3_1 >>> 0 > 16777215 >>> 0) {
                                  break label$28;
                                }
                                $0_1 = Math_clz32($0_1 >>> 8 | 0);
                                $6_1 = ((($3_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
                              }
                              $4_1 = 0 - $3_1 | 0;
                              label$29: {
                                label$30: {
                                  label$31: {
                                    label$32: {
                                      $5_1 = HEAP32[(($6_1 << 2 | 0) + 99936 | 0) >> 2] | 0;
                                      if ($5_1) {
                                        break label$32;
                                      }
                                      $0_1 = 0;
                                      $8_1 = 0;
                                      break label$31;
                                    }
                                    $0_1 = 0;
                                    $7_1 = $3_1 << (($6_1 | 0) == (31 | 0) ? 0 : 25 - ($6_1 >>> 1 | 0) | 0) | 0;
                                    $8_1 = 0;
                                    label$33: while (1) {
                                      label$34: {
                                        $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                                        if ($2_1 >>> 0 >= $4_1 >>> 0) {
                                          break label$34;
                                        }
                                        $4_1 = $2_1;
                                        $8_1 = $5_1;
                                        if ($4_1) {
                                          break label$34;
                                        }
                                        $4_1 = 0;
                                        $8_1 = $5_1;
                                        $0_1 = $5_1;
                                        break label$30;
                                      }
                                      $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                                      $11_1 = HEAP32[(($5_1 + (($7_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                                      $0_1 = $2_1 ? ($2_1 | 0) == ($11_1 | 0) ? $0_1 : $2_1 : $0_1;
                                      $7_1 = $7_1 << 1 | 0;
                                      $5_1 = $11_1;
                                      if ($5_1) {
                                        continue label$33;
                                      }
                                      break label$33;
                                    };
                                  }
                                  label$35: {
                                    if ($0_1 | $8_1 | 0) {
                                      break label$35;
                                    }
                                    $8_1 = 0;
                                    $0_1 = 2 << $6_1 | 0;
                                    $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $10_1 | 0;
                                    if (!$0_1) {
                                      break label$10;
                                    }
                                    $0_1 = HEAP32[(((__wasm_ctz_i32($0_1 | 0) | 0) << 2 | 0) + 99936 | 0) >> 2] | 0;
                                  }
                                  if (!$0_1) {
                                    break label$29;
                                  }
                                }
                                label$36: while (1) {
                                  $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                                  $7_1 = $2_1 >>> 0 < $4_1 >>> 0;
                                  label$37: {
                                    $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                                    if ($5_1) {
                                      break label$37;
                                    }
                                    $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                                  }
                                  $4_1 = $7_1 ? $2_1 : $4_1;
                                  $8_1 = $7_1 ? $0_1 : $8_1;
                                  $0_1 = $5_1;
                                  if ($0_1) {
                                    continue label$36;
                                  }
                                  break label$36;
                                };
                              }
                              if (!$8_1) {
                                break label$10;
                              }
                              if ($4_1 >>> 0 >= ((HEAP32[(0 + 99640 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
                                break label$10;
                              }
                              $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
                              label$38: {
                                $0_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
                                if (($0_1 | 0) == ($8_1 | 0)) {
                                  break label$38;
                                }
                                $5_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
                                HEAP32[(0 + 99648 | 0) >> 2] | 0;
                                HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
                                HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
                                break label$3;
                              }
                              label$39: {
                                label$40: {
                                  $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
                                  if (!$5_1) {
                                    break label$40;
                                  }
                                  $7_1 = $8_1 + 20 | 0;
                                  break label$39;
                                }
                                $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                                if (!$5_1) {
                                  break label$8;
                                }
                                $7_1 = $8_1 + 16 | 0;
                              }
                              label$41: while (1) {
                                $2_1 = $7_1;
                                $0_1 = $5_1;
                                $7_1 = $0_1 + 20 | 0;
                                $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                                if ($5_1) {
                                  continue label$41;
                                }
                                $7_1 = $0_1 + 16 | 0;
                                $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                                if ($5_1) {
                                  continue label$41;
                                }
                                break label$41;
                              };
                              HEAP32[$2_1 >> 2] = 0;
                              break label$3;
                            }
                            label$42: {
                              $0_1 = HEAP32[(0 + 99640 | 0) >> 2] | 0;
                              if ($0_1 >>> 0 < $3_1 >>> 0) {
                                break label$42;
                              }
                              $4_1 = HEAP32[(0 + 99652 | 0) >> 2] | 0;
                              label$43: {
                                label$44: {
                                  $5_1 = $0_1 - $3_1 | 0;
                                  if ($5_1 >>> 0 < 16 >>> 0) {
                                    break label$44;
                                  }
                                  $7_1 = $4_1 + $3_1 | 0;
                                  HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
                                  HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
                                  HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                                  break label$43;
                                }
                                HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
                                $0_1 = $4_1 + $0_1 | 0;
                                HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                                $7_1 = 0;
                                $5_1 = 0;
                              }
                              HEAP32[(0 + 99640 | 0) >> 2] = $5_1;
                              HEAP32[(0 + 99652 | 0) >> 2] = $7_1;
                              $0_1 = $4_1 + 8 | 0;
                              break label$1;
                            }
                            label$45: {
                              $7_1 = HEAP32[(0 + 99644 | 0) >> 2] | 0;
                              if ($7_1 >>> 0 <= $3_1 >>> 0) {
                                break label$45;
                              }
                              $4_1 = $7_1 - $3_1 | 0;
                              HEAP32[(0 + 99644 | 0) >> 2] = $4_1;
                              $0_1 = HEAP32[(0 + 99656 | 0) >> 2] | 0;
                              $5_1 = $0_1 + $3_1 | 0;
                              HEAP32[(0 + 99656 | 0) >> 2] = $5_1;
                              HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
                              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                              $0_1 = $0_1 + 8 | 0;
                              break label$1;
                            }
                            label$46: {
                              label$47: {
                                if (!(HEAP32[(0 + 100104 | 0) >> 2] | 0)) {
                                  break label$47;
                                }
                                $4_1 = HEAP32[(0 + 100112 | 0) >> 2] | 0;
                                break label$46;
                              }
                              i64toi32_i32$1 = 0;
                              i64toi32_i32$0 = -1;
                              HEAP32[(i64toi32_i32$1 + 100116 | 0) >> 2] = -1;
                              HEAP32[(i64toi32_i32$1 + 100120 | 0) >> 2] = i64toi32_i32$0;
                              i64toi32_i32$1 = 0;
                              i64toi32_i32$0 = 4096;
                              HEAP32[(i64toi32_i32$1 + 100108 | 0) >> 2] = 4096;
                              HEAP32[(i64toi32_i32$1 + 100112 | 0) >> 2] = i64toi32_i32$0;
                              HEAP32[(0 + 100104 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
                              HEAP32[(0 + 100124 | 0) >> 2] = 0;
                              HEAP32[(0 + 100076 | 0) >> 2] = 0;
                              $4_1 = 4096;
                            }
                            $0_1 = 0;
                            $6_1 = $3_1 + 47 | 0;
                            $2_1 = $4_1 + $6_1 | 0;
                            $11_1 = 0 - $4_1 | 0;
                            $8_1 = $2_1 & $11_1 | 0;
                            if ($8_1 >>> 0 <= $3_1 >>> 0) {
                              break label$1;
                            }
                            $0_1 = 0;
                            label$48: {
                              $4_1 = HEAP32[(0 + 100072 | 0) >> 2] | 0;
                              if (!$4_1) {
                                break label$48;
                              }
                              $5_1 = HEAP32[(0 + 100064 | 0) >> 2] | 0;
                              $10_1 = $5_1 + $8_1 | 0;
                              if ($10_1 >>> 0 <= $5_1 >>> 0) {
                                break label$1;
                              }
                              if ($10_1 >>> 0 > $4_1 >>> 0) {
                                break label$1;
                              }
                            }
                            label$49: {
                              label$50: {
                                if ((HEAPU8[(0 + 100076 | 0) >> 0] | 0) & 4 | 0) {
                                  break label$50;
                                }
                                label$51: {
                                  label$52: {
                                    label$53: {
                                      label$54: {
                                        label$55: {
                                          $4_1 = HEAP32[(0 + 99656 | 0) >> 2] | 0;
                                          if (!$4_1) {
                                            break label$55;
                                          }
                                          $0_1 = 100080;
                                          label$56: while (1) {
                                            label$57: {
                                              $5_1 = HEAP32[$0_1 >> 2] | 0;
                                              if ($5_1 >>> 0 > $4_1 >>> 0) {
                                                break label$57;
                                              }
                                              if (($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                                                break label$54;
                                              }
                                            }
                                            $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                                            if ($0_1) {
                                              continue label$56;
                                            }
                                            break label$56;
                                          };
                                        }
                                        $7_1 = $78(0 | 0) | 0;
                                        if (($7_1 | 0) == (-1 | 0)) {
                                          break label$51;
                                        }
                                        $2_1 = $8_1;
                                        label$58: {
                                          $0_1 = HEAP32[(0 + 100108 | 0) >> 2] | 0;
                                          $4_1 = $0_1 + -1 | 0;
                                          if (!($4_1 & $7_1 | 0)) {
                                            break label$58;
                                          }
                                          $2_1 = ($8_1 - $7_1 | 0) + (($4_1 + $7_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
                                        }
                                        if ($2_1 >>> 0 <= $3_1 >>> 0) {
                                          break label$51;
                                        }
                                        label$59: {
                                          $0_1 = HEAP32[(0 + 100072 | 0) >> 2] | 0;
                                          if (!$0_1) {
                                            break label$59;
                                          }
                                          $4_1 = HEAP32[(0 + 100064 | 0) >> 2] | 0;
                                          $5_1 = $4_1 + $2_1 | 0;
                                          if ($5_1 >>> 0 <= $4_1 >>> 0) {
                                            break label$51;
                                          }
                                          if ($5_1 >>> 0 > $0_1 >>> 0) {
                                            break label$51;
                                          }
                                        }
                                        $0_1 = $78($2_1 | 0) | 0;
                                        if (($0_1 | 0) != ($7_1 | 0)) {
                                          break label$53;
                                        }
                                        break label$49;
                                      }
                                      $2_1 = ($2_1 - $7_1 | 0) & $11_1 | 0;
                                      $7_1 = $78($2_1 | 0) | 0;
                                      if (($7_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
                                        break label$52;
                                      }
                                      $0_1 = $7_1;
                                    }
                                    if (($0_1 | 0) == (-1 | 0)) {
                                      break label$51;
                                    }
                                    label$60: {
                                      if ($2_1 >>> 0 < ($3_1 + 48 | 0) >>> 0) {
                                        break label$60;
                                      }
                                      $7_1 = $0_1;
                                      break label$49;
                                    }
                                    $4_1 = HEAP32[(0 + 100112 | 0) >> 2] | 0;
                                    $4_1 = (($6_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
                                    if (($78($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                                      break label$51;
                                    }
                                    $2_1 = $4_1 + $2_1 | 0;
                                    $7_1 = $0_1;
                                    break label$49;
                                  }
                                  if (($7_1 | 0) != (-1 | 0)) {
                                    break label$49;
                                  }
                                }
                                HEAP32[(0 + 100076 | 0) >> 2] = HEAP32[(0 + 100076 | 0) >> 2] | 0 | 4 | 0;
                              }
                              $7_1 = $78($8_1 | 0) | 0;
                              $0_1 = $78(0 | 0) | 0;
                              if (($7_1 | 0) == (-1 | 0)) {
                                break label$5;
                              }
                              if (($0_1 | 0) == (-1 | 0)) {
                                break label$5;
                              }
                              if ($7_1 >>> 0 >= $0_1 >>> 0) {
                                break label$5;
                              }
                              $2_1 = $0_1 - $7_1 | 0;
                              if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
                                break label$5;
                              }
                            }
                            $0_1 = (HEAP32[(0 + 100064 | 0) >> 2] | 0) + $2_1 | 0;
                            HEAP32[(0 + 100064 | 0) >> 2] = $0_1;
                            label$61: {
                              if ($0_1 >>> 0 <= (HEAP32[(0 + 100068 | 0) >> 2] | 0) >>> 0) {
                                break label$61;
                              }
                              HEAP32[(0 + 100068 | 0) >> 2] = $0_1;
                            }
                            label$62: {
                              label$63: {
                                $4_1 = HEAP32[(0 + 99656 | 0) >> 2] | 0;
                                if (!$4_1) {
                                  break label$63;
                                }
                                $0_1 = 100080;
                                label$64: while (1) {
                                  $5_1 = HEAP32[$0_1 >> 2] | 0;
                                  $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                                  if (($7_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
                                    break label$62;
                                  }
                                  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                                  if ($0_1) {
                                    continue label$64;
                                  }
                                  break label$7;
                                };
                              }
                              label$65: {
                                label$66: {
                                  $0_1 = HEAP32[(0 + 99648 | 0) >> 2] | 0;
                                  if (!$0_1) {
                                    break label$66;
                                  }
                                  if ($7_1 >>> 0 >= $0_1 >>> 0) {
                                    break label$65;
                                  }
                                }
                                HEAP32[(0 + 99648 | 0) >> 2] = $7_1;
                              }
                              $0_1 = 0;
                              HEAP32[(0 + 100084 | 0) >> 2] = $2_1;
                              HEAP32[(0 + 100080 | 0) >> 2] = $7_1;
                              HEAP32[(0 + 99664 | 0) >> 2] = -1;
                              HEAP32[(0 + 99668 | 0) >> 2] = HEAP32[(0 + 100104 | 0) >> 2] | 0;
                              HEAP32[(0 + 100092 | 0) >> 2] = 0;
                              label$67: while (1) {
                                $4_1 = $0_1 << 3 | 0;
                                $5_1 = $4_1 + 99672 | 0;
                                HEAP32[($4_1 + 99680 | 0) >> 2] = $5_1;
                                HEAP32[($4_1 + 99684 | 0) >> 2] = $5_1;
                                $0_1 = $0_1 + 1 | 0;
                                if (($0_1 | 0) != (32 | 0)) {
                                  continue label$67;
                                }
                                break label$67;
                              };
                              $0_1 = $2_1 + -40 | 0;
                              $4_1 = (-8 - $7_1 | 0) & 7 | 0;
                              $5_1 = $0_1 - $4_1 | 0;
                              HEAP32[(0 + 99644 | 0) >> 2] = $5_1;
                              $4_1 = $7_1 + $4_1 | 0;
                              HEAP32[(0 + 99656 | 0) >> 2] = $4_1;
                              HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
                              HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
                              HEAP32[(0 + 99660 | 0) >> 2] = HEAP32[(0 + 100120 | 0) >> 2] | 0;
                              break label$6;
                            }
                            if ($4_1 >>> 0 >= $7_1 >>> 0) {
                              break label$7;
                            }
                            if ($4_1 >>> 0 < $5_1 >>> 0) {
                              break label$7;
                            }
                            if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & 8 | 0) {
                              break label$7;
                            }
                            HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
                            $0_1 = (-8 - $4_1 | 0) & 7 | 0;
                            $5_1 = $4_1 + $0_1 | 0;
                            HEAP32[(0 + 99656 | 0) >> 2] = $5_1;
                            $7_1 = (HEAP32[(0 + 99644 | 0) >> 2] | 0) + $2_1 | 0;
                            $0_1 = $7_1 - $0_1 | 0;
                            HEAP32[(0 + 99644 | 0) >> 2] = $0_1;
                            HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
                            HEAP32[(($4_1 + $7_1 | 0) + 4 | 0) >> 2] = 40;
                            HEAP32[(0 + 99660 | 0) >> 2] = HEAP32[(0 + 100120 | 0) >> 2] | 0;
                            break label$6;
                          }
                          $0_1 = 0;
                          break label$2;
                        }
                        $0_1 = 0;
                        break label$3;
                      }
                      label$68: {
                        if ($7_1 >>> 0 >= (HEAP32[(0 + 99648 | 0) >> 2] | 0) >>> 0) {
                          break label$68;
                        }
                        HEAP32[(0 + 99648 | 0) >> 2] = $7_1;
                      }
                      $5_1 = $7_1 + $2_1 | 0;
                      $0_1 = 100080;
                      label$69: {
                        label$70: {
                          label$71: while (1) {
                            if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                              break label$70;
                            }
                            $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                            if ($0_1) {
                              continue label$71;
                            }
                            break label$69;
                          };
                        }
                        if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
                          break label$4;
                        }
                      }
                      $0_1 = 100080;
                      label$72: {
                        label$73: while (1) {
                          label$74: {
                            $5_1 = HEAP32[$0_1 >> 2] | 0;
                            if ($5_1 >>> 0 > $4_1 >>> 0) {
                              break label$74;
                            }
                            $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
                            if ($5_1 >>> 0 > $4_1 >>> 0) {
                              break label$72;
                            }
                          }
                          $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                          continue label$73;
                        };
                      }
                      $0_1 = $2_1 + -40 | 0;
                      $8_1 = (-8 - $7_1 | 0) & 7 | 0;
                      $11_1 = $0_1 - $8_1 | 0;
                      HEAP32[(0 + 99644 | 0) >> 2] = $11_1;
                      $8_1 = $7_1 + $8_1 | 0;
                      HEAP32[(0 + 99656 | 0) >> 2] = $8_1;
                      HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
                      HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
                      HEAP32[(0 + 99660 | 0) >> 2] = HEAP32[(0 + 100120 | 0) >> 2] | 0;
                      $0_1 = ($5_1 + ((39 - $5_1 | 0) & 7 | 0) | 0) + -47 | 0;
                      $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
                      HEAP32[($8_1 + 4 | 0) >> 2] = 27;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 100088 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 100092 | 0) >> 2] | 0;
                      $782 = i64toi32_i32$0;
                      i64toi32_i32$0 = $8_1 + 16 | 0;
                      HEAP32[i64toi32_i32$0 >> 2] = $782;
                      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 100080 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 100084 | 0) >> 2] | 0;
                      $784 = i64toi32_i32$1;
                      i64toi32_i32$1 = $8_1;
                      HEAP32[($8_1 + 8 | 0) >> 2] = $784;
                      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
                      HEAP32[(0 + 100088 | 0) >> 2] = $8_1 + 8 | 0;
                      HEAP32[(0 + 100084 | 0) >> 2] = $2_1;
                      HEAP32[(0 + 100080 | 0) >> 2] = $7_1;
                      HEAP32[(0 + 100092 | 0) >> 2] = 0;
                      $0_1 = $8_1 + 24 | 0;
                      label$75: while (1) {
                        HEAP32[($0_1 + 4 | 0) >> 2] = 7;
                        $7_1 = $0_1 + 8 | 0;
                        $0_1 = $0_1 + 4 | 0;
                        if ($7_1 >>> 0 < $5_1 >>> 0) {
                          continue label$75;
                        }
                        break label$75;
                      };
                      if (($8_1 | 0) == ($4_1 | 0)) {
                        break label$6;
                      }
                      HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
                      $7_1 = $8_1 - $4_1 | 0;
                      HEAP32[($4_1 + 4 | 0) >> 2] = $7_1 | 1 | 0;
                      HEAP32[$8_1 >> 2] = $7_1;
                      label$76: {
                        label$77: {
                          if ($7_1 >>> 0 > 255 >>> 0) {
                            break label$77;
                          }
                          $0_1 = ($7_1 & -8 | 0) + 99672 | 0;
                          label$78: {
                            label$79: {
                              $5_1 = HEAP32[(0 + 99632 | 0) >> 2] | 0;
                              $7_1 = 1 << ($7_1 >>> 3 | 0) | 0;
                              if ($5_1 & $7_1 | 0) {
                                break label$79;
                              }
                              HEAP32[(0 + 99632 | 0) >> 2] = $5_1 | $7_1 | 0;
                              $5_1 = $0_1;
                              break label$78;
                            }
                            $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                          }
                          HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
                          HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
                          $7_1 = 12;
                          $8_1 = 8;
                          break label$76;
                        }
                        $0_1 = 31;
                        label$80: {
                          if ($7_1 >>> 0 > 16777215 >>> 0) {
                            break label$80;
                          }
                          $0_1 = Math_clz32($7_1 >>> 8 | 0);
                          $0_1 = ((($7_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
                        }
                        HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
                        i64toi32_i32$1 = $4_1;
                        i64toi32_i32$0 = 0;
                        HEAP32[($4_1 + 16 | 0) >> 2] = 0;
                        HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
                        $5_1 = ($0_1 << 2 | 0) + 99936 | 0;
                        label$81: {
                          label$82: {
                            label$83: {
                              $8_1 = HEAP32[(0 + 99636 | 0) >> 2] | 0;
                              $2_1 = 1 << $0_1 | 0;
                              if ($8_1 & $2_1 | 0) {
                                break label$83;
                              }
                              HEAP32[(0 + 99636 | 0) >> 2] = $8_1 | $2_1 | 0;
                              HEAP32[$5_1 >> 2] = $4_1;
                              HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
                              break label$82;
                            }
                            $0_1 = $7_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
                            $8_1 = HEAP32[$5_1 >> 2] | 0;
                            label$84: while (1) {
                              $5_1 = $8_1;
                              if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7_1 | 0)) {
                                break label$81;
                              }
                              $8_1 = $0_1 >>> 29 | 0;
                              $0_1 = $0_1 << 1 | 0;
                              $2_1 = ($5_1 + ($8_1 & 4 | 0) | 0) + 16 | 0;
                              $8_1 = HEAP32[$2_1 >> 2] | 0;
                              if ($8_1) {
                                continue label$84;
                              }
                              break label$84;
                            };
                            HEAP32[$2_1 >> 2] = $4_1;
                            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
                          }
                          $7_1 = 8;
                          $8_1 = 12;
                          $5_1 = $4_1;
                          $0_1 = $4_1;
                          break label$76;
                        }
                        $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                        HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
                        HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
                        HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
                        $0_1 = 0;
                        $7_1 = 24;
                        $8_1 = 12;
                      }
                      HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
                      HEAP32[($4_1 + $7_1 | 0) >> 2] = $0_1;
                    }
                    $0_1 = HEAP32[(0 + 99644 | 0) >> 2] | 0;
                    if ($0_1 >>> 0 <= $3_1 >>> 0) {
                      break label$5;
                    }
                    $4_1 = $0_1 - $3_1 | 0;
                    HEAP32[(0 + 99644 | 0) >> 2] = $4_1;
                    $0_1 = HEAP32[(0 + 99656 | 0) >> 2] | 0;
                    $5_1 = $0_1 + $3_1 | 0;
                    HEAP32[(0 + 99656 | 0) >> 2] = $5_1;
                    HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
                    HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                    $0_1 = $0_1 + 8 | 0;
                    break label$1;
                  }
                  (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                  $0_1 = 0;
                  break label$1;
                }
                HEAP32[$0_1 >> 2] = $7_1;
                HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
                $0_1 = $80($7_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
                break label$1;
              }
              label$85: {
                if (!$11_1) {
                  break label$85;
                }
                label$86: {
                  label$87: {
                    $7_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
                    $5_1 = ($7_1 << 2 | 0) + 99936 | 0;
                    if (($8_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
                      break label$87;
                    }
                    HEAP32[$5_1 >> 2] = $0_1;
                    if ($0_1) {
                      break label$86;
                    }
                    $10_1 = $10_1 & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
                    HEAP32[(0 + 99636 | 0) >> 2] = $10_1;
                    break label$85;
                  }
                  HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $0_1;
                  if (!$0_1) {
                    break label$85;
                  }
                }
                HEAP32[($0_1 + 24 | 0) >> 2] = $11_1;
                label$88: {
                  $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  if (!$5_1) {
                    break label$88;
                  }
                  HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
                  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
                }
                $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
                if (!$5_1) {
                  break label$85;
                }
                HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
              }
              label$89: {
                label$90: {
                  if ($4_1 >>> 0 > 15 >>> 0) {
                    break label$90;
                  }
                  $0_1 = $4_1 + $3_1 | 0;
                  HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
                  $0_1 = $8_1 + $0_1 | 0;
                  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                  break label$89;
                }
                HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                $7_1 = $8_1 + $3_1 | 0;
                HEAP32[($7_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
                HEAP32[($7_1 + $4_1 | 0) >> 2] = $4_1;
                label$91: {
                  if ($4_1 >>> 0 > 255 >>> 0) {
                    break label$91;
                  }
                  $0_1 = ($4_1 & -8 | 0) + 99672 | 0;
                  label$92: {
                    label$93: {
                      $3_1 = HEAP32[(0 + 99632 | 0) >> 2] | 0;
                      $4_1 = 1 << ($4_1 >>> 3 | 0) | 0;
                      if ($3_1 & $4_1 | 0) {
                        break label$93;
                      }
                      HEAP32[(0 + 99632 | 0) >> 2] = $3_1 | $4_1 | 0;
                      $4_1 = $0_1;
                      break label$92;
                    }
                    $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                  }
                  HEAP32[($0_1 + 8 | 0) >> 2] = $7_1;
                  HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
                  HEAP32[($7_1 + 12 | 0) >> 2] = $0_1;
                  HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
                  break label$89;
                }
                $0_1 = 31;
                label$94: {
                  if ($4_1 >>> 0 > 16777215 >>> 0) {
                    break label$94;
                  }
                  $0_1 = Math_clz32($4_1 >>> 8 | 0);
                  $0_1 = ((($4_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
                }
                HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
                i64toi32_i32$1 = $7_1;
                i64toi32_i32$0 = 0;
                HEAP32[($7_1 + 16 | 0) >> 2] = 0;
                HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
                $3_1 = ($0_1 << 2 | 0) + 99936 | 0;
                label$95: {
                  label$96: {
                    label$97: {
                      $5_1 = 1 << $0_1 | 0;
                      if ($10_1 & $5_1 | 0) {
                        break label$97;
                      }
                      HEAP32[(0 + 99636 | 0) >> 2] = $10_1 | $5_1 | 0;
                      HEAP32[$3_1 >> 2] = $7_1;
                      HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
                      break label$96;
                    }
                    $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
                    $5_1 = HEAP32[$3_1 >> 2] | 0;
                    label$98: while (1) {
                      $3_1 = $5_1;
                      if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
                        break label$95;
                      }
                      $5_1 = $0_1 >>> 29 | 0;
                      $0_1 = $0_1 << 1 | 0;
                      $2_1 = ($3_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
                      $5_1 = HEAP32[$2_1 >> 2] | 0;
                      if ($5_1) {
                        continue label$98;
                      }
                      break label$98;
                    };
                    HEAP32[$2_1 >> 2] = $7_1;
                    HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
                  }
                  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1;
                  HEAP32[($7_1 + 8 | 0) >> 2] = $7_1;
                  break label$89;
                }
                $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
                HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
                HEAP32[($7_1 + 24 | 0) >> 2] = 0;
                HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
              }
              $0_1 = $8_1 + 8 | 0;
              break label$1;
            }
            label$99: {
              if (!$10_1) {
                break label$99;
              }
              label$100: {
                label$101: {
                  $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
                  $5_1 = ($8_1 << 2 | 0) + 99936 | 0;
                  if (($7_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
                    break label$101;
                  }
                  HEAP32[$5_1 >> 2] = $0_1;
                  if ($0_1) {
                    break label$100;
                  }
                  (wasm2js_i32$0 = 0, wasm2js_i32$1 = $9_1 & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99636 | 0) >> 2] = wasm2js_i32$1;
                  break label$99;
                }
                HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($7_1 | 0) ? 16 : 20) | 0) >> 2] = $0_1;
                if (!$0_1) {
                  break label$99;
                }
              }
              HEAP32[($0_1 + 24 | 0) >> 2] = $10_1;
              label$102: {
                $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
                if (!$5_1) {
                  break label$102;
                }
                HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
              }
              $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
              if (!$5_1) {
                break label$99;
              }
              HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
            }
            label$103: {
              label$104: {
                if ($4_1 >>> 0 > 15 >>> 0) {
                  break label$104;
                }
                $0_1 = $4_1 + $3_1 | 0;
                HEAP32[($7_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
                $0_1 = $7_1 + $0_1 | 0;
                HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$103;
              }
              HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $3_1 = $7_1 + $3_1 | 0;
              HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
              HEAP32[($3_1 + $4_1 | 0) >> 2] = $4_1;
              label$105: {
                if (!$6_1) {
                  break label$105;
                }
                $5_1 = ($6_1 & -8 | 0) + 99672 | 0;
                $0_1 = HEAP32[(0 + 99652 | 0) >> 2] | 0;
                label$106: {
                  label$107: {
                    $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
                    if ($8_1 & $2_1 | 0) {
                      break label$107;
                    }
                    HEAP32[(0 + 99632 | 0) >> 2] = $8_1 | $2_1 | 0;
                    $8_1 = $5_1;
                    break label$106;
                  }
                  $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
                HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
                HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
              }
              HEAP32[(0 + 99652 | 0) >> 2] = $3_1;
              HEAP32[(0 + 99640 | 0) >> 2] = $4_1;
            }
            $0_1 = $7_1 + 8 | 0;
          }
          global$0 = $1_1 + 16 | 0;
          return $0_1 | 0;
        }

        function $80($0_1, $1_1, $2_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $2_1 = $2_1 | 0;
          var $4_1 = 0,$5_1 = 0,$7_1 = 0,$8_1 = 0,$9_1 = 0,$3_1 = 0,$6_1 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $3_1 = $0_1 + ((-8 - $0_1 | 0) & 7 | 0) | 0;
          HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 | 3 | 0;
          $4_1 = $1_1 + ((-8 - $1_1 | 0) & 7 | 0) | 0;
          $5_1 = $3_1 + $2_1 | 0;
          $0_1 = $4_1 - $5_1 | 0;
          label$1: {
            label$2: {
              if (($4_1 | 0) != (HEAP32[(0 + 99656 | 0) >> 2] | 0 | 0)) {
                break label$2;
              }
              HEAP32[(0 + 99656 | 0) >> 2] = $5_1;
              $2_1 = (HEAP32[(0 + 99644 | 0) >> 2] | 0) + $0_1 | 0;
              HEAP32[(0 + 99644 | 0) >> 2] = $2_1;
              HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
              break label$1;
            }
            label$3: {
              if (($4_1 | 0) != (HEAP32[(0 + 99652 | 0) >> 2] | 0 | 0)) {
                break label$3;
              }
              HEAP32[(0 + 99652 | 0) >> 2] = $5_1;
              $2_1 = (HEAP32[(0 + 99640 | 0) >> 2] | 0) + $0_1 | 0;
              HEAP32[(0 + 99640 | 0) >> 2] = $2_1;
              HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
              HEAP32[($5_1 + $2_1 | 0) >> 2] = $2_1;
              break label$1;
            }
            label$4: {
              $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
              if (($1_1 & 3 | 0 | 0) != (1 | 0)) {
                break label$4;
              }
              $6_1 = $1_1 & -8 | 0;
              $2_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
              label$5: {
                label$6: {
                  if ($1_1 >>> 0 > 255 >>> 0) {
                    break label$6;
                  }
                  $7_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $8_1 = $1_1 >>> 3 | 0;
                  $1_1 = ($8_1 << 3 | 0) + 99672 | 0;
                  label$7: {
                    if (($2_1 | 0) != ($7_1 | 0)) {
                      break label$7;
                    }
                    (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99632 | 0) >> 2] = wasm2js_i32$1;
                    break label$5;
                  }
                  HEAP32[($7_1 + 12 | 0) >> 2] = $2_1;
                  HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
                  break label$5;
                }
                $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
                label$8: {
                  label$9: {
                    if (($2_1 | 0) == ($4_1 | 0)) {
                      break label$9;
                    }
                    $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                    HEAP32[(0 + 99648 | 0) >> 2] | 0;
                    HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
                    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
                    break label$8;
                  }
                  label$10: {
                    label$11: {
                      label$12: {
                        $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
                        if (!$1_1) {
                          break label$12;
                        }
                        $7_1 = $4_1 + 20 | 0;
                        break label$11;
                      }
                      $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
                      if (!$1_1) {
                        break label$10;
                      }
                      $7_1 = $4_1 + 16 | 0;
                    }
                    label$13: while (1) {
                      $8_1 = $7_1;
                      $2_1 = $1_1;
                      $7_1 = $2_1 + 20 | 0;
                      $1_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
                      if ($1_1) {
                        continue label$13;
                      }
                      $7_1 = $2_1 + 16 | 0;
                      $1_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
                      if ($1_1) {
                        continue label$13;
                      }
                      break label$13;
                    };
                    HEAP32[$8_1 >> 2] = 0;
                    break label$8;
                  }
                  $2_1 = 0;
                }
                if (!$9_1) {
                  break label$5;
                }
                label$14: {
                  label$15: {
                    $7_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
                    $1_1 = ($7_1 << 2 | 0) + 99936 | 0;
                    if (($4_1 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
                      break label$15;
                    }
                    HEAP32[$1_1 >> 2] = $2_1;
                    if ($2_1) {
                      break label$14;
                    }
                    (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99636 | 0) >> 2] = wasm2js_i32$1;
                    break label$5;
                  }
                  HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($4_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
                  if (!$2_1) {
                    break label$5;
                  }
                }
                HEAP32[($2_1 + 24 | 0) >> 2] = $9_1;
                label$16: {
                  $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
                  if (!$1_1) {
                    break label$16;
                  }
                  HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
                  HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
                }
                $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
                if (!$1_1) {
                  break label$5;
                }
                HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
                HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
              }
              $0_1 = $6_1 + $0_1 | 0;
              $4_1 = $4_1 + $6_1 | 0;
              $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
            }
            HEAP32[($4_1 + 4 | 0) >> 2] = $1_1 & -2 | 0;
            HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($5_1 + $0_1 | 0) >> 2] = $0_1;
            label$17: {
              if ($0_1 >>> 0 > 255 >>> 0) {
                break label$17;
              }
              $2_1 = ($0_1 & -8 | 0) + 99672 | 0;
              label$18: {
                label$19: {
                  $1_1 = HEAP32[(0 + 99632 | 0) >> 2] | 0;
                  $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
                  if ($1_1 & $0_1 | 0) {
                    break label$19;
                  }
                  HEAP32[(0 + 99632 | 0) >> 2] = $1_1 | $0_1 | 0;
                  $0_1 = $2_1;
                  break label$18;
                }
                $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              }
              HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
              HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
              HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
              break label$1;
            }
            $2_1 = 31;
            label$20: {
              if ($0_1 >>> 0 > 16777215 >>> 0) {
                break label$20;
              }
              $2_1 = Math_clz32($0_1 >>> 8 | 0);
              $2_1 = ((($0_1 >>> (38 - $2_1 | 0) | 0) & 1 | 0) - ($2_1 << 1 | 0) | 0) + 62 | 0;
            }
            HEAP32[($5_1 + 28 | 0) >> 2] = $2_1;
            HEAP32[($5_1 + 16 | 0) >> 2] = 0;
            HEAP32[($5_1 + 20 | 0) >> 2] = 0;
            $1_1 = ($2_1 << 2 | 0) + 99936 | 0;
            label$21: {
              label$22: {
                label$23: {
                  $7_1 = HEAP32[(0 + 99636 | 0) >> 2] | 0;
                  $4_1 = 1 << $2_1 | 0;
                  if ($7_1 & $4_1 | 0) {
                    break label$23;
                  }
                  HEAP32[(0 + 99636 | 0) >> 2] = $7_1 | $4_1 | 0;
                  HEAP32[$1_1 >> 2] = $5_1;
                  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
                  break label$22;
                }
                $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
                $7_1 = HEAP32[$1_1 >> 2] | 0;
                label$24: while (1) {
                  $1_1 = $7_1;
                  if (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
                    break label$21;
                  }
                  $7_1 = $2_1 >>> 29 | 0;
                  $2_1 = $2_1 << 1 | 0;
                  $4_1 = ($1_1 + ($7_1 & 4 | 0) | 0) + 16 | 0;
                  $7_1 = HEAP32[$4_1 >> 2] | 0;
                  if ($7_1) {
                    continue label$24;
                  }
                  break label$24;
                };
                HEAP32[$4_1 >> 2] = $5_1;
                HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
              }
              HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
              break label$1;
            }
            $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
            HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
            HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
            HEAP32[($5_1 + 24 | 0) >> 2] = 0;
            HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
            HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
          }
          return $3_1 + 8 | 0 | 0;
        }

        function $81($0_1) {
          $0_1 = $0_1 | 0;
          var $4_1 = 0,$2_1 = 0,$1_1 = 0,$5_1 = 0,$3_1 = 0,$6_1 = 0,$7_1 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          label$1: {
            if (!$0_1) {
              break label$1;
            }
            $1_1 = $0_1 + -8 | 0;
            $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
            $0_1 = $2_1 & -8 | 0;
            $3_1 = $1_1 + $0_1 | 0;
            label$2: {
              if ($2_1 & 1 | 0) {
                break label$2;
              }
              if (!($2_1 & 2 | 0)) {
                break label$1;
              }
              $4_1 = HEAP32[$1_1 >> 2] | 0;
              $1_1 = $1_1 - $4_1 | 0;
              $5_1 = HEAP32[(0 + 99648 | 0) >> 2] | 0;
              if ($1_1 >>> 0 < $5_1 >>> 0) {
                break label$1;
              }
              $0_1 = $4_1 + $0_1 | 0;
              label$3: {
                label$4: {
                  label$5: {
                    if (($1_1 | 0) == (HEAP32[(0 + 99652 | 0) >> 2] | 0 | 0)) {
                      break label$5;
                    }
                    $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
                    label$6: {
                      if ($4_1 >>> 0 > 255 >>> 0) {
                        break label$6;
                      }
                      $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
                      $6_1 = $4_1 >>> 3 | 0;
                      $4_1 = ($6_1 << 3 | 0) + 99672 | 0;
                      label$7: {
                        if (($2_1 | 0) != ($5_1 | 0)) {
                          break label$7;
                        }
                        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99632 | 0) >> 2] = wasm2js_i32$1;
                        break label$2;
                      }
                      HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
                      HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
                      break label$2;
                    }
                    $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
                    label$8: {
                      if (($2_1 | 0) == ($1_1 | 0)) {
                        break label$8;
                      }
                      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
                      HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
                      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
                      break label$3;
                    }
                    label$9: {
                      label$10: {
                        $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
                        if (!$4_1) {
                          break label$10;
                        }
                        $5_1 = $1_1 + 20 | 0;
                        break label$9;
                      }
                      $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
                      if (!$4_1) {
                        break label$4;
                      }
                      $5_1 = $1_1 + 16 | 0;
                    }
                    label$11: while (1) {
                      $6_1 = $5_1;
                      $2_1 = $4_1;
                      $5_1 = $2_1 + 20 | 0;
                      $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
                      if ($4_1) {
                        continue label$11;
                      }
                      $5_1 = $2_1 + 16 | 0;
                      $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
                      if ($4_1) {
                        continue label$11;
                      }
                      break label$11;
                    };
                    HEAP32[$6_1 >> 2] = 0;
                    break label$3;
                  }
                  $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                  if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
                    break label$2;
                  }
                  HEAP32[(0 + 99640 | 0) >> 2] = $0_1;
                  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
                  HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
                  HEAP32[$3_1 >> 2] = $0_1;
                  return;
                }
                $2_1 = 0;
              }
              if (!$7_1) {
                break label$2;
              }
              label$12: {
                label$13: {
                  $5_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
                  $4_1 = ($5_1 << 2 | 0) + 99936 | 0;
                  if (($1_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
                    break label$13;
                  }
                  HEAP32[$4_1 >> 2] = $2_1;
                  if ($2_1) {
                    break label$12;
                  }
                  (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99636 | 0) >> 2] = wasm2js_i32$1;
                  break label$2;
                }
                HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
                if (!$2_1) {
                  break label$2;
                }
              }
              HEAP32[($2_1 + 24 | 0) >> 2] = $7_1;
              label$14: {
                $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
                if (!$4_1) {
                  break label$14;
                }
                HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
              }
              $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
              if (!$4_1) {
                break label$2;
              }
              HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
            }
            if ($1_1 >>> 0 >= $3_1 >>> 0) {
              break label$1;
            }
            $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
            if (!($4_1 & 1 | 0)) {
              break label$1;
            }
            label$15: {
              label$16: {
                label$17: {
                  label$18: {
                    label$19: {
                      if ($4_1 & 2 | 0) {
                        break label$19;
                      }
                      label$20: {
                        if (($3_1 | 0) != (HEAP32[(0 + 99656 | 0) >> 2] | 0 | 0)) {
                          break label$20;
                        }
                        HEAP32[(0 + 99656 | 0) >> 2] = $1_1;
                        $0_1 = (HEAP32[(0 + 99644 | 0) >> 2] | 0) + $0_1 | 0;
                        HEAP32[(0 + 99644 | 0) >> 2] = $0_1;
                        HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
                        if (($1_1 | 0) != (HEAP32[(0 + 99652 | 0) >> 2] | 0 | 0)) {
                          break label$1;
                        }
                        HEAP32[(0 + 99640 | 0) >> 2] = 0;
                        HEAP32[(0 + 99652 | 0) >> 2] = 0;
                        return;
                      }
                      label$21: {
                        if (($3_1 | 0) != (HEAP32[(0 + 99652 | 0) >> 2] | 0 | 0)) {
                          break label$21;
                        }
                        HEAP32[(0 + 99652 | 0) >> 2] = $1_1;
                        $0_1 = (HEAP32[(0 + 99640 | 0) >> 2] | 0) + $0_1 | 0;
                        HEAP32[(0 + 99640 | 0) >> 2] = $0_1;
                        HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
                        HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
                        return;
                      }
                      $0_1 = ($4_1 & -8 | 0) + $0_1 | 0;
                      $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
                      label$22: {
                        if ($4_1 >>> 0 > 255 >>> 0) {
                          break label$22;
                        }
                        $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                        $3_1 = $4_1 >>> 3 | 0;
                        $4_1 = ($3_1 << 3 | 0) + 99672 | 0;
                        label$23: {
                          if (($2_1 | 0) != ($5_1 | 0)) {
                            break label$23;
                          }
                          (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99632 | 0) >> 2] = wasm2js_i32$1;
                          break label$16;
                        }
                        HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
                        HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
                        break label$16;
                      }
                      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                      label$24: {
                        if (($2_1 | 0) == ($3_1 | 0)) {
                          break label$24;
                        }
                        $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                        HEAP32[(0 + 99648 | 0) >> 2] | 0;
                        HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
                        HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
                        break label$17;
                      }
                      label$25: {
                        label$26: {
                          $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
                          if (!$4_1) {
                            break label$26;
                          }
                          $5_1 = $3_1 + 20 | 0;
                          break label$25;
                        }
                        $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                        if (!$4_1) {
                          break label$18;
                        }
                        $5_1 = $3_1 + 16 | 0;
                      }
                      label$27: while (1) {
                        $6_1 = $5_1;
                        $2_1 = $4_1;
                        $5_1 = $2_1 + 20 | 0;
                        $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
                        if ($4_1) {
                          continue label$27;
                        }
                        $5_1 = $2_1 + 16 | 0;
                        $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
                        if ($4_1) {
                          continue label$27;
                        }
                        break label$27;
                      };
                      HEAP32[$6_1 >> 2] = 0;
                      break label$17;
                    }
                    HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
                    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
                    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
                    break label$15;
                  }
                  $2_1 = 0;
                }
                if (!$7_1) {
                  break label$16;
                }
                label$28: {
                  label$29: {
                    $5_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                    $4_1 = ($5_1 << 2 | 0) + 99936 | 0;
                    if (($3_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
                      break label$29;
                    }
                    HEAP32[$4_1 >> 2] = $2_1;
                    if ($2_1) {
                      break label$28;
                    }
                    (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99636 | 0) >> 2] = wasm2js_i32$1;
                    break label$16;
                  }
                  HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
                  if (!$2_1) {
                    break label$16;
                  }
                }
                HEAP32[($2_1 + 24 | 0) >> 2] = $7_1;
                label$30: {
                  $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                  if (!$4_1) {
                    break label$30;
                  }
                  HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
                  HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
                }
                $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
                if (!$4_1) {
                  break label$16;
                }
                HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
              }
              HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
              HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
              if (($1_1 | 0) != (HEAP32[(0 + 99652 | 0) >> 2] | 0 | 0)) {
                break label$15;
              }
              HEAP32[(0 + 99640 | 0) >> 2] = $0_1;
              return;
            }
            label$31: {
              if ($0_1 >>> 0 > 255 >>> 0) {
                break label$31;
              }
              $2_1 = ($0_1 & -8 | 0) + 99672 | 0;
              label$32: {
                label$33: {
                  $4_1 = HEAP32[(0 + 99632 | 0) >> 2] | 0;
                  $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
                  if ($4_1 & $0_1 | 0) {
                    break label$33;
                  }
                  HEAP32[(0 + 99632 | 0) >> 2] = $4_1 | $0_1 | 0;
                  $0_1 = $2_1;
                  break label$32;
                }
                $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              }
              HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
              HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
              HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
              HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
              return;
            }
            $2_1 = 31;
            label$34: {
              if ($0_1 >>> 0 > 16777215 >>> 0) {
                break label$34;
              }
              $2_1 = Math_clz32($0_1 >>> 8 | 0);
              $2_1 = ((($0_1 >>> (38 - $2_1 | 0) | 0) & 1 | 0) - ($2_1 << 1 | 0) | 0) + 62 | 0;
            }
            HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
            HEAP32[($1_1 + 16 | 0) >> 2] = 0;
            HEAP32[($1_1 + 20 | 0) >> 2] = 0;
            $3_1 = ($2_1 << 2 | 0) + 99936 | 0;
            label$35: {
              label$36: {
                label$37: {
                  label$38: {
                    $4_1 = HEAP32[(0 + 99636 | 0) >> 2] | 0;
                    $5_1 = 1 << $2_1 | 0;
                    if ($4_1 & $5_1 | 0) {
                      break label$38;
                    }
                    HEAP32[(0 + 99636 | 0) >> 2] = $4_1 | $5_1 | 0;
                    $0_1 = 8;
                    $2_1 = 24;
                    $5_1 = $3_1;
                    break label$37;
                  }
                  $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
                  $5_1 = HEAP32[$3_1 >> 2] | 0;
                  label$39: while (1) {
                    $4_1 = $5_1;
                    if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
                      break label$36;
                    }
                    $5_1 = $2_1 >>> 29 | 0;
                    $2_1 = $2_1 << 1 | 0;
                    $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
                    $5_1 = HEAP32[$3_1 >> 2] | 0;
                    if ($5_1) {
                      continue label$39;
                    }
                    break label$39;
                  };
                  $0_1 = 8;
                  $2_1 = 24;
                  $5_1 = $4_1;
                }
                $4_1 = $1_1;
                $6_1 = $4_1;
                break label$35;
              }
              $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
              HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
              $2_1 = 8;
              $3_1 = $4_1 + 8 | 0;
              $6_1 = 0;
              $0_1 = 24;
            }
            HEAP32[$3_1 >> 2] = $1_1;
            HEAP32[($1_1 + $2_1 | 0) >> 2] = $5_1;
            HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
            HEAP32[($1_1 + $0_1 | 0) >> 2] = $6_1;
            $1_1 = (HEAP32[(0 + 99664 | 0) >> 2] | 0) + -1 | 0;
            HEAP32[(0 + 99664 | 0) >> 2] = $1_1 ? $1_1 : -1;
          }
        }

        function $82($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var $2_1 = 0,$3_1 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          label$1: {
            if ($0_1) {
              break label$1;
            }
            return $79($1_1 | 0) | 0 | 0;
          }
          label$2: {
            if ($1_1 >>> 0 < -64 >>> 0) {
              break label$2;
            }
            (wasm2js_i32$0 = $17() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
            return 0 | 0;
          }
          label$3: {
            $2_1 = $83($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
            if (!$2_1) {
              break label$3;
            }
            return $2_1 + 8 | 0 | 0;
          }
          label$4: {
            $2_1 = $79($1_1 | 0) | 0;
            if ($2_1) {
              break label$4;
            }
            return 0 | 0;
          }
          $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
          $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
          $28($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
          $81($0_1 | 0);
          return $2_1 | 0;
        }

        function $83($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var $3_1 = 0,$4_1 = 0,$5_1 = 0,$6_1 = 0,$2_1 = 0,$7_1 = 0,$9_1 = 0,$8_1 = 0,$10_1 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          $3_1 = $2_1 & -8 | 0;
          label$1: {
            label$2: {
              if ($2_1 & 3 | 0) {
                break label$2;
              }
              label$3: {
                if ($1_1 >>> 0 >= 256 >>> 0) {
                  break label$3;
                }
                return 0 | 0;
              }
              label$4: {
                if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
                  break label$4;
                }
                $4_1 = $0_1;
                if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 100112 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
                  break label$1;
                }
              }
              return 0 | 0;
            }
            $5_1 = $0_1 + $3_1 | 0;
            label$5: {
              label$6: {
                if ($3_1 >>> 0 < $1_1 >>> 0) {
                  break label$6;
                }
                $3_1 = $3_1 - $1_1 | 0;
                if ($3_1 >>> 0 < 16 >>> 0) {
                  break label$5;
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
                $1_1 = $0_1 + $1_1 | 0;
                HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                $84($1_1 | 0, $3_1 | 0);
                break label$5;
              }
              $4_1 = 0;
              label$7: {
                if (($5_1 | 0) != (HEAP32[(0 + 99656 | 0) >> 2] | 0 | 0)) {
                  break label$7;
                }
                $3_1 = (HEAP32[(0 + 99644 | 0) >> 2] | 0) + $3_1 | 0;
                if ($3_1 >>> 0 <= $1_1 >>> 0) {
                  break label$1;
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
                $2_1 = $0_1 + $1_1 | 0;
                $1_1 = $3_1 - $1_1 | 0;
                HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
                HEAP32[(0 + 99644 | 0) >> 2] = $1_1;
                HEAP32[(0 + 99656 | 0) >> 2] = $2_1;
                break label$5;
              }
              label$8: {
                if (($5_1 | 0) != (HEAP32[(0 + 99652 | 0) >> 2] | 0 | 0)) {
                  break label$8;
                }
                $4_1 = 0;
                $3_1 = (HEAP32[(0 + 99640 | 0) >> 2] | 0) + $3_1 | 0;
                if ($3_1 >>> 0 < $1_1 >>> 0) {
                  break label$1;
                }
                label$9: {
                  label$10: {
                    $4_1 = $3_1 - $1_1 | 0;
                    if ($4_1 >>> 0 < 16 >>> 0) {
                      break label$10;
                    }
                    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
                    $1_1 = $0_1 + $1_1 | 0;
                    HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
                    $3_1 = $0_1 + $3_1 | 0;
                    HEAP32[$3_1 >> 2] = $4_1;
                    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
                    break label$9;
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
                  $1_1 = $0_1 + $3_1 | 0;
                  HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                  $4_1 = 0;
                  $1_1 = 0;
                }
                HEAP32[(0 + 99652 | 0) >> 2] = $1_1;
                HEAP32[(0 + 99640 | 0) >> 2] = $4_1;
                break label$5;
              }
              $4_1 = 0;
              $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
              if ($6_1 & 2 | 0) {
                break label$1;
              }
              $7_1 = ($6_1 & -8 | 0) + $3_1 | 0;
              if ($7_1 >>> 0 < $1_1 >>> 0) {
                break label$1;
              }
              $8_1 = $7_1 - $1_1 | 0;
              $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              label$11: {
                label$12: {
                  if ($6_1 >>> 0 > 255 >>> 0) {
                    break label$12;
                  }
                  $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                  $6_1 = $6_1 >>> 3 | 0;
                  $5_1 = ($6_1 << 3 | 0) + 99672 | 0;
                  label$13: {
                    if (($3_1 | 0) != ($4_1 | 0)) {
                      break label$13;
                    }
                    (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99632 | 0) >> 2] = wasm2js_i32$1;
                    break label$11;
                  }
                  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                  HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                  break label$11;
                }
                $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
                label$14: {
                  label$15: {
                    if (($3_1 | 0) == ($5_1 | 0)) {
                      break label$15;
                    }
                    $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                    HEAP32[(0 + 99648 | 0) >> 2] | 0;
                    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                    HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                    break label$14;
                  }
                  label$16: {
                    label$17: {
                      label$18: {
                        $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                        if (!$4_1) {
                          break label$18;
                        }
                        $6_1 = $5_1 + 20 | 0;
                        break label$17;
                      }
                      $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                      if (!$4_1) {
                        break label$16;
                      }
                      $6_1 = $5_1 + 16 | 0;
                    }
                    label$19: while (1) {
                      $10_1 = $6_1;
                      $3_1 = $4_1;
                      $6_1 = $3_1 + 20 | 0;
                      $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
                      if ($4_1) {
                        continue label$19;
                      }
                      $6_1 = $3_1 + 16 | 0;
                      $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                      if ($4_1) {
                        continue label$19;
                      }
                      break label$19;
                    };
                    HEAP32[$10_1 >> 2] = 0;
                    break label$14;
                  }
                  $3_1 = 0;
                }
                if (!$9_1) {
                  break label$11;
                }
                label$20: {
                  label$21: {
                    $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
                    $4_1 = ($6_1 << 2 | 0) + 99936 | 0;
                    if (($5_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
                      break label$21;
                    }
                    HEAP32[$4_1 >> 2] = $3_1;
                    if ($3_1) {
                      break label$20;
                    }
                    (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99636 | 0) >> 2] = wasm2js_i32$1;
                    break label$11;
                  }
                  HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $3_1;
                  if (!$3_1) {
                    break label$11;
                  }
                }
                HEAP32[($3_1 + 24 | 0) >> 2] = $9_1;
                label$22: {
                  $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                  if (!$4_1) {
                    break label$22;
                  }
                  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
                  HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
                }
                $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                if (!$4_1) {
                  break label$11;
                }
                HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
              }
              label$23: {
                if ($8_1 >>> 0 > 15 >>> 0) {
                  break label$23;
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $7_1 | 0 | 2 | 0;
                $1_1 = $0_1 + $7_1 | 0;
                HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$5;
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
              $1_1 = $0_1 + $1_1 | 0;
              HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 3 | 0;
              $3_1 = $0_1 + $7_1 | 0;
              HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              $84($1_1 | 0, $8_1 | 0);
            }
            $4_1 = $0_1;
          }
          return $4_1 | 0;
        }

        function $84($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var $4_1 = 0,$3_1 = 0,$5_1 = 0,$2_1 = 0,$7_1 = 0,$6_1 = 0,wasm2js_i32$0 = 0,wasm2js_i32$1 = 0;
          $2_1 = $0_1 + $1_1 | 0;
          label$1: {
            label$2: {
              $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($3_1 & 1 | 0) {
                break label$2;
              }
              if (!($3_1 & 2 | 0)) {
                break label$1;
              }
              $4_1 = HEAP32[$0_1 >> 2] | 0;
              $1_1 = $4_1 + $1_1 | 0;
              label$3: {
                label$4: {
                  label$5: {
                    label$6: {
                      $0_1 = $0_1 - $4_1 | 0;
                      if (($0_1 | 0) == (HEAP32[(0 + 99652 | 0) >> 2] | 0 | 0)) {
                        break label$6;
                      }
                      $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                      label$7: {
                        if ($4_1 >>> 0 > 255 >>> 0) {
                          break label$7;
                        }
                        $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                        $6_1 = $4_1 >>> 3 | 0;
                        $4_1 = ($6_1 << 3 | 0) + 99672 | 0;
                        if (($3_1 | 0) != ($5_1 | 0)) {
                          break label$5;
                        }
                        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99632 | 0) >> 2] = wasm2js_i32$1;
                        break label$2;
                      }
                      $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                      label$8: {
                        if (($3_1 | 0) == ($0_1 | 0)) {
                          break label$8;
                        }
                        $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                        HEAP32[(0 + 99648 | 0) >> 2] | 0;
                        HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                        HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                        break label$3;
                      }
                      label$9: {
                        label$10: {
                          $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                          if (!$4_1) {
                            break label$10;
                          }
                          $5_1 = $0_1 + 20 | 0;
                          break label$9;
                        }
                        $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                        if (!$4_1) {
                          break label$4;
                        }
                        $5_1 = $0_1 + 16 | 0;
                      }
                      label$11: while (1) {
                        $6_1 = $5_1;
                        $3_1 = $4_1;
                        $5_1 = $3_1 + 20 | 0;
                        $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
                        if ($4_1) {
                          continue label$11;
                        }
                        $5_1 = $3_1 + 16 | 0;
                        $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                        if ($4_1) {
                          continue label$11;
                        }
                        break label$11;
                      };
                      HEAP32[$6_1 >> 2] = 0;
                      break label$3;
                    }
                    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                    if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
                      break label$2;
                    }
                    HEAP32[(0 + 99640 | 0) >> 2] = $1_1;
                    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
                    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
                    HEAP32[$2_1 >> 2] = $1_1;
                    return;
                  }
                  HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
                  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
                  break label$2;
                }
                $3_1 = 0;
              }
              if (!$7_1) {
                break label$2;
              }
              label$12: {
                label$13: {
                  $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                  $4_1 = ($5_1 << 2 | 0) + 99936 | 0;
                  if (($0_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
                    break label$13;
                  }
                  HEAP32[$4_1 >> 2] = $3_1;
                  if ($3_1) {
                    break label$12;
                  }
                  (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99636 | 0) >> 2] = wasm2js_i32$1;
                  break label$2;
                }
                HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $3_1;
                if (!$3_1) {
                  break label$2;
                }
              }
              HEAP32[($3_1 + 24 | 0) >> 2] = $7_1;
              label$14: {
                $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if (!$4_1) {
                  break label$14;
                }
                HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
              }
              $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
              if (!$4_1) {
                break label$2;
              }
              HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
            }
            label$15: {
              label$16: {
                label$17: {
                  label$18: {
                    label$19: {
                      $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                      if ($4_1 & 2 | 0) {
                        break label$19;
                      }
                      label$20: {
                        if (($2_1 | 0) != (HEAP32[(0 + 99656 | 0) >> 2] | 0 | 0)) {
                          break label$20;
                        }
                        HEAP32[(0 + 99656 | 0) >> 2] = $0_1;
                        $1_1 = (HEAP32[(0 + 99644 | 0) >> 2] | 0) + $1_1 | 0;
                        HEAP32[(0 + 99644 | 0) >> 2] = $1_1;
                        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
                        if (($0_1 | 0) != (HEAP32[(0 + 99652 | 0) >> 2] | 0 | 0)) {
                          break label$1;
                        }
                        HEAP32[(0 + 99640 | 0) >> 2] = 0;
                        HEAP32[(0 + 99652 | 0) >> 2] = 0;
                        return;
                      }
                      label$21: {
                        if (($2_1 | 0) != (HEAP32[(0 + 99652 | 0) >> 2] | 0 | 0)) {
                          break label$21;
                        }
                        HEAP32[(0 + 99652 | 0) >> 2] = $0_1;
                        $1_1 = (HEAP32[(0 + 99640 | 0) >> 2] | 0) + $1_1 | 0;
                        HEAP32[(0 + 99640 | 0) >> 2] = $1_1;
                        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
                        HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
                        return;
                      }
                      $1_1 = ($4_1 & -8 | 0) + $1_1 | 0;
                      $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
                      label$22: {
                        if ($4_1 >>> 0 > 255 >>> 0) {
                          break label$22;
                        }
                        $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
                        $2_1 = $4_1 >>> 3 | 0;
                        $4_1 = ($2_1 << 3 | 0) + 99672 | 0;
                        label$23: {
                          if (($3_1 | 0) != ($5_1 | 0)) {
                            break label$23;
                          }
                          (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99632 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99632 | 0) >> 2] = wasm2js_i32$1;
                          break label$16;
                        }
                        HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
                        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
                        break label$16;
                      }
                      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
                      label$24: {
                        if (($3_1 | 0) == ($2_1 | 0)) {
                          break label$24;
                        }
                        $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
                        HEAP32[(0 + 99648 | 0) >> 2] | 0;
                        HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                        HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                        break label$17;
                      }
                      label$25: {
                        label$26: {
                          $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
                          if (!$4_1) {
                            break label$26;
                          }
                          $5_1 = $2_1 + 20 | 0;
                          break label$25;
                        }
                        $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
                        if (!$4_1) {
                          break label$18;
                        }
                        $5_1 = $2_1 + 16 | 0;
                      }
                      label$27: while (1) {
                        $6_1 = $5_1;
                        $3_1 = $4_1;
                        $5_1 = $3_1 + 20 | 0;
                        $4_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
                        if ($4_1) {
                          continue label$27;
                        }
                        $5_1 = $3_1 + 16 | 0;
                        $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                        if ($4_1) {
                          continue label$27;
                        }
                        break label$27;
                      };
                      HEAP32[$6_1 >> 2] = 0;
                      break label$17;
                    }
                    HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 & -2 | 0;
                    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
                    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
                    break label$15;
                  }
                  $3_1 = 0;
                }
                if (!$7_1) {
                  break label$16;
                }
                label$28: {
                  label$29: {
                    $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
                    $4_1 = ($5_1 << 2 | 0) + 99936 | 0;
                    if (($2_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
                      break label$29;
                    }
                    HEAP32[$4_1 >> 2] = $3_1;
                    if ($3_1) {
                      break label$28;
                    }
                    (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 99636 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 99636 | 0) >> 2] = wasm2js_i32$1;
                    break label$16;
                  }
                  HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $3_1;
                  if (!$3_1) {
                    break label$16;
                  }
                }
                HEAP32[($3_1 + 24 | 0) >> 2] = $7_1;
                label$30: {
                  $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
                  if (!$4_1) {
                    break label$30;
                  }
                  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
                  HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
                }
                $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
                if (!$4_1) {
                  break label$16;
                }
                HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
              HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
              if (($0_1 | 0) != (HEAP32[(0 + 99652 | 0) >> 2] | 0 | 0)) {
                break label$15;
              }
              HEAP32[(0 + 99640 | 0) >> 2] = $1_1;
              return;
            }
            label$31: {
              if ($1_1 >>> 0 > 255 >>> 0) {
                break label$31;
              }
              $3_1 = ($1_1 & -8 | 0) + 99672 | 0;
              label$32: {
                label$33: {
                  $4_1 = HEAP32[(0 + 99632 | 0) >> 2] | 0;
                  $1_1 = 1 << ($1_1 >>> 3 | 0) | 0;
                  if ($4_1 & $1_1 | 0) {
                    break label$33;
                  }
                  HEAP32[(0 + 99632 | 0) >> 2] = $4_1 | $1_1 | 0;
                  $1_1 = $3_1;
                  break label$32;
                }
                $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
              }
              HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
              HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
              return;
            }
            $3_1 = 31;
            label$34: {
              if ($1_1 >>> 0 > 16777215 >>> 0) {
                break label$34;
              }
              $3_1 = Math_clz32($1_1 >>> 8 | 0);
              $3_1 = ((($1_1 >>> (38 - $3_1 | 0) | 0) & 1 | 0) - ($3_1 << 1 | 0) | 0) + 62 | 0;
            }
            HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
            HEAP32[($0_1 + 16 | 0) >> 2] = 0;
            HEAP32[($0_1 + 20 | 0) >> 2] = 0;
            $4_1 = ($3_1 << 2 | 0) + 99936 | 0;
            label$35: {
              label$36: {
                label$37: {
                  $5_1 = HEAP32[(0 + 99636 | 0) >> 2] | 0;
                  $2_1 = 1 << $3_1 | 0;
                  if ($5_1 & $2_1 | 0) {
                    break label$37;
                  }
                  HEAP32[(0 + 99636 | 0) >> 2] = $5_1 | $2_1 | 0;
                  HEAP32[$4_1 >> 2] = $0_1;
                  HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
                  break label$36;
                }
                $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
                $5_1 = HEAP32[$4_1 >> 2] | 0;
                label$38: while (1) {
                  $4_1 = $5_1;
                  if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
                    break label$35;
                  }
                  $5_1 = $3_1 >>> 29 | 0;
                  $3_1 = $3_1 << 1 | 0;
                  $2_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
                  $5_1 = HEAP32[$2_1 >> 2] | 0;
                  if ($5_1) {
                    continue label$38;
                  }
                  break label$38;
                };
                HEAP32[$2_1 >> 2] = $0_1;
                HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
              }
              HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
              return;
            }
            $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
            HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
            HEAP32[($0_1 + 24 | 0) >> 2] = 0;
            HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
            HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
          }
        }

        function $85($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          $3$hi = $3$hi | 0;
          $4_1 = $4_1 | 0;
          $4$hi = $4$hi | 0;
          var i64toi32_i32$5 = 0,i64toi32_i32$1 = 0,i64toi32_i32$2 = 0,i64toi32_i32$4 = 0,i64toi32_i32$3 = 0,i64toi32_i32$0 = 0,$10$hi = 0,$10_1 = 0,$6_1 = 0,$9$hi = 0,$7_1 = 0,$5_1 = 0,$9_1 = 0,$12$hi = 0,$12_1 = 0,i64toi32_i32$6 = 0,$8_1 = 0,$11_1 = 0,$11$hi = 0,$139 = 0,$140 = 0,$141 = 0,$142 = 0,$143 = 0,$144 = 0,$145 = 0,$146 = 0,$147 = 0,$148 = 0,$149 = 0,$150 = 0,$151 = 0,$152 = 0,$153 = 0,$154 = 0,$155 = 0,$156 = 0,$157 = 0,$158 = 0,$159 = 0,$20_1 = 0,$25_1 = 0,$30_1 = 0,$34_1 = 0,$40_1 = 0,$48_1 = 0,$50_1 = 0,$58_1 = 0,$58$hi = 0,$64_1 = 0,$64$hi = 0,$68_1 = 0,$68$hi = 0,$78_1 = 0,$78$hi = 0,$106_1 = 0,$109_1 = 0,$136 = 0,$137 = 0,$137$hi = 0,$138 = 0,$138$hi = 0,$145$hi = 0,$148$hi = 0,$168 = 0,$169 = 0,$169$hi = 0,$170 = 0,$170$hi = 0,$177$hi = 0,$180$hi = 0,$193 = 0,$193$hi = 0,$195$hi = 0,$199 = 0,$199$hi = 0,$201$hi = 0,$228 = 0,$228$hi = 0,$230 = 0,$230$hi = 0,$234 = 0,$234$hi = 0,$236 = 0,$237$hi = 0,$251 = 0,$251$hi = 0,$254 = 0,$254$hi = 0,$262$hi = 0,$265 = 0,$266$hi = 0,$271 = 0,$272 = 0,$272$hi = 0,$273 = 0,$273$hi = 0,$280$hi = 0,$283$hi = 0,$298 = 0,$298$hi = 0,$304 = 0,$305$hi = 0,$311 = 0,$311$hi = 0,$313$hi = 0,$314 = 0,$314$hi = 0,$316 = 0,$316$hi = 0,$343 = 0,$343$hi = 0,$345 = 0,$345$hi = 0,$349 = 0,$349$hi = 0,$351 = 0,$352$hi = 0,$358 = 0,$358$hi = 0,$360$hi = 0,$364 = 0,$364$hi = 0,$367 = 0,$367$hi = 0,$368$hi = 0,$377 = 0,$377$hi = 0,$381$hi = 0,$385 = 0,$386$hi = 0,$389 = 0,$389$hi = 0,$392 = 0,$392$hi = 0,$396 = 0,$397$hi = 0,$400 = 0,$400$hi = 0,$406 = 0,$407$hi = 0,$411 = 0,$412$hi = 0,$415 = 0,$415$hi = 0,$421 = 0,$422$hi = 0,$426 = 0,$427$hi = 0;
          $5_1 = global$0 - 112 | 0;
          global$0 = $5_1;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$1 = 2147483647;
          i64toi32_i32$3 = -1;
          i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
          $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
          $9$hi = i64toi32_i32$1;
          label$1: {
            label$2: {
              label$3: {
                i64toi32_i32$1 = $1$hi;
                $6_1 = !($1_1 | i64toi32_i32$1 | 0);
                $20_1 = $6_1;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$0 = $2_1;
                i64toi32_i32$2 = 2147483647;
                i64toi32_i32$3 = -1;
                i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
                $10_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
                $10$hi = i64toi32_i32$2;
                i64toi32_i32$1 = $10_1;
                i64toi32_i32$0 = -2147418112;
                i64toi32_i32$3 = 0;
                i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                i64toi32_i32$2 = i64toi32_i32$4;
                i64toi32_i32$1 = -2147418112;
                i64toi32_i32$3 = 0;
                $25_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
                i64toi32_i32$2 = $10$hi;
                if (!($10_1 | i64toi32_i32$2 | 0) ? $20_1 : $25_1) {
                  break label$3;
                }
                i64toi32_i32$2 = $3$hi;
                i64toi32_i32$3 = $3_1;
                i64toi32_i32$5 = 0;
                i64toi32_i32$1 = 0;
                $30_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
                i64toi32_i32$3 = $9$hi;
                i64toi32_i32$1 = $9_1;
                i64toi32_i32$2 = -2147418112;
                i64toi32_i32$5 = 0;
                i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
                i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                }
                $11_1 = i64toi32_i32$0;
                $11$hi = i64toi32_i32$4;
                i64toi32_i32$3 = i64toi32_i32$0;
                i64toi32_i32$1 = -2147418112;
                i64toi32_i32$5 = 0;
                $34_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
                i64toi32_i32$3 = i64toi32_i32$4;
                i64toi32_i32$3 = i64toi32_i32$4;
                i64toi32_i32$5 = i64toi32_i32$0;
                i64toi32_i32$4 = -2147418112;
                i64toi32_i32$1 = 0;
                if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30_1 : $34_1) {
                  break label$2;
                }
              }
              label$4: {
                i64toi32_i32$5 = $10$hi;
                i64toi32_i32$1 = $10_1;
                i64toi32_i32$3 = 2147418112;
                i64toi32_i32$4 = 0;
                $40_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$5;
                i64toi32_i32$1 = i64toi32_i32$5;
                i64toi32_i32$4 = $10_1;
                i64toi32_i32$5 = 2147418112;
                i64toi32_i32$3 = 0;
                if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $6_1 : $40_1) {
                  break label$4;
                }
                i64toi32_i32$4 = $2$hi;
                i64toi32_i32$3 = $2_1;
                i64toi32_i32$1 = 32768;
                i64toi32_i32$5 = 0;
                i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
                $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                $4$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $1$hi;
                $3_1 = $1_1;
                $3$hi = i64toi32_i32$1;
                break label$1;
              }
              label$5: {
                i64toi32_i32$1 = $3$hi;
                $48_1 = !($3_1 | i64toi32_i32$1 | 0);
                i64toi32_i32$1 = $9$hi;
                i64toi32_i32$4 = $9_1;
                i64toi32_i32$3 = 2147418112;
                i64toi32_i32$5 = 0;
                $50_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
                i64toi32_i32$4 = i64toi32_i32$1;
                i64toi32_i32$4 = i64toi32_i32$1;
                i64toi32_i32$5 = $9_1;
                i64toi32_i32$1 = 2147418112;
                i64toi32_i32$3 = 0;
                if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $50_1) {
                  break label$5;
                }
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$3 = $4_1;
                i64toi32_i32$4 = 32768;
                i64toi32_i32$1 = 0;
                i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
                $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                $4$hi = i64toi32_i32$4;
                break label$1;
              }
              label$6: {
                i64toi32_i32$4 = $1$hi;
                i64toi32_i32$4 = $10$hi;
                i64toi32_i32$5 = $10_1;
                i64toi32_i32$3 = 2147418112;
                i64toi32_i32$1 = 0;
                i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
                $58_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
                $58$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$4 = $1_1;
                i64toi32_i32$5 = $58$hi;
                i64toi32_i32$1 = $58_1;
                i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
                i64toi32_i32$4 = 0;
                i64toi32_i32$1 = 0;
                if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
                  break label$6;
                }
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$1 = $3_1;
                i64toi32_i32$5 = $1$hi;
                i64toi32_i32$4 = $1_1;
                i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
                $64_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
                $64$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$3 = $4_1;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$4 = $2_1;
                i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
                i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
                i64toi32_i32$3 = -2147483648;
                i64toi32_i32$4 = 0;
                i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
                $68_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
                $68$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $64$hi;
                i64toi32_i32$1 = $64_1;
                i64toi32_i32$5 = $68$hi;
                i64toi32_i32$4 = $68_1;
                i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                $6_1 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
                i64toi32_i32$2 = $6_1;
                i64toi32_i32$5 = 2147450880;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2_1;
                i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
                $4_1 = i64toi32_i32$4;
                $4$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$1 = i64toi32_i32$2;
                i64toi32_i32$3 = 0;
                i64toi32_i32$4 = $1$hi;
                i64toi32_i32$5 = i64toi32_i32$2 ? 0 : $1_1;
                i64toi32_i32$2 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$4;
                $3_1 = i64toi32_i32$5;
                $3$hi = i64toi32_i32$2;
                break label$1;
              }
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$2 = $9$hi;
              i64toi32_i32$1 = $9_1;
              i64toi32_i32$5 = 2147418112;
              i64toi32_i32$3 = 0;
              i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
              $78_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
              $78$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $3$hi;
              i64toi32_i32$2 = $3_1;
              i64toi32_i32$1 = $78$hi;
              i64toi32_i32$3 = $78_1;
              i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
              if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
                break label$1;
              }
              label$7: {
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = $10$hi;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$5 = $1_1;
                i64toi32_i32$2 = $10$hi;
                i64toi32_i32$3 = $10_1;
                i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                i64toi32_i32$5 = 0;
                i64toi32_i32$3 = 0;
                if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
                  break label$7;
                }
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$1 = $9$hi;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$3 = $3_1;
                i64toi32_i32$2 = $9$hi;
                i64toi32_i32$5 = $9_1;
                i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 0;
                if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                  break label$1;
                }
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$5 = $3_1;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$3 = $1_1;
                i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
                $3_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
                $3$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$1 = $4_1;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$3 = $2_1;
                i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
                $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
                $4$hi = i64toi32_i32$5;
                break label$1;
              }
              i64toi32_i32$5 = $3$hi;
              i64toi32_i32$5 = $9$hi;
              i64toi32_i32$5 = $3$hi;
              i64toi32_i32$2 = $3_1;
              i64toi32_i32$1 = $9$hi;
              i64toi32_i32$3 = $9_1;
              i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
              if (!!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
                break label$2;
              }
              i64toi32_i32$1 = $1$hi;
              $3_1 = $1_1;
              $3$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $2$hi;
              $4_1 = $2_1;
              $4$hi = i64toi32_i32$1;
              break label$1;
            }
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$5 = $3_1;
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$3 = $1_1;
            $106_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
            i64toi32_i32$5 = $9$hi;
            i64toi32_i32$5 = $10$hi;
            i64toi32_i32$5 = $9$hi;
            i64toi32_i32$3 = $9_1;
            i64toi32_i32$1 = $10$hi;
            i64toi32_i32$2 = $10_1;
            $109_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
            i64toi32_i32$3 = i64toi32_i32$5;
            i64toi32_i32$3 = i64toi32_i32$1;
            i64toi32_i32$3 = i64toi32_i32$5;
            i64toi32_i32$2 = $9_1;
            i64toi32_i32$5 = i64toi32_i32$1;
            i64toi32_i32$1 = $10_1;
            $7_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $106_1 : $109_1;
            i64toi32_i32$4 = $7_1;
            i64toi32_i32$2 = $3$hi;
            i64toi32_i32$3 = $1$hi;
            i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
            i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
            $9_1 = i64toi32_i32$5;
            $9$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$3 = i64toi32_i32$4;
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$5 = $2$hi;
            i64toi32_i32$2 = i64toi32_i32$4 ? $4_1 : $2_1;
            i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$5;
            $11_1 = i64toi32_i32$2;
            $11$hi = i64toi32_i32$4;
            i64toi32_i32$3 = i64toi32_i32$2;
            i64toi32_i32$2 = 65535;
            i64toi32_i32$1 = -1;
            i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
            $10_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
            $10$hi = i64toi32_i32$2;
            i64toi32_i32$2 = i64toi32_i32$5;
            i64toi32_i32$2 = $4$hi;
            i64toi32_i32$5 = $7_1;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$3 = $4$hi;
            i64toi32_i32$1 = i64toi32_i32$5 ? $2_1 : $4_1;
            i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$3;
            $12_1 = i64toi32_i32$1;
            $12$hi = i64toi32_i32$4;
            i64toi32_i32$5 = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = 48;
            i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $139 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
            } else {
              i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
              $139 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
            }
            $8_1 = $139 & 32767 | 0;
            label$8: {
              i64toi32_i32$1 = $11$hi;
              i64toi32_i32$4 = $11_1;
              i64toi32_i32$5 = 0;
              i64toi32_i32$2 = 48;
              i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                i64toi32_i32$5 = 0;
                $140 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
              } else {
                i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
                $140 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
              }
              $6_1 = $140 & 32767 | 0;
              if ($6_1) {
                break label$8;
              }
              $136 = $5_1 + 96 | 0;
              i64toi32_i32$5 = $9$hi;
              $137 = $9_1;
              $137$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $10$hi;
              $138 = $10_1;
              $138$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $9$hi;
              i64toi32_i32$5 = $10$hi;
              $6_1 = !($10_1 | i64toi32_i32$5 | 0);
              i64toi32_i32$3 = $6_1;
              i64toi32_i32$5 = $9$hi;
              i64toi32_i32$4 = $10$hi;
              i64toi32_i32$2 = i64toi32_i32$3 ? $9_1 : $10_1;
              i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$4;
              i64toi32_i32$5 = Math_clz32(i64toi32_i32$1);
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$5 | 0) == (32 | 0)) {
                $141 = Math_clz32(i64toi32_i32$2) + 32 | 0;
              } else {
                $141 = i64toi32_i32$5;
              }
              $145$hi = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              $148$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $145$hi;
              i64toi32_i32$2 = $141;
              i64toi32_i32$1 = $148$hi;
              i64toi32_i32$5 = $6_1 << 6 | 0;
              i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
              i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
              }
              $6_1 = i64toi32_i32$4;
              i64toi32_i32$0 = $137$hi;
              i64toi32_i32$2 = $138$hi;
              $86($136 | 0, $137 | 0, i64toi32_i32$0 | 0, $138 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 + -15 | 0 | 0);
              $6_1 = 16 - i64toi32_i32$4 | 0;
              i64toi32_i32$3 = $5_1 + 104 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $10_1 = i64toi32_i32$2;
              $10$hi = i64toi32_i32$0;
              i64toi32_i32$3 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
              $9_1 = i64toi32_i32$0;
              $9$hi = i64toi32_i32$2;
            }
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$2 = $3$hi;
            i64toi32_i32$1 = $7_1;
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$0 = $3$hi;
            i64toi32_i32$5 = i64toi32_i32$1 ? $1_1 : $3_1;
            i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
            $3_1 = i64toi32_i32$5;
            $3$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $12$hi;
            i64toi32_i32$1 = $12_1;
            i64toi32_i32$5 = 65535;
            i64toi32_i32$2 = -1;
            i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
            $1_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
            $1$hi = i64toi32_i32$5;
            label$9: {
              if ($8_1) {
                break label$9;
              }
              $168 = $5_1 + 80 | 0;
              i64toi32_i32$5 = $3$hi;
              $169 = $3_1;
              $169$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $1$hi;
              $170 = $1_1;
              $170$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $3$hi;
              i64toi32_i32$5 = $1$hi;
              $7_1 = !($1_1 | i64toi32_i32$5 | 0);
              i64toi32_i32$0 = $7_1;
              i64toi32_i32$5 = $3$hi;
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$2 = i64toi32_i32$0 ? $3_1 : $1_1;
              i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$1;
              i64toi32_i32$5 = Math_clz32(i64toi32_i32$3);
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$5 | 0) == (32 | 0)) {
                $142 = Math_clz32(i64toi32_i32$2) + 32 | 0;
              } else {
                $142 = i64toi32_i32$5;
              }
              $177$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $180$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $177$hi;
              i64toi32_i32$2 = $142;
              i64toi32_i32$3 = $180$hi;
              i64toi32_i32$5 = $7_1 << 6 | 0;
              i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
              i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
              }
              $7_1 = i64toi32_i32$1;
              i64toi32_i32$4 = $169$hi;
              i64toi32_i32$2 = $170$hi;
              $86($168 | 0, $169 | 0, i64toi32_i32$4 | 0, $170 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 + -15 | 0 | 0);
              $8_1 = 16 - i64toi32_i32$1 | 0;
              i64toi32_i32$0 = $5_1 + 88 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $1_1 = i64toi32_i32$2;
              $1$hi = i64toi32_i32$4;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
              $3_1 = i64toi32_i32$4;
              $3$hi = i64toi32_i32$2;
            }
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$0 = $1_1;
            i64toi32_i32$4 = 0;
            i64toi32_i32$5 = 3;
            i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
              $143 = 0;
            } else {
              i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
              $143 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
            }
            $193 = $143;
            $193$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $3$hi;
            i64toi32_i32$2 = $3_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = 61;
            i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = 0;
              $144 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
            } else {
              i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
              $144 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
            }
            $195$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $193$hi;
            i64toi32_i32$4 = $193;
            i64toi32_i32$2 = $195$hi;
            i64toi32_i32$5 = $144;
            i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
            i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
            i64toi32_i32$4 = 524288;
            i64toi32_i32$5 = 0;
            i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
            $1_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
            $1$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $10$hi;
            i64toi32_i32$2 = $10_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = 3;
            i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
              $145 = 0;
            } else {
              i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
              $145 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
            }
            $199 = $145;
            $199$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $9$hi;
            i64toi32_i32$4 = $9_1;
            i64toi32_i32$2 = 0;
            i64toi32_i32$5 = 61;
            i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = 0;
              $146 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
            } else {
              i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
              $146 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
            }
            $201$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $199$hi;
            i64toi32_i32$0 = $199;
            i64toi32_i32$4 = $201$hi;
            i64toi32_i32$5 = $146;
            i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
            $12_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
            $12$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $3$hi;
            i64toi32_i32$2 = $3_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = 3;
            i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
              $147 = 0;
            } else {
              i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
              $147 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
            }
            $10_1 = $147;
            $10$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$0 = $2$hi;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$4 = $4_1;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$5 = $2_1;
            i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
            $3_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
            $3$hi = i64toi32_i32$2;
            label$10: {
              if (($6_1 | 0) == ($8_1 | 0)) {
                break label$10;
              }
              label$11: {
                $7_1 = $6_1 - $8_1 | 0;
                if ($7_1 >>> 0 <= 127 >>> 0) {
                  break label$11;
                }
                i64toi32_i32$2 = 0;
                $1_1 = 0;
                $1$hi = i64toi32_i32$2;
                i64toi32_i32$2 = 0;
                $10_1 = 1;
                $10$hi = i64toi32_i32$2;
                break label$10;
              }
              i64toi32_i32$2 = $10$hi;
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$2 = $10$hi;
              i64toi32_i32$4 = $1$hi;
              $86($5_1 + 64 | 0 | 0, $10_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
              i64toi32_i32$4 = i64toi32_i32$2;
              i64toi32_i32$4 = $1$hi;
              i64toi32_i32$4 = i64toi32_i32$2;
              i64toi32_i32$2 = $1$hi;
              $96($5_1 + 48 | 0 | 0, $10_1 | 0, i64toi32_i32$4 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
              $228 = i64toi32_i32$2;
              $228$hi = i64toi32_i32$4;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
              $230 = i64toi32_i32$4;
              $230$hi = i64toi32_i32$2;
              i64toi32_i32$0 = (i64toi32_i32$0 + 64 | 0) + 8 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $234 = i64toi32_i32$2;
              $234$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $230$hi;
              i64toi32_i32$0 = $230;
              i64toi32_i32$2 = $234$hi;
              i64toi32_i32$5 = $234;
              i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
              i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$5 = 0;
              $236 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0;
              i64toi32_i32$4 = 0;
              $237$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $228$hi;
              i64toi32_i32$5 = $228;
              i64toi32_i32$2 = $237$hi;
              i64toi32_i32$0 = $236;
              i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
              $10_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
              $10$hi = i64toi32_i32$2;
              i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $1_1 = i64toi32_i32$2;
              $1$hi = i64toi32_i32$5;
            }
            i64toi32_i32$5 = $12$hi;
            i64toi32_i32$4 = $12_1;
            i64toi32_i32$2 = 524288;
            i64toi32_i32$0 = 0;
            i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
            $12_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
            $12$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $9$hi;
            i64toi32_i32$5 = $9_1;
            i64toi32_i32$4 = 0;
            i64toi32_i32$0 = 3;
            i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
              $148 = 0;
            } else {
              i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
              $148 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
            }
            $9_1 = $148;
            $9$hi = i64toi32_i32$4;
            label$12: {
              label$13: {
                i64toi32_i32$4 = $3$hi;
                i64toi32_i32$2 = $3_1;
                i64toi32_i32$5 = -1;
                i64toi32_i32$0 = -1;
                if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
                  $149 = 1;
                } else {
                  if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
                    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$0 >>> 0) {
                      $150 = 0;
                    } else {
                      $150 = 1;
                    }
                    $151 = $150;
                  } else {
                    $151 = 0;
                  }
                  $149 = $151;
                }
                if ($149) {
                  break label$13;
                }
                i64toi32_i32$2 = 0;
                $3_1 = 0;
                $3$hi = i64toi32_i32$2;
                i64toi32_i32$2 = 0;
                $4_1 = 0;
                $4$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $9$hi;
                i64toi32_i32$2 = $10$hi;
                i64toi32_i32$2 = $9$hi;
                i64toi32_i32$0 = $9_1;
                i64toi32_i32$4 = $10$hi;
                i64toi32_i32$5 = $10_1;
                i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
                $251 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
                $251$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $12$hi;
                i64toi32_i32$4 = $1$hi;
                i64toi32_i32$4 = $12$hi;
                i64toi32_i32$2 = $12_1;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$5 = $1_1;
                i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
                $254 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
                $254$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $251$hi;
                i64toi32_i32$4 = $251;
                i64toi32_i32$2 = $254$hi;
                i64toi32_i32$5 = $254;
                i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                if (!(i64toi32_i32$4 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
                  break label$1;
                }
                i64toi32_i32$2 = $9$hi;
                i64toi32_i32$2 = $10$hi;
                i64toi32_i32$2 = $9$hi;
                i64toi32_i32$0 = $9_1;
                i64toi32_i32$4 = $10$hi;
                i64toi32_i32$5 = $10_1;
                i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
                i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
                i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
                i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
                $2_1 = i64toi32_i32$3;
                $2$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $12$hi;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = $12$hi;
                i64toi32_i32$2 = $12_1;
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$5 = $1_1;
                i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
                i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
                $262$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $9$hi;
                i64toi32_i32$3 = $10$hi;
                i64toi32_i32$3 = $9$hi;
                i64toi32_i32$1 = $9_1;
                i64toi32_i32$2 = $10$hi;
                i64toi32_i32$5 = $10_1;
                $265 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
                i64toi32_i32$1 = 0;
                $266$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $262$hi;
                i64toi32_i32$5 = i64toi32_i32$4;
                i64toi32_i32$3 = $266$hi;
                i64toi32_i32$2 = $265;
                i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
                i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
                i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
                i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
                $4_1 = i64toi32_i32$0;
                $4$hi = i64toi32_i32$4;
                i64toi32_i32$1 = i64toi32_i32$0;
                i64toi32_i32$5 = 524287;
                i64toi32_i32$2 = -1;
                if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
                  break label$12;
                }
                $271 = $5_1 + 32 | 0;
                i64toi32_i32$1 = $2$hi;
                $272 = $2_1;
                $272$hi = i64toi32_i32$1;
                i64toi32_i32$1 = i64toi32_i32$4;
                $273 = i64toi32_i32$0;
                $273$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$1 = i64toi32_i32$4;
                $7_1 = !(i64toi32_i32$0 | i64toi32_i32$1 | 0);
                i64toi32_i32$3 = $7_1;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$5 = i64toi32_i32$3 ? $2_1 : i64toi32_i32$0;
                i64toi32_i32$2 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
                i64toi32_i32$1 = Math_clz32(i64toi32_i32$2);
                i64toi32_i32$3 = 0;
                if ((i64toi32_i32$1 | 0) == (32 | 0)) {
                  $152 = Math_clz32(i64toi32_i32$5) + 32 | 0;
                } else {
                  $152 = i64toi32_i32$1;
                }
                $280$hi = i64toi32_i32$3;
                i64toi32_i32$3 = 0;
                $283$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $280$hi;
                i64toi32_i32$5 = $152;
                i64toi32_i32$2 = $283$hi;
                i64toi32_i32$1 = $7_1 << 6 | 0;
                i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
                i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                $7_1 = i64toi32_i32$4 + -12 | 0;
                i64toi32_i32$0 = $272$hi;
                i64toi32_i32$5 = $273$hi;
                $86($271 | 0, $272 | 0, i64toi32_i32$0 | 0, $273 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
                $6_1 = $6_1 - $7_1 | 0;
                i64toi32_i32$3 = $5_1 + 40 | 0;
                i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                $4_1 = i64toi32_i32$5;
                $4$hi = i64toi32_i32$0;
                i64toi32_i32$3 = $5_1;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
                i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
                $2_1 = i64toi32_i32$0;
                $2$hi = i64toi32_i32$5;
                break label$12;
              }
              i64toi32_i32$5 = $1$hi;
              i64toi32_i32$5 = $12$hi;
              i64toi32_i32$5 = $1$hi;
              i64toi32_i32$3 = $1_1;
              i64toi32_i32$0 = $12$hi;
              i64toi32_i32$1 = $12_1;
              i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
              }
              $298 = i64toi32_i32$2;
              $298$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $10$hi;
              i64toi32_i32$4 = $9$hi;
              i64toi32_i32$4 = $10$hi;
              i64toi32_i32$5 = $10_1;
              i64toi32_i32$3 = $9$hi;
              i64toi32_i32$1 = $9_1;
              i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
              i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
              if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
              }
              $2_1 = i64toi32_i32$0;
              $2$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $10$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$4 = i64toi32_i32$0;
              i64toi32_i32$5 = $10$hi;
              i64toi32_i32$1 = $10_1;
              $304 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
              i64toi32_i32$4 = 0;
              $305$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $298$hi;
              i64toi32_i32$1 = $298;
              i64toi32_i32$2 = $305$hi;
              i64toi32_i32$5 = $304;
              i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
              i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
              if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
              }
              $4_1 = i64toi32_i32$3;
              $4$hi = i64toi32_i32$0;
              i64toi32_i32$4 = i64toi32_i32$3;
              i64toi32_i32$1 = 1048576;
              i64toi32_i32$5 = 0;
              i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
              if (!(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$1 | 0)) {
                break label$12;
              }
              i64toi32_i32$1 = $2$hi;
              i64toi32_i32$0 = $2_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$5 = 1;
              i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                i64toi32_i32$4 = 0;
                $153 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
              } else {
                i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
                $153 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
              }
              $311 = $153;
              $311$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $4$hi;
              i64toi32_i32$1 = $4_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$5 = 63;
              i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
                $154 = 0;
              } else {
                i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
                $154 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
              }
              $313$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $311$hi;
              i64toi32_i32$4 = $311;
              i64toi32_i32$1 = $313$hi;
              i64toi32_i32$5 = $154;
              i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              $314 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
              $314$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $10$hi;
              i64toi32_i32$0 = $10_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$5 = 1;
              i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
              $316 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
              $316$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $314$hi;
              i64toi32_i32$1 = $314;
              i64toi32_i32$0 = $316$hi;
              i64toi32_i32$5 = $316;
              i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
              $2_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
              $2$hi = i64toi32_i32$0;
              $6_1 = $6_1 + 1 | 0;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$4 = $4_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$5 = 1;
              i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $155 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
                $155 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
              }
              $4_1 = $155;
              $4$hi = i64toi32_i32$1;
            }
            i64toi32_i32$1 = $11$hi;
            i64toi32_i32$0 = $11_1;
            i64toi32_i32$4 = -2147483648;
            i64toi32_i32$5 = 0;
            i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
            $10_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
            $10$hi = i64toi32_i32$4;
            label$14: {
              if (($6_1 | 0) < (32767 | 0)) {
                break label$14;
              }
              i64toi32_i32$1 = $10_1;
              i64toi32_i32$0 = 2147418112;
              i64toi32_i32$5 = 0;
              i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
              $4_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
              $4$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $3_1 = 0;
              $3$hi = i64toi32_i32$0;
              break label$1;
            }
            $7_1 = 0;
            label$15: {
              label$16: {
                if (($6_1 | 0) <= (0 | 0)) {
                  break label$16;
                }
                $7_1 = $6_1;
                break label$15;
              }
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$1 = $4$hi;
              $86($5_1 + 16 | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $6_1 + 127 | 0 | 0);
              i64toi32_i32$1 = i64toi32_i32$0;
              i64toi32_i32$1 = $4$hi;
              i64toi32_i32$1 = i64toi32_i32$0;
              i64toi32_i32$0 = $4$hi;
              $96($5_1 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 1 - $6_1 | 0 | 0);
              i64toi32_i32$4 = $5_1;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $343 = i64toi32_i32$0;
              $343$hi = i64toi32_i32$1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
              $345 = i64toi32_i32$1;
              $345$hi = i64toi32_i32$0;
              i64toi32_i32$4 = (i64toi32_i32$4 + 16 | 0) + 8 | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $349 = i64toi32_i32$0;
              $349$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $345$hi;
              i64toi32_i32$4 = $345;
              i64toi32_i32$0 = $349$hi;
              i64toi32_i32$5 = $349;
              i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
              i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
              i64toi32_i32$4 = 0;
              i64toi32_i32$5 = 0;
              $351 = (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
              i64toi32_i32$1 = 0;
              $352$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $343$hi;
              i64toi32_i32$5 = $343;
              i64toi32_i32$0 = $352$hi;
              i64toi32_i32$4 = $351;
              i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
              $2_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
              $2$hi = i64toi32_i32$0;
              i64toi32_i32$1 = $5_1 + 8 | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $4_1 = i64toi32_i32$0;
              $4$hi = i64toi32_i32$5;
            }
            i64toi32_i32$5 = $2$hi;
            i64toi32_i32$1 = $2_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$4 = 3;
            i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = 0;
              $156 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
            } else {
              i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
              $156 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
            }
            $358 = $156;
            $358$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$5 = $4_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$4 = 61;
            i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
              $157 = 0;
            } else {
              i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
              $157 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
            }
            $360$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $358$hi;
            i64toi32_i32$0 = $358;
            i64toi32_i32$5 = $360$hi;
            i64toi32_i32$4 = $157;
            i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
            $3_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
            $3$hi = i64toi32_i32$5;
            i64toi32_i32$5 = 0;
            i64toi32_i32$1 = $7_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$4 = 48;
            i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
              $158 = 0;
            } else {
              i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
              $158 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
            }
            $364 = $158;
            $364$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$5 = $4_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$4 = 3;
            i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $159 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
            } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
              $159 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
            }
            i64toi32_i32$0 = $159;
            i64toi32_i32$5 = 65535;
            i64toi32_i32$4 = -1;
            i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
            $367 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
            $367$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $364$hi;
            i64toi32_i32$1 = $364;
            i64toi32_i32$0 = $367$hi;
            i64toi32_i32$4 = $367;
            i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
            $368$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $10$hi;
            i64toi32_i32$0 = $368$hi;
            i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
            i64toi32_i32$1 = $10$hi;
            i64toi32_i32$4 = $10_1;
            i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
            $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
            $4$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $2$hi;
            $6_1 = $2_1 & 7 | 0;
            label$17: {
              label$18: {
                label$19: {
                  switch ($94() | 0 | 0) {
                    case 0:
                      label$22: {
                        if (($6_1 | 0) == (4 | 0)) {
                          break label$22;
                        }
                        i64toi32_i32$1 = $4$hi;
                        $377 = $4_1;
                        $377$hi = i64toi32_i32$1;
                        i64toi32_i32$1 = $3$hi;
                        i64toi32_i32$1 = 0;
                        $381$hi = i64toi32_i32$1;
                        i64toi32_i32$1 = $3$hi;
                        i64toi32_i32$0 = $3_1;
                        i64toi32_i32$5 = $381$hi;
                        i64toi32_i32$4 = $6_1 >>> 0 > 4 >>> 0;
                        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
                        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
                        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
                          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                        }
                        $10_1 = i64toi32_i32$2;
                        $10$hi = i64toi32_i32$3;
                        i64toi32_i32$3 = $3$hi;
                        i64toi32_i32$3 = $10$hi;
                        i64toi32_i32$1 = i64toi32_i32$2;
                        i64toi32_i32$0 = $3$hi;
                        i64toi32_i32$4 = $3_1;
                        $385 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
                        i64toi32_i32$1 = 0;
                        $386$hi = i64toi32_i32$1;
                        i64toi32_i32$1 = $377$hi;
                        i64toi32_i32$4 = $377;
                        i64toi32_i32$3 = $386$hi;
                        i64toi32_i32$0 = $385;
                        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
                        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                        }
                        $4_1 = i64toi32_i32$5;
                        $4$hi = i64toi32_i32$2;
                        i64toi32_i32$2 = $10$hi;
                        $3_1 = $10_1;
                        $3$hi = i64toi32_i32$2;
                        break label$18;
                      }
                      i64toi32_i32$2 = $4$hi;
                      $389 = $4_1;
                      $389$hi = i64toi32_i32$2;
                      i64toi32_i32$2 = $3$hi;
                      i64toi32_i32$1 = $3_1;
                      i64toi32_i32$4 = 0;
                      i64toi32_i32$0 = 1;
                      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
                      $392 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
                      $392$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = i64toi32_i32$2;
                      i64toi32_i32$2 = i64toi32_i32$1;
                      i64toi32_i32$1 = $392$hi;
                      i64toi32_i32$0 = $392;
                      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                      }
                      $10_1 = i64toi32_i32$3;
                      $10$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $3$hi;
                      i64toi32_i32$5 = $10$hi;
                      i64toi32_i32$4 = i64toi32_i32$3;
                      i64toi32_i32$2 = $3$hi;
                      i64toi32_i32$0 = $3_1;
                      $396 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
                      i64toi32_i32$4 = 0;
                      $397$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $389$hi;
                      i64toi32_i32$0 = $389;
                      i64toi32_i32$5 = $397$hi;
                      i64toi32_i32$2 = $396;
                      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
                      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                      }
                      $4_1 = i64toi32_i32$1;
                      $4$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $10$hi;
                      $3_1 = $10_1;
                      $3$hi = i64toi32_i32$3;
                      break label$17;
                    case 1:
                      i64toi32_i32$3 = $4$hi;
                      $400 = $4_1;
                      $400$hi = i64toi32_i32$3;
                      i64toi32_i32$3 = $3$hi;
                      i64toi32_i32$3 = $10$hi;
                      i64toi32_i32$4 = $10_1;
                      i64toi32_i32$0 = 0;
                      i64toi32_i32$2 = 0;
                      $406 = ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
                      i64toi32_i32$4 = 0;
                      $407$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $3$hi;
                      i64toi32_i32$2 = $3_1;
                      i64toi32_i32$3 = $407$hi;
                      i64toi32_i32$0 = $406;
                      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
                      }
                      $10_1 = i64toi32_i32$5;
                      $10$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = $3$hi;
                      i64toi32_i32$1 = $10$hi;
                      i64toi32_i32$4 = i64toi32_i32$5;
                      i64toi32_i32$2 = $3$hi;
                      i64toi32_i32$0 = $3_1;
                      $411 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
                      i64toi32_i32$4 = 0;
                      $412$hi = i64toi32_i32$4;
                      i64toi32_i32$4 = $400$hi;
                      i64toi32_i32$0 = $400;
                      i64toi32_i32$1 = $412$hi;
                      i64toi32_i32$2 = $411;
                      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                      }
                      $4_1 = i64toi32_i32$3;
                      $4$hi = i64toi32_i32$5;
                      i64toi32_i32$5 = $10$hi;
                      $3_1 = $10_1;
                      $3$hi = i64toi32_i32$5;
                      break label$18;
                    case 2:
                      break label$19;
                    default:
                      break label$18;
                  };
                }
                i64toi32_i32$5 = $4$hi;
                $415 = $4_1;
                $415$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $3$hi;
                i64toi32_i32$5 = $10$hi;
                $421 = !($10_1 | i64toi32_i32$5 | 0) & ($6_1 | 0) != (0 | 0) | 0;
                i64toi32_i32$5 = 0;
                $422$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $3$hi;
                i64toi32_i32$4 = $3_1;
                i64toi32_i32$0 = $422$hi;
                i64toi32_i32$2 = $421;
                i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
                i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                }
                $10_1 = i64toi32_i32$1;
                $10$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$3 = $10$hi;
                i64toi32_i32$5 = i64toi32_i32$1;
                i64toi32_i32$4 = $3$hi;
                i64toi32_i32$2 = $3_1;
                $426 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
                i64toi32_i32$5 = 0;
                $427$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $415$hi;
                i64toi32_i32$2 = $415;
                i64toi32_i32$3 = $427$hi;
                i64toi32_i32$4 = $426;
                i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
                i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
                }
                $4_1 = i64toi32_i32$0;
                $4$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $10$hi;
                $3_1 = $10_1;
                $3$hi = i64toi32_i32$1;
              }
              if (!$6_1) {
                break label$1;
              }
            }
            $95() | 0;
          }
          i64toi32_i32$1 = $3$hi;
          i64toi32_i32$2 = $0_1;
          HEAP32[i64toi32_i32$2 >> 2] = $3_1;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$1 = $4$hi;
          HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4_1;
          HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
          global$0 = $5_1 + 112 | 0;
        }

        function $86($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          var i64toi32_i32$1 = 0,i64toi32_i32$4 = 0,i64toi32_i32$2 = 0,i64toi32_i32$0 = 0,i64toi32_i32$3 = 0,$4$hi = 0,$18_1 = 0,$20_1 = 0,$21_1 = 0,$22_1 = 0,$11$hi = 0,$18$hi = 0,$19_1 = 0,$19$hi = 0,$4_1 = 0,$24$hi = 0;
          label$1: {
            label$2: {
              if (!($3_1 & 64 | 0)) {
                break label$2;
              }
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$0 = 0;
              $11$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$2 = $1_1;
              i64toi32_i32$1 = $11$hi;
              i64toi32_i32$3 = $3_1 + -64 | 0;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                $18_1 = 0;
              } else {
                i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
                $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
              }
              $2_1 = $18_1;
              $2$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $1_1 = 0;
              $1$hi = i64toi32_i32$1;
              break label$1;
            }
            if (!$3_1) {
              break label$1;
            }
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$1 = 0;
            $18$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$0 = $1_1;
            i64toi32_i32$2 = $18$hi;
            i64toi32_i32$3 = 64 - $3_1 | 0;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = 0;
              $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            } else {
              i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
            }
            $19_1 = $20_1;
            $19$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$2 = 0;
            $4_1 = $3_1;
            $4$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$1 = $2_1;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$3 = $3_1;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
              $21_1 = 0;
            } else {
              i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
              $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
            }
            $24$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $19$hi;
            i64toi32_i32$2 = $19_1;
            i64toi32_i32$1 = $24$hi;
            i64toi32_i32$3 = $21_1;
            i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
            $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
            $2$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$0 = $1_1;
            i64toi32_i32$2 = $4$hi;
            i64toi32_i32$3 = $4_1;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
              $22_1 = 0;
            } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
              $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            }
            $1_1 = $22_1;
            $1$hi = i64toi32_i32$2;
          }
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$0 = $0_1;
          HEAP32[i64toi32_i32$0 >> 2] = $1_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$2 = $2$hi;
          HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
          HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
        }

        function $87($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
          $0_1 = $0_1 | 0;
          $0$hi = $0$hi | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          $3$hi = $3$hi | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$3 = 0,i64toi32_i32$1 = 0,$4_1 = 0,$5_1 = 0,$6_1 = 0,$5$hi = 0,$6$hi = 0,$35_1 = 0,$36_1 = 0,$37_1 = 0,$38_1 = 0,$39_1 = 0,$41_1 = 0,$42_1 = 0,$43_1 = 0,$44_1 = 0,$8_1 = 0,$12_1 = 0,$17_1 = 0,$21_1 = 0,$27_1 = 0,$27$hi = 0,$30_1 = 0,$30$hi = 0,$40_1 = 0,$50_1 = 0,$50$hi = 0,$53_1 = 0,$53$hi = 0,$58_1 = 0,$68_1 = 0,$68$hi = 0,$71_1 = 0,$71$hi = 0;
          $4_1 = 1;
          label$1: {
            i64toi32_i32$0 = $0$hi;
            i64toi32_i32$2 = $0_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = 0;
            $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$3 = $1_1;
            i64toi32_i32$0 = 2147483647;
            i64toi32_i32$1 = -1;
            i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
            $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
            $5$hi = i64toi32_i32$0;
            i64toi32_i32$2 = $5_1;
            i64toi32_i32$3 = 2147418112;
            i64toi32_i32$1 = 0;
            $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$0;
            i64toi32_i32$2 = i64toi32_i32$0;
            i64toi32_i32$1 = $5_1;
            i64toi32_i32$0 = 2147418112;
            i64toi32_i32$3 = 0;
            if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
              break label$1;
            }
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$3 = $2_1;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = 0;
            $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
            i64toi32_i32$3 = $3$hi;
            i64toi32_i32$0 = $3_1;
            i64toi32_i32$1 = 2147483647;
            i64toi32_i32$2 = -1;
            i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
            $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
            $6$hi = i64toi32_i32$1;
            i64toi32_i32$3 = $6_1;
            i64toi32_i32$0 = 2147418112;
            i64toi32_i32$2 = 0;
            $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
            i64toi32_i32$3 = i64toi32_i32$1;
            i64toi32_i32$2 = $6_1;
            i64toi32_i32$1 = 2147418112;
            i64toi32_i32$0 = 0;
            if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
              break label$1;
            }
            label$2: {
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$2 = $0$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$0 = $2_1;
              i64toi32_i32$3 = $0$hi;
              i64toi32_i32$1 = $0_1;
              i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              $27$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $6$hi;
              i64toi32_i32$3 = $5$hi;
              i64toi32_i32$3 = $6$hi;
              i64toi32_i32$2 = $6_1;
              i64toi32_i32$0 = $5$hi;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
              $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
              $30$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $27$hi;
              i64toi32_i32$3 = $27_1;
              i64toi32_i32$2 = $30$hi;
              i64toi32_i32$1 = $30_1;
              i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
              if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
                break label$2;
              }
              return 0 | 0;
            }
            label$3: {
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$0 = $3_1;
              i64toi32_i32$3 = $1$hi;
              i64toi32_i32$1 = $1_1;
              i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
              i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$1 = 0;
              if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
                $35_1 = 1;
              } else {
                if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
                  if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
                    $36_1 = 0;
                  } else {
                    $36_1 = 1;
                  }
                  $37_1 = $36_1;
                } else {
                  $37_1 = 0;
                }
                $35_1 = $37_1;
              }
              if ($35_1) {
                break label$3;
              }
              $4_1 = -1;
              i64toi32_i32$2 = $0$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$2 = $0$hi;
              i64toi32_i32$1 = $0_1;
              i64toi32_i32$3 = $2$hi;
              i64toi32_i32$0 = $2_1;
              $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$1 = $3$hi;
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$0 = $1_1;
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$3 = $3_1;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
                $38_1 = 1;
              } else {
                if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
                  if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
                    $39_1 = 0;
                  } else {
                    $39_1 = 1;
                  }
                  $41_1 = $39_1;
                } else {
                  $41_1 = 0;
                }
                $38_1 = $41_1;
              }
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$3 = $1_1;
              i64toi32_i32$1 = $3$hi;
              i64toi32_i32$2 = $3_1;
              if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
                break label$1;
              }
              i64toi32_i32$3 = $0$hi;
              i64toi32_i32$3 = $2$hi;
              i64toi32_i32$3 = $0$hi;
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$1 = $2_1;
              i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
              $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
              $50$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$3 = $1_1;
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$1 = $3_1;
              i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
              $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
              $53$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $50$hi;
              i64toi32_i32$0 = $50_1;
              i64toi32_i32$3 = $53$hi;
              i64toi32_i32$1 = $53_1;
              i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$1 = 0;
              return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
            }
            $4_1 = -1;
            i64toi32_i32$2 = $0$hi;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$2 = $0$hi;
            i64toi32_i32$1 = $0_1;
            i64toi32_i32$3 = $2$hi;
            i64toi32_i32$0 = $2_1;
            $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$0 = $1_1;
            i64toi32_i32$2 = $3$hi;
            i64toi32_i32$3 = $3_1;
            if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
              $42_1 = 1;
            } else {
              if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
                if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
                  $43_1 = 0;
                } else {
                  $43_1 = 1;
                }
                $44_1 = $43_1;
              } else {
                $44_1 = 0;
              }
              $42_1 = $44_1;
            }
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$0 = $3$hi;
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$3 = $1_1;
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$2 = $3_1;
            if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
              break label$1;
            }
            i64toi32_i32$3 = $0$hi;
            i64toi32_i32$3 = $2$hi;
            i64toi32_i32$3 = $0$hi;
            i64toi32_i32$2 = $0_1;
            i64toi32_i32$0 = $2$hi;
            i64toi32_i32$1 = $2_1;
            i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
            $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
            $68$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$0 = $3$hi;
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$3 = $1_1;
            i64toi32_i32$2 = $3$hi;
            i64toi32_i32$1 = $3_1;
            i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
            $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
            $71$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $68$hi;
            i64toi32_i32$0 = $68_1;
            i64toi32_i32$3 = $71$hi;
            i64toi32_i32$1 = $71_1;
            i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
            i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$1 = 0;
            $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
          }
          return $4_1 | 0;
        }

        function $88($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
          $0_1 = $0_1 | 0;
          $0$hi = $0$hi | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          $3$hi = $3$hi | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$3 = 0,i64toi32_i32$1 = 0,$5_1 = 0,$6_1 = 0,$4_1 = 0,$5$hi = 0,$6$hi = 0,$35_1 = 0,$36_1 = 0,$37_1 = 0,$38_1 = 0,$39_1 = 0,$41_1 = 0,$42_1 = 0,$43_1 = 0,$44_1 = 0,$8_1 = 0,$12_1 = 0,$17_1 = 0,$21_1 = 0,$27_1 = 0,$27$hi = 0,$30_1 = 0,$30$hi = 0,$40_1 = 0,$50_1 = 0,$50$hi = 0,$53_1 = 0,$53$hi = 0,$58_1 = 0,$68_1 = 0,$68$hi = 0,$71_1 = 0,$71$hi = 0;
          $4_1 = -1;
          label$1: {
            i64toi32_i32$0 = $0$hi;
            i64toi32_i32$2 = $0_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = 0;
            $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$3 = $1_1;
            i64toi32_i32$0 = 2147483647;
            i64toi32_i32$1 = -1;
            i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
            $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
            $5$hi = i64toi32_i32$0;
            i64toi32_i32$2 = $5_1;
            i64toi32_i32$3 = 2147418112;
            i64toi32_i32$1 = 0;
            $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$0;
            i64toi32_i32$2 = i64toi32_i32$0;
            i64toi32_i32$1 = $5_1;
            i64toi32_i32$0 = 2147418112;
            i64toi32_i32$3 = 0;
            if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
              break label$1;
            }
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$3 = $2_1;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = 0;
            $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
            i64toi32_i32$3 = $3$hi;
            i64toi32_i32$0 = $3_1;
            i64toi32_i32$1 = 2147483647;
            i64toi32_i32$2 = -1;
            i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
            $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
            $6$hi = i64toi32_i32$1;
            i64toi32_i32$3 = $6_1;
            i64toi32_i32$0 = 2147418112;
            i64toi32_i32$2 = 0;
            $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
            i64toi32_i32$3 = i64toi32_i32$1;
            i64toi32_i32$2 = $6_1;
            i64toi32_i32$1 = 2147418112;
            i64toi32_i32$0 = 0;
            if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
              break label$1;
            }
            label$2: {
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$2 = $0$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$0 = $2_1;
              i64toi32_i32$3 = $0$hi;
              i64toi32_i32$1 = $0_1;
              i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              $27$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $6$hi;
              i64toi32_i32$3 = $5$hi;
              i64toi32_i32$3 = $6$hi;
              i64toi32_i32$2 = $6_1;
              i64toi32_i32$0 = $5$hi;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
              $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
              $30$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $27$hi;
              i64toi32_i32$3 = $27_1;
              i64toi32_i32$2 = $30$hi;
              i64toi32_i32$1 = $30_1;
              i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
              if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
                break label$2;
              }
              return 0 | 0;
            }
            label$3: {
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$0 = $3_1;
              i64toi32_i32$3 = $1$hi;
              i64toi32_i32$1 = $1_1;
              i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
              i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$1 = 0;
              if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
                $35_1 = 1;
              } else {
                if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
                  if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
                    $36_1 = 0;
                  } else {
                    $36_1 = 1;
                  }
                  $37_1 = $36_1;
                } else {
                  $37_1 = 0;
                }
                $35_1 = $37_1;
              }
              if ($35_1) {
                break label$3;
              }
              i64toi32_i32$2 = $0$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$2 = $0$hi;
              i64toi32_i32$1 = $0_1;
              i64toi32_i32$3 = $2$hi;
              i64toi32_i32$0 = $2_1;
              $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$1 = $3$hi;
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$0 = $1_1;
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$3 = $3_1;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
                $38_1 = 1;
              } else {
                if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
                  if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
                    $39_1 = 0;
                  } else {
                    $39_1 = 1;
                  }
                  $41_1 = $39_1;
                } else {
                  $41_1 = 0;
                }
                $38_1 = $41_1;
              }
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$3 = $1_1;
              i64toi32_i32$1 = $3$hi;
              i64toi32_i32$2 = $3_1;
              if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
                break label$1;
              }
              i64toi32_i32$3 = $0$hi;
              i64toi32_i32$3 = $2$hi;
              i64toi32_i32$3 = $0$hi;
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$1 = $2_1;
              i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
              $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
              $50$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$3 = $1_1;
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$1 = $3_1;
              i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
              $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
              $53$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $50$hi;
              i64toi32_i32$0 = $50_1;
              i64toi32_i32$3 = $53$hi;
              i64toi32_i32$1 = $53_1;
              i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$1 = 0;
              return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
            }
            i64toi32_i32$2 = $0$hi;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$2 = $0$hi;
            i64toi32_i32$1 = $0_1;
            i64toi32_i32$3 = $2$hi;
            i64toi32_i32$0 = $2_1;
            $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$0 = $1_1;
            i64toi32_i32$2 = $3$hi;
            i64toi32_i32$3 = $3_1;
            if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
              $42_1 = 1;
            } else {
              if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
                if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
                  $43_1 = 0;
                } else {
                  $43_1 = 1;
                }
                $44_1 = $43_1;
              } else {
                $44_1 = 0;
              }
              $42_1 = $44_1;
            }
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$0 = $3$hi;
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$3 = $1_1;
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$2 = $3_1;
            if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
              break label$1;
            }
            i64toi32_i32$3 = $0$hi;
            i64toi32_i32$3 = $2$hi;
            i64toi32_i32$3 = $0$hi;
            i64toi32_i32$2 = $0_1;
            i64toi32_i32$0 = $2$hi;
            i64toi32_i32$1 = $2_1;
            i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
            $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
            $68$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$0 = $3$hi;
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$3 = $1_1;
            i64toi32_i32$2 = $3$hi;
            i64toi32_i32$1 = $3_1;
            i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
            $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
            $71$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $68$hi;
            i64toi32_i32$0 = $68_1;
            i64toi32_i32$3 = $71$hi;
            i64toi32_i32$1 = $71_1;
            i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
            i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$1 = 0;
            $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
          }
          return $4_1 | 0;
        }

        function $89($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          $3$hi = $3$hi | 0;
          $4_1 = $4_1 | 0;
          $4$hi = $4$hi | 0;
          var i64toi32_i32$3 = 0,i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$1 = 0,i64toi32_i32$5 = 0,i64toi32_i32$4 = 0,$5_1 = 0,$11$hi = 0,i64toi32_i32$6 = 0,$11_1 = 0,$10$hi = 0,$13$hi = 0,$10_1 = 0,$16$hi = 0,$12$hi = 0,$13_1 = 0,$17$hi = 0,$21$hi = 0,$12_1 = 0,$6_1 = 0,$16_1 = 0,$21_1 = 0,$14$hi = 0,$15$hi = 0,$8_1 = 0,$17_1 = 0,$18$hi = 0,$14_1 = 0,$15_1 = 0,$18_1 = 0,$22_1 = 0,$22$hi = 0,$24$hi = 0,$9_1 = 0,$19_1 = 0,$19$hi = 0,$322 = 0,$323 = 0,$7_1 = 0,$324 = 0,$325 = 0,$326 = 0,$327 = 0,$328 = 0,$329 = 0,$331 = 0,$332 = 0,$333 = 0,$334 = 0,$336 = 0,$337 = 0,$338 = 0,$339 = 0,$341 = 0,$342 = 0,$344 = 0,$345 = 0,$20_1 = 0,$20$hi = 0,$346 = 0,$347 = 0,$348 = 0,$350 = 0,$351 = 0,$352 = 0,$353 = 0,$355 = 0,$23_1 = 0,$23$hi = 0,$356 = 0,$357 = 0,$358 = 0,$359 = 0,$24_1 = 0,$360 = 0,$362 = 0,$363 = 0,$364 = 0,$365 = 0,$368 = 0,$369 = 0,$371 = 0,$372 = 0,$374 = 0,$375 = 0,$376 = 0,$377 = 0,$378 = 0,$380 = 0,$381 = 0,$382 = 0,$51_1 = 0,$55_1 = 0,$62_1 = 0,$66_1 = 0,$75_1 = 0,$75$hi = 0,$80_1 = 0,$80$hi = 0,$88_1 = 0,$88$hi = 0,$110_1 = 0,$111_1 = 0,$111$hi = 0,$112_1 = 0,$112$hi = 0,$119$hi = 0,$122$hi = 0,$137 = 0,$138 = 0,$138$hi = 0,$139 = 0,$139$hi = 0,$146$hi = 0,$149$hi = 0,$164 = 0,$166 = 0,$166$hi = 0,$170$hi = 0,$181 = 0,$181$hi = 0,$182$hi = 0,$185 = 0,$188 = 0,$188$hi = 0,$193$hi = 0,$203 = 0,$203$hi = 0,$204$hi = 0,$206 = 0,$209 = 0,$209$hi = 0,$214$hi = 0,$224 = 0,$224$hi = 0,$225$hi = 0,$227 = 0,$230 = 0,$230$hi = 0,$235$hi = 0,$245 = 0,$245$hi = 0,$246$hi = 0,$248 = 0,$249 = 0,$249$hi = 0,$252 = 0,$252$hi = 0,$257$hi = 0,$262 = 0,$264$hi = 0,$267 = 0,$268 = 0,$268$hi = 0,$272 = 0,$272$hi = 0,$279 = 0,$279$hi = 0,$283 = 0,$284$hi = 0,$285$hi = 0,$287 = 0,$288$hi = 0,$289$hi = 0,$290$hi = 0,$294$hi = 0,$305 = 0,$305$hi = 0,$308 = 0,$308$hi = 0,$314$hi = 0,$315 = 0,$315$hi = 0,$321 = 0,$321$hi = 0,$330 = 0,$330$hi = 0,$335 = 0,$335$hi = 0,$340 = 0,$340$hi = 0,$342$hi = 0,$343 = 0,$343$hi = 0,$345$hi = 0,$346$hi = 0,$349 = 0,$350$hi = 0,$351$hi = 0,$354 = 0,$355$hi = 0,$361 = 0,$361$hi = 0,$366 = 0,$366$hi = 0,$367 = 0,$367$hi = 0,$370 = 0,$370$hi = 0,$373 = 0,$373$hi = 0,$375$hi = 0,$379 = 0,$379$hi = 0,$383 = 0,$384$hi = 0,$385$hi = 0,$388 = 0,$388$hi = 0,$389 = 0,$389$hi = 0,$396 = 0,$396$hi = 0,$402 = 0,$402$hi = 0,$404$hi = 0,$405 = 0,$405$hi = 0,$406 = 0,$406$hi = 0,$407 = 0,$407$hi = 0,$409$hi = 0,$413 = 0,$414$hi = 0,$415 = 0,$415$hi = 0,$416 = 0,$416$hi = 0,$425 = 0,$425$hi = 0,$429 = 0,$430 = 0,$430$hi = 0,$436 = 0,$436$hi = 0,$440 = 0,$441$hi = 0,$442$hi = 0,$446 = 0,$447$hi = 0,$448 = 0,$448$hi = 0,$449 = 0,$449$hi = 0,$456 = 0,$456$hi = 0,$461 = 0,$461$hi = 0,$466 = 0,$466$hi = 0,$469 = 0,$469$hi = 0,$472 = 0,$473$hi = 0,$476 = 0,$477$hi = 0,$478$hi = 0,$481 = 0,$482$hi = 0,$484$hi = 0,$485 = 0,$485$hi = 0,$489 = 0,$490$hi = 0,$491 = 0,$491$hi = 0,$492 = 0,$492$hi = 0,$493 = 0,$493$hi = 0,$500 = 0,$500$hi = 0,$503 = 0,$503$hi = 0,$506 = 0,$508$hi = 0,$509 = 0,$509$hi = 0,$514 = 0,$514$hi = 0,$515 = 0,$515$hi = 0,$517$hi = 0,$518$hi = 0,$520 = 0,$521$hi = 0,$522$hi = 0,$526 = 0,$527$hi = 0,$541$hi = 0,$545 = 0,$545$hi = 0,$546$hi = 0,$550 = 0,$551$hi = 0,$558 = 0,$560 = 0,$560$hi = 0,$562$hi = 0,$564 = 0,$564$hi = 0,$571$hi = 0,$575 = 0,$575$hi = 0,$576$hi = 0,$580 = 0,$581$hi = 0,$595 = 0,$595$hi = 0,$597$hi = 0,$601$hi = 0,$603 = 0,$603$hi = 0,$636 = 0,$636$hi = 0,$641 = 0,$641$hi = 0,$645$hi = 0,$646 = 0,$646$hi = 0,$647 = 0,$647$hi = 0,$650 = 0,$650$hi = 0,$654 = 0,$655$hi = 0,$667 = 0,$667$hi = 0,$668 = 0,$668$hi = 0,$676 = 0,$680 = 0,$681$hi = 0,$685 = 0,$689 = 0,$690$hi = 0,$694 = 0,$695$hi = 0,$697 = 0,$697$hi = 0,$700 = 0,$703 = 0,$703$hi = 0,$704 = 0,$711 = 0,$716 = 0,$717$hi = 0,$721 = 0,$722$hi = 0,$724 = 0,$724$hi = 0,$727 = 0,$730 = 0,$730$hi = 0,$731 = 0,$737 = 0,$742 = 0,$743$hi = 0,$747 = 0,$748$hi = 0,$749$hi = 0;
          $5_1 = global$0 - 336 | 0;
          global$0 = $5_1;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$1 = 65535;
          i64toi32_i32$3 = -1;
          i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
          $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
          $10$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $2$hi;
          i64toi32_i32$0 = $2_1;
          i64toi32_i32$2 = 65535;
          i64toi32_i32$3 = -1;
          i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
          $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
          $11$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $4$hi;
          i64toi32_i32$2 = i64toi32_i32$1;
          i64toi32_i32$2 = $4$hi;
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = $2$hi;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
          i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
          i64toi32_i32$1 = -2147483648;
          i64toi32_i32$3 = 0;
          i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
          $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
          $12$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $4$hi;
          i64toi32_i32$0 = $4_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 48;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $322 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $322 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
          }
          $6_1 = $322 & 32767 | 0;
          label$1: {
            label$2: {
              label$3: {
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$1 = $2_1;
                i64toi32_i32$0 = 0;
                i64toi32_i32$3 = 48;
                i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                  i64toi32_i32$0 = 0;
                  $323 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                } else {
                  i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                  $323 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
                }
                $7_1 = $323 & 32767 | 0;
                if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
                  break label$3;
                }
                $8_1 = 0;
                if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
                  break label$2;
                }
              }
              label$4: {
                i64toi32_i32$0 = $1$hi;
                $51_1 = !($1_1 | i64toi32_i32$0 | 0);
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$1 = 2147483647;
                i64toi32_i32$3 = -1;
                i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
                $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
                $13$hi = i64toi32_i32$1;
                i64toi32_i32$0 = $13_1;
                i64toi32_i32$2 = 2147418112;
                i64toi32_i32$3 = 0;
                $55_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
                i64toi32_i32$0 = i64toi32_i32$1;
                i64toi32_i32$3 = $13_1;
                i64toi32_i32$1 = 2147418112;
                i64toi32_i32$2 = 0;
                if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51_1 : $55_1) {
                  break label$4;
                }
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$0 = 32768;
                i64toi32_i32$1 = 0;
                i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                $12$hi = i64toi32_i32$0;
                break label$1;
              }
              label$5: {
                i64toi32_i32$0 = $3$hi;
                $62_1 = !($3_1 | i64toi32_i32$0 | 0);
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$3 = $4_1;
                i64toi32_i32$2 = 2147483647;
                i64toi32_i32$1 = -1;
                i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
                $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
                $2$hi = i64toi32_i32$2;
                i64toi32_i32$0 = $2_1;
                i64toi32_i32$3 = 2147418112;
                i64toi32_i32$1 = 0;
                $66_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$0 = i64toi32_i32$2;
                i64toi32_i32$1 = $2_1;
                i64toi32_i32$2 = 2147418112;
                i64toi32_i32$3 = 0;
                if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $62_1 : $66_1) {
                  break label$5;
                }
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$3 = $4_1;
                i64toi32_i32$0 = 32768;
                i64toi32_i32$2 = 0;
                i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                $12$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $3$hi;
                $1_1 = $3_1;
                $1$hi = i64toi32_i32$0;
                break label$1;
              }
              label$6: {
                i64toi32_i32$0 = $1$hi;
                i64toi32_i32$0 = $13$hi;
                i64toi32_i32$1 = $13_1;
                i64toi32_i32$3 = 2147418112;
                i64toi32_i32$2 = 0;
                i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
                $75_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
                $75$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$0 = $1_1;
                i64toi32_i32$1 = $75$hi;
                i64toi32_i32$2 = $75_1;
                i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$2 = 0;
                if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
                  break label$6;
                }
                label$7: {
                  i64toi32_i32$3 = $3$hi;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$2 = $2_1;
                  i64toi32_i32$1 = 2147418112;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
                  $80_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
                  $80$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = $3$hi;
                  i64toi32_i32$3 = $3_1;
                  i64toi32_i32$2 = $80$hi;
                  i64toi32_i32$0 = $80_1;
                  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                  if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
                    break label$7;
                  }
                  i64toi32_i32$2 = 0;
                  $1_1 = 0;
                  $1$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = 2147450880;
                  $12_1 = 0;
                  $12$hi = i64toi32_i32$2;
                  break label$1;
                }
                i64toi32_i32$2 = $12$hi;
                i64toi32_i32$1 = $12_1;
                i64toi32_i32$3 = 2147418112;
                i64toi32_i32$0 = 0;
                i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                $12$hi = i64toi32_i32$3;
                i64toi32_i32$3 = 0;
                $1_1 = 0;
                $1$hi = i64toi32_i32$3;
                break label$1;
              }
              label$8: {
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$1 = 2147418112;
                i64toi32_i32$0 = 0;
                i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
                $88_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
                $88$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$3 = $3_1;
                i64toi32_i32$2 = $88$hi;
                i64toi32_i32$0 = $88_1;
                i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                i64toi32_i32$3 = 0;
                i64toi32_i32$0 = 0;
                if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                  break label$8;
                }
                i64toi32_i32$1 = 0;
                $1_1 = 0;
                $1$hi = i64toi32_i32$1;
                break label$1;
              }
              label$9: {
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = $13$hi;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$0 = $1_1;
                i64toi32_i32$2 = $13$hi;
                i64toi32_i32$3 = $13_1;
                i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$3 = 0;
                if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
                  break label$9;
                }
                i64toi32_i32$1 = $12$hi;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$3 = $3_1;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$0 = $2_1;
                i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
                i64toi32_i32$2 = 2147450880;
                i64toi32_i32$3 = $12$hi;
                i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
                i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
                $12_1 = i64toi32_i32$0;
                $12$hi = i64toi32_i32$1;
                i64toi32_i32$1 = 0;
                $1_1 = 0;
                $1$hi = i64toi32_i32$1;
                break label$1;
              }
              label$10: {
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$4 = $3_1;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                i64toi32_i32$4 = 0;
                i64toi32_i32$2 = 0;
                if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
                  break label$10;
                }
                i64toi32_i32$1 = $12$hi;
                i64toi32_i32$2 = $12_1;
                i64toi32_i32$0 = 2147418112;
                i64toi32_i32$4 = 0;
                i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
                $12$hi = i64toi32_i32$0;
                i64toi32_i32$0 = 0;
                $1_1 = 0;
                $1$hi = i64toi32_i32$0;
                break label$1;
              }
              $8_1 = 0;
              label$11: {
                i64toi32_i32$0 = $13$hi;
                i64toi32_i32$1 = $13_1;
                i64toi32_i32$2 = 65535;
                i64toi32_i32$4 = -1;
                if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
                  break label$11;
                }
                $110_1 = $5_1 + 320 | 0;
                i64toi32_i32$1 = $1$hi;
                $111_1 = $1_1;
                $111$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $11$hi;
                $112_1 = $11_1;
                $112$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = $11$hi;
                $8_1 = !($11_1 | i64toi32_i32$1 | 0);
                i64toi32_i32$3 = $8_1;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$0 = $11$hi;
                i64toi32_i32$2 = i64toi32_i32$3 ? $1_1 : $11_1;
                i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
                i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
                i64toi32_i32$3 = 0;
                if ((i64toi32_i32$1 | 0) == (32 | 0)) {
                  $324 = Math_clz32(i64toi32_i32$2) + 32 | 0;
                } else {
                  $324 = i64toi32_i32$1;
                }
                $119$hi = i64toi32_i32$3;
                i64toi32_i32$3 = 0;
                $122$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $119$hi;
                i64toi32_i32$2 = $324;
                i64toi32_i32$4 = $122$hi;
                i64toi32_i32$1 = $8_1 << 6 | 0;
                i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $8_1 = i64toi32_i32$0;
                i64toi32_i32$5 = $111$hi;
                i64toi32_i32$2 = $112$hi;
                $86($110_1 | 0, $111_1 | 0, i64toi32_i32$5 | 0, $112_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 + -15 | 0 | 0);
                $8_1 = 16 - i64toi32_i32$0 | 0;
                i64toi32_i32$3 = $5_1 + 328 | 0;
                i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                $11_1 = i64toi32_i32$2;
                $11$hi = i64toi32_i32$5;
                i64toi32_i32$3 = $5_1;
                i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
                $1_1 = i64toi32_i32$5;
                $1$hi = i64toi32_i32$2;
              }
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$3 = $2_1;
              i64toi32_i32$5 = 65535;
              i64toi32_i32$1 = -1;
              if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
                break label$2;
              }
              $137 = $5_1 + 304 | 0;
              i64toi32_i32$3 = $3$hi;
              $138 = $3_1;
              $138$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $10$hi;
              $139 = $10_1;
              $139$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $3$hi;
              i64toi32_i32$3 = $10$hi;
              $9_1 = !($10_1 | i64toi32_i32$3 | 0);
              i64toi32_i32$4 = $9_1;
              i64toi32_i32$3 = $3$hi;
              i64toi32_i32$2 = $10$hi;
              i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $10_1;
              i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
              i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
              i64toi32_i32$4 = 0;
              if ((i64toi32_i32$3 | 0) == (32 | 0)) {
                $325 = Math_clz32(i64toi32_i32$5) + 32 | 0;
              } else {
                $325 = i64toi32_i32$3;
              }
              $146$hi = i64toi32_i32$4;
              i64toi32_i32$4 = 0;
              $149$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $146$hi;
              i64toi32_i32$5 = $325;
              i64toi32_i32$1 = $149$hi;
              i64toi32_i32$3 = $9_1 << 6 | 0;
              i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
              i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
              }
              $9_1 = i64toi32_i32$2;
              i64toi32_i32$0 = $138$hi;
              i64toi32_i32$5 = $139$hi;
              $86($137 | 0, $138 | 0, i64toi32_i32$0 | 0, $139 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
              $8_1 = (i64toi32_i32$2 + $8_1 | 0) + -16 | 0;
              i64toi32_i32$4 = $5_1 + 312 | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $10_1 = i64toi32_i32$5;
              $10$hi = i64toi32_i32$0;
              i64toi32_i32$4 = $5_1;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
              $3_1 = i64toi32_i32$0;
              $3$hi = i64toi32_i32$5;
            }
            $164 = $5_1 + 288 | 0;
            i64toi32_i32$5 = $3$hi;
            i64toi32_i32$4 = $3_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$3 = 49;
            i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = 0;
              $326 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
            } else {
              i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
              $326 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
            }
            $166 = $326;
            $166$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $10$hi;
            i64toi32_i32$5 = $10_1;
            i64toi32_i32$4 = 65536;
            i64toi32_i32$3 = 0;
            i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
            $14_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
            $14$hi = i64toi32_i32$4;
            i64toi32_i32$0 = $14_1;
            i64toi32_i32$5 = 0;
            i64toi32_i32$3 = 15;
            i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
              $327 = 0;
            } else {
              i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
              $327 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
            }
            $170$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $166$hi;
            i64toi32_i32$4 = $166;
            i64toi32_i32$0 = $170$hi;
            i64toi32_i32$3 = $327;
            i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
            $2_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
            $2$hi = i64toi32_i32$0;
            i64toi32_i32$0 = 1963258675;
            i64toi32_i32$5 = 0;
            i64toi32_i32$4 = $2$hi;
            i64toi32_i32$3 = $2_1;
            i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
            i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
            i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
            i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
            $4_1 = i64toi32_i32$1;
            $4$hi = i64toi32_i32$2;
            i64toi32_i32$2 = i64toi32_i32$4;
            i64toi32_i32$5 = 0;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$3 = 0;
            $98($164 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
            i64toi32_i32$5 = ($5_1 + 288 | 0) + 8 | 0;
            i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            $181 = i64toi32_i32$3;
            $181$hi = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = 0;
            i64toi32_i32$3 = $181$hi;
            i64toi32_i32$2 = $181;
            i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
            i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
            i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
            i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
            $182$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$1 = $182$hi;
            i64toi32_i32$5 = 0;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$2 = 0;
            $98($5_1 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
            $185 = $5_1 + 256 | 0;
            i64toi32_i32$5 = $5_1;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
            i64toi32_i32$5 = i64toi32_i32$2;
            i64toi32_i32$2 = 0;
            i64toi32_i32$1 = 63;
            i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = 0;
              $328 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
            } else {
              i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
              $328 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
            }
            $188 = $328;
            $188$hi = i64toi32_i32$2;
            i64toi32_i32$0 = ($5_1 + 272 | 0) + 8 | 0;
            i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
            i64toi32_i32$0 = i64toi32_i32$2;
            i64toi32_i32$2 = 0;
            i64toi32_i32$1 = 1;
            i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
              $329 = 0;
            } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
              $329 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
            }
            $193$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $188$hi;
            i64toi32_i32$5 = $188;
            i64toi32_i32$0 = $193$hi;
            i64toi32_i32$1 = $329;
            i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
            $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
            $4$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $2$hi;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$5 = 0;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$1 = 0;
            $98($185 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
            i64toi32_i32$1 = i64toi32_i32$0;
            i64toi32_i32$5 = ($5_1 + 256 | 0) + 8 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            $203 = i64toi32_i32$1;
            $203$hi = i64toi32_i32$2;
            i64toi32_i32$2 = 0;
            i64toi32_i32$5 = 0;
            i64toi32_i32$1 = $203$hi;
            i64toi32_i32$0 = $203;
            i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
            i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
            i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
            i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
            $204$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $4$hi;
            i64toi32_i32$5 = 0;
            i64toi32_i32$2 = $204$hi;
            i64toi32_i32$0 = 0;
            $98($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
            $206 = $5_1 + 224 | 0;
            i64toi32_i32$5 = $5_1;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
            i64toi32_i32$5 = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$4 = 63;
            i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = 0;
              $331 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
            } else {
              i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
              $331 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
            }
            $209 = $331;
            $209$hi = i64toi32_i32$0;
            i64toi32_i32$2 = ($5_1 + 240 | 0) + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            i64toi32_i32$2 = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$4 = 1;
            i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
              $332 = 0;
            } else {
              i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
              $332 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
            }
            $214$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $209$hi;
            i64toi32_i32$5 = $209;
            i64toi32_i32$2 = $214$hi;
            i64toi32_i32$4 = $332;
            i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
            $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
            $4$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$2 = $4$hi;
            i64toi32_i32$5 = 0;
            i64toi32_i32$0 = $2$hi;
            i64toi32_i32$4 = 0;
            $98($206 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
            i64toi32_i32$4 = i64toi32_i32$2;
            i64toi32_i32$5 = ($5_1 + 224 | 0) + 8 | 0;
            i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            $224 = i64toi32_i32$4;
            $224$hi = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = 0;
            i64toi32_i32$4 = $224$hi;
            i64toi32_i32$2 = $224;
            i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
            i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
            i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
            i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
            $225$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $4$hi;
            i64toi32_i32$5 = 0;
            i64toi32_i32$0 = $225$hi;
            i64toi32_i32$2 = 0;
            $98($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
            $227 = $5_1 + 192 | 0;
            i64toi32_i32$5 = $5_1;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
            i64toi32_i32$5 = i64toi32_i32$2;
            i64toi32_i32$2 = 0;
            i64toi32_i32$3 = 63;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = 0;
              $333 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            } else {
              i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $333 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
            }
            $230 = $333;
            $230$hi = i64toi32_i32$2;
            i64toi32_i32$0 = ($5_1 + 208 | 0) + 8 | 0;
            i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
            i64toi32_i32$0 = i64toi32_i32$2;
            i64toi32_i32$2 = 0;
            i64toi32_i32$3 = 1;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
              $334 = 0;
            } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
              $334 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            }
            $235$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $230$hi;
            i64toi32_i32$5 = $230;
            i64toi32_i32$0 = $235$hi;
            i64toi32_i32$3 = $334;
            i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
            $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
            $4$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $2$hi;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$5 = 0;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$3 = 0;
            $98($227 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
            i64toi32_i32$3 = i64toi32_i32$0;
            i64toi32_i32$5 = ($5_1 + 192 | 0) + 8 | 0;
            i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            $245 = i64toi32_i32$3;
            $245$hi = i64toi32_i32$2;
            i64toi32_i32$2 = 0;
            i64toi32_i32$5 = 0;
            i64toi32_i32$3 = $245$hi;
            i64toi32_i32$0 = $245;
            i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
            i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
            i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
            i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
            $246$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$5 = 0;
            i64toi32_i32$2 = $246$hi;
            i64toi32_i32$0 = 0;
            $98($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
            $248 = $5_1 + 160 | 0;
            i64toi32_i32$0 = $2$hi;
            $249 = $2_1;
            $249$hi = i64toi32_i32$0;
            i64toi32_i32$5 = $5_1;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
            i64toi32_i32$5 = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$1 = 63;
            i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = 0;
              $336 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
            } else {
              i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
              $336 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
            }
            $252 = $336;
            $252$hi = i64toi32_i32$0;
            i64toi32_i32$2 = ($5_1 + 176 | 0) + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            i64toi32_i32$2 = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$1 = 1;
            i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
              $337 = 0;
            } else {
              i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
              $337 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
            }
            $257$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $252$hi;
            i64toi32_i32$5 = $252;
            i64toi32_i32$2 = $257$hi;
            i64toi32_i32$1 = $337;
            i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
            i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
            i64toi32_i32$5 = -1;
            i64toi32_i32$1 = -1;
            i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
            i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
            }
            $4_1 = i64toi32_i32$3;
            $4$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $249$hi;
            i64toi32_i32$0 = 0;
            i64toi32_i32$2 = $4$hi;
            i64toi32_i32$1 = 0;
            $98($248 | 0, $249 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
            $262 = $5_1 + 144 | 0;
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$0 = $3_1;
            i64toi32_i32$2 = 0;
            i64toi32_i32$4 = 15;
            i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
              $338 = 0;
            } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
              $338 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
            }
            $264$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $4$hi;
            i64toi32_i32$2 = $264$hi;
            i64toi32_i32$0 = 0;
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$4 = 0;
            $98($262 | 0, $338 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
            $267 = $5_1 + 112 | 0;
            i64toi32_i32$4 = i64toi32_i32$1;
            $268 = $4_1;
            $268$hi = i64toi32_i32$1;
            i64toi32_i32$0 = ($5_1 + 160 | 0) + 8 | 0;
            i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
            $272 = i64toi32_i32$4;
            $272$hi = i64toi32_i32$1;
            i64toi32_i32$0 = $5_1;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
            i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
            $10_1 = i64toi32_i32$1;
            $10$hi = i64toi32_i32$4;
            i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
            i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
            $279 = i64toi32_i32$4;
            $279$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $10$hi;
            i64toi32_i32$0 = $10_1;
            i64toi32_i32$4 = $279$hi;
            i64toi32_i32$2 = $279;
            i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
            i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
              i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
            }
            $2_1 = i64toi32_i32$5;
            $2$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $10$hi;
            i64toi32_i32$3 = $2$hi;
            i64toi32_i32$1 = i64toi32_i32$5;
            i64toi32_i32$0 = $10$hi;
            i64toi32_i32$2 = $10_1;
            $283 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
            i64toi32_i32$1 = 0;
            $284$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $272$hi;
            i64toi32_i32$2 = $272;
            i64toi32_i32$3 = $284$hi;
            i64toi32_i32$0 = $283;
            i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
            i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
            }
            $285$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $2$hi;
            i64toi32_i32$1 = $2_1;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = 1;
            $287 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
            i64toi32_i32$1 = 0;
            $288$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $285$hi;
            i64toi32_i32$0 = i64toi32_i32$4;
            i64toi32_i32$5 = $288$hi;
            i64toi32_i32$2 = $287;
            i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
            i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
            }
            $289$hi = i64toi32_i32$4;
            i64toi32_i32$4 = 0;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = $289$hi;
            i64toi32_i32$2 = i64toi32_i32$3;
            i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
            i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
            i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
            i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
            $290$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $268$hi;
            i64toi32_i32$1 = 0;
            i64toi32_i32$4 = $290$hi;
            i64toi32_i32$2 = 0;
            $98($267 | 0, $268 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$2 = 0;
            i64toi32_i32$1 = 1;
            i64toi32_i32$4 = $2$hi;
            i64toi32_i32$3 = $2_1;
            i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
            i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
            i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
            i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
            $294$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $4$hi;
            i64toi32_i32$5 = $294$hi;
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = $4$hi;
            i64toi32_i32$3 = 0;
            $98($5_1 + 128 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
            $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
            label$12: {
              label$13: {
                i64toi32_i32$1 = $5_1;
                i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
                $15_1 = i64toi32_i32$3;
                $15$hi = i64toi32_i32$2;
                i64toi32_i32$1 = i64toi32_i32$3;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 1;
                i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
                  $339 = 0;
                } else {
                  i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
                  $339 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
                }
                $16_1 = $339;
                $16$hi = i64toi32_i32$3;
                $305 = $16_1;
                $305$hi = i64toi32_i32$3;
                i64toi32_i32$2 = $5_1;
                i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
                i64toi32_i32$2 = i64toi32_i32$3;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 63;
                i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$3 = 0;
                  $341 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                } else {
                  i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                  $341 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
                }
                $308 = $341;
                $308$hi = i64toi32_i32$3;
                i64toi32_i32$1 = ($5_1 + 128 | 0) + 8 | 0;
                i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                $17_1 = i64toi32_i32$3;
                $17$hi = i64toi32_i32$2;
                i64toi32_i32$1 = i64toi32_i32$3;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 1;
                i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
                  $342 = 0;
                } else {
                  i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
                  $342 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
                }
                $314$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $308$hi;
                i64toi32_i32$2 = $308;
                i64toi32_i32$1 = $314$hi;
                i64toi32_i32$5 = $342;
                i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                $315 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
                $315$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $305$hi;
                i64toi32_i32$3 = $305;
                i64toi32_i32$2 = $315$hi;
                i64toi32_i32$5 = $315;
                i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                $13_1 = i64toi32_i32$4;
                $13$hi = i64toi32_i32$0;
                i64toi32_i32$1 = i64toi32_i32$4;
                i64toi32_i32$3 = -1;
                i64toi32_i32$5 = -13927;
                i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
                i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                }
                $18_1 = i64toi32_i32$2;
                $18$hi = i64toi32_i32$4;
                i64toi32_i32$0 = i64toi32_i32$2;
                i64toi32_i32$1 = 0;
                i64toi32_i32$5 = 32;
                i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$1 = 0;
                  $344 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
                } else {
                  i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
                  $344 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
                }
                $2_1 = $344;
                $2$hi = i64toi32_i32$1;
                $321 = $2_1;
                $321$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $11$hi;
                i64toi32_i32$4 = $11_1;
                i64toi32_i32$0 = 65536;
                i64toi32_i32$5 = 0;
                i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                $19_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                $19$hi = i64toi32_i32$0;
                i64toi32_i32$1 = $19_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$5 = 1;
                i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
                  $345 = 0;
                } else {
                  i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
                  $345 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
                }
                $20_1 = $345;
                $20$hi = i64toi32_i32$4;
                i64toi32_i32$0 = $20_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$5 = 32;
                i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$1 = 0;
                  $346 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
                } else {
                  i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
                  $346 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
                }
                $4_1 = $346;
                $4$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $321$hi;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$0 = __wasm_i64_mul($321 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                $21_1 = i64toi32_i32$0;
                $21$hi = i64toi32_i32$1;
                $330 = i64toi32_i32$0;
                $330$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$4 = $1_1;
                i64toi32_i32$0 = 0;
                i64toi32_i32$5 = 1;
                i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
                  $347 = 0;
                } else {
                  i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
                  $347 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
                }
                $22_1 = $347;
                $22$hi = i64toi32_i32$0;
                i64toi32_i32$1 = $22_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$5 = 32;
                i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$4 = 0;
                  $348 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
                } else {
                  i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
                  $348 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
                }
                $10_1 = $348;
                $10$hi = i64toi32_i32$4;
                $335 = $10_1;
                $335$hi = i64toi32_i32$4;
                i64toi32_i32$0 = ($5_1 + 112 | 0) + 8 | 0;
                i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                i64toi32_i32$0 = i64toi32_i32$4;
                i64toi32_i32$4 = 0;
                i64toi32_i32$5 = 1;
                i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
                  $350 = 0;
                } else {
                  i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
                  $350 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
                }
                $340 = $350;
                $340$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $15$hi;
                i64toi32_i32$1 = $15_1;
                i64toi32_i32$0 = 0;
                i64toi32_i32$5 = 63;
                i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$0 = 0;
                  $351 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
                } else {
                  i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
                  $351 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
                }
                $342$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $340$hi;
                i64toi32_i32$4 = $340;
                i64toi32_i32$1 = $342$hi;
                i64toi32_i32$5 = $351;
                i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                $343 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
                $343$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $17$hi;
                i64toi32_i32$0 = $17_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$5 = 63;
                i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$4 = 0;
                  $352 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
                } else {
                  i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
                  $352 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
                }
                $345$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $343$hi;
                i64toi32_i32$1 = $343;
                i64toi32_i32$0 = $345$hi;
                i64toi32_i32$5 = $352;
                i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
                i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                }
                $346$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $13$hi;
                i64toi32_i32$2 = $16$hi;
                i64toi32_i32$2 = $13$hi;
                i64toi32_i32$4 = $13_1;
                i64toi32_i32$1 = $16$hi;
                i64toi32_i32$5 = $16_1;
                $349 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
                i64toi32_i32$4 = 0;
                $350$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $346$hi;
                i64toi32_i32$5 = i64toi32_i32$3;
                i64toi32_i32$2 = $350$hi;
                i64toi32_i32$1 = $349;
                i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
                i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                }
                $351$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $18$hi;
                i64toi32_i32$3 = $13$hi;
                i64toi32_i32$3 = $18$hi;
                i64toi32_i32$4 = $18_1;
                i64toi32_i32$5 = $13$hi;
                i64toi32_i32$1 = $13_1;
                $354 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$4 = 0;
                $355$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $351$hi;
                i64toi32_i32$1 = i64toi32_i32$0;
                i64toi32_i32$3 = $355$hi;
                i64toi32_i32$5 = $354;
                i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
                i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                i64toi32_i32$4 = i64toi32_i32$2;
                i64toi32_i32$1 = -1;
                i64toi32_i32$5 = -1;
                i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
                i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                }
                $15_1 = i64toi32_i32$3;
                $15$hi = i64toi32_i32$2;
                i64toi32_i32$0 = i64toi32_i32$3;
                i64toi32_i32$4 = 0;
                i64toi32_i32$5 = 32;
                i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                  i64toi32_i32$4 = 0;
                  $353 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
                } else {
                  i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
                  $353 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
                }
                $13_1 = $353;
                $13$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $335$hi;
                i64toi32_i32$0 = $13$hi;
                i64toi32_i32$0 = __wasm_i64_mul($335 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                $361 = i64toi32_i32$0;
                $361$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $330$hi;
                i64toi32_i32$2 = $330;
                i64toi32_i32$0 = $361$hi;
                i64toi32_i32$5 = $361;
                i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
                i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                }
                $16_1 = i64toi32_i32$1;
                $16$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $21$hi;
                i64toi32_i32$3 = $16$hi;
                i64toi32_i32$4 = i64toi32_i32$1;
                i64toi32_i32$2 = $21$hi;
                i64toi32_i32$5 = $21_1;
                i64toi32_i32$4 = 0;
                $366 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
                $366$hi = i64toi32_i32$4;
                i64toi32_i32$4 = i64toi32_i32$3;
                $367 = i64toi32_i32$1;
                $367$hi = i64toi32_i32$3;
                i64toi32_i32$4 = $15$hi;
                i64toi32_i32$5 = $15_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$2 = -1;
                i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
                $15_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
                $15$hi = i64toi32_i32$3;
                $370 = $15_1;
                $370$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$4 = $1_1;
                i64toi32_i32$5 = 0;
                i64toi32_i32$2 = 63;
                i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                  i64toi32_i32$5 = 0;
                  $355 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
                } else {
                  i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
                  $355 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
                }
                $23_1 = $355;
                $23$hi = i64toi32_i32$5;
                $373 = $23_1;
                $373$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $11$hi;
                i64toi32_i32$3 = $11_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$2 = 1;
                i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
                  $356 = 0;
                } else {
                  i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
                  $356 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
                }
                $375$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $373$hi;
                i64toi32_i32$5 = $373;
                i64toi32_i32$3 = $375$hi;
                i64toi32_i32$2 = $356;
                i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
                i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
                i64toi32_i32$5 = 0;
                i64toi32_i32$2 = -1;
                i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
                $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
                $11$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $370$hi;
                i64toi32_i32$4 = $11$hi;
                i64toi32_i32$4 = __wasm_i64_mul($370 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
                i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                $379 = i64toi32_i32$4;
                $379$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $367$hi;
                i64toi32_i32$3 = $367;
                i64toi32_i32$4 = $379$hi;
                i64toi32_i32$2 = $379;
                i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
                i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
                }
                $17_1 = i64toi32_i32$0;
                $17$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $16$hi;
                i64toi32_i32$1 = $17$hi;
                i64toi32_i32$5 = i64toi32_i32$0;
                i64toi32_i32$3 = $16$hi;
                i64toi32_i32$2 = $16_1;
                $383 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
                i64toi32_i32$5 = 0;
                $384$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $366$hi;
                i64toi32_i32$2 = $366;
                i64toi32_i32$1 = $384$hi;
                i64toi32_i32$3 = $383;
                i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                $385$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $13$hi;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$0 = $13$hi;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
                i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                $388 = i64toi32_i32$2;
                $388$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $385$hi;
                i64toi32_i32$5 = i64toi32_i32$4;
                i64toi32_i32$2 = $388$hi;
                i64toi32_i32$3 = $388;
                i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                }
                $389 = i64toi32_i32$1;
                $389$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $15$hi;
                i64toi32_i32$4 = $4$hi;
                i64toi32_i32$4 = $15$hi;
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
                i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                $21_1 = i64toi32_i32$5;
                $21$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $11$hi;
                i64toi32_i32$4 = $13$hi;
                i64toi32_i32$4 = $11$hi;
                i64toi32_i32$5 = $13$hi;
                i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
                i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                $396 = i64toi32_i32$5;
                $396$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$0 = $21_1;
                i64toi32_i32$5 = $396$hi;
                i64toi32_i32$3 = $396;
                i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
                i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
                }
                $16_1 = i64toi32_i32$2;
                $16$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$1 = $16$hi;
                i64toi32_i32$4 = i64toi32_i32$2;
                i64toi32_i32$0 = $21$hi;
                i64toi32_i32$3 = $21_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$3 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
                i64toi32_i32$1 = 0;
                i64toi32_i32$0 = 32;
                i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
                  $357 = 0;
                } else {
                  i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
                  $357 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
                }
                $402 = $357;
                $402$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $16$hi;
                i64toi32_i32$4 = $16_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$0 = 32;
                i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                  i64toi32_i32$3 = 0;
                  $358 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
                } else {
                  i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
                  $358 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
                }
                $404$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $402$hi;
                i64toi32_i32$1 = $402;
                i64toi32_i32$4 = $404$hi;
                i64toi32_i32$0 = $358;
                i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
                $405 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                $405$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $389$hi;
                i64toi32_i32$3 = $389;
                i64toi32_i32$1 = $405$hi;
                i64toi32_i32$0 = $405;
                i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
                i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                }
                $406 = i64toi32_i32$5;
                $406$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $17$hi;
                $407 = $17_1;
                $407$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $16$hi;
                i64toi32_i32$4 = $16_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$0 = 32;
                i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
                  $359 = 0;
                } else {
                  i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
                  $359 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
                }
                $409$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $407$hi;
                i64toi32_i32$2 = $407;
                i64toi32_i32$4 = $409$hi;
                i64toi32_i32$0 = $359;
                i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
                if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $16_1 = i64toi32_i32$1;
                $16$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $17$hi;
                i64toi32_i32$5 = $16$hi;
                i64toi32_i32$3 = i64toi32_i32$1;
                i64toi32_i32$2 = $17$hi;
                i64toi32_i32$0 = $17_1;
                $413 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
                i64toi32_i32$3 = 0;
                $414$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $406$hi;
                i64toi32_i32$0 = $406;
                i64toi32_i32$5 = $414$hi;
                i64toi32_i32$2 = $413;
                i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
                }
                $415 = i64toi32_i32$4;
                $415$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $16$hi;
                $416 = $16_1;
                $416$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $18$hi;
                i64toi32_i32$3 = $18_1;
                i64toi32_i32$0 = 0;
                i64toi32_i32$2 = -1;
                i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
                $18_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
                $18$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $11$hi;
                i64toi32_i32$0 = $18$hi;
                i64toi32_i32$3 = $11$hi;
                i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
                i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                $21_1 = i64toi32_i32$3;
                $21$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$0 = $10$hi;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$3 = $10$hi;
                i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
                i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                $425 = i64toi32_i32$3;
                $425$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $21$hi;
                i64toi32_i32$1 = $21_1;
                i64toi32_i32$3 = $425$hi;
                i64toi32_i32$2 = $425;
                i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
                i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                }
                $17_1 = i64toi32_i32$5;
                $17$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$4 = $17$hi;
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$2 = $21_1;
                $429 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
                i64toi32_i32$0 = 0;
                $430 = $429;
                $430$hi = i64toi32_i32$0;
                i64toi32_i32$0 = i64toi32_i32$4;
                i64toi32_i32$0 = $15$hi;
                i64toi32_i32$0 = $22$hi;
                i64toi32_i32$2 = $22_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$1 = -2;
                i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
                $21_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
                $21$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $15$hi;
                i64toi32_i32$2 = $21$hi;
                i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
                i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                $436 = i64toi32_i32$2;
                $436$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $17$hi;
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$2 = $436$hi;
                i64toi32_i32$1 = $436;
                i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
                i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $24_1 = i64toi32_i32$3;
                $24$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $17$hi;
                i64toi32_i32$5 = $24$hi;
                i64toi32_i32$4 = i64toi32_i32$3;
                i64toi32_i32$0 = $17$hi;
                i64toi32_i32$1 = $17_1;
                $440 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$4 = 0;
                $441$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $430$hi;
                i64toi32_i32$1 = $430;
                i64toi32_i32$5 = $441$hi;
                i64toi32_i32$0 = $440;
                i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                }
                $442$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $416$hi;
                i64toi32_i32$4 = $416;
                i64toi32_i32$1 = $442$hi;
                i64toi32_i32$0 = i64toi32_i32$2;
                i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
                i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                }
                $17_1 = i64toi32_i32$5;
                $17$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $16$hi;
                i64toi32_i32$2 = $17$hi;
                i64toi32_i32$3 = i64toi32_i32$5;
                i64toi32_i32$4 = $16$hi;
                i64toi32_i32$0 = $16_1;
                $446 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
                i64toi32_i32$3 = 0;
                $447$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $415$hi;
                i64toi32_i32$0 = $415;
                i64toi32_i32$2 = $447$hi;
                i64toi32_i32$4 = $446;
                i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
                i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $448 = i64toi32_i32$1;
                $448$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $17$hi;
                $449 = $17_1;
                $449$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $18$hi;
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$5 = $18$hi;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                $16_1 = i64toi32_i32$0;
                $16$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $21$hi;
                i64toi32_i32$5 = $13$hi;
                i64toi32_i32$5 = $21$hi;
                i64toi32_i32$0 = $13$hi;
                i64toi32_i32$0 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                $456 = i64toi32_i32$0;
                $456$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $16$hi;
                i64toi32_i32$3 = $16_1;
                i64toi32_i32$0 = $456$hi;
                i64toi32_i32$4 = $456;
                i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
                i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
                }
                $4_1 = i64toi32_i32$2;
                $4$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$1 = $11$hi;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$3 = $11$hi;
                i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                $461 = i64toi32_i32$3;
                $461$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$5 = i64toi32_i32$2;
                i64toi32_i32$3 = $461$hi;
                i64toi32_i32$4 = $461;
                i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
                i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                }
                $11_1 = i64toi32_i32$0;
                $11$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $15$hi;
                i64toi32_i32$2 = $10$hi;
                i64toi32_i32$2 = $15$hi;
                i64toi32_i32$5 = $10$hi;
                i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
                i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                $466 = i64toi32_i32$5;
                $466$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $11$hi;
                i64toi32_i32$1 = i64toi32_i32$0;
                i64toi32_i32$5 = $466$hi;
                i64toi32_i32$4 = $466;
                i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
                i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                $13_1 = i64toi32_i32$3;
                $13$hi = i64toi32_i32$0;
                i64toi32_i32$2 = i64toi32_i32$3;
                i64toi32_i32$1 = 0;
                i64toi32_i32$4 = 32;
                i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                  i64toi32_i32$1 = 0;
                  $360 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
                } else {
                  i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
                  $360 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
                }
                $469 = $360;
                $469$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$1 = $16$hi;
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$0 = $4_1;
                i64toi32_i32$2 = $16$hi;
                i64toi32_i32$4 = $16_1;
                $472 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
                i64toi32_i32$0 = 0;
                $473$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $11$hi;
                i64toi32_i32$0 = i64toi32_i32$1;
                i64toi32_i32$0 = $11$hi;
                i64toi32_i32$4 = $11_1;
                i64toi32_i32$2 = $4_1;
                $476 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
                i64toi32_i32$4 = 0;
                $477$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $473$hi;
                i64toi32_i32$2 = $472;
                i64toi32_i32$0 = $477$hi;
                i64toi32_i32$1 = $476;
                i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                }
                $478$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $13$hi;
                i64toi32_i32$3 = $11$hi;
                i64toi32_i32$3 = $13$hi;
                i64toi32_i32$4 = $13_1;
                i64toi32_i32$2 = $11$hi;
                i64toi32_i32$1 = $11_1;
                $481 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$4 = 0;
                $482$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $478$hi;
                i64toi32_i32$1 = i64toi32_i32$5;
                i64toi32_i32$3 = $482$hi;
                i64toi32_i32$2 = $481;
                i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
                i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                i64toi32_i32$4 = i64toi32_i32$0;
                i64toi32_i32$1 = 0;
                i64toi32_i32$2 = 32;
                i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
                  $362 = 0;
                } else {
                  i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
                  $362 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
                }
                $484$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $469$hi;
                i64toi32_i32$5 = $469;
                i64toi32_i32$4 = $484$hi;
                i64toi32_i32$2 = $362;
                i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
                $485 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
                $485$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $449$hi;
                i64toi32_i32$1 = $449;
                i64toi32_i32$5 = $485$hi;
                i64toi32_i32$2 = $485;
                i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
                i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                $4_1 = i64toi32_i32$3;
                $4$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $17$hi;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$4 = i64toi32_i32$3;
                i64toi32_i32$1 = $17$hi;
                i64toi32_i32$2 = $17_1;
                $489 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
                i64toi32_i32$4 = 0;
                $490$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $448$hi;
                i64toi32_i32$2 = $448;
                i64toi32_i32$0 = $490$hi;
                i64toi32_i32$1 = $489;
                i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                }
                $491 = i64toi32_i32$5;
                $491$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $4$hi;
                $492 = $4_1;
                $492$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $24$hi;
                $493 = $24_1;
                $493$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$3 = $21$hi;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$2 = $21$hi;
                i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
                i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                $2_1 = i64toi32_i32$2;
                $2$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $18$hi;
                i64toi32_i32$3 = $10$hi;
                i64toi32_i32$3 = $18$hi;
                i64toi32_i32$2 = $10$hi;
                i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
                i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                $500 = i64toi32_i32$2;
                $500$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$4 = $2_1;
                i64toi32_i32$2 = $500$hi;
                i64toi32_i32$1 = $500;
                i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $11_1 = i64toi32_i32$0;
                $11$hi = i64toi32_i32$5;
                i64toi32_i32$3 = i64toi32_i32$0;
                i64toi32_i32$4 = 0;
                i64toi32_i32$1 = 32;
                i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                  i64toi32_i32$4 = 0;
                  $363 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
                } else {
                  i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
                  $363 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
                }
                $503 = $363;
                $503$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $11$hi;
                i64toi32_i32$4 = $2$hi;
                i64toi32_i32$4 = $11$hi;
                i64toi32_i32$5 = $11_1;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$1 = $2_1;
                $506 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$5 = 0;
                i64toi32_i32$1 = $506;
                i64toi32_i32$4 = 0;
                i64toi32_i32$3 = 32;
                i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
                  $364 = 0;
                } else {
                  i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
                  $364 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
                }
                $508$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $503$hi;
                i64toi32_i32$5 = $503;
                i64toi32_i32$1 = $508$hi;
                i64toi32_i32$3 = $364;
                i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
                $509 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                $509$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $493$hi;
                i64toi32_i32$4 = $493;
                i64toi32_i32$5 = $509$hi;
                i64toi32_i32$3 = $509;
                i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                $2_1 = i64toi32_i32$2;
                $2$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $24$hi;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$1 = i64toi32_i32$2;
                i64toi32_i32$4 = $24$hi;
                i64toi32_i32$3 = $24_1;
                i64toi32_i32$1 = 0;
                $514 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
                $514$hi = i64toi32_i32$1;
                i64toi32_i32$1 = i64toi32_i32$0;
                $515 = i64toi32_i32$2;
                $515$hi = i64toi32_i32$0;
                i64toi32_i32$1 = $13$hi;
                i64toi32_i32$3 = $13_1;
                i64toi32_i32$0 = 0;
                i64toi32_i32$4 = 32;
                i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
                  $365 = 0;
                } else {
                  i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
                  $365 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
                }
                $517$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $515$hi;
                i64toi32_i32$1 = $515;
                i64toi32_i32$3 = $517$hi;
                i64toi32_i32$4 = $365;
                i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
                i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                }
                $518$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$2 = $518$hi;
                i64toi32_i32$0 = i64toi32_i32$5;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$4 = $2_1;
                $520 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
                i64toi32_i32$0 = 0;
                $521$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $514$hi;
                i64toi32_i32$4 = $514;
                i64toi32_i32$2 = $521$hi;
                i64toi32_i32$1 = $520;
                i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $522$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $492$hi;
                i64toi32_i32$0 = $492;
                i64toi32_i32$4 = $522$hi;
                i64toi32_i32$1 = i64toi32_i32$3;
                i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
                i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                }
                $2_1 = i64toi32_i32$2;
                $2$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $4$hi;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$5 = i64toi32_i32$2;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$1 = $4_1;
                $526 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$5 = 0;
                $527$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $491$hi;
                i64toi32_i32$1 = $491;
                i64toi32_i32$3 = $527$hi;
                i64toi32_i32$0 = $526;
                i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                }
                $4_1 = i64toi32_i32$4;
                $4$hi = i64toi32_i32$2;
                i64toi32_i32$5 = i64toi32_i32$4;
                i64toi32_i32$1 = 131071;
                i64toi32_i32$0 = -1;
                if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
                  break label$13;
                }
                i64toi32_i32$5 = $20$hi;
                i64toi32_i32$5 = $23$hi;
                i64toi32_i32$5 = $20$hi;
                i64toi32_i32$0 = $20_1;
                i64toi32_i32$2 = $23$hi;
                i64toi32_i32$1 = $23_1;
                i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
                $19_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                $19$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$2 = $3$hi;
                i64toi32_i32$2 = $14$hi;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$5 = $3$hi;
                i64toi32_i32$1 = $14$hi;
                $98($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$0 = $1_1;
                i64toi32_i32$5 = 0;
                i64toi32_i32$2 = 49;
                i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
                  $368 = 0;
                } else {
                  i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
                  $368 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
                }
                $541$hi = i64toi32_i32$5;
                i64toi32_i32$1 = ($5_1 + 80 | 0) + 8 | 0;
                i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                $545 = i64toi32_i32$5;
                $545$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $541$hi;
                i64toi32_i32$1 = $368;
                i64toi32_i32$5 = $545$hi;
                i64toi32_i32$2 = $545;
                i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
                i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
                $546$hi = i64toi32_i32$4;
                i64toi32_i32$0 = $5_1;
                i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
                $1_1 = i64toi32_i32$4;
                $1$hi = i64toi32_i32$1;
                i64toi32_i32$0 = i64toi32_i32$4;
                i64toi32_i32$4 = 0;
                i64toi32_i32$2 = 0;
                $550 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0;
                i64toi32_i32$0 = 0;
                $551$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $546$hi;
                i64toi32_i32$2 = i64toi32_i32$3;
                i64toi32_i32$1 = $551$hi;
                i64toi32_i32$4 = $550;
                i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
                i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
                i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
                $10_1 = i64toi32_i32$5;
                $10$hi = i64toi32_i32$3;
                $6_1 = $6_1 + 16382 | 0;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$3 = 0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$4 = $1_1;
                i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
                i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
                i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
                i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
                $11_1 = i64toi32_i32$1;
                $11$hi = i64toi32_i32$5;
                break label$12;
              }
              $558 = $5_1 + 96 | 0;
              i64toi32_i32$5 = $2$hi;
              i64toi32_i32$3 = $2_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$4 = 1;
              i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $369 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
                $369 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
              }
              $560 = $369;
              $560$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$5 = $4_1;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 63;
              i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
                $371 = 0;
              } else {
                i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
                $371 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
              }
              $562$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $560$hi;
              i64toi32_i32$0 = $560;
              i64toi32_i32$5 = $562$hi;
              i64toi32_i32$4 = $371;
              i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
              $2_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
              $2$hi = i64toi32_i32$5;
              $564 = $2_1;
              $564$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $4$hi;
              i64toi32_i32$3 = $4_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$4 = 1;
              i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $372 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
                $372 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
              }
              $4_1 = $372;
              $4$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $3$hi;
              i64toi32_i32$0 = $14$hi;
              i64toi32_i32$0 = $564$hi;
              i64toi32_i32$3 = $4$hi;
              i64toi32_i32$5 = $3$hi;
              i64toi32_i32$4 = $14$hi;
              $98($558 | 0, $564 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
              i64toi32_i32$4 = $1$hi;
              i64toi32_i32$3 = $1_1;
              i64toi32_i32$5 = 0;
              i64toi32_i32$0 = 48;
              i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
                $374 = 0;
              } else {
                i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
                $374 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
              }
              $571$hi = i64toi32_i32$5;
              i64toi32_i32$4 = ($5_1 + 96 | 0) + 8 | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
              $575 = i64toi32_i32$5;
              $575$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $571$hi;
              i64toi32_i32$4 = $374;
              i64toi32_i32$5 = $575$hi;
              i64toi32_i32$0 = $575;
              i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
              i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
              i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
              i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
              $576$hi = i64toi32_i32$1;
              i64toi32_i32$3 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
              $11_1 = i64toi32_i32$1;
              $11$hi = i64toi32_i32$4;
              i64toi32_i32$3 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              $580 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$3 = 0;
              $581$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $576$hi;
              i64toi32_i32$0 = i64toi32_i32$2;
              i64toi32_i32$4 = $581$hi;
              i64toi32_i32$1 = $580;
              i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
              i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
              i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
              i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
              $10_1 = i64toi32_i32$5;
              $10$hi = i64toi32_i32$2;
              $6_1 = $6_1 + 16383 | 0;
              i64toi32_i32$2 = $11$hi;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = $11$hi;
              i64toi32_i32$1 = $11_1;
              i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
              i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
              i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
              i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
              $11_1 = i64toi32_i32$4;
              $11$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $1$hi;
              $22_1 = $1_1;
              $22$hi = i64toi32_i32$5;
            }
            label$14: {
              if (($6_1 | 0) < (32767 | 0)) {
                break label$14;
              }
              i64toi32_i32$5 = $12$hi;
              i64toi32_i32$2 = $12_1;
              i64toi32_i32$3 = 2147418112;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
              $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
              $12$hi = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              $1_1 = 0;
              $1$hi = i64toi32_i32$3;
              break label$1;
            }
            label$15: {
              label$16: {
                if (($6_1 | 0) < (1 | 0)) {
                  break label$16;
                }
                i64toi32_i32$3 = $10$hi;
                i64toi32_i32$5 = $10_1;
                i64toi32_i32$2 = 0;
                i64toi32_i32$1 = 1;
                i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
                  $375 = 0;
                } else {
                  i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
                  $375 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
                }
                $595 = $375;
                $595$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $11$hi;
                i64toi32_i32$3 = $11_1;
                i64toi32_i32$5 = 0;
                i64toi32_i32$1 = 63;
                i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                  i64toi32_i32$5 = 0;
                  $376 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
                } else {
                  i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
                  $376 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
                }
                $597$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $595$hi;
                i64toi32_i32$2 = $595;
                i64toi32_i32$3 = $597$hi;
                i64toi32_i32$1 = $376;
                i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                $1_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                $1$hi = i64toi32_i32$3;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = $6_1;
                i64toi32_i32$2 = 0;
                i64toi32_i32$1 = 48;
                i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
                  $377 = 0;
                } else {
                  i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
                  $377 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
                }
                $601$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$3 = $4_1;
                i64toi32_i32$5 = 65535;
                i64toi32_i32$1 = -1;
                i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
                $603 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
                $603$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $601$hi;
                i64toi32_i32$2 = $377;
                i64toi32_i32$3 = $603$hi;
                i64toi32_i32$1 = $603;
                i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
                $10_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                $10$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $11$hi;
                i64toi32_i32$5 = $11_1;
                i64toi32_i32$2 = 0;
                i64toi32_i32$1 = 1;
                i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
                  $378 = 0;
                } else {
                  i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
                  $378 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
                }
                $4_1 = $378;
                $4$hi = i64toi32_i32$2;
                break label$15;
              }
              label$17: {
                if (($6_1 | 0) > (-113 | 0)) {
                  break label$17;
                }
                i64toi32_i32$2 = 0;
                $1_1 = 0;
                $1$hi = i64toi32_i32$2;
                break label$1;
              }
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$2 = $4$hi;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$5 = $4$hi;
              $96($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 1 - $6_1 | 0 | 0);
              i64toi32_i32$5 = $22$hi;
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$5 = $22$hi;
              i64toi32_i32$2 = $19$hi;
              $86($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $6_1 + 112 | 0 | 0);
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$2 = $14$hi;
              i64toi32_i32$3 = $5_1;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
              $2_1 = i64toi32_i32$2;
              $2$hi = i64toi32_i32$5;
              i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $10_1 = i64toi32_i32$5;
              $10$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $3$hi;
              i64toi32_i32$5 = $14$hi;
              i64toi32_i32$3 = $2$hi;
              i64toi32_i32$1 = $10$hi;
              $98($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0);
              i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
              $636 = i64toi32_i32$1;
              $636$hi = i64toi32_i32$3;
              i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
              i64toi32_i32$5 = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$2 = 1;
              i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
                $380 = 0;
              } else {
                i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
                $380 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
              }
              $641 = $380;
              $641$hi = i64toi32_i32$3;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
              $1_1 = i64toi32_i32$3;
              $1$hi = i64toi32_i32$5;
              i64toi32_i32$1 = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$2 = 63;
              i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                i64toi32_i32$3 = 0;
                $381 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
              } else {
                i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
                $381 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
              }
              $645$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $641$hi;
              i64toi32_i32$5 = $641;
              i64toi32_i32$1 = $645$hi;
              i64toi32_i32$2 = $381;
              i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
              $646 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
              $646$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $636$hi;
              i64toi32_i32$3 = $636;
              i64toi32_i32$5 = $646$hi;
              i64toi32_i32$2 = $646;
              i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
              i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
              i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
              i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
              $647 = i64toi32_i32$0;
              $647$hi = i64toi32_i32$4;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
              $4_1 = i64toi32_i32$4;
              $4$hi = i64toi32_i32$3;
              $650 = i64toi32_i32$4;
              $650$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $1$hi;
              i64toi32_i32$1 = $1_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$2 = 1;
              i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
                $382 = 0;
              } else {
                i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
                $382 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
              }
              $11_1 = $382;
              $11$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $650$hi;
              i64toi32_i32$3 = $650;
              i64toi32_i32$1 = $11$hi;
              i64toi32_i32$2 = $11_1;
              $654 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
              i64toi32_i32$3 = 0;
              $655$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $647$hi;
              i64toi32_i32$2 = $647;
              i64toi32_i32$4 = $655$hi;
              i64toi32_i32$1 = $654;
              i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
              i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
              i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
              i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
              $1_1 = i64toi32_i32$5;
              $1$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$0 = $11$hi;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$3 = $4_1;
              i64toi32_i32$2 = $11$hi;
              i64toi32_i32$1 = $11_1;
              i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
              i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
              i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
              i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
              $4_1 = i64toi32_i32$4;
              $4$hi = i64toi32_i32$5;
            }
            i64toi32_i32$5 = $3$hi;
            i64toi32_i32$5 = $14$hi;
            i64toi32_i32$5 = $3$hi;
            i64toi32_i32$3 = $14$hi;
            i64toi32_i32$0 = 0;
            i64toi32_i32$1 = 0;
            $98($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$3 | 0, 3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
            i64toi32_i32$1 = i64toi32_i32$5;
            i64toi32_i32$1 = i64toi32_i32$3;
            i64toi32_i32$1 = i64toi32_i32$5;
            i64toi32_i32$0 = i64toi32_i32$3;
            i64toi32_i32$3 = 0;
            i64toi32_i32$5 = 0;
            $98($5_1 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $14_1 | 0, i64toi32_i32$0 | 0, 5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0);
            i64toi32_i32$5 = $10$hi;
            $667 = $10_1;
            $667$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $2$hi;
            $668 = $2_1;
            $668$hi = i64toi32_i32$5;
            i64toi32_i32$0 = $2_1;
            i64toi32_i32$3 = 0;
            i64toi32_i32$1 = 1;
            i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
            $11_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
            $11$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $4$hi;
            i64toi32_i32$3 = $11$hi;
            i64toi32_i32$5 = $11_1;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$1 = $4_1;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
            i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
            }
            $4_1 = i64toi32_i32$2;
            $4$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $3$hi;
            i64toi32_i32$4 = $4$hi;
            i64toi32_i32$3 = i64toi32_i32$2;
            i64toi32_i32$5 = $3$hi;
            i64toi32_i32$1 = $3_1;
            $676 = i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
            i64toi32_i32$3 = $1$hi;
            i64toi32_i32$3 = i64toi32_i32$4;
            i64toi32_i32$3 = $11$hi;
            i64toi32_i32$3 = i64toi32_i32$4;
            i64toi32_i32$1 = i64toi32_i32$2;
            i64toi32_i32$4 = $11$hi;
            i64toi32_i32$5 = $11_1;
            $680 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
            i64toi32_i32$1 = 0;
            $681$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$5 = $1_1;
            i64toi32_i32$3 = $681$hi;
            i64toi32_i32$4 = $680;
            i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
            i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
            }
            $1_1 = i64toi32_i32$0;
            $1$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $14$hi;
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$1 = i64toi32_i32$0;
            i64toi32_i32$5 = $14$hi;
            i64toi32_i32$4 = $14_1;
            $685 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
            i64toi32_i32$1 = i64toi32_i32$2;
            i64toi32_i32$1 = i64toi32_i32$5;
            i64toi32_i32$1 = i64toi32_i32$2;
            i64toi32_i32$4 = i64toi32_i32$0;
            i64toi32_i32$2 = i64toi32_i32$5;
            i64toi32_i32$5 = $14_1;
            $689 = (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676 : $685;
            i64toi32_i32$4 = 0;
            $690$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $668$hi;
            i64toi32_i32$5 = $668;
            i64toi32_i32$1 = $690$hi;
            i64toi32_i32$2 = $689;
            i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
            i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
            }
            $3_1 = i64toi32_i32$3;
            $3$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $2$hi;
            i64toi32_i32$0 = $3$hi;
            i64toi32_i32$4 = i64toi32_i32$3;
            i64toi32_i32$5 = $2$hi;
            i64toi32_i32$2 = $2_1;
            $694 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
            i64toi32_i32$4 = 0;
            $695$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $667$hi;
            i64toi32_i32$2 = $667;
            i64toi32_i32$0 = $695$hi;
            i64toi32_i32$5 = $694;
            i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
            i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
            if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
              i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
            }
            $2_1 = i64toi32_i32$1;
            $2$hi = i64toi32_i32$3;
            $697 = i64toi32_i32$1;
            $697$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $3$hi;
            i64toi32_i32$3 = $2$hi;
            i64toi32_i32$4 = i64toi32_i32$1;
            i64toi32_i32$2 = 2147418112;
            i64toi32_i32$5 = 0;
            $700 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
            i64toi32_i32$4 = $4$hi;
            i64toi32_i32$5 = $5_1;
            i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
            i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
            $703 = i64toi32_i32$4;
            $703$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $4$hi;
            i64toi32_i32$5 = $4_1;
            i64toi32_i32$4 = $703$hi;
            i64toi32_i32$2 = $703;
            $704 = i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
            i64toi32_i32$5 = $1$hi;
            i64toi32_i32$2 = ($5_1 + 16 | 0) + 8 | 0;
            i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $2_1 = i64toi32_i32$5;
            $2$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $1$hi;
            i64toi32_i32$2 = $1_1;
            i64toi32_i32$5 = $2$hi;
            i64toi32_i32$4 = $2_1;
            $711 = i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$3;
            i64toi32_i32$2 = i64toi32_i32$5;
            i64toi32_i32$2 = i64toi32_i32$3;
            i64toi32_i32$4 = $1_1;
            i64toi32_i32$3 = i64toi32_i32$5;
            i64toi32_i32$5 = $2_1;
            $716 = $700 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $704 : $711) | 0;
            i64toi32_i32$4 = 0;
            $717$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $3$hi;
            i64toi32_i32$5 = $3_1;
            i64toi32_i32$2 = $717$hi;
            i64toi32_i32$3 = $716;
            i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
            i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
            }
            $2_1 = i64toi32_i32$0;
            $2$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$4 = i64toi32_i32$0;
            i64toi32_i32$5 = $3$hi;
            i64toi32_i32$3 = $3_1;
            $721 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
            i64toi32_i32$4 = 0;
            $722$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $697$hi;
            i64toi32_i32$3 = $697;
            i64toi32_i32$1 = $722$hi;
            i64toi32_i32$5 = $721;
            i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
            i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
            }
            $3_1 = i64toi32_i32$2;
            $3$hi = i64toi32_i32$0;
            $724 = i64toi32_i32$2;
            $724$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $2$hi;
            i64toi32_i32$0 = $3$hi;
            i64toi32_i32$4 = i64toi32_i32$2;
            i64toi32_i32$3 = 2147418112;
            i64toi32_i32$5 = 0;
            $727 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
            i64toi32_i32$4 = $4$hi;
            i64toi32_i32$5 = $5_1;
            i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            $730 = i64toi32_i32$4;
            $730$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$5 = $4_1;
            i64toi32_i32$4 = $730$hi;
            i64toi32_i32$3 = $730;
            $731 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
            i64toi32_i32$5 = $1$hi;
            i64toi32_i32$3 = $5_1 + 8 | 0;
            i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
            $4_1 = i64toi32_i32$5;
            $4$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$3 = $1_1;
            i64toi32_i32$5 = $4$hi;
            i64toi32_i32$4 = $4_1;
            $737 = i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
            i64toi32_i32$3 = i64toi32_i32$0;
            i64toi32_i32$3 = i64toi32_i32$5;
            i64toi32_i32$3 = i64toi32_i32$0;
            i64toi32_i32$4 = $1_1;
            i64toi32_i32$0 = i64toi32_i32$5;
            i64toi32_i32$5 = $4_1;
            $742 = $727 & ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) | 0 ? $731 : $737) | 0;
            i64toi32_i32$4 = 0;
            $743$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $2$hi;
            i64toi32_i32$5 = $2_1;
            i64toi32_i32$3 = $743$hi;
            i64toi32_i32$0 = $742;
            i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
            i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
            if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
            }
            $1_1 = i64toi32_i32$1;
            $1$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$4 = i64toi32_i32$1;
            i64toi32_i32$5 = $2$hi;
            i64toi32_i32$0 = $2_1;
            $747 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
            i64toi32_i32$4 = 0;
            $748$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $724$hi;
            i64toi32_i32$0 = $724;
            i64toi32_i32$2 = $748$hi;
            i64toi32_i32$5 = $747;
            i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
            i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
              i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
            }
            $749$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $12$hi;
            i64toi32_i32$1 = $749$hi;
            i64toi32_i32$4 = i64toi32_i32$3;
            i64toi32_i32$0 = $12$hi;
            i64toi32_i32$5 = $12_1;
            i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
            $12_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
            $12$hi = i64toi32_i32$0;
          }
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$4 = $0_1;
          HEAP32[i64toi32_i32$4 >> 2] = $1_1;
          HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$0 = $12$hi;
          HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $12_1;
          HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$0;
          global$0 = $5_1 + 336 | 0;
        }

        function $90($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = +$1_1;
          var i64toi32_i32$3 = 0,i64toi32_i32$4 = 0,i64toi32_i32$5 = 0,i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,i64toi32_i32$2 = 0,$5_1 = 0,$5$hi = 0,$2_1 = 0,$4_1 = 0,$6_1 = 0,$6$hi = 0,$4$hi = 0,$26_1 = 0,$27_1 = 0,$28_1 = 0,$29_1 = 0,$30_1 = 0,$3_1 = 0,$31_1 = 0,$32_1 = 0,$33_1 = 0,$33$hi = 0,$37_1 = 0,$50_1 = 0,$50$hi = 0,$54$hi = 0,$63_1 = 0,$63$hi = 0,$64_1 = 0;
          $2_1 = global$0 - 16 | 0;
          global$0 = $2_1;
          label$1: {
            label$2: {
              wasm2js_scratch_store_f64(+$1_1);
              i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
              $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
              $4$hi = i64toi32_i32$0;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$1 = 2147483647;
              i64toi32_i32$3 = -1;
              i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
              $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
              $5$hi = i64toi32_i32$1;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$2 = -1048576;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
              i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
              }
              i64toi32_i32$1 = i64toi32_i32$4;
              i64toi32_i32$0 = 2145386495;
              i64toi32_i32$3 = -1;
              if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
                break label$2;
              }
              i64toi32_i32$1 = $5$hi;
              i64toi32_i32$3 = $5_1;
              i64toi32_i32$5 = 0;
              i64toi32_i32$0 = 60;
              i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
                $26_1 = 0;
              } else {
                i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
                $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
              }
              $6_1 = $26_1;
              $6$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $5$hi;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = 4;
              i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                i64toi32_i32$3 = 0;
                $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
              } else {
                i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
                $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
              }
              i64toi32_i32$5 = $27_1;
              i64toi32_i32$1 = 1006632960;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
              i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
              }
              $5_1 = i64toi32_i32$2;
              $5$hi = i64toi32_i32$4;
              break label$1;
            }
            label$3: {
              i64toi32_i32$4 = $5$hi;
              i64toi32_i32$3 = $5_1;
              i64toi32_i32$5 = 2146435072;
              i64toi32_i32$0 = 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
                break label$3;
              }
              i64toi32_i32$3 = $4$hi;
              i64toi32_i32$0 = $4_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$5 = 60;
              i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
                $28_1 = 0;
              } else {
                i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
                $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
              }
              $6_1 = $28_1;
              $6$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $4$hi;
              i64toi32_i32$3 = $4_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$5 = 4;
              i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
                $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
              }
              i64toi32_i32$4 = $29_1;
              i64toi32_i32$3 = 2147418112;
              i64toi32_i32$5 = 0;
              i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
              $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
              $5$hi = i64toi32_i32$3;
              break label$1;
            }
            label$4: {
              i64toi32_i32$3 = $5$hi;
              if (!!($5_1 | i64toi32_i32$3 | 0)) {
                break label$4;
              }
              i64toi32_i32$3 = 0;
              $6_1 = 0;
              $6$hi = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              $5_1 = 0;
              $5$hi = i64toi32_i32$3;
              break label$1;
            }
            $32_1 = $2_1;
            i64toi32_i32$3 = $5$hi;
            $33_1 = $5_1;
            $33$hi = i64toi32_i32$3;
            $37_1 = Math_clz32($5_1) + 32 | 0;
            i64toi32_i32$0 = $5_1;
            i64toi32_i32$4 = 0;
            i64toi32_i32$5 = 32;
            i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$4 = 0;
              $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
            } else {
              i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
              $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
            }
            i64toi32_i32$4 = $5$hi;
            i64toi32_i32$3 = $5_1;
            i64toi32_i32$0 = 1;
            i64toi32_i32$5 = 0;
            $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
            i64toi32_i32$3 = $33$hi;
            i64toi32_i32$4 = 0;
            $86($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
            i64toi32_i32$5 = $2_1 + 8 | 0;
            i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            i64toi32_i32$5 = i64toi32_i32$4;
            i64toi32_i32$4 = 65536;
            i64toi32_i32$0 = 0;
            i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
            $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
            $50$hi = i64toi32_i32$4;
            i64toi32_i32$4 = 0;
            i64toi32_i32$3 = 15372 - $3_1 | 0;
            i64toi32_i32$5 = 0;
            i64toi32_i32$0 = 48;
            i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
              $31_1 = 0;
            } else {
              i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
              $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
            }
            $54$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $50$hi;
            i64toi32_i32$4 = $50_1;
            i64toi32_i32$3 = $54$hi;
            i64toi32_i32$0 = $31_1;
            i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
            $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
            $5$hi = i64toi32_i32$3;
            i64toi32_i32$5 = $2_1;
            i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            $6_1 = i64toi32_i32$3;
            $6$hi = i64toi32_i32$4;
          }
          i64toi32_i32$4 = $6$hi;
          i64toi32_i32$3 = $0_1;
          HEAP32[i64toi32_i32$3 >> 2] = $6_1;
          HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
          i64toi32_i32$4 = $5$hi;
          i64toi32_i32$4 = $4$hi;
          i64toi32_i32$5 = $4_1;
          i64toi32_i32$3 = -2147483648;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
          $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
          $63$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $5$hi;
          i64toi32_i32$4 = $5_1;
          i64toi32_i32$5 = $63$hi;
          i64toi32_i32$0 = $63_1;
          i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
          $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
          i64toi32_i32$4 = $0_1;
          HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
          HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
          global$0 = $2_1 + 16 | 0;
        }

        function $91($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = Math_fround($1_1);
          var i64toi32_i32$1 = 0,i64toi32_i32$5 = 0,i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$3 = 0,$4_1 = 0,i64toi32_i32$4 = 0,$2_1 = 0,$5_1 = 0,$5$hi = 0,$6_1 = 0,$6$hi = 0,$3_1 = 0,$24_1 = 0,$25_1 = 0,$26_1 = 0,$27_1 = 0,$30_1 = 0,$38_1 = 0,$38$hi = 0,$42$hi = 0,$48_1 = 0,$49_1 = 0,$49$hi = 0,$53$hi = 0,$54_1 = 0;
          $2_1 = global$0 - 16 | 0;
          global$0 = $2_1;
          label$1: {
            label$2: {
              $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
              $4_1 = $3_1 & 2147483647 | 0;
              if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
                break label$2;
              }
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = $4_1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 25;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                $24_1 = 0;
              } else {
                i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
                $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
              }
              i64toi32_i32$0 = $24_1;
              i64toi32_i32$2 = 1065353216;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
              i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
              }
              $5_1 = i64toi32_i32$4;
              $5$hi = i64toi32_i32$5;
              i64toi32_i32$5 = 0;
              $6_1 = 0;
              $6$hi = i64toi32_i32$5;
              break label$1;
            }
            label$3: {
              if ($4_1 >>> 0 < 2139095040 >>> 0) {
                break label$3;
              }
              i64toi32_i32$5 = 0;
              i64toi32_i32$1 = $3_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 25;
              i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
                $25_1 = 0;
              } else {
                i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
                $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
              }
              i64toi32_i32$5 = $25_1;
              i64toi32_i32$1 = 2147418112;
              i64toi32_i32$3 = 0;
              i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
              $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
              $5$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $6_1 = 0;
              $6$hi = i64toi32_i32$1;
              break label$1;
            }
            label$4: {
              if ($4_1) {
                break label$4;
              }
              i64toi32_i32$1 = 0;
              $6_1 = 0;
              $6$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $5_1 = 0;
              $5$hi = i64toi32_i32$1;
              break label$1;
            }
            i64toi32_i32$1 = 0;
            $30_1 = $4_1;
            $4_1 = Math_clz32($4_1);
            i64toi32_i32$5 = 0;
            $86($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
            i64toi32_i32$0 = $2_1 + 8 | 0;
            i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
            i64toi32_i32$0 = i64toi32_i32$5;
            i64toi32_i32$5 = 65536;
            i64toi32_i32$3 = 0;
            i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
            $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
            $38$hi = i64toi32_i32$5;
            i64toi32_i32$5 = 0;
            i64toi32_i32$1 = 16265 - $4_1 | 0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$3 = 48;
            i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
              $26_1 = 0;
            } else {
              i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
              $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
            }
            $42$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $38$hi;
            i64toi32_i32$5 = $38_1;
            i64toi32_i32$1 = $42$hi;
            i64toi32_i32$3 = $26_1;
            i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
            $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
            $5$hi = i64toi32_i32$1;
            i64toi32_i32$0 = $2_1;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
            $6_1 = i64toi32_i32$1;
            $6$hi = i64toi32_i32$5;
          }
          i64toi32_i32$5 = $6$hi;
          i64toi32_i32$1 = $0_1;
          HEAP32[i64toi32_i32$1 >> 2] = $6_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
          $48_1 = i64toi32_i32$1;
          i64toi32_i32$5 = $5$hi;
          $49_1 = $5_1;
          $49$hi = i64toi32_i32$5;
          i64toi32_i32$5 = 0;
          i64toi32_i32$0 = $3_1 & -2147483648 | 0;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
            $27_1 = 0;
          } else {
            i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
            $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
          }
          $53$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $49$hi;
          i64toi32_i32$5 = $49_1;
          i64toi32_i32$0 = $53$hi;
          i64toi32_i32$3 = $27_1;
          i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
          $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
          i64toi32_i32$5 = $48_1;
          HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
          HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
          global$0 = $2_1 + 16 | 0;
        }

        function $92($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var i64toi32_i32$2 = 0,i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$5 = 0,i64toi32_i32$3 = 0,$3_1 = 0,i64toi32_i32$4 = 0,$2_1 = 0,$4_1 = 0,$4$hi = 0,$5_1 = 0,$5$hi = 0,$21_1 = 0,$22_1 = 0,$19_1 = 0,$27_1 = 0,$27$hi = 0,$31$hi = 0,$32_1 = 0,$32$hi = 0,$36$hi = 0;
          $2_1 = global$0 - 16 | 0;
          global$0 = $2_1;
          label$1: {
            label$2: {
              if ($1_1) {
                break label$2;
              }
              i64toi32_i32$0 = 0;
              $4_1 = 0;
              $4$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $5_1 = 0;
              $5$hi = i64toi32_i32$0;
              break label$1;
            }
            $3_1 = $1_1 >> 31 | 0;
            $3_1 = ($1_1 ^ $3_1 | 0) - $3_1 | 0;
            i64toi32_i32$0 = 0;
            $19_1 = $3_1;
            $3_1 = Math_clz32($3_1);
            i64toi32_i32$1 = 0;
            $86($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
            i64toi32_i32$2 = $2_1 + 8 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            i64toi32_i32$2 = i64toi32_i32$1;
            i64toi32_i32$1 = 65536;
            i64toi32_i32$3 = 0;
            i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
            $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
            $27$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 16414 - $3_1 | 0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$3 = 48;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
              $21_1 = 0;
            } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
              $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            }
            $31$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $27$hi;
            i64toi32_i32$1 = $27_1;
            i64toi32_i32$0 = $31$hi;
            i64toi32_i32$3 = $21_1;
            i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
            i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
            }
            $32_1 = i64toi32_i32$4;
            $32$hi = i64toi32_i32$5;
            i64toi32_i32$5 = 0;
            i64toi32_i32$2 = $1_1 & -2147483648 | 0;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = 32;
            i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
              $22_1 = 0;
            } else {
              i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
              $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
            }
            $36$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $32$hi;
            i64toi32_i32$5 = $32_1;
            i64toi32_i32$2 = $36$hi;
            i64toi32_i32$3 = $22_1;
            i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
            $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
            $5$hi = i64toi32_i32$2;
            i64toi32_i32$1 = $2_1;
            i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $4_1 = i64toi32_i32$2;
            $4$hi = i64toi32_i32$5;
          }
          i64toi32_i32$5 = $4$hi;
          i64toi32_i32$2 = $0_1;
          HEAP32[i64toi32_i32$2 >> 2] = $4_1;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
          i64toi32_i32$5 = $5$hi;
          HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
          HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
          global$0 = $2_1 + 16 | 0;
        }

        function $93($0_1, $1_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          var i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$5 = 0,i64toi32_i32$4 = 0,i64toi32_i32$3 = 0,$2_1 = 0,$3_1 = 0,$3$hi = 0,$4_1 = 0,$4$hi = 0,$17_1 = 0,$11_1 = 0,$20_1 = 0,$20$hi = 0,$24$hi = 0;
          $2_1 = global$0 - 16 | 0;
          global$0 = $2_1;
          label$1: {
            label$2: {
              if ($1_1) {
                break label$2;
              }
              i64toi32_i32$0 = 0;
              $3_1 = 0;
              $3$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $4_1 = 0;
              $4$hi = i64toi32_i32$0;
              break label$1;
            }
            i64toi32_i32$0 = 0;
            $11_1 = $1_1;
            $1_1 = Math_clz32($1_1);
            i64toi32_i32$1 = 0;
            $86($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 112 - ($1_1 ^ 31 | 0) | 0 | 0);
            i64toi32_i32$2 = $2_1 + 8 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            i64toi32_i32$2 = i64toi32_i32$1;
            i64toi32_i32$1 = 65536;
            i64toi32_i32$3 = 0;
            i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
            $20_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
            $20$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 16414 - $1_1 | 0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$3 = 48;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
              $17_1 = 0;
            } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
              $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            }
            $24$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $20$hi;
            i64toi32_i32$1 = $20_1;
            i64toi32_i32$0 = $24$hi;
            i64toi32_i32$3 = $17_1;
            i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
            i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
            }
            $4_1 = i64toi32_i32$4;
            $4$hi = i64toi32_i32$5;
            i64toi32_i32$2 = $2_1;
            i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $3_1 = i64toi32_i32$5;
            $3$hi = i64toi32_i32$1;
          }
          i64toi32_i32$1 = $3$hi;
          i64toi32_i32$5 = $0_1;
          HEAP32[i64toi32_i32$5 >> 2] = $3_1;
          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$1 = $4$hi;
          HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
          HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
          global$0 = $2_1 + 16 | 0;
        }

        function $94() {
          return 0 | 0;
        }

        function $95() {
          return 0 | 0;
        }

        function $96($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$4 = 0,i64toi32_i32$2 = 0,i64toi32_i32$1 = 0,i64toi32_i32$3 = 0,$4$hi = 0,$18_1 = 0,$20_1 = 0,$21_1 = 0,$22_1 = 0,$11$hi = 0,$18$hi = 0,$19_1 = 0,$19$hi = 0,$4_1 = 0,$24$hi = 0;
          label$1: {
            label$2: {
              if (!($3_1 & 64 | 0)) {
                break label$2;
              }
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$0 = 0;
              $11$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$2 = $2_1;
              i64toi32_i32$1 = $11$hi;
              i64toi32_i32$3 = $3_1 + -64 | 0;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
              }
              $1_1 = $18_1;
              $1$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              $2_1 = 0;
              $2$hi = i64toi32_i32$1;
              break label$1;
            }
            if (!$3_1) {
              break label$1;
            }
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$1 = 0;
            $18$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$0 = $2_1;
            i64toi32_i32$2 = $18$hi;
            i64toi32_i32$3 = 64 - $3_1 | 0;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
              $20_1 = 0;
            } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
              $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
            }
            $19_1 = $20_1;
            $19$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$2 = 0;
            $4_1 = $3_1;
            $4$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$1 = $1_1;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$3 = $3_1;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = 0;
              $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
              i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
            }
            $24$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $19$hi;
            i64toi32_i32$2 = $19_1;
            i64toi32_i32$1 = $24$hi;
            i64toi32_i32$3 = $21_1;
            i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
            $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
            $1$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$0 = $2_1;
            i64toi32_i32$2 = $4$hi;
            i64toi32_i32$3 = $4_1;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = 0;
              $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            } else {
              i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
            }
            $2_1 = $22_1;
            $2$hi = i64toi32_i32$2;
          }
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$0 = $0_1;
          HEAP32[i64toi32_i32$0 >> 2] = $1_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
          i64toi32_i32$2 = $2$hi;
          HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
          HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
        }

        function $97($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          $3$hi = $3$hi | 0;
          $4_1 = $4_1 | 0;
          $4$hi = $4$hi | 0;
          var i64toi32_i32$3 = 0,i64toi32_i32$2 = 0,i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,i64toi32_i32$5 = 0,i64toi32_i32$4 = 0,$14$hi = 0,$5_1 = 0,$11$hi = 0,$11_1 = 0,$14_1 = 0,$10$hi = 0,$12$hi = 0,$6_1 = 0,$18$hi = 0,$12_1 = 0,$10_1 = 0,$8_1 = 0,$15$hi = 0,$18_1 = 0,$7_1 = 0,$16$hi = 0,$17$hi = 0,$20$hi = 0,$13_1 = 0,$13$hi = 0,$16_1 = 0,$17_1 = 0,$20_1 = 0,$15_1 = 0,$21$hi = 0,$9_1 = 0,$19$hi = 0,$22$hi = 0,$23$hi = 0,$24$hi = 0,$220 = 0,$221 = 0,$223 = 0,$224 = 0,$226 = 0,$228 = 0,$229 = 0,$230 = 0,$231 = 0,$232 = 0,$19_1 = 0,$233 = 0,$234 = 0,$21_1 = 0,$235 = 0,$237 = 0,$22_1 = 0,$239 = 0,$240 = 0,$24_1 = 0,$241 = 0,$242 = 0,$243 = 0,$245 = 0,$246 = 0,$247 = 0,$248 = 0,$250 = 0,$251 = 0,$252 = 0,$253 = 0,$254 = 0,$255 = 0,$256 = 0,$257 = 0,$258 = 0,$53_1 = 0,$57_1 = 0,$64_1 = 0,$68_1 = 0,$77_1 = 0,$77$hi = 0,$89_1 = 0,$89$hi = 0,$111_1 = 0,$112_1 = 0,$112$hi = 0,$113 = 0,$113$hi = 0,$120$hi = 0,$123$hi = 0,$140 = 0,$141 = 0,$141$hi = 0,$142 = 0,$142$hi = 0,$149$hi = 0,$152$hi = 0,$170 = 0,$170$hi = 0,$175 = 0,$175$hi = 0,$182 = 0,$182$hi = 0,$189 = 0,$189$hi = 0,$194 = 0,$194$hi = 0,$203 = 0,$203$hi = 0,$205 = 0,$205$hi = 0,$207 = 0,$207$hi = 0,$215 = 0,$215$hi = 0,$217 = 0,$217$hi = 0,$219 = 0,$219$hi = 0,$222 = 0,$224$hi = 0,$225 = 0,$225$hi = 0,$227 = 0,$227$hi = 0,$236 = 0,$236$hi = 0,$238 = 0,$238$hi = 0,$244 = 0,$244$hi = 0,$249 = 0,$249$hi = 0,$252$hi = 0,$23_1 = 0,$268 = 0,$268$hi = 0,$272 = 0,$273 = 0,$273$hi = 0,$277 = 0,$277$hi = 0,$281 = 0,$282$hi = 0,$283$hi = 0,$286 = 0,$286$hi = 0,$287 = 0,$287$hi = 0,$288 = 0,$288$hi = 0,$291 = 0,$292$hi = 0,$295 = 0,$296$hi = 0,$297$hi = 0,$301 = 0,$302$hi = 0,$303 = 0,$303$hi = 0,$310 = 0,$310$hi = 0,$314 = 0,$316 = 0,$316$hi = 0,$318$hi = 0,$319 = 0,$319$hi = 0,$320 = 0,$320$hi = 0,$321 = 0,$321$hi = 0,$323$hi = 0,$327 = 0,$328$hi = 0,$329 = 0,$329$hi = 0,$330 = 0,$330$hi = 0,$332 = 0,$332$hi = 0,$335 = 0,$336$hi = 0,$339 = 0,$340$hi = 0,$341$hi = 0,$344 = 0,$345$hi = 0,$347$hi = 0,$348 = 0,$348$hi = 0,$352 = 0,$353$hi = 0,$354 = 0,$354$hi = 0,$355 = 0,$355$hi = 0,$358 = 0,$359$hi = 0,$362 = 0,$363$hi = 0,$364$hi = 0,$368 = 0,$369$hi = 0,$379 = 0,$379$hi = 0,$381$hi = 0,$384 = 0,$384$hi = 0,$386$hi = 0,$390 = 0,$390$hi = 0,$392$hi = 0,$426 = 0,$426$hi = 0,$428 = 0,$428$hi = 0,$429 = 0,$429$hi = 0,$431 = 0,$431$hi = 0,$435 = 0,$435$hi = 0,$437 = 0,$438$hi = 0,$443 = 0,$443$hi = 0,$447 = 0,$447$hi = 0,$456$hi = 0,$458 = 0,$458$hi = 0,$464 = 0,$470 = 0,$470$hi = 0,$474 = 0,$475$hi = 0,$479 = 0,$479$hi = 0,$483 = 0,$483$hi = 0,$486 = 0,$486$hi = 0,$490 = 0,$491$hi = 0;
          $5_1 = global$0 - 96 | 0;
          global$0 = $5_1;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$1 = 65535;
          i64toi32_i32$3 = -1;
          i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
          $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
          $10$hi = i64toi32_i32$1;
          i64toi32_i32$1 = i64toi32_i32$0;
          i64toi32_i32$1 = $2$hi;
          i64toi32_i32$1 = i64toi32_i32$0;
          i64toi32_i32$0 = i64toi32_i32$2;
          i64toi32_i32$2 = $2$hi;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
          i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
          i64toi32_i32$0 = -2147483648;
          i64toi32_i32$3 = 0;
          i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
          $11_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
          $11$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $2$hi;
          i64toi32_i32$2 = $2_1;
          i64toi32_i32$1 = 65535;
          i64toi32_i32$3 = -1;
          i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
          $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
          $12$hi = i64toi32_i32$1;
          i64toi32_i32$0 = $12_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $220 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $220 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
          }
          $13_1 = $220;
          $13$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $4$hi;
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 48;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $221 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $221 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
          }
          $6_1 = $221 & 32767 | 0;
          label$1: {
            label$2: {
              label$3: {
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$3 = 48;
                i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                  i64toi32_i32$1 = 0;
                  $223 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                } else {
                  i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                  $223 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
                }
                $7_1 = $223 & 32767 | 0;
                if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
                  break label$3;
                }
                $8_1 = 0;
                if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
                  break label$2;
                }
              }
              label$4: {
                i64toi32_i32$1 = $1$hi;
                $53_1 = !($1_1 | i64toi32_i32$1 | 0);
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$0 = $2_1;
                i64toi32_i32$2 = 2147483647;
                i64toi32_i32$3 = -1;
                i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
                $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
                $14$hi = i64toi32_i32$2;
                i64toi32_i32$1 = $14_1;
                i64toi32_i32$0 = 2147418112;
                i64toi32_i32$3 = 0;
                $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$2;
                i64toi32_i32$1 = i64toi32_i32$2;
                i64toi32_i32$3 = $14_1;
                i64toi32_i32$2 = 2147418112;
                i64toi32_i32$0 = 0;
                if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53_1 : $57_1) {
                  break label$4;
                }
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$0 = $2_1;
                i64toi32_i32$1 = 32768;
                i64toi32_i32$2 = 0;
                i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                $11$hi = i64toi32_i32$1;
                break label$1;
              }
              label$5: {
                i64toi32_i32$1 = $3$hi;
                $64_1 = !($3_1 | i64toi32_i32$1 | 0);
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$3 = $4_1;
                i64toi32_i32$0 = 2147483647;
                i64toi32_i32$2 = -1;
                i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
                $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
                $2$hi = i64toi32_i32$0;
                i64toi32_i32$1 = $2_1;
                i64toi32_i32$3 = 2147418112;
                i64toi32_i32$2 = 0;
                $68_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$0;
                i64toi32_i32$1 = i64toi32_i32$0;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$0 = 2147418112;
                i64toi32_i32$3 = 0;
                if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64_1 : $68_1) {
                  break label$5;
                }
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$3 = $4_1;
                i64toi32_i32$1 = 32768;
                i64toi32_i32$0 = 0;
                i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                $11$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $3$hi;
                $1_1 = $3_1;
                $1$hi = i64toi32_i32$1;
                break label$1;
              }
              label$6: {
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = $14$hi;
                i64toi32_i32$2 = $14_1;
                i64toi32_i32$3 = 2147418112;
                i64toi32_i32$0 = 0;
                i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
                $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
                $77$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$1 = $1_1;
                i64toi32_i32$2 = $77$hi;
                i64toi32_i32$0 = $77_1;
                i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                i64toi32_i32$1 = 0;
                i64toi32_i32$0 = 0;
                if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
                  break label$6;
                }
                label$7: {
                  i64toi32_i32$3 = $3$hi;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$3 = $3$hi;
                  i64toi32_i32$0 = $3_1;
                  i64toi32_i32$2 = $2$hi;
                  i64toi32_i32$1 = $2_1;
                  i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                  if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
                    break label$7;
                  }
                  i64toi32_i32$2 = 2147450880;
                  $11_1 = 0;
                  $11$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = 0;
                  $1_1 = 0;
                  $1$hi = i64toi32_i32$2;
                  break label$1;
                }
                i64toi32_i32$2 = $11$hi;
                i64toi32_i32$3 = $11_1;
                i64toi32_i32$0 = 2147418112;
                i64toi32_i32$1 = 0;
                i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
                $11$hi = i64toi32_i32$0;
                i64toi32_i32$0 = 0;
                $1_1 = 0;
                $1$hi = i64toi32_i32$0;
                break label$1;
              }
              label$8: {
                i64toi32_i32$0 = $3$hi;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$3 = 2147418112;
                i64toi32_i32$1 = 0;
                i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
                $89_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
                $89$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$0 = $3_1;
                i64toi32_i32$2 = $89$hi;
                i64toi32_i32$1 = $89_1;
                i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$1 = 0;
                if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
                  break label$8;
                }
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$3 = $14$hi;
                i64toi32_i32$3 = $1$hi;
                i64toi32_i32$1 = $1_1;
                i64toi32_i32$2 = $14$hi;
                i64toi32_i32$0 = $14_1;
                i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                $2_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                $2$hi = i64toi32_i32$2;
                i64toi32_i32$2 = 0;
                $1_1 = 0;
                $1$hi = i64toi32_i32$2;
                label$9: {
                  i64toi32_i32$2 = $2$hi;
                  if (!!($2_1 | i64toi32_i32$2 | 0)) {
                    break label$9;
                  }
                  i64toi32_i32$2 = 2147450880;
                  $11_1 = 0;
                  $11$hi = i64toi32_i32$2;
                  break label$1;
                }
                i64toi32_i32$2 = $11$hi;
                i64toi32_i32$3 = $11_1;
                i64toi32_i32$1 = 2147418112;
                i64toi32_i32$0 = 0;
                i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                $11$hi = i64toi32_i32$1;
                break label$1;
              }
              label$10: {
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$1 = $14$hi;
                i64toi32_i32$1 = $1$hi;
                i64toi32_i32$2 = $1_1;
                i64toi32_i32$3 = $14$hi;
                i64toi32_i32$0 = $14_1;
                i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
                i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
                i64toi32_i32$2 = 0;
                i64toi32_i32$0 = 0;
                if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
                  break label$10;
                }
                i64toi32_i32$1 = 0;
                $1_1 = 0;
                $1$hi = i64toi32_i32$1;
                break label$1;
              }
              label$11: {
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$1 = $2$hi;
                i64toi32_i32$1 = $3$hi;
                i64toi32_i32$0 = $3_1;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$2 = $2_1;
                i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
                i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$2 = 0;
                if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
                  break label$11;
                }
                i64toi32_i32$1 = 0;
                $1_1 = 0;
                $1$hi = i64toi32_i32$1;
                break label$1;
              }
              $8_1 = 0;
              label$12: {
                i64toi32_i32$1 = $14$hi;
                i64toi32_i32$2 = $14_1;
                i64toi32_i32$3 = 65535;
                i64toi32_i32$0 = -1;
                if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
                  break label$12;
                }
                $111_1 = $5_1 + 80 | 0;
                i64toi32_i32$2 = $1$hi;
                $112_1 = $1_1;
                $112$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $12$hi;
                $113 = $12_1;
                $113$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$2 = $12$hi;
                $8_1 = !($12_1 | i64toi32_i32$2 | 0);
                i64toi32_i32$4 = $8_1;
                i64toi32_i32$2 = $1$hi;
                i64toi32_i32$1 = $12$hi;
                i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $12_1;
                i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
                i64toi32_i32$2 = Math_clz32(i64toi32_i32$0);
                i64toi32_i32$4 = 0;
                if ((i64toi32_i32$2 | 0) == (32 | 0)) {
                  $224 = Math_clz32(i64toi32_i32$3) + 32 | 0;
                } else {
                  $224 = i64toi32_i32$2;
                }
                $120$hi = i64toi32_i32$4;
                i64toi32_i32$4 = 0;
                $123$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $120$hi;
                i64toi32_i32$3 = $224;
                i64toi32_i32$0 = $123$hi;
                i64toi32_i32$2 = $8_1 << 6 | 0;
                i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
                i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $8_1 = i64toi32_i32$1;
                i64toi32_i32$5 = $112$hi;
                i64toi32_i32$3 = $113$hi;
                $86($111_1 | 0, $112_1 | 0, i64toi32_i32$5 | 0, $113 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
                $8_1 = 16 - i64toi32_i32$1 | 0;
                i64toi32_i32$4 = $5_1 + 88 | 0;
                i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
                i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                $12_1 = i64toi32_i32$3;
                $12$hi = i64toi32_i32$5;
                i64toi32_i32$4 = i64toi32_i32$3;
                i64toi32_i32$3 = 0;
                i64toi32_i32$2 = 32;
                i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                  i64toi32_i32$3 = 0;
                  $226 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
                } else {
                  i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
                  $226 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
                }
                $13_1 = $226;
                $13$hi = i64toi32_i32$3;
                i64toi32_i32$5 = $5_1;
                i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
                i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
                $1_1 = i64toi32_i32$3;
                $1$hi = i64toi32_i32$4;
              }
              i64toi32_i32$4 = $2$hi;
              i64toi32_i32$5 = $2_1;
              i64toi32_i32$3 = 65535;
              i64toi32_i32$2 = -1;
              if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
                break label$2;
              }
              $140 = $5_1 + 64 | 0;
              i64toi32_i32$5 = $3$hi;
              $141 = $3_1;
              $141$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $10$hi;
              $142 = $10_1;
              $142$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $3$hi;
              i64toi32_i32$5 = $10$hi;
              $9_1 = !($10_1 | i64toi32_i32$5 | 0);
              i64toi32_i32$0 = $9_1;
              i64toi32_i32$5 = $3$hi;
              i64toi32_i32$4 = $10$hi;
              i64toi32_i32$3 = i64toi32_i32$0 ? $3_1 : $10_1;
              i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
              i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$5 | 0) == (32 | 0)) {
                $228 = Math_clz32(i64toi32_i32$3) + 32 | 0;
              } else {
                $228 = i64toi32_i32$5;
              }
              $149$hi = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              $152$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $149$hi;
              i64toi32_i32$3 = $228;
              i64toi32_i32$2 = $152$hi;
              i64toi32_i32$5 = $9_1 << 6 | 0;
              i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
              i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
                i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
              }
              $9_1 = i64toi32_i32$4;
              i64toi32_i32$1 = $141$hi;
              i64toi32_i32$3 = $142$hi;
              $86($140 | 0, $141 | 0, i64toi32_i32$1 | 0, $142 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
              $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
              i64toi32_i32$0 = $5_1 + 72 | 0;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $10_1 = i64toi32_i32$3;
              $10$hi = i64toi32_i32$1;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
              $3_1 = i64toi32_i32$1;
              $3$hi = i64toi32_i32$3;
            }
            i64toi32_i32$3 = $3$hi;
            i64toi32_i32$0 = $3_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$5 = 15;
            i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
              $229 = 0;
            } else {
              i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
              $229 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
            }
            $14_1 = $229;
            $14$hi = i64toi32_i32$1;
            i64toi32_i32$3 = $14_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = -32768;
            i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $2_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
            $2$hi = i64toi32_i32$0;
            $170 = $2_1;
            $170$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$1 = $1_1;
            i64toi32_i32$3 = 0;
            i64toi32_i32$5 = 32;
            i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$3 = 0;
              $230 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
            } else {
              i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
              $230 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
            }
            $4_1 = $230;
            $4$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $170$hi;
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$1 = __wasm_i64_mul($170 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
            i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
            $15_1 = i64toi32_i32$1;
            $15$hi = i64toi32_i32$3;
            $175 = i64toi32_i32$1;
            $175$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $14$hi;
            i64toi32_i32$0 = $14_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$5 = 32;
            i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $231 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
            } else {
              i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
              $231 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
            }
            $14_1 = $231;
            $14$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$3 = $1_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = -1;
            i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $1_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
            $1$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $14$hi;
            i64toi32_i32$3 = $1$hi;
            i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
            $182 = i64toi32_i32$3;
            $182$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $175$hi;
            i64toi32_i32$1 = $175;
            i64toi32_i32$3 = $182$hi;
            i64toi32_i32$5 = $182;
            i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
            i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
            }
            $16_1 = i64toi32_i32$2;
            $16$hi = i64toi32_i32$4;
            i64toi32_i32$0 = i64toi32_i32$2;
            i64toi32_i32$1 = 0;
            i64toi32_i32$5 = 32;
            i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
              $232 = 0;
            } else {
              i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
              $232 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
            }
            $17_1 = $232;
            $17$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$0 = $1$hi;
            i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
            i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
            $189 = i64toi32_i32$0;
            $189$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $17$hi;
            i64toi32_i32$4 = $17_1;
            i64toi32_i32$0 = $189$hi;
            i64toi32_i32$5 = $189;
            i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
            i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
            }
            $18_1 = i64toi32_i32$3;
            $18$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $17$hi;
            i64toi32_i32$2 = $18$hi;
            i64toi32_i32$1 = i64toi32_i32$3;
            i64toi32_i32$4 = $17$hi;
            i64toi32_i32$5 = $17_1;
            i64toi32_i32$1 = 0;
            $194 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
            $194$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $2$hi;
            i64toi32_i32$1 = $12$hi;
            i64toi32_i32$5 = $12_1;
            i64toi32_i32$2 = 0;
            i64toi32_i32$4 = -1;
            i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
            $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
            $12$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$5 = $12$hi;
            i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
            $19_1 = i64toi32_i32$5;
            $19$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $14$hi;
            i64toi32_i32$2 = $4$hi;
            i64toi32_i32$2 = $14$hi;
            i64toi32_i32$5 = $4$hi;
            i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
            $203 = i64toi32_i32$5;
            $203$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $19$hi;
            i64toi32_i32$1 = $19_1;
            i64toi32_i32$5 = $203$hi;
            i64toi32_i32$4 = $203;
            i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
            i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
              i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
            }
            $17_1 = i64toi32_i32$0;
            $17$hi = i64toi32_i32$3;
            $205 = i64toi32_i32$0;
            $205$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $3$hi;
            i64toi32_i32$2 = $3_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$4 = 49;
            i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $233 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
            } else {
              i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
              $233 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
            }
            $207 = $233;
            $207$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $10$hi;
            i64toi32_i32$3 = $10_1;
            i64toi32_i32$2 = 0;
            i64toi32_i32$4 = 15;
            i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
              $234 = 0;
            } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
              $234 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
            }
            $20_1 = $234;
            $20$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $207$hi;
            i64toi32_i32$1 = $207;
            i64toi32_i32$3 = $20$hi;
            i64toi32_i32$4 = $20_1;
            i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
            i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
            i64toi32_i32$1 = 0;
            i64toi32_i32$4 = -1;
            i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
            $3_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
            $3$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $1$hi;
            i64toi32_i32$1 = $3$hi;
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
            i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
            $215 = i64toi32_i32$2;
            $215$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $205$hi;
            i64toi32_i32$3 = $205;
            i64toi32_i32$2 = $215$hi;
            i64toi32_i32$4 = $215;
            i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
            i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
            if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
            }
            $21_1 = i64toi32_i32$5;
            $21$hi = i64toi32_i32$0;
            $217 = i64toi32_i32$5;
            $217$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $16$hi;
            i64toi32_i32$1 = $16_1;
            i64toi32_i32$3 = 0;
            i64toi32_i32$4 = 32;
            i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
              i64toi32_i32$3 = 0;
              $235 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
            } else {
              i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
              $235 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
            }
            $219 = $235;
            $219$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $16$hi;
            i64toi32_i32$3 = $15$hi;
            i64toi32_i32$3 = $16$hi;
            i64toi32_i32$0 = $16_1;
            i64toi32_i32$1 = $15$hi;
            i64toi32_i32$4 = $15_1;
            $222 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$4 = $222;
            i64toi32_i32$3 = 0;
            i64toi32_i32$1 = 32;
            i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
              i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
              $237 = 0;
            } else {
              i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
              $237 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
            }
            $224$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $219$hi;
            i64toi32_i32$0 = $219;
            i64toi32_i32$4 = $224$hi;
            i64toi32_i32$1 = $237;
            i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
            $225 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
            $225$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $217$hi;
            i64toi32_i32$3 = $217;
            i64toi32_i32$0 = $225$hi;
            i64toi32_i32$1 = $225;
            i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
            i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
            }
            $16_1 = i64toi32_i32$2;
            $16$hi = i64toi32_i32$5;
            $227 = i64toi32_i32$2;
            $227$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $2$hi;
            i64toi32_i32$5 = $13$hi;
            i64toi32_i32$4 = $13_1;
            i64toi32_i32$3 = 0;
            i64toi32_i32$1 = 65536;
            i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
            $10_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
            $10$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $2$hi;
            i64toi32_i32$4 = $10$hi;
            i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
            i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
            $22_1 = i64toi32_i32$4;
            $22$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $14$hi;
            i64toi32_i32$3 = $12$hi;
            i64toi32_i32$3 = $14$hi;
            i64toi32_i32$4 = $12$hi;
            i64toi32_i32$4 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
            i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
            $236 = i64toi32_i32$4;
            $236$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $22$hi;
            i64toi32_i32$5 = $22_1;
            i64toi32_i32$4 = $236$hi;
            i64toi32_i32$1 = $236;
            i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
            i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
            }
            $13_1 = i64toi32_i32$0;
            $13$hi = i64toi32_i32$2;
            $238 = i64toi32_i32$0;
            $238$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $20$hi;
            i64toi32_i32$3 = $20_1;
            i64toi32_i32$5 = 0;
            i64toi32_i32$1 = 32;
            i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
              i64toi32_i32$5 = 0;
              $239 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
              i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              $239 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            i64toi32_i32$2 = $239;
            i64toi32_i32$3 = 0;
            i64toi32_i32$1 = -2147483648;
            i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
            $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            $2$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $1$hi;
            i64toi32_i32$3 = $2$hi;
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
            i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
            $244 = i64toi32_i32$2;
            $244$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $238$hi;
            i64toi32_i32$5 = $238;
            i64toi32_i32$2 = $244$hi;
            i64toi32_i32$1 = $244;
            i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
            i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
            }
            $15_1 = i64toi32_i32$4;
            $15$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $3$hi;
            i64toi32_i32$0 = $4$hi;
            i64toi32_i32$0 = $3$hi;
            i64toi32_i32$5 = $4$hi;
            i64toi32_i32$5 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
            $249 = i64toi32_i32$5;
            $249$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $15$hi;
            i64toi32_i32$3 = i64toi32_i32$4;
            i64toi32_i32$5 = $249$hi;
            i64toi32_i32$1 = $249;
            i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
            i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
            }
            $20_1 = i64toi32_i32$2;
            $20$hi = i64toi32_i32$4;
            i64toi32_i32$0 = i64toi32_i32$2;
            i64toi32_i32$3 = 0;
            i64toi32_i32$1 = 32;
            i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
              i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
              $240 = 0;
            } else {
              i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
              $240 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
            }
            $252$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $227$hi;
            i64toi32_i32$4 = $227;
            i64toi32_i32$0 = $252$hi;
            i64toi32_i32$1 = $240;
            i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
            i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
            if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
            }
            $23_1 = i64toi32_i32$5;
            $23$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $194$hi;
            i64toi32_i32$3 = $194;
            i64toi32_i32$4 = $23$hi;
            i64toi32_i32$1 = i64toi32_i32$5;
            i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
            i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
            }
            $1_1 = i64toi32_i32$0;
            $1$hi = i64toi32_i32$5;
            $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
            label$13: {
              label$14: {
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$3 = $4$hi;
                i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
                i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                $24_1 = i64toi32_i32$3;
                $24$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $14$hi;
                i64toi32_i32$5 = $10$hi;
                i64toi32_i32$5 = $14$hi;
                i64toi32_i32$3 = $10$hi;
                i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
                i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                $268 = i64toi32_i32$3;
                $268$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $24$hi;
                i64toi32_i32$2 = $24_1;
                i64toi32_i32$3 = $268$hi;
                i64toi32_i32$1 = $268;
                i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                $4_1 = i64toi32_i32$4;
                $4$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $24$hi;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$5 = i64toi32_i32$4;
                i64toi32_i32$2 = $24$hi;
                i64toi32_i32$1 = $24_1;
                $272 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$5 = 0;
                $273 = $272;
                $273$hi = i64toi32_i32$5;
                i64toi32_i32$5 = i64toi32_i32$0;
                i64toi32_i32$5 = $3$hi;
                i64toi32_i32$5 = $12$hi;
                i64toi32_i32$5 = $3$hi;
                i64toi32_i32$0 = $12$hi;
                i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                $277 = i64toi32_i32$0;
                $277$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$1 = i64toi32_i32$4;
                i64toi32_i32$0 = $277$hi;
                i64toi32_i32$2 = $277;
                i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
                i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                }
                $14_1 = i64toi32_i32$3;
                $14$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $4$hi;
                i64toi32_i32$4 = $14$hi;
                i64toi32_i32$5 = i64toi32_i32$3;
                i64toi32_i32$1 = $4$hi;
                i64toi32_i32$2 = $4_1;
                $281 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
                i64toi32_i32$5 = 0;
                $282$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $273$hi;
                i64toi32_i32$2 = $273;
                i64toi32_i32$4 = $282$hi;
                i64toi32_i32$1 = $281;
                i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                }
                $283$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$3 = $10$hi;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$2 = $10$hi;
                i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
                i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                $286 = i64toi32_i32$2;
                $286$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $283$hi;
                i64toi32_i32$5 = i64toi32_i32$0;
                i64toi32_i32$2 = $286$hi;
                i64toi32_i32$1 = $286;
                i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
                i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                $287 = i64toi32_i32$4;
                $287$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $14$hi;
                $288 = $14_1;
                $288$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $17$hi;
                i64toi32_i32$0 = $19$hi;
                i64toi32_i32$0 = $17$hi;
                i64toi32_i32$3 = $17_1;
                i64toi32_i32$5 = $19$hi;
                i64toi32_i32$1 = $19_1;
                $291 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$3 = 0;
                $292$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $21$hi;
                i64toi32_i32$3 = i64toi32_i32$0;
                i64toi32_i32$3 = $21$hi;
                i64toi32_i32$1 = $21_1;
                i64toi32_i32$5 = $17_1;
                $295 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
                i64toi32_i32$1 = 0;
                $296$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $292$hi;
                i64toi32_i32$5 = $291;
                i64toi32_i32$3 = $296$hi;
                i64toi32_i32$0 = $295;
                i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
                i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
                }
                $297$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $288$hi;
                i64toi32_i32$1 = $288;
                i64toi32_i32$5 = $297$hi;
                i64toi32_i32$0 = i64toi32_i32$2;
                i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
                i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                }
                $4_1 = i64toi32_i32$3;
                $4$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $14$hi;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$4 = i64toi32_i32$3;
                i64toi32_i32$1 = $14$hi;
                i64toi32_i32$0 = $14_1;
                $301 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
                i64toi32_i32$4 = 0;
                $302$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $287$hi;
                i64toi32_i32$0 = $287;
                i64toi32_i32$2 = $302$hi;
                i64toi32_i32$1 = $301;
                i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
                i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                }
                $303 = i64toi32_i32$5;
                $303$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$3 = $10$hi;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$0 = $10$hi;
                i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                $3_1 = i64toi32_i32$0;
                $3$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$3 = $12$hi;
                i64toi32_i32$3 = $2$hi;
                i64toi32_i32$0 = $12$hi;
                i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                $310 = i64toi32_i32$0;
                $310$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $3$hi;
                i64toi32_i32$4 = $3_1;
                i64toi32_i32$0 = $310$hi;
                i64toi32_i32$1 = $310;
                i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $2_1 = i64toi32_i32$2;
                $2$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $3$hi;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$3 = i64toi32_i32$2;
                i64toi32_i32$4 = $3$hi;
                i64toi32_i32$1 = $3_1;
                $314 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$3 = 0;
                i64toi32_i32$1 = $314;
                i64toi32_i32$5 = 0;
                i64toi32_i32$4 = 32;
                i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
                  $241 = 0;
                } else {
                  i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
                  $241 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
                }
                $316 = $241;
                $316$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$3 = $2_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$4 = 32;
                i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                  i64toi32_i32$1 = 0;
                  $242 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
                } else {
                  i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
                  $242 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
                }
                $318$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $316$hi;
                i64toi32_i32$5 = $316;
                i64toi32_i32$3 = $318$hi;
                i64toi32_i32$4 = $242;
                i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
                $319 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
                $319$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $303$hi;
                i64toi32_i32$1 = $303;
                i64toi32_i32$5 = $319$hi;
                i64toi32_i32$4 = $319;
                i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
                i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                }
                $320 = i64toi32_i32$0;
                $320$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $4$hi;
                $321 = $4_1;
                $321$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $2$hi;
                i64toi32_i32$3 = $2_1;
                i64toi32_i32$1 = 0;
                i64toi32_i32$4 = 32;
                i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                  i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
                  $243 = 0;
                } else {
                  i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
                  $243 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
                }
                $323$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $321$hi;
                i64toi32_i32$2 = $321;
                i64toi32_i32$3 = $323$hi;
                i64toi32_i32$4 = $243;
                i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
                i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                $2_1 = i64toi32_i32$5;
                $2$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $4$hi;
                i64toi32_i32$0 = $2$hi;
                i64toi32_i32$1 = i64toi32_i32$5;
                i64toi32_i32$2 = $4$hi;
                i64toi32_i32$4 = $4_1;
                $327 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
                i64toi32_i32$1 = 0;
                $328$hi = i64toi32_i32$1;
                i64toi32_i32$1 = $320$hi;
                i64toi32_i32$4 = $320;
                i64toi32_i32$0 = $328$hi;
                i64toi32_i32$2 = $327;
                i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
                i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $329 = i64toi32_i32$3;
                $329$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $2$hi;
                $330 = $2_1;
                $330$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $20$hi;
                i64toi32_i32$1 = $20_1;
                i64toi32_i32$4 = 0;
                i64toi32_i32$2 = 32;
                i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                  i64toi32_i32$4 = 0;
                  $245 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
                } else {
                  i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
                  $245 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
                }
                $332 = $245;
                $332$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $13$hi;
                i64toi32_i32$4 = $22$hi;
                i64toi32_i32$4 = $13$hi;
                i64toi32_i32$5 = $13_1;
                i64toi32_i32$1 = $22$hi;
                i64toi32_i32$2 = $22_1;
                $335 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
                i64toi32_i32$5 = 0;
                $336$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $15$hi;
                i64toi32_i32$5 = i64toi32_i32$4;
                i64toi32_i32$5 = $15$hi;
                i64toi32_i32$2 = $15_1;
                i64toi32_i32$1 = $13_1;
                $339 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$2 = 0;
                $340$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $336$hi;
                i64toi32_i32$1 = $335;
                i64toi32_i32$5 = $340$hi;
                i64toi32_i32$4 = $339;
                i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
                i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                }
                $341$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $20$hi;
                i64toi32_i32$3 = $15$hi;
                i64toi32_i32$3 = $20$hi;
                i64toi32_i32$2 = $20_1;
                i64toi32_i32$1 = $15$hi;
                i64toi32_i32$4 = $15_1;
                $344 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
                i64toi32_i32$2 = 0;
                $345$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $341$hi;
                i64toi32_i32$4 = i64toi32_i32$0;
                i64toi32_i32$3 = $345$hi;
                i64toi32_i32$1 = $344;
                i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
                i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                i64toi32_i32$2 = i64toi32_i32$5;
                i64toi32_i32$4 = 0;
                i64toi32_i32$1 = 32;
                i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
                if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                  i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
                  $246 = 0;
                } else {
                  i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
                  $246 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
                }
                $347$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $332$hi;
                i64toi32_i32$0 = $332;
                i64toi32_i32$2 = $347$hi;
                i64toi32_i32$1 = $246;
                i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                $348 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                $348$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $330$hi;
                i64toi32_i32$4 = $330;
                i64toi32_i32$0 = $348$hi;
                i64toi32_i32$1 = $348;
                i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $4_1 = i64toi32_i32$3;
                $4$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$2 = i64toi32_i32$3;
                i64toi32_i32$4 = $2$hi;
                i64toi32_i32$1 = $2_1;
                $352 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$2 = 0;
                $353$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $329$hi;
                i64toi32_i32$1 = $329;
                i64toi32_i32$5 = $353$hi;
                i64toi32_i32$4 = $352;
                i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
                i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
                }
                $354 = i64toi32_i32$0;
                $354$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $4$hi;
                $355 = $4_1;
                $355$hi = i64toi32_i32$3;
                i64toi32_i32$3 = $16$hi;
                i64toi32_i32$3 = $21$hi;
                i64toi32_i32$3 = $16$hi;
                i64toi32_i32$2 = $16_1;
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$4 = $21_1;
                $358 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
                i64toi32_i32$2 = 0;
                $359$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $23$hi;
                i64toi32_i32$2 = i64toi32_i32$3;
                i64toi32_i32$2 = $23$hi;
                i64toi32_i32$4 = $23_1;
                i64toi32_i32$1 = $16_1;
                $362 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$4 = 0;
                $363$hi = i64toi32_i32$4;
                i64toi32_i32$4 = $359$hi;
                i64toi32_i32$1 = $358;
                i64toi32_i32$2 = $363$hi;
                i64toi32_i32$3 = $362;
                i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
                if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
                }
                $364$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $355$hi;
                i64toi32_i32$4 = $355;
                i64toi32_i32$1 = $364$hi;
                i64toi32_i32$3 = i64toi32_i32$5;
                i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
                if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                }
                $2_1 = i64toi32_i32$2;
                $2$hi = i64toi32_i32$5;
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$5 = $2$hi;
                i64toi32_i32$0 = i64toi32_i32$2;
                i64toi32_i32$4 = $4$hi;
                i64toi32_i32$3 = $4_1;
                $368 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
                i64toi32_i32$0 = 0;
                $369$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $354$hi;
                i64toi32_i32$3 = $354;
                i64toi32_i32$5 = $369$hi;
                i64toi32_i32$4 = $368;
                i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
                i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
                if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                }
                $4_1 = i64toi32_i32$1;
                $4$hi = i64toi32_i32$2;
                i64toi32_i32$0 = i64toi32_i32$1;
                i64toi32_i32$3 = 65536;
                i64toi32_i32$4 = 0;
                i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
                if (!(i64toi32_i32$0 & i64toi32_i32$4 | 0 | i64toi32_i32$3 | 0)) {
                  break label$14;
                }
                $6_1 = $6_1 + 1 | 0;
                break label$13;
              }
              i64toi32_i32$3 = $18$hi;
              i64toi32_i32$2 = $18_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$4 = 63;
              i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $247 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
                $247 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
              }
              $3_1 = $247;
              $3$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $4$hi;
              i64toi32_i32$3 = $4_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$4 = 1;
              i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
                $248 = 0;
              } else {
                i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
                $248 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
              }
              $379 = $248;
              $379$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$0 = $2_1;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 63;
              i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$3 = 0;
                $250 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
              } else {
                i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
                $250 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
              }
              $381$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $379$hi;
              i64toi32_i32$2 = $379;
              i64toi32_i32$0 = $381$hi;
              i64toi32_i32$4 = $250;
              i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
              $4_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
              $4$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $2$hi;
              i64toi32_i32$3 = $2_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$4 = 1;
              i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
                $251 = 0;
              } else {
                i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
                $251 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
              }
              $384 = $251;
              $384$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$0 = $1_1;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 63;
              i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$3 = 0;
                $252 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
              } else {
                i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
                $252 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
              }
              $386$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $384$hi;
              i64toi32_i32$2 = $384;
              i64toi32_i32$0 = $386$hi;
              i64toi32_i32$4 = $252;
              i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
              $2_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
              $2$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $18$hi;
              i64toi32_i32$3 = $18_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$4 = 1;
              i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
                $253 = 0;
              } else {
                i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
                $253 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
              }
              $18_1 = $253;
              $18$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $3$hi;
              $390 = $3_1;
              $390$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $1$hi;
              i64toi32_i32$0 = $1_1;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 1;
              i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
                $254 = 0;
              } else {
                i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
                $254 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
              }
              $392$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $390$hi;
              i64toi32_i32$2 = $390;
              i64toi32_i32$0 = $392$hi;
              i64toi32_i32$4 = $254;
              i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
              $1_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
              $1$hi = i64toi32_i32$0;
            }
            label$15: {
              if (($6_1 | 0) < (32767 | 0)) {
                break label$15;
              }
              i64toi32_i32$0 = $11$hi;
              i64toi32_i32$3 = $11_1;
              i64toi32_i32$2 = 2147418112;
              i64toi32_i32$4 = 0;
              i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
              $11_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
              $11$hi = i64toi32_i32$2;
              i64toi32_i32$2 = 0;
              $1_1 = 0;
              $1$hi = i64toi32_i32$2;
              break label$1;
            }
            label$16: {
              label$17: {
                if (($6_1 | 0) > (0 | 0)) {
                  break label$17;
                }
                label$18: {
                  $7_1 = 1 - $6_1 | 0;
                  if ($7_1 >>> 0 > 127 >>> 0) {
                    break label$18;
                  }
                  i64toi32_i32$2 = $18$hi;
                  i64toi32_i32$2 = $1$hi;
                  $6_1 = $6_1 + 127 | 0;
                  i64toi32_i32$2 = $18$hi;
                  i64toi32_i32$3 = $1$hi;
                  $86($5_1 + 48 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0);
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$2 = $4$hi;
                  $86($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0);
                  i64toi32_i32$2 = $18$hi;
                  i64toi32_i32$2 = $1$hi;
                  i64toi32_i32$2 = $18$hi;
                  i64toi32_i32$3 = $1$hi;
                  $96($5_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$3 = $4$hi;
                  i64toi32_i32$3 = $2$hi;
                  i64toi32_i32$2 = $4$hi;
                  $96($5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
                  i64toi32_i32$0 = $5_1;
                  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
                  $426 = i64toi32_i32$2;
                  $426$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
                  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
                  $428 = i64toi32_i32$3;
                  $428$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $426$hi;
                  i64toi32_i32$0 = $426;
                  i64toi32_i32$3 = $428$hi;
                  i64toi32_i32$4 = $428;
                  i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                  $429 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
                  $429$hi = i64toi32_i32$3;
                  i64toi32_i32$2 = $5_1;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
                  $431 = i64toi32_i32$3;
                  $431$hi = i64toi32_i32$0;
                  i64toi32_i32$2 = (i64toi32_i32$2 + 48 | 0) + 8 | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $435 = i64toi32_i32$0;
                  $435$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $431$hi;
                  i64toi32_i32$2 = $431;
                  i64toi32_i32$0 = $435$hi;
                  i64toi32_i32$4 = $435;
                  i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                  i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$4 = 0;
                  $437 = (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
                  i64toi32_i32$3 = 0;
                  $438$hi = i64toi32_i32$3;
                  i64toi32_i32$3 = $429$hi;
                  i64toi32_i32$4 = $429;
                  i64toi32_i32$0 = $438$hi;
                  i64toi32_i32$2 = $437;
                  i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                  $18_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
                  $18$hi = i64toi32_i32$0;
                  i64toi32_i32$3 = ($5_1 + 32 | 0) + 8 | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                  $443 = i64toi32_i32$0;
                  $443$hi = i64toi32_i32$4;
                  i64toi32_i32$3 = ($5_1 + 16 | 0) + 8 | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                  $447 = i64toi32_i32$4;
                  $447$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $443$hi;
                  i64toi32_i32$3 = $443;
                  i64toi32_i32$4 = $447$hi;
                  i64toi32_i32$2 = $447;
                  i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
                  $1_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
                  $1$hi = i64toi32_i32$4;
                  i64toi32_i32$0 = $5_1 + 8 | 0;
                  i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                  $4_1 = i64toi32_i32$4;
                  $4$hi = i64toi32_i32$3;
                  i64toi32_i32$0 = $5_1;
                  i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                  $2_1 = i64toi32_i32$3;
                  $2$hi = i64toi32_i32$4;
                  break label$16;
                }
                i64toi32_i32$4 = 0;
                $1_1 = 0;
                $1$hi = i64toi32_i32$4;
                break label$1;
              }
              i64toi32_i32$4 = 0;
              i64toi32_i32$0 = $6_1;
              i64toi32_i32$3 = 0;
              i64toi32_i32$2 = 48;
              i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
                $255 = 0;
              } else {
                i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
                $255 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
              }
              $456$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $4$hi;
              i64toi32_i32$4 = $4_1;
              i64toi32_i32$0 = 65535;
              i64toi32_i32$2 = -1;
              i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
              $458 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
              $458$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $456$hi;
              i64toi32_i32$3 = $255;
              i64toi32_i32$4 = $458$hi;
              i64toi32_i32$2 = $458;
              i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
              $4_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
              $4$hi = i64toi32_i32$4;
            }
            i64toi32_i32$4 = $4$hi;
            i64toi32_i32$4 = $11$hi;
            i64toi32_i32$4 = $4$hi;
            i64toi32_i32$0 = $4_1;
            i64toi32_i32$3 = $11$hi;
            i64toi32_i32$2 = $11_1;
            i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
            $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
            $11$hi = i64toi32_i32$3;
            label$19: {
              i64toi32_i32$3 = $18$hi;
              $464 = !($18_1 | i64toi32_i32$3 | 0);
              i64toi32_i32$3 = $1$hi;
              i64toi32_i32$4 = $1_1;
              i64toi32_i32$0 = -1;
              i64toi32_i32$2 = -1;
              if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
                $256 = 1;
              } else {
                if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
                  if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$2 >>> 0) {
                    $257 = 0;
                  } else {
                    $257 = 1;
                  }
                  $258 = $257;
                } else {
                  $258 = 0;
                }
                $256 = $258;
              }
              i64toi32_i32$4 = $1$hi;
              i64toi32_i32$2 = $1_1;
              i64toi32_i32$3 = -2147483648;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $464 : $256) {
                break label$19;
              }
              i64toi32_i32$2 = $11$hi;
              $470 = $11_1;
              $470$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $2$hi;
              i64toi32_i32$0 = $2_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$3 = 1;
              i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
              i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
              if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
              }
              $1_1 = i64toi32_i32$5;
              $1$hi = i64toi32_i32$1;
              $474 = !(i64toi32_i32$5 | i64toi32_i32$1 | 0);
              i64toi32_i32$1 = 0;
              $475$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $470$hi;
              i64toi32_i32$2 = $470;
              i64toi32_i32$0 = $475$hi;
              i64toi32_i32$3 = $474;
              i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
              i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
              }
              $11_1 = i64toi32_i32$4;
              $11$hi = i64toi32_i32$5;
              break label$1;
            }
            label$20: {
              i64toi32_i32$5 = $18$hi;
              i64toi32_i32$5 = $1$hi;
              i64toi32_i32$1 = $1_1;
              i64toi32_i32$2 = -2147483648;
              i64toi32_i32$3 = 0;
              i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
              $479 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
              $479$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $18$hi;
              i64toi32_i32$5 = $18_1;
              i64toi32_i32$1 = $479$hi;
              i64toi32_i32$3 = $479;
              i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
              i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
              i64toi32_i32$5 = 0;
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0) {
                break label$20;
              }
              i64toi32_i32$2 = $2$hi;
              $1_1 = $2_1;
              $1$hi = i64toi32_i32$2;
              break label$1;
            }
            i64toi32_i32$2 = $11$hi;
            $483 = $11_1;
            $483$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$3 = $2_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$5 = 1;
            i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
            $486 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
            $486$hi = i64toi32_i32$1;
            i64toi32_i32$1 = i64toi32_i32$2;
            i64toi32_i32$2 = i64toi32_i32$3;
            i64toi32_i32$3 = $486$hi;
            i64toi32_i32$5 = $486;
            i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
            i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
            }
            $1_1 = i64toi32_i32$0;
            $1$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $2$hi;
            i64toi32_i32$4 = $1$hi;
            i64toi32_i32$1 = i64toi32_i32$0;
            i64toi32_i32$2 = $2$hi;
            i64toi32_i32$5 = $2_1;
            $490 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
            i64toi32_i32$1 = 0;
            $491$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $483$hi;
            i64toi32_i32$5 = $483;
            i64toi32_i32$4 = $491$hi;
            i64toi32_i32$2 = $490;
            i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
            i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
            }
            $11_1 = i64toi32_i32$3;
            $11$hi = i64toi32_i32$0;
          }
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$5 = $0_1;
          HEAP32[i64toi32_i32$5 >> 2] = $1_1;
          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$0 = $11$hi;
          HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $11_1;
          HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
          global$0 = $5_1 + 96 | 0;
        }

        function $98($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          $3$hi = $3$hi | 0;
          $4_1 = $4_1 | 0;
          $4$hi = $4$hi | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$1 = 0,i64toi32_i32$5 = 0,i64toi32_i32$4 = 0,i64toi32_i32$3 = 0,$46_1 = 0,$48_1 = 0,$49_1 = 0,$50_1 = 0,$53_1 = 0,$54_1 = 0,$6_1 = 0,$9_1 = 0,$9$hi = 0,$12_1 = 0,$12$hi = 0,$13_1 = 0,$13$hi = 0,$16_1 = 0,$16$hi = 0,$20_1 = 0,$20$hi = 0,$21_1 = 0,$21$hi = 0,$5_1 = 0,$5$hi = 0,$30$hi = 0,$33_1 = 0,$33$hi = 0,$36$hi = 0,$37_1 = 0,$37$hi = 0,$39_1 = 0,$39$hi = 0,$42_1 = 0,$42$hi = 0,$45$hi = 0,$47_1 = 0,$49$hi = 0,$51_1 = 0,$51$hi = 0,$52_1 = 0;
          $6_1 = $0_1;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $9_1 = i64toi32_i32$1;
          $9$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $2$hi;
          i64toi32_i32$0 = $3$hi;
          i64toi32_i32$0 = $2$hi;
          i64toi32_i32$1 = $3$hi;
          i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $12_1 = i64toi32_i32$1;
          $12$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$2 = $9_1;
          i64toi32_i32$1 = $12$hi;
          i64toi32_i32$3 = $12_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
          }
          $13_1 = i64toi32_i32$4;
          $13$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $3$hi;
          i64toi32_i32$0 = $3_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
          } else {
            i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
            $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
          }
          $2_1 = $46_1;
          $2$hi = i64toi32_i32$2;
          $16_1 = $2_1;
          $16$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$5 = $1_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
          } else {
            i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
            $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
          }
          $4_1 = $48_1;
          $4$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $16$hi;
          i64toi32_i32$5 = $4$hi;
          i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $20_1 = i64toi32_i32$5;
          $20$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $13$hi;
          i64toi32_i32$2 = $13_1;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$3 = $20_1;
          i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
          }
          $21_1 = i64toi32_i32$1;
          $21$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $3$hi;
          i64toi32_i32$0 = $3_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = -1;
          i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
          $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
          $3$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$4 = $1_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = -1;
          i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
          $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
          $1$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $3$hi;
          i64toi32_i32$4 = $1$hi;
          i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $5_1 = i64toi32_i32$4;
          $5$hi = i64toi32_i32$0;
          i64toi32_i32$2 = i64toi32_i32$4;
          i64toi32_i32$4 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$4 = 0;
            $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
          } else {
            i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
            $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
          }
          $30$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $3$hi;
          i64toi32_i32$4 = $4$hi;
          i64toi32_i32$4 = $3$hi;
          i64toi32_i32$2 = $4$hi;
          i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
          i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
          $33_1 = i64toi32_i32$2;
          $33$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $30$hi;
          i64toi32_i32$0 = $49_1;
          i64toi32_i32$2 = $33$hi;
          i64toi32_i32$3 = $33_1;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
          }
          $3_1 = i64toi32_i32$5;
          $3$hi = i64toi32_i32$1;
          i64toi32_i32$4 = i64toi32_i32$5;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
          } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
            $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
          }
          $36$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $21$hi;
          i64toi32_i32$1 = $21_1;
          i64toi32_i32$4 = $36$hi;
          i64toi32_i32$3 = $50_1;
          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
          }
          $37_1 = i64toi32_i32$2;
          $37$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $3$hi;
          i64toi32_i32$0 = $3_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = -1;
          i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
          $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
          $39$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $2$hi;
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$1 = $2$hi;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
          $42_1 = i64toi32_i32$0;
          $42$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $39$hi;
          i64toi32_i32$5 = $39_1;
          i64toi32_i32$0 = $42$hi;
          i64toi32_i32$3 = $42_1;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
          }
          $1_1 = i64toi32_i32$4;
          $1$hi = i64toi32_i32$2;
          i64toi32_i32$1 = i64toi32_i32$4;
          i64toi32_i32$5 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$5 = 0;
            $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
          } else {
            i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
            $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
          }
          $45$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $37$hi;
          i64toi32_i32$2 = $37_1;
          i64toi32_i32$1 = $45$hi;
          i64toi32_i32$3 = $53_1;
          i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
          }
          i64toi32_i32$2 = $6_1;
          HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
          $47_1 = $0_1;
          i64toi32_i32$4 = $1$hi;
          i64toi32_i32$5 = $1_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
            $54_1 = 0;
          } else {
            i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
            $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
          }
          $49$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $5$hi;
          i64toi32_i32$4 = $5_1;
          i64toi32_i32$5 = 0;
          i64toi32_i32$3 = -1;
          i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
          $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
          $51$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $49$hi;
          i64toi32_i32$2 = $54_1;
          i64toi32_i32$4 = $51$hi;
          i64toi32_i32$3 = $51_1;
          i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
          $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
          i64toi32_i32$2 = $47_1;
          HEAP32[i64toi32_i32$2 >> 2] = $52_1;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
        }

        function $99($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
          $0_1 = $0_1 | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          $2_1 = $2_1 | 0;
          $2$hi = $2$hi | 0;
          $3_1 = $3_1 | 0;
          $3$hi = $3$hi | 0;
          $4_1 = $4_1 | 0;
          $4$hi = $4$hi | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$3 = 0,i64toi32_i32$1 = 0,$5_1 = 0,$14_1 = 0,$14$hi = 0,$20_1 = 0;
          $5_1 = global$0 - 16 | 0;
          global$0 = $5_1;
          i64toi32_i32$0 = $1$hi;
          i64toi32_i32$0 = $2$hi;
          i64toi32_i32$0 = $3$hi;
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$1 = -2147483648;
          i64toi32_i32$3 = 0;
          i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
          $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
          $14$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$2 = $2$hi;
          i64toi32_i32$0 = $3$hi;
          i64toi32_i32$3 = $14$hi;
          $85($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$2 = $5_1;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $4_1 = i64toi32_i32$3;
          $4$hi = i64toi32_i32$0;
          i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $0_1;
          HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
          HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
          i64toi32_i32$3 = $4$hi;
          HEAP32[i64toi32_i32$0 >> 2] = $4_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
          global$0 = $5_1 + 16 | 0;
        }

        function $100($0_1, $0$hi, $1_1, $1$hi) {
          $0_1 = $0_1 | 0;
          $0$hi = $0$hi | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$2 = 0,i64toi32_i32$4 = 0,i64toi32_i32$5 = 0,i64toi32_i32$3 = 0,i64toi32_i32$1 = 0,$4_1 = 0,$4$hi = 0,$5$hi = 0,$5_1 = 0,$2_1 = 0,$3_1 = 0,$44_1 = 0,$45_1 = 0,$46_1 = 0,$47_1 = 0,$48_1 = 0,$49_1 = 0,$50_1 = 0,$12_1 = 0,$12$hi = 0,$14$hi = 0,$17_1 = 0,$17$hi = 0,$19$hi = 0,$33_1 = 0,$33$hi = 0,$36_1 = 0,$38_1 = 0,$43_1 = 0,$43$hi = 0,$45$hi = 0,$73_1 = 0,$73$hi = 0,$77$hi = 0,$80_1 = 0,$80$hi = 0,$82_1 = 0,$82$hi = 0,$86_1 = 0,$86$hi = 0,$88_1 = 0,$89$hi = 0,$98$hi = 0,$105_1 = 0,$105$hi = 0;
          $2_1 = global$0 - 32 | 0;
          global$0 = $2_1;
          label$1: {
            label$2: {
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$2 = $1_1;
              i64toi32_i32$1 = 2147483647;
              i64toi32_i32$3 = -1;
              i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
              $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
              $4$hi = i64toi32_i32$1;
              i64toi32_i32$0 = $4_1;
              i64toi32_i32$2 = -1006698496;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
              i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
              }
              $12_1 = i64toi32_i32$4;
              $12$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $4$hi;
              i64toi32_i32$1 = $4_1;
              i64toi32_i32$0 = -1140785152;
              i64toi32_i32$3 = 0;
              i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
              }
              $14$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $12$hi;
              i64toi32_i32$5 = $12_1;
              i64toi32_i32$1 = $14$hi;
              i64toi32_i32$3 = i64toi32_i32$2;
              if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
                break label$2;
              }
              i64toi32_i32$5 = $0$hi;
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$1 = 60;
              i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                i64toi32_i32$4 = 0;
                $44_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
              } else {
                i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
                $44_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
              }
              $17_1 = $44_1;
              $17$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $1$hi;
              i64toi32_i32$5 = $1_1;
              i64toi32_i32$3 = 0;
              i64toi32_i32$1 = 4;
              i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
                $45_1 = 0;
              } else {
                i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
                $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
              }
              $19$hi = i64toi32_i32$3;
              i64toi32_i32$3 = $17$hi;
              i64toi32_i32$4 = $17_1;
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$1 = $45_1;
              i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
              $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
              $4$hi = i64toi32_i32$5;
              label$3: {
                i64toi32_i32$5 = $0$hi;
                i64toi32_i32$3 = $0_1;
                i64toi32_i32$4 = 268435455;
                i64toi32_i32$1 = -1;
                i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
                $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
                $0$hi = i64toi32_i32$4;
                i64toi32_i32$5 = $0_1;
                i64toi32_i32$3 = 134217728;
                i64toi32_i32$1 = 1;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
                  break label$3;
                }
                i64toi32_i32$5 = $4$hi;
                i64toi32_i32$1 = $4_1;
                i64toi32_i32$4 = 1073741824;
                i64toi32_i32$3 = 1;
                i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                  i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0;
                }
                $5_1 = i64toi32_i32$0;
                $5$hi = i64toi32_i32$2;
                break label$1;
              }
              i64toi32_i32$2 = $4$hi;
              i64toi32_i32$5 = $4_1;
              i64toi32_i32$1 = 1073741824;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
              i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0;
              }
              $5_1 = i64toi32_i32$4;
              $5$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $0$hi;
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$5 = 134217728;
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
                break label$1;
              }
              i64toi32_i32$2 = $5$hi;
              i64toi32_i32$2 = $4$hi;
              i64toi32_i32$3 = $4_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$5 = 1;
              i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
              $33_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
              $33$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $5$hi;
              i64toi32_i32$2 = i64toi32_i32$4;
              i64toi32_i32$3 = $33$hi;
              i64toi32_i32$5 = $33_1;
              i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
              i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
              }
              $5_1 = i64toi32_i32$1;
              $5$hi = i64toi32_i32$4;
              break label$1;
            }
            label$4: {
              i64toi32_i32$4 = $0$hi;
              $36_1 = !($0_1 | i64toi32_i32$4 | 0);
              i64toi32_i32$4 = $4$hi;
              i64toi32_i32$0 = $4_1;
              i64toi32_i32$2 = 2147418112;
              i64toi32_i32$5 = 0;
              $38_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
              i64toi32_i32$0 = i64toi32_i32$4;
              i64toi32_i32$0 = i64toi32_i32$4;
              i64toi32_i32$5 = $4_1;
              i64toi32_i32$4 = 2147418112;
              i64toi32_i32$2 = 0;
              if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $36_1 : $38_1) {
                break label$4;
              }
              i64toi32_i32$5 = $0$hi;
              i64toi32_i32$2 = $0_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$4 = 60;
              i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$0 = 0;
                $46_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
              } else {
                i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
                $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
              }
              $43_1 = $46_1;
              $43$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$5 = $1_1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$4 = 4;
              i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
                $47_1 = 0;
              } else {
                i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
                $47_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
              }
              $45$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $43$hi;
              i64toi32_i32$0 = $43_1;
              i64toi32_i32$5 = $45$hi;
              i64toi32_i32$4 = $47_1;
              i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
              i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
              i64toi32_i32$0 = 524287;
              i64toi32_i32$4 = -1;
              i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
              i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
              i64toi32_i32$2 = 2146959360;
              i64toi32_i32$4 = 0;
              i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
              $5_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
              $5$hi = i64toi32_i32$2;
              break label$1;
            }
            i64toi32_i32$2 = 2146435072;
            $5_1 = 0;
            $5$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $4$hi;
            i64toi32_i32$0 = $4_1;
            i64toi32_i32$5 = 1140785151;
            i64toi32_i32$4 = -1;
            if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
              break label$1;
            }
            i64toi32_i32$0 = 0;
            $5_1 = 0;
            $5$hi = i64toi32_i32$0;
            i64toi32_i32$0 = i64toi32_i32$2;
            i64toi32_i32$0 = i64toi32_i32$2;
            i64toi32_i32$4 = $4_1;
            i64toi32_i32$2 = 0;
            i64toi32_i32$5 = 48;
            i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = 0;
              $48_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
            } else {
              i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
              $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
            }
            $3_1 = $48_1;
            if ($3_1 >>> 0 < 15249 >>> 0) {
              break label$1;
            }
            i64toi32_i32$2 = $0$hi;
            i64toi32_i32$2 = $1$hi;
            i64toi32_i32$0 = $1_1;
            i64toi32_i32$4 = 65535;
            i64toi32_i32$5 = -1;
            i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
            i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
            i64toi32_i32$0 = 65536;
            i64toi32_i32$5 = 0;
            i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
            $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
            $4$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $0$hi;
            i64toi32_i32$2 = $4$hi;
            $86($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $3_1 + -15233 | 0 | 0);
            i64toi32_i32$2 = i64toi32_i32$0;
            i64toi32_i32$2 = $4$hi;
            i64toi32_i32$2 = i64toi32_i32$0;
            i64toi32_i32$0 = $4$hi;
            $96($2_1 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 15361 - $3_1 | 0 | 0);
            i64toi32_i32$4 = $2_1;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
            i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
            $4_1 = i64toi32_i32$0;
            $4$hi = i64toi32_i32$2;
            i64toi32_i32$4 = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = 60;
            i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = 0;
              $49_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
            } else {
              i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
              $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
            }
            $73_1 = $49_1;
            $73$hi = i64toi32_i32$0;
            i64toi32_i32$2 = $2_1 + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            i64toi32_i32$2 = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = 4;
            i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
              $50_1 = 0;
            } else {
              i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
              $50_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
            }
            $77$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $73$hi;
            i64toi32_i32$4 = $73_1;
            i64toi32_i32$2 = $77$hi;
            i64toi32_i32$5 = $50_1;
            i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
            $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
            $5$hi = i64toi32_i32$2;
            label$5: {
              i64toi32_i32$2 = $4$hi;
              i64toi32_i32$0 = $4_1;
              i64toi32_i32$4 = 268435455;
              i64toi32_i32$5 = -1;
              i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
              $80_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
              $80$hi = i64toi32_i32$4;
              i64toi32_i32$2 = $2_1;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
              $82_1 = i64toi32_i32$4;
              $82$hi = i64toi32_i32$0;
              i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $86_1 = i64toi32_i32$0;
              $86$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $82$hi;
              i64toi32_i32$2 = $82_1;
              i64toi32_i32$0 = $86$hi;
              i64toi32_i32$5 = $86_1;
              i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
              i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
              i64toi32_i32$2 = 0;
              i64toi32_i32$5 = 0;
              $88_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
              i64toi32_i32$4 = 0;
              $89$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $80$hi;
              i64toi32_i32$5 = $80_1;
              i64toi32_i32$0 = $89$hi;
              i64toi32_i32$2 = $88_1;
              i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
              $4_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
              $4$hi = i64toi32_i32$0;
              i64toi32_i32$4 = $4_1;
              i64toi32_i32$5 = 134217728;
              i64toi32_i32$2 = 1;
              if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
                break label$5;
              }
              i64toi32_i32$4 = $5$hi;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$0 = 0;
              i64toi32_i32$5 = 1;
              i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
              i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
              if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0;
              }
              $5_1 = i64toi32_i32$3;
              $5$hi = i64toi32_i32$1;
              break label$1;
            }
            i64toi32_i32$1 = $4$hi;
            i64toi32_i32$4 = $4_1;
            i64toi32_i32$2 = 134217728;
            i64toi32_i32$5 = 0;
            if ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
              break label$1;
            }
            i64toi32_i32$4 = $5$hi;
            i64toi32_i32$5 = $5_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = 1;
            i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
            $98$hi = i64toi32_i32$1;
            i64toi32_i32$1 = i64toi32_i32$4;
            i64toi32_i32$1 = $98$hi;
            i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
            i64toi32_i32$5 = $5$hi;
            i64toi32_i32$2 = $5_1;
            i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
            i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
              i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0;
            }
            $5_1 = i64toi32_i32$0;
            $5$hi = i64toi32_i32$3;
          }
          global$0 = $2_1 + 32 | 0;
          i64toi32_i32$3 = $5$hi;
          i64toi32_i32$3 = $1$hi;
          i64toi32_i32$1 = $1_1;
          i64toi32_i32$4 = -2147483648;
          i64toi32_i32$2 = 0;
          i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
          $105_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
          $105$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $5$hi;
          i64toi32_i32$3 = $5_1;
          i64toi32_i32$1 = $105$hi;
          i64toi32_i32$2 = $105_1;
          i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
          wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
          wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
          return + +wasm2js_scratch_load_f64();
        }

        function $101($0_1, $0$hi, $1_1, $1$hi) {
          $0_1 = $0_1 | 0;
          $0$hi = $0$hi | 0;
          $1_1 = $1_1 | 0;
          $1$hi = $1$hi | 0;
          var i64toi32_i32$1 = 0,i64toi32_i32$3 = 0,i64toi32_i32$4 = 0,i64toi32_i32$5 = 0,i64toi32_i32$0 = 0,$5_1 = 0,$5$hi = 0,$4_1 = 0,$3_1 = 0,$2_1 = 0,i64toi32_i32$2 = 0,$37_1 = 0,$38_1 = 0,$39_1 = 0,$40_1 = 0,$41_1 = 0,$12_1 = 0,$12$hi = 0,$14$hi = 0,$20_1 = 0,$24_1 = 0,$34_1 = 0,$34$hi = 0,$42_1 = 0,$44_1 = 0,$81_1 = 0,$81$hi = 0,$83_1 = 0,$83$hi = 0,$87_1 = 0,$87$hi = 0,$89_1 = 0,$90$hi = 0,$93_1 = 0,$97_1 = 0,$105_1 = 0,$105$hi = 0,$114 = 0;
          $2_1 = global$0 - 32 | 0;
          global$0 = $2_1;
          label$1: {
            label$2: {
              i64toi32_i32$0 = $1$hi;
              i64toi32_i32$2 = $1_1;
              i64toi32_i32$1 = 2147483647;
              i64toi32_i32$3 = -1;
              i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
              $5_1 = $1_1 & i64toi32_i32$3 | 0;
              $5$hi = i64toi32_i32$1;
              i64toi32_i32$0 = $5_1;
              i64toi32_i32$2 = -1065418752;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
              i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
              }
              $12_1 = i64toi32_i32$4;
              $12$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $5$hi;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$0 = -1082064896;
              i64toi32_i32$3 = 0;
              i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0;
              }
              $14$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $12$hi;
              i64toi32_i32$5 = $12_1;
              i64toi32_i32$1 = $14$hi;
              i64toi32_i32$3 = i64toi32_i32$2;
              if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
                break label$2;
              }
              i64toi32_i32$5 = $1$hi;
              i64toi32_i32$3 = $1_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$1 = 25;
              i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                i64toi32_i32$4 = 0;
                $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
              } else {
                i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
                $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
              }
              $3_1 = $37_1;
              label$3: {
                i64toi32_i32$4 = $0$hi;
                $20_1 = !($0_1 | i64toi32_i32$4 | 0);
                i64toi32_i32$4 = $1$hi;
                i64toi32_i32$5 = $1_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$1 = 33554431;
                i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
                $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
                $5$hi = i64toi32_i32$3;
                i64toi32_i32$4 = $5_1;
                i64toi32_i32$5 = 0;
                i64toi32_i32$1 = 16777216;
                $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
                i64toi32_i32$4 = i64toi32_i32$3;
                i64toi32_i32$4 = i64toi32_i32$3;
                i64toi32_i32$1 = $5_1;
                i64toi32_i32$3 = 0;
                i64toi32_i32$5 = 16777216;
                if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
                  break label$3;
                }
                $4_1 = $3_1 + 1073741825 | 0;
                break label$1;
              }
              $4_1 = $3_1 + 1073741824 | 0;
              i64toi32_i32$1 = $0$hi;
              i64toi32_i32$1 = $5$hi;
              i64toi32_i32$5 = $5_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$3 = 16777216;
              i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
              $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
              $34$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $0$hi;
              i64toi32_i32$1 = $0_1;
              i64toi32_i32$5 = $34$hi;
              i64toi32_i32$3 = $34_1;
              i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
              i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
                break label$1;
              }
              $4_1 = $4_1 + ($3_1 & 1 | 0) | 0;
              break label$1;
            }
            label$4: {
              i64toi32_i32$4 = $0$hi;
              $42_1 = !($0_1 | i64toi32_i32$4 | 0);
              i64toi32_i32$4 = $5$hi;
              i64toi32_i32$3 = $5_1;
              i64toi32_i32$5 = 2147418112;
              i64toi32_i32$1 = 0;
              $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
              i64toi32_i32$3 = i64toi32_i32$4;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$4 = 2147418112;
              i64toi32_i32$5 = 0;
              if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
                break label$4;
              }
              i64toi32_i32$1 = $1$hi;
              i64toi32_i32$5 = $1_1;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 25;
              i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                i64toi32_i32$3 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
              } else {
                i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
                $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
              }
              $4_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
              break label$1;
            }
            $4_1 = 2139095040;
            i64toi32_i32$3 = $5$hi;
            i64toi32_i32$1 = $5_1;
            i64toi32_i32$5 = 1082064895;
            i64toi32_i32$4 = -1;
            if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
              break label$1;
            }
            $4_1 = 0;
            i64toi32_i32$1 = i64toi32_i32$3;
            i64toi32_i32$4 = $5_1;
            i64toi32_i32$3 = 0;
            i64toi32_i32$5 = 48;
            i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$3 = 0;
              $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
            } else {
              i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
              $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
            }
            $3_1 = $39_1;
            if ($3_1 >>> 0 < 16145 >>> 0) {
              break label$1;
            }
            i64toi32_i32$3 = $0$hi;
            i64toi32_i32$3 = $1$hi;
            i64toi32_i32$1 = $1_1;
            i64toi32_i32$4 = 65535;
            i64toi32_i32$5 = -1;
            i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
            i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
            i64toi32_i32$1 = 65536;
            i64toi32_i32$5 = 0;
            i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
            $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
            $5$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $0$hi;
            i64toi32_i32$3 = $5$hi;
            $86($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $3_1 + -16129 | 0 | 0);
            i64toi32_i32$3 = i64toi32_i32$1;
            i64toi32_i32$3 = $5$hi;
            i64toi32_i32$3 = i64toi32_i32$1;
            i64toi32_i32$1 = $5$hi;
            $96($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, 16257 - $3_1 | 0 | 0);
            i64toi32_i32$4 = $2_1 + 8 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
            i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
            $5_1 = i64toi32_i32$1;
            $5$hi = i64toi32_i32$3;
            i64toi32_i32$4 = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$5 = 25;
            i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
            } else {
              i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
              $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
            }
            $4_1 = $40_1;
            label$5: {
              i64toi32_i32$3 = $2_1;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $81_1 = i64toi32_i32$1;
              $81$hi = i64toi32_i32$4;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
              $83_1 = i64toi32_i32$4;
              $83$hi = i64toi32_i32$1;
              i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $87_1 = i64toi32_i32$1;
              $87$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $83$hi;
              i64toi32_i32$3 = $83_1;
              i64toi32_i32$1 = $87$hi;
              i64toi32_i32$5 = $87_1;
              i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
              i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
              i64toi32_i32$3 = 0;
              i64toi32_i32$5 = 0;
              $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
              i64toi32_i32$4 = 0;
              $90$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $81$hi;
              i64toi32_i32$5 = $81_1;
              i64toi32_i32$1 = $90$hi;
              i64toi32_i32$3 = $89_1;
              i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
              $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
              $0$hi = i64toi32_i32$1;
              $93_1 = !($0_1 | i64toi32_i32$1 | 0);
              i64toi32_i32$1 = $5$hi;
              i64toi32_i32$4 = $5_1;
              i64toi32_i32$5 = 0;
              i64toi32_i32$3 = 33554431;
              i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
              $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
              $5$hi = i64toi32_i32$5;
              i64toi32_i32$1 = $5_1;
              i64toi32_i32$4 = 0;
              i64toi32_i32$3 = 16777216;
              $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$5;
              i64toi32_i32$3 = $5_1;
              i64toi32_i32$5 = 0;
              i64toi32_i32$4 = 16777216;
              if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
                break label$5;
              }
              $4_1 = $4_1 + 1 | 0;
              break label$1;
            }
            i64toi32_i32$3 = $0$hi;
            i64toi32_i32$3 = $5$hi;
            i64toi32_i32$4 = $5_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$5 = 16777216;
            i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
            $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
            $105$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $0$hi;
            i64toi32_i32$3 = $0_1;
            i64toi32_i32$4 = $105$hi;
            i64toi32_i32$5 = $105_1;
            i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
            i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$5 = 0;
            if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
              break label$1;
            }
            $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
          }
          global$0 = $2_1 + 32 | 0;
          $114 = $4_1;
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$5 = $1_1;
          i64toi32_i32$4 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$4 = 0;
            $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
          } else {
            i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
            $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
          }
          return Math_fround((wasm2js_scratch_store_i32(2, $114 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
        }

        function $104() {
          global$3 = 65536;
          global$2 = (0 + 15 | 0) & -16 | 0;
        }

        function $105() {
          return global$0 - global$2 | 0 | 0;
        }

        function $106() {
          return global$3 | 0;
        }

        function $107() {
          return global$2 | 0;
        }

        function $108() {
          return global$0 | 0;
        }

        function $109($0_1) {
          $0_1 = $0_1 | 0;
          global$0 = $0_1;
        }

        function $110($0_1) {
          $0_1 = $0_1 | 0;
          var $1_1 = 0;
          $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
          global$0 = $1_1;
          return $1_1 | 0;
        }

        function $111() {
          return global$0 | 0;
        }

        function $112($0_1) {
          $0_1 = $0_1 | 0;
          var $1_1 = 0,i64toi32_i32$1 = 0,$2_1 = 0,i64toi32_i32$0 = 0,$3_1 = 0;
          label$1: {
            if ($0_1) {
              break label$1;
            }
            $1_1 = 0;
            label$2: {
              if (!(HEAP32[(0 + 99436 | 0) >> 2] | 0)) {
                break label$2;
              }
              $1_1 = $112(HEAP32[(0 + 99436 | 0) >> 2] | 0 | 0) | 0;
            }
            label$3: {
              if (!(HEAP32[(0 + 99436 | 0) >> 2] | 0)) {
                break label$3;
              }
              $1_1 = $112(HEAP32[(0 + 99436 | 0) >> 2] | 0 | 0) | 0 | $1_1 | 0;
            }
            label$4: {
              $0_1 = HEAP32[($22() | 0) >> 2] | 0;
              if (!$0_1) {
                break label$4;
              }
              label$5: while (1) {
                $2_1 = 0;
                label$6: {
                  if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                    break label$6;
                  }
                  $2_1 = $18($0_1 | 0) | 0;
                }
                label$7: {
                  if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
                    break label$7;
                  }
                  $1_1 = $112($0_1 | 0) | 0 | $1_1 | 0;
                }
                label$8: {
                  if (!$2_1) {
                    break label$8;
                  }
                  $19($0_1 | 0);
                }
                $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
                if ($0_1) {
                  continue label$5;
                }
                break label$5;
              };
            }
            $23();
            return $1_1 | 0;
          }
          label$9: {
            label$10: {
              if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
                break label$10;
              }
              $2_1 = 1;
              break label$9;
            }
            $2_1 = !($18($0_1 | 0) | 0);
          }
          label$11: {
            label$12: {
              label$13: {
                if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
                  break label$13;
                }
                FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
                if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
                  break label$13;
                }
                $1_1 = -1;
                if (!$2_1) {
                  break label$12;
                }
                break label$11;
              }
              label$14: {
                $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if (($1_1 | 0) == ($3_1 | 0)) {
                  break label$14;
                }
                i64toi32_i32$1 = $1_1 - $3_1 | 0;
                i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
              }
              $1_1 = 0;
              HEAP32[($0_1 + 28 | 0) >> 2] = 0;
              i64toi32_i32$0 = $0_1;
              i64toi32_i32$1 = 0;
              HEAP32[($0_1 + 16 | 0) >> 2] = 0;
              HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$0 = $0_1;
              i64toi32_i32$1 = 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = 0;
              HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
              if ($2_1) {
                break label$11;
              }
            }
            $19($0_1 | 0);
          }
          return $1_1 | 0;
        }

        function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
          var$0 = var$0 | 0;
          var$0$hi = var$0$hi | 0;
          var$1 = var$1 | 0;
          var$1$hi = var$1$hi | 0;
          var i64toi32_i32$4 = 0,i64toi32_i32$0 = 0,i64toi32_i32$1 = 0,var$2 = 0,i64toi32_i32$2 = 0,i64toi32_i32$3 = 0,var$3 = 0,var$4 = 0,var$5 = 0,$21_1 = 0,$22_1 = 0,var$6 = 0,$24_1 = 0,$17_1 = 0,$18_1 = 0,$23_1 = 0,$29_1 = 0,$45_1 = 0,$56$hi = 0,$62$hi = 0;
          i64toi32_i32$0 = var$1$hi;
          var$2 = var$1;
          var$4 = var$2 >>> 16 | 0;
          i64toi32_i32$0 = var$0$hi;
          var$3 = var$0;
          var$5 = var$3 >>> 16 | 0;
          $17_1 = Math_imul(var$4, var$5);
          $18_1 = var$2;
          i64toi32_i32$2 = var$3;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
          }
          $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
          i64toi32_i32$1 = var$1$hi;
          i64toi32_i32$0 = var$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
            i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
          }
          $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
          var$2 = var$2 & 65535 | 0;
          var$3 = var$3 & 65535 | 0;
          var$6 = Math_imul(var$2, var$3);
          var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
          $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
          var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
            $24_1 = 0;
          } else {
            i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
            $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
          }
          $56$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $62$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $56$hi;
          i64toi32_i32$2 = $24_1;
          i64toi32_i32$1 = $62$hi;
          i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
          i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
          return i64toi32_i32$2 | 0;
        }

        function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
          var$0 = var$0 | 0;
          var$0$hi = var$0$hi | 0;
          var$1 = var$1 | 0;
          var$1$hi = var$1$hi | 0;
          var i64toi32_i32$2 = 0,i64toi32_i32$3 = 0,i64toi32_i32$4 = 0,i64toi32_i32$1 = 0,i64toi32_i32$0 = 0,i64toi32_i32$5 = 0,var$2 = 0,var$3 = 0,var$4 = 0,var$5 = 0,var$5$hi = 0,var$6 = 0,var$6$hi = 0,i64toi32_i32$6 = 0,$37_1 = 0,$38_1 = 0,$39_1 = 0,$40_1 = 0,$41_1 = 0,$42_1 = 0,$43_1 = 0,$44_1 = 0,var$8$hi = 0,$45_1 = 0,$46_1 = 0,$47_1 = 0,$48_1 = 0,var$7$hi = 0,$49_1 = 0,$63$hi = 0,$65_1 = 0,$65$hi = 0,$120$hi = 0,$129$hi = 0,$134$hi = 0,var$8 = 0,$140 = 0,$140$hi = 0,$142$hi = 0,$144 = 0,$144$hi = 0,$151 = 0,$151$hi = 0,$154$hi = 0,var$7 = 0,$165$hi = 0;
          label$1: {
            label$2: {
              label$3: {
                label$4: {
                  label$5: {
                    label$6: {
                      label$7: {
                        label$8: {
                          label$9: {
                            label$10: {
                              label$11: {
                                i64toi32_i32$0 = var$0$hi;
                                i64toi32_i32$2 = var$0;
                                i64toi32_i32$1 = 0;
                                i64toi32_i32$3 = 32;
                                i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                                if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                                  i64toi32_i32$1 = 0;
                                  $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                                } else {
                                  i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                                  $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
                                }
                                var$2 = $37_1;
                                if (var$2) {
                                  i64toi32_i32$1 = var$1$hi;
                                  var$3 = var$1;
                                  if (!var$3) {
                                    break label$11;
                                  }
                                  i64toi32_i32$0 = var$3;
                                  i64toi32_i32$2 = 0;
                                  i64toi32_i32$3 = 32;
                                  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                                  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                                    i64toi32_i32$2 = 0;
                                    $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                                  } else {
                                    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                                    $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
                                  }
                                  var$4 = $38_1;
                                  if (!var$4) {
                                    break label$9;
                                  }
                                  var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
                                  if (var$2 >>> 0 <= 31 >>> 0) {
                                    break label$8;
                                  }
                                  break label$2;
                                }
                                i64toi32_i32$2 = var$1$hi;
                                i64toi32_i32$1 = var$1;
                                i64toi32_i32$0 = 1;
                                i64toi32_i32$3 = 0;
                                if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
                                  break label$2;
                                }
                                i64toi32_i32$1 = var$0$hi;
                                var$2 = var$0;
                                i64toi32_i32$1 = i64toi32_i32$2;
                                i64toi32_i32$1 = i64toi32_i32$2;
                                var$3 = var$1;
                                var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
                                i64toi32_i32$1 = 0;
                                __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
                                __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
                                i64toi32_i32$1 = 0;
                                i64toi32_i32$2 = var$2;
                                i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
                                return i64toi32_i32$2 | 0;
                              }
                              i64toi32_i32$2 = var$1$hi;
                              i64toi32_i32$3 = var$1;
                              i64toi32_i32$1 = 0;
                              i64toi32_i32$0 = 32;
                              i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                                i64toi32_i32$1 = 0;
                                $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                              } else {
                                i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                                $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
                              }
                              var$3 = $39_1;
                              i64toi32_i32$1 = var$0$hi;
                              if (!var$0) {
                                break label$7;
                              }
                              if (!var$3) {
                                break label$6;
                              }
                              var$4 = var$3 + -1 | 0;
                              if (var$4 & var$3 | 0) {
                                break label$6;
                              }
                              i64toi32_i32$1 = 0;
                              i64toi32_i32$2 = var$4 & var$2 | 0;
                              i64toi32_i32$3 = 0;
                              i64toi32_i32$0 = 32;
                              i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                                i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                                $40_1 = 0;
                              } else {
                                i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
                                $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                              }
                              $63$hi = i64toi32_i32$3;
                              i64toi32_i32$3 = var$0$hi;
                              i64toi32_i32$1 = var$0;
                              i64toi32_i32$2 = 0;
                              i64toi32_i32$0 = -1;
                              i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
                              $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
                              $65$hi = i64toi32_i32$2;
                              i64toi32_i32$2 = $63$hi;
                              i64toi32_i32$3 = $40_1;
                              i64toi32_i32$1 = $65$hi;
                              i64toi32_i32$0 = $65_1;
                              i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                              __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                              __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
                              i64toi32_i32$1 = 0;
                              i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
                              i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
                              return i64toi32_i32$3 | 0;
                            }
                          }
                          var$4 = var$3 + -1 | 0;
                          if (!(var$4 & var$3 | 0)) {
                            break label$5;
                          }
                          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
                          var$3 = 0 - var$2 | 0;
                          break label$3;
                        }
                        var$3 = 63 - var$2 | 0;
                        var$2 = var$2 + 1 | 0;
                        break label$3;
                      }
                      var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
                      i64toi32_i32$3 = 0;
                      i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$0 = 32;
                      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                        $41_1 = 0;
                      } else {
                        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
                        $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                      }
                      __wasm_intrinsics_temp_i64 = $41_1;
                      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
                      i64toi32_i32$1 = 0;
                      i64toi32_i32$2 = var$4;
                      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
                      return i64toi32_i32$2 | 0;
                    }
                    var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
                    if (var$2 >>> 0 < 31 >>> 0) {
                      break label$4;
                    }
                    break label$2;
                  }
                  i64toi32_i32$2 = var$0$hi;
                  i64toi32_i32$2 = 0;
                  __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
                  __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
                  if ((var$3 | 0) == (1 | 0)) {
                    break label$1;
                  }
                  i64toi32_i32$2 = var$0$hi;
                  i64toi32_i32$2 = 0;
                  $120$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = var$0$hi;
                  i64toi32_i32$3 = var$0;
                  i64toi32_i32$1 = $120$hi;
                  i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
                  i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                    i64toi32_i32$1 = 0;
                    $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                  } else {
                    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
                    $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
                  }
                  i64toi32_i32$3 = $42_1;
                  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
                  return i64toi32_i32$3 | 0;
                }
                var$3 = 63 - var$2 | 0;
                var$2 = var$2 + 1 | 0;
              }
              i64toi32_i32$3 = var$0$hi;
              i64toi32_i32$3 = 0;
              $129$hi = i64toi32_i32$3;
              i64toi32_i32$3 = var$0$hi;
              i64toi32_i32$2 = var$0;
              i64toi32_i32$1 = $129$hi;
              i64toi32_i32$0 = var$2 & 63 | 0;
              i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = 0;
                $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
              } else {
                i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$5 = $43_1;
              var$5$hi = i64toi32_i32$1;
              i64toi32_i32$1 = var$0$hi;
              i64toi32_i32$1 = 0;
              $134$hi = i64toi32_i32$1;
              i64toi32_i32$1 = var$0$hi;
              i64toi32_i32$3 = var$0;
              i64toi32_i32$2 = $134$hi;
              i64toi32_i32$0 = var$3 & 63 | 0;
              i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
                $44_1 = 0;
              } else {
                i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
                $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
              }
              var$0 = $44_1;
              var$0$hi = i64toi32_i32$2;
              label$13: {
                if (var$2) {
                  i64toi32_i32$2 = var$1$hi;
                  i64toi32_i32$1 = var$1;
                  i64toi32_i32$3 = -1;
                  i64toi32_i32$0 = -1;
                  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0;
                  }
                  var$8 = i64toi32_i32$4;
                  var$8$hi = i64toi32_i32$5;
                  label$15: while (1) {
                    i64toi32_i32$5 = var$5$hi;
                    i64toi32_i32$2 = var$5;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$0 = 1;
                    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
                      $45_1 = 0;
                    } else {
                      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
                      $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
                    }
                    $140 = $45_1;
                    $140$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = var$0$hi;
                    i64toi32_i32$5 = var$0;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$0 = 63;
                    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                      i64toi32_i32$2 = 0;
                      $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
                    } else {
                      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
                      $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
                    }
                    $142$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = $140$hi;
                    i64toi32_i32$1 = $140;
                    i64toi32_i32$5 = $142$hi;
                    i64toi32_i32$0 = $46_1;
                    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
                    var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
                    var$5$hi = i64toi32_i32$5;
                    $144 = var$5;
                    $144$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = var$8$hi;
                    i64toi32_i32$5 = var$5$hi;
                    i64toi32_i32$5 = var$8$hi;
                    i64toi32_i32$2 = var$8;
                    i64toi32_i32$1 = var$5$hi;
                    i64toi32_i32$0 = var$5;
                    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
                    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
                    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
                    i64toi32_i32$5 = i64toi32_i32$3;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$0 = 63;
                    i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
                      $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
                    } else {
                      i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
                      $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
                    }
                    var$6 = $47_1;
                    var$6$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = var$1$hi;
                    i64toi32_i32$2 = var$6$hi;
                    i64toi32_i32$4 = var$6;
                    i64toi32_i32$5 = var$1$hi;
                    i64toi32_i32$0 = var$1;
                    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
                    $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
                    $151$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = $144$hi;
                    i64toi32_i32$2 = $144;
                    i64toi32_i32$4 = $151$hi;
                    i64toi32_i32$0 = $151;
                    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
                    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
                    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
                    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
                    var$5 = i64toi32_i32$1;
                    var$5$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = var$0$hi;
                    i64toi32_i32$5 = var$0;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$0 = 1;
                    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
                      $48_1 = 0;
                    } else {
                      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
                      $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
                    }
                    $154$hi = i64toi32_i32$2;
                    i64toi32_i32$2 = var$7$hi;
                    i64toi32_i32$2 = $154$hi;
                    i64toi32_i32$3 = $48_1;
                    i64toi32_i32$5 = var$7$hi;
                    i64toi32_i32$0 = var$7;
                    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
                    var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
                    var$0$hi = i64toi32_i32$5;
                    i64toi32_i32$5 = var$6$hi;
                    i64toi32_i32$2 = var$6;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$0 = 1;
                    i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
                    var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
                    var$6$hi = i64toi32_i32$3;
                    var$7 = var$6;
                    var$7$hi = i64toi32_i32$3;
                    var$2 = var$2 + -1 | 0;
                    if (var$2) {
                      continue label$15;
                    }
                    break label$15;
                  };
                  break label$13;
                }
              }
              i64toi32_i32$3 = var$5$hi;
              __wasm_intrinsics_temp_i64 = var$5;
              __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
              i64toi32_i32$3 = var$0$hi;
              i64toi32_i32$5 = var$0;
              i64toi32_i32$2 = 0;
              i64toi32_i32$0 = 1;
              i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
                $49_1 = 0;
              } else {
                i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
                $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
              }
              $165$hi = i64toi32_i32$2;
              i64toi32_i32$2 = var$6$hi;
              i64toi32_i32$2 = $165$hi;
              i64toi32_i32$3 = $49_1;
              i64toi32_i32$5 = var$6$hi;
              i64toi32_i32$0 = var$6;
              i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
              i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
              i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
              return i64toi32_i32$3 | 0;
            }
            i64toi32_i32$3 = var$0$hi;
            __wasm_intrinsics_temp_i64 = var$0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
            i64toi32_i32$3 = 0;
            var$0 = 0;
            var$0$hi = i64toi32_i32$3;
          }
          i64toi32_i32$3 = var$0$hi;
          i64toi32_i32$5 = var$0;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
          return i64toi32_i32$5 | 0;
        }

        function __wasm_ctz_i32(var$0) {
          var$0 = var$0 | 0;
          if (var$0) {
            return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0;
          }
          return 32 | 0;
        }

        function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
          var$0 = var$0 | 0;
          var$0$hi = var$0$hi | 0;
          var$1 = var$1 | 0;
          var$1$hi = var$1$hi | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$1 = 0;
          i64toi32_i32$0 = var$0$hi;
          i64toi32_i32$0 = var$1$hi;
          i64toi32_i32$0 = var$0$hi;
          i64toi32_i32$1 = var$1$hi;
          i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
          return i64toi32_i32$1 | 0;
        }

        function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
          var$0 = var$0 | 0;
          var$0$hi = var$0$hi | 0;
          var$1 = var$1 | 0;
          var$1$hi = var$1$hi | 0;
          var i64toi32_i32$0 = 0,i64toi32_i32$1 = 0;
          i64toi32_i32$0 = var$0$hi;
          i64toi32_i32$0 = var$1$hi;
          i64toi32_i32$0 = var$0$hi;
          i64toi32_i32$1 = var$1$hi;
          i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
          return i64toi32_i32$1 | 0;
        }

        function __wasm_rotl_i32(var$0, var$1) {
          var$0 = var$0 | 0;
          var$1 = var$1 | 0;
          var var$2 = 0;
          var$2 = var$1 & 31 | 0;
          var$1 = (0 - var$1 | 0) & 31 | 0;
          return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
        }

        // EMSCRIPTEN_END_FUNCS
        ;
        bufferView = HEAPU8;
        initActiveSegments(imports);
        var FUNCTION_TABLE = Table([null, $40, $41, $44, $74]);
        function __wasm_memory_size() {
          return buffer.byteLength / 65536 | 0;
        }

        function __wasm_memory_grow(pagesToAdd) {
          pagesToAdd = pagesToAdd | 0;
          var oldPages = __wasm_memory_size() | 0;
          var newPages = oldPages + pagesToAdd | 0;
          if (oldPages < newPages && newPages < 65536) {
            var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
            var newHEAP8 = new Int8Array(newBuffer);
            newHEAP8.set(HEAP8);
            HEAP8 = new Int8Array(newBuffer);
            HEAP16 = new Int16Array(newBuffer);
            HEAP32 = new Int32Array(newBuffer);
            HEAPU8 = new Uint8Array(newBuffer);
            HEAPU16 = new Uint16Array(newBuffer);
            HEAPU32 = new Uint32Array(newBuffer);
            HEAPF32 = new Float32Array(newBuffer);
            HEAPF64 = new Float64Array(newBuffer);
            buffer = newBuffer;
            bufferView = HEAPU8;
          }
          return oldPages;
        }

        return {
          "memory": Object.create(Object.prototype, {
            "grow": {
              "value": __wasm_memory_grow
            },
            "buffer": {
              "get": function () {
                return buffer;
              }

            }
          }),
          "__wasm_call_ctors": $0,
          "crc64_init": $1,
          "crc64": $6,
          "str_to_uint64": $9,
          "uint64_to_str": $10,
          "combine_crc64": $11,
          "fflush": $112,
          "__indirect_function_table": FUNCTION_TABLE,
          "malloc": $79,
          "free": $81,
          "emscripten_stack_init": $104,
          "emscripten_stack_get_free": $105,
          "emscripten_stack_get_base": $106,
          "emscripten_stack_get_end": $107,
          "stackSave": $108,
          "stackRestore": $109,
          "stackAlloc": $110,
          "emscripten_stack_get_current": $111
        };
      }

      return asmFunc(info);
    }(

      info);
  },

  instantiate: /** @suppress{checkTypes} */function (binary, info) {
    return {
      then: function (ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function () {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];
// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
  abort('no native wasm support detected');
}

// include: base64Utils.js
// Converts a string of base64 into a byte array (Uint8Array).
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE != 'undefined' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);
  }

  var decoded = atob(s);
  var bytes = new Uint8Array(decoded.length);
  for (var i = 0; i < decoded.length; ++i) {
    bytes[i] = decoded.charCodeAt(i);
  }
  return bytes;
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}
// end include: base64Utils.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

// Memory management

var HEAP,
  /** @type {!Int8Array} */
  HEAP8,
  /** @type {!Uint8Array} */
  HEAPU8,
  /** @type {!Int16Array} */
  HEAP16,
  /** @type {!Uint16Array} */
  HEAPU16,
  /** @type {!Int32Array} */
  HEAP32,
  /** @type {!Uint32Array} */
  HEAPU32,
  /** @type {!Float32Array} */
  HEAPF32,
  /** @type {!Float64Array} */
  HEAPF64;

function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(b);
  Module['HEAP16'] = HEAP16 = new Int16Array(b);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
  Module['HEAP32'] = HEAP32 = new Int32Array(b);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
}

assert(!Module['STACK_SIZE'], 'STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time');

assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
'JS engine does not provide full typed array support');

// If memory is defined in wasm, the user can't provide it, or set INITIAL_MEMORY
assert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally');
assert(!Module['INITIAL_MEMORY'], 'Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically');

// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with SAFE_HEAP and ASAN which also
  // monitor writes to address zero.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[max >> 2] = 0x02135467;
  HEAPU32[max + 4 >> 2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[0 >> 2] = 1668509029;
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = HEAPU32[max >> 2];
  var cookie2 = HEAPU32[max + 4 >> 2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[0 >> 2] != 0x63736d65 /* 'emsc' */) {
    abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
  }
}
// end include: runtime_stack_check.js
// include: runtime_assertions.js
// Endianness check
(function () {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__ = []; // functions called before the runtime is initialized
var __ATINIT__ = []; // functions called during startup
var __ATEXIT__ = (/* unused pure expression or super */ null && ([])); // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();


  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {var _Module$monitorRunDep;
  runDependencies++;

  (_Module$monitorRunDep = Module['monitorRunDependencies']) === null || _Module$monitorRunDep === void 0 || _Module$monitorRunDep.call(Module, runDependencies);

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(() => {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err(`dependency: ${dep}`);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {var _Module$monitorRunDep2;
  runDependencies--;

  (_Module$monitorRunDep2 = Module['monitorRunDependencies']) === null || _Module$monitorRunDep2 === void 0 || _Module$monitorRunDep2.call(Module, runDependencies);

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {var _Module$onAbort;
  (_Module$onAbort = Module['onAbort']) === null || _Module$onAbort === void 0 || _Module$onAbort.call(Module, what);

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // defintion for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// include: memoryprofiler.js
// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with -sFORCE_FILESYSTEM');
  },
  init() {FS.error();},
  createDataFile() {FS.error();},
  createPreloadedFile() {FS.error();},
  createLazyFile() {FS.error();},
  open() {FS.error();},
  mkdev() {FS.error();},
  registerDevice() {FS.error();},
  analyzePath() {FS.error();},

  ErrnoError() {FS.error();}
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

/**
 * Indicates whether filename is a base64 data URI.
 * @noinline
 */
var isDataURI = (filename) => filename.startsWith(dataURIPrefix);

/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */
var isFileURI = (filename) => filename.startsWith('file://');
// end include: URIUtils.js
function createExportWrapper(name) {
  return (...args) => {
    assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
    var f = wasmExports[name];
    assert(f, `exported native function \`${name}\` not found`);
    return f(...args);
  };
}

// include: runtime_exceptions.js
// end include: runtime_exceptions.js
var wasmBinaryFile;
wasmBinaryFile = 'crc.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinarySync(file) {
  if (file == wasmBinaryFile && wasmBinary) {
    return new Uint8Array(wasmBinary);
  }
  var binary = tryParseAsDataURI(file);
  if (binary) {
    return binary;
  }
  if (readBinary) {
    return readBinary(file);
  }
  throw 'sync fetching of the wasm failed: you can preload it to Module["wasmBinary"] manually, or emcc.py will do that for you when generating HTML (but not JS)';
}

function getBinaryPromise(binaryFile) {
  // If we don't have the binary yet, try to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary &&
  !isDataURI(binaryFile) && (
  ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch == 'function' &&
    !isFileURI(binaryFile))
    {
      return fetch(binaryFile, { credentials: 'same-origin' }).then((response) => {
        if (!response['ok']) {
          throw `failed to load wasm binary file at '${binaryFile}'`;
        }
        return response['arrayBuffer']();
      }).catch(() => getBinarySync(binaryFile));
    } else
    if (readAsync) {
      // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
      return new Promise((resolve, reject) => {
        readAsync(binaryFile, (response) => resolve(new Uint8Array( /** @type{!ArrayBuffer} */response)), reject);
      });
    }
  }

  // Otherwise, getBinarySync should be able to get it synchronously
  return Promise.resolve().then(() => getBinarySync(binaryFile));
}

function instantiateSync(file, info) {
  var module;
  var binary = getBinarySync(file);
  module = new WebAssembly.Module(binary);
  var instance = new WebAssembly.Instance(module, info);
  return [instance, module];
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    wasmExports = instance.exports;



    wasmMemory = wasmExports['memory'];

    assert(wasmMemory, 'memory not found in wasm exports');
    // This assertion doesn't hold when emscripten is run in --post-link
    // mode.
    // TODO(sbc): Read INITIAL_MEMORY out of the wasm file in post-link mode.
    //assert(wasmMemory.buffer.byteLength === 16777216);
    updateMemoryViews();

    addOnInit(wasmExports['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
    return wasmExports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module['instantiateWasm']) {

    try {
      return Module['instantiateWasm'](info, receiveInstance);
    } catch (e) {
      err(`Module.instantiateWasm callback failed with error: ${e}`);
      return false;
    }
  }

  var result = instantiateSync(wasmBinaryFile, info);
  // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193,
  // the above line no longer optimizes out down to the following line.
  // When the regression is fixed, we can remove this if/else.
  return receiveInstance(result[0]);
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// include: runtime_debug.js
function legacyModuleProp(prop, newName, incomming = true) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get() {
        let extra = incomming ? ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)' : '';
        abort(`\`Module.${prop}\` has been replaced by \`${newName}\`` + extra);

      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
  name === 'FS_createDataFile' ||
  name === 'FS_createPreloadedFile' ||
  name === 'FS_unlink' ||
  name === 'addRunDependency' ||
  // The old FS has some functionality that WasmFS lacks.
  name === 'FS_createLazyFile' ||
  name === 'FS_createDevice' ||
  name === 'removeRunDependency';
}

function missingGlobal(sym, msg) {
  if (typeof globalThis !== 'undefined') {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get() {
        warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`);
        return undefined;
      }
    });
  }
}

missingGlobal('buffer', 'Please use HEAP8.buffer or wasmMemory.buffer');
missingGlobal('asm', 'Please use wasmExports instead');

function missingLibrarySymbol(sym) {
  if (typeof globalThis !== 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get() {
        // Can't `abort()` here because it would break code that does runtime
        // checks.  e.g. `if (typeof SDL === 'undefined')`.
        var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
        // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
        // library.js, which means $name for a JS name with no prefix, or name
        // for a JS name like _name.
        var librarySymbol = sym;
        if (!librarySymbol.startsWith('_')) {
          librarySymbol = '$' + sym;
        }
        msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        warnOnce(msg);
        return undefined;
      }
    });
  }
  // Any symbol that is not included from the JS libary is also (by definition)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get() {
        var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

// Used by XXXXX_DEBUG settings to output debug messages.
function dbg(...args) {
  // TODO(sbc): Make this configurable somehow.  Its not always convenient for
  // logging to show up as warnings.
  console.warn(...args);
}
// end include: runtime_debug.js
// === Body ===

// end include: preamble.js

/** @constructor */
function ExitStatus(status) {
  this.name = 'ExitStatus';
  this.message = `Program terminated with exit(${status})`;
  this.status = status;
}

var callRuntimeCallbacks = (callbacks) => {
  while (callbacks.length > 0) {
    // Pass the module as the first argument.
    callbacks.shift()(Module);
  }
};


/**
 * @param {number} ptr
 * @param {string} type
 */
function getValue(ptr, type = 'i8') {
  if (type.endsWith('*')) type = '*';
  switch (type) {
    case 'i1':return HEAP8[ptr];
    case 'i8':return HEAP8[ptr];
    case 'i16':return HEAP16[ptr >> 1];
    case 'i32':return HEAP32[ptr >> 2];
    case 'i64':abort('to do getValue(i64) use WASM_BIGINT');
    case 'float':return HEAPF32[ptr >> 2];
    case 'double':return HEAPF64[ptr >> 3];
    case '*':return HEAPU32[ptr >> 2];
    default:abort(`invalid type for getValue: ${type}`);
  }
}

var noExitRuntime = Module['noExitRuntime'] || true;

var ptrToString = (ptr) => {
  assert(typeof ptr === 'number');
  // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
  ptr >>>= 0;
  return '0x' + ptr.toString(16).padStart(8, '0');
};


/**
 * @param {number} ptr
 * @param {number} value
 * @param {string} type
 */
function setValue(ptr, value, type = 'i8') {
  if (type.endsWith('*')) type = '*';
  switch (type) {
    case 'i1':HEAP8[ptr] = value;break;
    case 'i8':HEAP8[ptr] = value;break;
    case 'i16':HEAP16[ptr >> 1] = value;break;
    case 'i32':HEAP32[ptr >> 2] = value;break;
    case 'i64':abort('to do setValue(i64) use WASM_BIGINT');
    case 'float':HEAPF32[ptr >> 2] = value;break;
    case 'double':HEAPF64[ptr >> 3] = value;break;
    case '*':HEAPU32[ptr >> 2] = value;break;
    default:abort(`invalid type for setValue: ${type}`);
  }
}

var warnOnce = (text) => {
  warnOnce.shown || (warnOnce.shown = {});
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    if (ENVIRONMENT_IS_NODE) text = 'warning: ' + text;
    err(text);
  }
};

var _emscripten_memcpy_js = (dest, src, num) => HEAPU8.copyWithin(dest, src, src + num);

var getHeapMax = () =>
// Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate
// full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side
// for any code that deals with heap sizes, which would require special
// casing all heap size related code to treat 0 specially.
2147483648;

var growMemory = (size) => {
  var b = wasmMemory.buffer;
  var pages = (size - b.byteLength + 65535) / 65536;
  try {
    // round size grow request up to wasm page size (fixed 64KB per spec)
    wasmMemory.grow(pages); // .grow() takes a delta compared to the previous size
    updateMemoryViews();
    return 1 /*success*/;
  } catch (e) {
    err(`growMemory: Attempted to grow heap from ${b.byteLength} bytes to ${size} bytes, but got error: ${e}`);
  }
  // implicit 0 return to save code size (caller will cast "undefined" into 0
  // anyhow)
};
var _emscripten_resize_heap = (requestedSize) => {
  var oldSize = HEAPU8.length;
  // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
  requestedSize >>>= 0;
  // With multithreaded builds, races can happen (another thread might increase the size
  // in between), so return a failure, and let the caller retry.
  assert(requestedSize > oldSize);

  // Memory resize rules:
  // 1.  Always increase heap size to at least the requested size, rounded up
  //     to next page multiple.
  // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap
  //     geometrically: increase the heap size according to
  //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most
  //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
  // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap
  //     linearly: increase the heap size by at least
  //     MEMORY_GROWTH_LINEAR_STEP bytes.
  // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by
  //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
  // 4.  If we were unable to allocate as much memory, it may be due to
  //     over-eager decision to excessively reserve due to (3) above.
  //     Hence if an allocation fails, cut down on the amount of excess
  //     growth, in an attempt to succeed to perform a smaller allocation.

  // A limit is set for how much we can grow. We should not exceed that
  // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
  var maxHeapSize = getHeapMax();
  if (requestedSize > maxHeapSize) {
    err(`Cannot enlarge memory, requested ${requestedSize} bytes, but the limit is ${maxHeapSize} bytes!`);
    return false;
  }

  var alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;

  // Loop through potential heap size increases. If we attempt a too eager
  // reservation that fails, cut down on the attempted size and reserve a
  // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
  for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
    var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
    // but limit overreserving (default to capping at +96MB overgrowth at most)
    overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);

    var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));

    var replacement = growMemory(newSize);
    if (replacement) {
      err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);

      return true;
    }
  }
  err(`Failed to grow the heap from ${oldSize} bytes to ${newSize} bytes, not enough memory!`);
  return false;
};

var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
  assert(typeof str === 'string', `stringToUTF8Array expects a string (got ${typeof str})`);
  // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
  // undefined and false each don't write out any bytes.
  if (!(maxBytesToWrite > 0))
  return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
    // and https://www.ietf.org/rfc/rfc2279.txt
    // and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | u1 & 0x3FF;
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | u >> 6;
      heap[outIdx++] = 0x80 | u & 63;
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | u >> 12;
      heap[outIdx++] = 0x80 | u >> 6 & 63;
      heap[outIdx++] = 0x80 | u & 63;
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
      heap[outIdx++] = 0xF0 | u >> 18;
      heap[outIdx++] = 0x80 | u >> 12 & 63;
      heap[outIdx++] = 0x80 | u >> 6 & 63;
      heap[outIdx++] = 0x80 | u & 63;
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
};
var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
};

var writeArrayToMemory = (array, buffer) => {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)');
  HEAP8.set(array, buffer);
};

var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
 * array that contains uint8 values, returns a copy of that string as a
 * Javascript String object.
 * heapOrArray is either a regular array, or a JavaScript typed array view.
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
var UTF8ArrayToString = (heapOrArray, idx, maxBytesToRead) => {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on
  // null terminator by itself.  Also, use the length info to avoid running tiny
  // strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation,
  // so that undefined means Infinity)
  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
    return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
  }
  var str = '';
  // If building with TextDecoder, we have already computed the string length
  // above, so test loop end condition against that
  while (idx < endPtr) {
    // For UTF8 byte structure, see:
    // http://en.wikipedia.org/wiki/UTF-8#Description
    // https://www.ietf.org/rfc/rfc2279.txt
    // https://tools.ietf.org/html/rfc3629
    var u0 = heapOrArray[idx++];
    if (!(u0 & 0x80)) {str += String.fromCharCode(u0);continue;}
    var u1 = heapOrArray[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) {str += String.fromCharCode((u0 & 31) << 6 | u1);continue;}
    var u2 = heapOrArray[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = (u0 & 15) << 12 | u1 << 6 | u2;
    } else {
      if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
      u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
    }

    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | ch >> 10, 0xDC00 | ch & 0x3FF);
    }
  }
  return str;
};

/**
 * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
 * emscripten HEAP, returns a copy of that string as a Javascript String object.
 *
 * @param {number} ptr
 * @param {number=} maxBytesToRead - An optional length that specifies the
 *   maximum number of bytes to read. You can omit this parameter to scan the
 *   string until the first 0 byte. If maxBytesToRead is passed, and the string
 *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
 *   string will cut short at that byte index (i.e. maxBytesToRead will not
 *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
 *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
 *   JS JIT optimizations off, so it is worth to consider consistently using one
 * @return {string}
 */
var UTF8ToString = (ptr, maxBytesToRead) => {
  assert(typeof ptr == 'number', `UTF8ToString expects a number (got ${typeof ptr})`);
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
};
function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var wasmImports = {
  /** @export */
  emscripten_memcpy_js: _emscripten_memcpy_js,
  /** @export */
  emscripten_resize_heap: _emscripten_resize_heap
};
var wasmExports = createWasm();
var ___wasm_call_ctors = createExportWrapper('__wasm_call_ctors');
var _crc64_init = Module['_crc64_init'] = createExportWrapper('crc64_init');
var _crc64 = Module['_crc64'] = createExportWrapper('crc64');
var _str_to_uint64 = Module['_str_to_uint64'] = createExportWrapper('str_to_uint64');
var _uint64_to_str = Module['_uint64_to_str'] = createExportWrapper('uint64_to_str');
var _combine_crc64 = Module['_combine_crc64'] = createExportWrapper('combine_crc64');
var _fflush = createExportWrapper('fflush');
var _malloc = Module['_malloc'] = createExportWrapper('malloc');
var _free = Module['_free'] = createExportWrapper('free');
var _emscripten_stack_init = wasmExports['emscripten_stack_init'];
var _emscripten_stack_get_free = wasmExports['emscripten_stack_get_free'];
var _emscripten_stack_get_base = wasmExports['emscripten_stack_get_base'];
var _emscripten_stack_get_end = wasmExports['emscripten_stack_get_end'];
var stackSave = createExportWrapper('stackSave');
var stackRestore = createExportWrapper('stackRestore');
var stackAlloc = createExportWrapper('stackAlloc');
var _emscripten_stack_get_current = wasmExports['emscripten_stack_get_current'];


// include: postamble.js
// === Auto-generated postamble setup entry stuff ===

Module['UTF8ToString'] = UTF8ToString;
Module['stringToUTF8'] = stringToUTF8;
Module['writeArrayToMemory'] = writeArrayToMemory;
var missingLibrarySymbols = [
'writeI53ToI64',
'writeI53ToI64Clamped',
'writeI53ToI64Signaling',
'writeI53ToU64Clamped',
'writeI53ToU64Signaling',
'readI53FromI64',
'readI53FromU64',
'convertI32PairToI53',
'convertI32PairToI53Checked',
'convertU32PairToI53',
'zeroMemory',
'exitJS',
'isLeapYear',
'ydayFromDate',
'arraySum',
'addDays',
'inetPton4',
'inetNtop4',
'inetPton6',
'inetNtop6',
'readSockaddr',
'writeSockaddr',
'initRandomFill',
'randomFill',
'getCallstack',
'emscriptenLog',
'convertPCtoSourceLocation',
'readEmAsmArgs',
'jstoi_q',
'getExecutableName',
'listenOnce',
'autoResumeAudioContext',
'dynCallLegacy',
'getDynCaller',
'dynCall',
'handleException',
'keepRuntimeAlive',
'runtimeKeepalivePush',
'runtimeKeepalivePop',
'callUserCallback',
'maybeExit',
'asmjsMangle',
'asyncLoad',
'alignMemory',
'mmapAlloc',
'HandleAllocator',
'getNativeTypeSize',
'STACK_SIZE',
'STACK_ALIGN',
'POINTER_SIZE',
'ASSERTIONS',
'getCFunc',
'ccall',
'cwrap',
'uleb128Encode',
'sigToWasmTypes',
'generateFuncType',
'convertJsFunctionToWasm',
'getEmptyTableSlot',
'updateTableMap',
'getFunctionAddress',
'addFunction',
'removeFunction',
'reallyNegative',
'unSign',
'strLen',
'reSign',
'formatString',
'lengthBytesUTF8',
'intArrayFromString',
'intArrayToString',
'AsciiToString',
'stringToAscii',
'UTF16ToString',
'stringToUTF16',
'lengthBytesUTF16',
'UTF32ToString',
'stringToUTF32',
'lengthBytesUTF32',
'stringToNewUTF8',
'stringToUTF8OnStack',
'registerKeyEventCallback',
'maybeCStringToJsString',
'findEventTarget',
'getBoundingClientRect',
'fillMouseEventData',
'registerMouseEventCallback',
'registerWheelEventCallback',
'registerUiEventCallback',
'registerFocusEventCallback',
'fillDeviceOrientationEventData',
'registerDeviceOrientationEventCallback',
'fillDeviceMotionEventData',
'registerDeviceMotionEventCallback',
'screenOrientation',
'fillOrientationChangeEventData',
'registerOrientationChangeEventCallback',
'fillFullscreenChangeEventData',
'registerFullscreenChangeEventCallback',
'JSEvents_requestFullscreen',
'JSEvents_resizeCanvasForFullscreen',
'registerRestoreOldStyle',
'hideEverythingExceptGivenElement',
'restoreHiddenElements',
'setLetterbox',
'softFullscreenResizeWebGLRenderTarget',
'doRequestFullscreen',
'fillPointerlockChangeEventData',
'registerPointerlockChangeEventCallback',
'registerPointerlockErrorEventCallback',
'requestPointerLock',
'fillVisibilityChangeEventData',
'registerVisibilityChangeEventCallback',
'registerTouchEventCallback',
'fillGamepadEventData',
'registerGamepadEventCallback',
'registerBeforeUnloadEventCallback',
'fillBatteryEventData',
'battery',
'registerBatteryEventCallback',
'setCanvasElementSize',
'getCanvasElementSize',
'jsStackTrace',
'stackTrace',
'getEnvStrings',
'checkWasiClock',
'flush_NO_FILESYSTEM',
'wasiRightsToMuslOFlags',
'wasiOFlagsToMuslOFlags',
'createDyncallWrapper',
'safeSetTimeout',
'setImmediateWrapped',
'clearImmediateWrapped',
'polyfillSetImmediate',
'getPromise',
'makePromise',
'idsToPromises',
'makePromiseCallback',
'ExceptionInfo',
'findMatchingCatch',
'Browser_asyncPrepareDataCounter',
'setMainLoop',
'getSocketFromFD',
'getSocketAddress',
'FS_createPreloadedFile',
'FS_modeStringToFlags',
'FS_getMode',
'FS_stdin_getChar',
'FS_createDataFile',
'FS_unlink',
'FS_mkdirTree',
'_setNetworkCallback',
'heapObjectForWebGLType',
'toTypedArrayIndex',
'webgl_enable_ANGLE_instanced_arrays',
'webgl_enable_OES_vertex_array_object',
'webgl_enable_WEBGL_draw_buffers',
'webgl_enable_WEBGL_multi_draw',
'emscriptenWebGLGet',
'computeUnpackAlignedImageSize',
'colorChannelsInGlTextureFormat',
'emscriptenWebGLGetTexPixelData',
'emscriptenWebGLGetUniform',
'webglGetUniformLocation',
'webglPrepareUniformLocationsBeforeFirstUse',
'webglGetLeftBracePos',
'emscriptenWebGLGetVertexAttrib',
'__glGetActiveAttribOrUniform',
'writeGLArray',
'registerWebGlEventCallback',
'runAndAbortIfError',
'SDL_unicode',
'SDL_ttfContext',
'SDL_audio',
'ALLOC_NORMAL',
'ALLOC_STACK',
'allocate',
'writeStringToMemory',
'writeAsciiToMemory',
'setErrNo',
'demangle'];

missingLibrarySymbols.forEach(missingLibrarySymbol);

var unexportedSymbols = [
'run',
'addOnPreRun',
'addOnInit',
'addOnPreMain',
'addOnExit',
'addOnPostRun',
'addRunDependency',
'removeRunDependency',
'FS_createFolder',
'FS_createPath',
'FS_createLazyFile',
'FS_createLink',
'FS_createDevice',
'FS_readFile',
'out',
'err',
'callMain',
'abort',
'wasmMemory',
'wasmExports',
'stackAlloc',
'stackSave',
'stackRestore',
'getTempRet0',
'setTempRet0',
'writeStackCookie',
'checkStackCookie',
'intArrayFromBase64',
'tryParseAsDataURI',
'ptrToString',
'getHeapMax',
'growMemory',
'ENV',
'MONTH_DAYS_REGULAR',
'MONTH_DAYS_LEAP',
'MONTH_DAYS_REGULAR_CUMULATIVE',
'MONTH_DAYS_LEAP_CUMULATIVE',
'ERRNO_CODES',
'ERRNO_MESSAGES',
'DNS',
'Protocols',
'Sockets',
'timers',
'warnOnce',
'UNWIND_CACHE',
'readEmAsmArgsArray',
'jstoi_s',
'wasmTable',
'noExitRuntime',
'freeTableIndexes',
'functionsInTableMap',
'setValue',
'getValue',
'PATH',
'PATH_FS',
'UTF8Decoder',
'UTF8ArrayToString',
'stringToUTF8Array',
'UTF16Decoder',
'JSEvents',
'specialHTMLTargets',
'findCanvasEventTarget',
'currentFullscreenStrategy',
'restoreOldWindowedStyle',
'ExitStatus',
'promiseMap',
'uncaughtExceptionCount',
'exceptionLast',
'exceptionCaught',
'Browser',
'getPreloadedImageData__data',
'wget',
'SYSCALLS',
'preloadPlugins',
'FS_stdin_getChar_buffer',
'FS',
'MEMFS',
'TTY',
'PIPEFS',
'SOCKFS',
'tempFixedLengthArray',
'miniTempWebGLFloatBuffers',
'miniTempWebGLIntBuffers',
'GL',
'AL',
'GLUT',
'EGL',
'GLEW',
'IDBStore',
'SDL',
'SDL_gfx',
'allocateUTF8',
'allocateUTF8OnStack'];

unexportedSymbols.forEach(unexportedRuntimeSymbol);



var calledRun;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

function run() {

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function () {
      setTimeout(function () {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  };
  try {// it doesn't matter if it fails
    _fflush(0);
  } catch (e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();


// end include: postamble.js


/***/ }),

/***/ 6124:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(3660);


/***/ }),

/***/ 3660:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


var net = __nccwpck_require__(9278);
var tls = __nccwpck_require__(4756);
var http = __nccwpck_require__(8611);
var https = __nccwpck_require__(5692);
var events = __nccwpck_require__(4434);
var assert = __nccwpck_require__(2613);
var util = __nccwpck_require__(9023);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 298:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Client = __nccwpck_require__(439)
const Dispatcher = __nccwpck_require__(3553)
const errors = __nccwpck_require__(1581)
const Pool = __nccwpck_require__(6086)
const BalancedPool = __nccwpck_require__(3375)
const Agent = __nccwpck_require__(8603)
const util = __nccwpck_require__(4606)
const { InvalidArgumentError } = errors
const api = __nccwpck_require__(8725)
const buildConnector = __nccwpck_require__(110)
const MockClient = __nccwpck_require__(4163)
const MockAgent = __nccwpck_require__(5343)
const MockPool = __nccwpck_require__(3722)
const mockErrors = __nccwpck_require__(2255)
const ProxyAgent = __nccwpck_require__(6278)
const RetryHandler = __nccwpck_require__(2483)
const { getGlobalDispatcher, setGlobalDispatcher } = __nccwpck_require__(9456)
const DecoratorHandler = __nccwpck_require__(1858)
const RedirectHandler = __nccwpck_require__(3897)
const createRedirectInterceptor = __nccwpck_require__(9509)

let hasCrypto
try {
  __nccwpck_require__(6982)
  hasCrypto = true
} catch {
  hasCrypto = false
}

Object.assign(Dispatcher.prototype, api)

module.exports.Dispatcher = Dispatcher
module.exports.Client = Client
module.exports.Pool = Pool
module.exports.BalancedPool = BalancedPool
module.exports.Agent = Agent
module.exports.ProxyAgent = ProxyAgent
module.exports.RetryHandler = RetryHandler

module.exports.DecoratorHandler = DecoratorHandler
module.exports.RedirectHandler = RedirectHandler
module.exports.createRedirectInterceptor = createRedirectInterceptor

module.exports.buildConnector = buildConnector
module.exports.errors = errors

function makeDispatcher (fn) {
  return (url, opts, handler) => {
    if (typeof opts === 'function') {
      handler = opts
      opts = null
    }

    if (!url || (typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL))) {
      throw new InvalidArgumentError('invalid url')
    }

    if (opts != null && typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (opts && opts.path != null) {
      if (typeof opts.path !== 'string') {
        throw new InvalidArgumentError('invalid opts.path')
      }

      let path = opts.path
      if (!opts.path.startsWith('/')) {
        path = `/${path}`
      }

      url = new URL(util.parseOrigin(url).origin + path)
    } else {
      if (!opts) {
        opts = typeof url === 'object' ? url : {}
      }

      url = util.parseURL(url)
    }

    const { agent, dispatcher = getGlobalDispatcher() } = opts

    if (agent) {
      throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?')
    }

    return fn.call(dispatcher, {
      ...opts,
      origin: url.origin,
      path: url.search ? `${url.pathname}${url.search}` : url.pathname,
      method: opts.method || (opts.body ? 'PUT' : 'GET')
    }, handler)
  }
}

module.exports.setGlobalDispatcher = setGlobalDispatcher
module.exports.getGlobalDispatcher = getGlobalDispatcher

if (util.nodeMajor > 16 || (util.nodeMajor === 16 && util.nodeMinor >= 8)) {
  let fetchImpl = null
  module.exports.fetch = async function fetch (resource) {
    if (!fetchImpl) {
      fetchImpl = (__nccwpck_require__(9401).fetch)
    }

    try {
      return await fetchImpl(...arguments)
    } catch (err) {
      if (typeof err === 'object') {
        Error.captureStackTrace(err, this)
      }

      throw err
    }
  }
  module.exports.Headers = __nccwpck_require__(2223).Headers
  module.exports.Response = __nccwpck_require__(6062).Response
  module.exports.Request = __nccwpck_require__(2204).Request
  module.exports.FormData = __nccwpck_require__(1187).FormData
  module.exports.File = __nccwpck_require__(4091).File
  module.exports.FileReader = __nccwpck_require__(9086).FileReader

  const { setGlobalOrigin, getGlobalOrigin } = __nccwpck_require__(742)

  module.exports.setGlobalOrigin = setGlobalOrigin
  module.exports.getGlobalOrigin = getGlobalOrigin

  const { CacheStorage } = __nccwpck_require__(8400)
  const { kConstruct } = __nccwpck_require__(5914)

  // Cache & CacheStorage are tightly coupled with fetch. Even if it may run
  // in an older version of Node, it doesn't have any use without fetch.
  module.exports.caches = new CacheStorage(kConstruct)
}

if (util.nodeMajor >= 16) {
  const { deleteCookie, getCookies, getSetCookies, setCookie } = __nccwpck_require__(7426)

  module.exports.deleteCookie = deleteCookie
  module.exports.getCookies = getCookies
  module.exports.getSetCookies = getSetCookies
  module.exports.setCookie = setCookie

  const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(6960)

  module.exports.parseMIMEType = parseMIMEType
  module.exports.serializeAMimeType = serializeAMimeType
}

if (util.nodeMajor >= 18 && hasCrypto) {
  const { WebSocket } = __nccwpck_require__(3853)

  module.exports.WebSocket = WebSocket
}

module.exports.request = makeDispatcher(api.request)
module.exports.stream = makeDispatcher(api.stream)
module.exports.pipeline = makeDispatcher(api.pipeline)
module.exports.connect = makeDispatcher(api.connect)
module.exports.upgrade = makeDispatcher(api.upgrade)

module.exports.MockClient = MockClient
module.exports.MockPool = MockPool
module.exports.MockAgent = MockAgent
module.exports.mockErrors = mockErrors


/***/ }),

/***/ 8603:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { InvalidArgumentError } = __nccwpck_require__(1581)
const { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = __nccwpck_require__(5773)
const DispatcherBase = __nccwpck_require__(9787)
const Pool = __nccwpck_require__(6086)
const Client = __nccwpck_require__(439)
const util = __nccwpck_require__(4606)
const createRedirectInterceptor = __nccwpck_require__(9509)
const { WeakRef, FinalizationRegistry } = __nccwpck_require__(1408)()

const kOnConnect = Symbol('onConnect')
const kOnDisconnect = Symbol('onDisconnect')
const kOnConnectionError = Symbol('onConnectionError')
const kMaxRedirections = Symbol('maxRedirections')
const kOnDrain = Symbol('onDrain')
const kFactory = Symbol('factory')
const kFinalizer = Symbol('finalizer')
const kOptions = Symbol('options')

function defaultFactory (origin, opts) {
  return opts && opts.connections === 1
    ? new Client(origin, opts)
    : new Pool(origin, opts)
}

class Agent extends DispatcherBase {
  constructor ({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
    super()

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    if (connect && typeof connect !== 'function') {
      connect = { ...connect }
    }

    this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent)
      ? options.interceptors.Agent
      : [createRedirectInterceptor({ maxRedirections })]

    this[kOptions] = { ...util.deepClone(options), connect }
    this[kOptions].interceptors = options.interceptors
      ? { ...options.interceptors }
      : undefined
    this[kMaxRedirections] = maxRedirections
    this[kFactory] = factory
    this[kClients] = new Map()
    this[kFinalizer] = new FinalizationRegistry(/* istanbul ignore next: gc is undeterministic */ key => {
      const ref = this[kClients].get(key)
      if (ref !== undefined && ref.deref() === undefined) {
        this[kClients].delete(key)
      }
    })

    const agent = this

    this[kOnDrain] = (origin, targets) => {
      agent.emit('drain', origin, [agent, ...targets])
    }

    this[kOnConnect] = (origin, targets) => {
      agent.emit('connect', origin, [agent, ...targets])
    }

    this[kOnDisconnect] = (origin, targets, err) => {
      agent.emit('disconnect', origin, [agent, ...targets], err)
    }

    this[kOnConnectionError] = (origin, targets, err) => {
      agent.emit('connectionError', origin, [agent, ...targets], err)
    }
  }

  get [kRunning] () {
    let ret = 0
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore next: gc is undeterministic */
      if (client) {
        ret += client[kRunning]
      }
    }
    return ret
  }

  [kDispatch] (opts, handler) {
    let key
    if (opts.origin && (typeof opts.origin === 'string' || opts.origin instanceof URL)) {
      key = String(opts.origin)
    } else {
      throw new InvalidArgumentError('opts.origin must be a non-empty string or URL.')
    }

    const ref = this[kClients].get(key)

    let dispatcher = ref ? ref.deref() : null
    if (!dispatcher) {
      dispatcher = this[kFactory](opts.origin, this[kOptions])
        .on('drain', this[kOnDrain])
        .on('connect', this[kOnConnect])
        .on('disconnect', this[kOnDisconnect])
        .on('connectionError', this[kOnConnectionError])

      this[kClients].set(key, new WeakRef(dispatcher))
      this[kFinalizer].register(dispatcher, key)
    }

    return dispatcher.dispatch(opts, handler)
  }

  async [kClose] () {
    const closePromises = []
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore else: gc is undeterministic */
      if (client) {
        closePromises.push(client.close())
      }
    }

    await Promise.all(closePromises)
  }

  async [kDestroy] (err) {
    const destroyPromises = []
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore else: gc is undeterministic */
      if (client) {
        destroyPromises.push(client.destroy(err))
      }
    }

    await Promise.all(destroyPromises)
  }
}

module.exports = Agent


/***/ }),

/***/ 8788:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { addAbortListener } = __nccwpck_require__(4606)
const { RequestAbortedError } = __nccwpck_require__(1581)

const kListener = Symbol('kListener')
const kSignal = Symbol('kSignal')

function abort (self) {
  if (self.abort) {
    self.abort()
  } else {
    self.onError(new RequestAbortedError())
  }
}

function addSignal (self, signal) {
  self[kSignal] = null
  self[kListener] = null

  if (!signal) {
    return
  }

  if (signal.aborted) {
    abort(self)
    return
  }

  self[kSignal] = signal
  self[kListener] = () => {
    abort(self)
  }

  addAbortListener(self[kSignal], self[kListener])
}

function removeSignal (self) {
  if (!self[kSignal]) {
    return
  }

  if ('removeEventListener' in self[kSignal]) {
    self[kSignal].removeEventListener('abort', self[kListener])
  } else {
    self[kSignal].removeListener('abort', self[kListener])
  }

  self[kSignal] = null
  self[kListener] = null
}

module.exports = {
  addSignal,
  removeSignal
}


/***/ }),

/***/ 3290:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { AsyncResource } = __nccwpck_require__(290)
const { InvalidArgumentError, RequestAbortedError, SocketError } = __nccwpck_require__(1581)
const util = __nccwpck_require__(4606)
const { addSignal, removeSignal } = __nccwpck_require__(8788)

class ConnectHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    const { signal, opaque, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    super('UNDICI_CONNECT')

    this.opaque = opaque || null
    this.responseHeaders = responseHeaders || null
    this.callback = callback
    this.abort = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders () {
    throw new SocketError('bad connect', null)
  }

  onUpgrade (statusCode, rawHeaders, socket) {
    const { callback, opaque, context } = this

    removeSignal(this)

    this.callback = null

    let headers = rawHeaders
    // Indicates is an HTTP2Session
    if (headers != null) {
      headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
    }

    this.runInAsyncScope(callback, null, null, {
      statusCode,
      headers,
      socket,
      opaque,
      context
    })
  }

  onError (err) {
    const { callback, opaque } = this

    removeSignal(this)

    if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }
  }
}

function connect (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      connect.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    const connectHandler = new ConnectHandler(opts, callback)
    this.dispatch({ ...opts, method: 'CONNECT' }, connectHandler)
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = connect


/***/ }),

/***/ 9840:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  Readable,
  Duplex,
  PassThrough
} = __nccwpck_require__(2203)
const {
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError
} = __nccwpck_require__(1581)
const util = __nccwpck_require__(4606)
const { AsyncResource } = __nccwpck_require__(290)
const { addSignal, removeSignal } = __nccwpck_require__(8788)
const assert = __nccwpck_require__(2613)

const kResume = Symbol('resume')

class PipelineRequest extends Readable {
  constructor () {
    super({ autoDestroy: true })

    this[kResume] = null
  }

  _read () {
    const { [kResume]: resume } = this

    if (resume) {
      this[kResume] = null
      resume()
    }
  }

  _destroy (err, callback) {
    this._read()

    callback(err)
  }
}

class PipelineResponse extends Readable {
  constructor (resume) {
    super({ autoDestroy: true })
    this[kResume] = resume
  }

  _read () {
    this[kResume]()
  }

  _destroy (err, callback) {
    if (!err && !this._readableState.endEmitted) {
      err = new RequestAbortedError()
    }

    callback(err)
  }
}

class PipelineHandler extends AsyncResource {
  constructor (opts, handler) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof handler !== 'function') {
      throw new InvalidArgumentError('invalid handler')
    }

    const { signal, method, opaque, onInfo, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    if (method === 'CONNECT') {
      throw new InvalidArgumentError('invalid method')
    }

    if (onInfo && typeof onInfo !== 'function') {
      throw new InvalidArgumentError('invalid onInfo callback')
    }

    super('UNDICI_PIPELINE')

    this.opaque = opaque || null
    this.responseHeaders = responseHeaders || null
    this.handler = handler
    this.abort = null
    this.context = null
    this.onInfo = onInfo || null

    this.req = new PipelineRequest().on('error', util.nop)

    this.ret = new Duplex({
      readableObjectMode: opts.objectMode,
      autoDestroy: true,
      read: () => {
        const { body } = this

        if (body && body.resume) {
          body.resume()
        }
      },
      write: (chunk, encoding, callback) => {
        const { req } = this

        if (req.push(chunk, encoding) || req._readableState.destroyed) {
          callback()
        } else {
          req[kResume] = callback
        }
      },
      destroy: (err, callback) => {
        const { body, req, res, ret, abort } = this

        if (!err && !ret._readableState.endEmitted) {
          err = new RequestAbortedError()
        }

        if (abort && err) {
          abort()
        }

        util.destroy(body, err)
        util.destroy(req, err)
        util.destroy(res, err)

        removeSignal(this)

        callback(err)
      }
    }).on('prefinish', () => {
      const { req } = this

      // Node < 15 does not call _final in same tick.
      req.push(null)
    })

    this.res = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    const { ret, res } = this

    assert(!res, 'pipeline cannot be retried')

    if (ret.destroyed) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume) {
    const { opaque, handler, context } = this

    if (statusCode < 200) {
      if (this.onInfo) {
        const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
        this.onInfo({ statusCode, headers })
      }
      return
    }

    this.res = new PipelineResponse(resume)

    let body
    try {
      this.handler = null
      const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
      body = this.runInAsyncScope(handler, null, {
        statusCode,
        headers,
        opaque,
        body: this.res,
        context
      })
    } catch (err) {
      this.res.on('error', util.nop)
      throw err
    }

    if (!body || typeof body.on !== 'function') {
      throw new InvalidReturnValueError('expected Readable')
    }

    body
      .on('data', (chunk) => {
        const { ret, body } = this

        if (!ret.push(chunk) && body.pause) {
          body.pause()
        }
      })
      .on('error', (err) => {
        const { ret } = this

        util.destroy(ret, err)
      })
      .on('end', () => {
        const { ret } = this

        ret.push(null)
      })
      .on('close', () => {
        const { ret } = this

        if (!ret._readableState.ended) {
          util.destroy(ret, new RequestAbortedError())
        }
      })

    this.body = body
  }

  onData (chunk) {
    const { res } = this
    return res.push(chunk)
  }

  onComplete (trailers) {
    const { res } = this
    res.push(null)
  }

  onError (err) {
    const { ret } = this
    this.handler = null
    util.destroy(ret, err)
  }
}

function pipeline (opts, handler) {
  try {
    const pipelineHandler = new PipelineHandler(opts, handler)
    this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler)
    return pipelineHandler.ret
  } catch (err) {
    return new PassThrough().destroy(err)
  }
}

module.exports = pipeline


/***/ }),

/***/ 3333:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Readable = __nccwpck_require__(1709)
const {
  InvalidArgumentError,
  RequestAbortedError
} = __nccwpck_require__(1581)
const util = __nccwpck_require__(4606)
const { getResolveErrorBodyCallback } = __nccwpck_require__(757)
const { AsyncResource } = __nccwpck_require__(290)
const { addSignal, removeSignal } = __nccwpck_require__(8788)

class RequestHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts

    try {
      if (typeof callback !== 'function') {
        throw new InvalidArgumentError('invalid callback')
      }

      if (highWaterMark && (typeof highWaterMark !== 'number' || highWaterMark < 0)) {
        throw new InvalidArgumentError('invalid highWaterMark')
      }

      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
      }

      if (method === 'CONNECT') {
        throw new InvalidArgumentError('invalid method')
      }

      if (onInfo && typeof onInfo !== 'function') {
        throw new InvalidArgumentError('invalid onInfo callback')
      }

      super('UNDICI_REQUEST')
    } catch (err) {
      if (util.isStream(body)) {
        util.destroy(body.on('error', util.nop), err)
      }
      throw err
    }

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.callback = callback
    this.res = null
    this.abort = null
    this.body = body
    this.trailers = {}
    this.context = null
    this.onInfo = onInfo || null
    this.throwOnError = throwOnError
    this.highWaterMark = highWaterMark

    if (util.isStream(body)) {
      body.on('error', (err) => {
        this.onError(err)
      })
    }

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this

    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)

    if (statusCode < 200) {
      if (this.onInfo) {
        this.onInfo({ statusCode, headers })
      }
      return
    }

    const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers
    const contentType = parsedHeaders['content-type']
    const body = new Readable({ resume, abort, contentType, highWaterMark })

    this.callback = null
    this.res = body
    if (callback !== null) {
      if (this.throwOnError && statusCode >= 400) {
        this.runInAsyncScope(getResolveErrorBodyCallback, null,
          { callback, body, contentType, statusCode, statusMessage, headers }
        )
      } else {
        this.runInAsyncScope(callback, null, null, {
          statusCode,
          headers,
          trailers: this.trailers,
          opaque,
          body,
          context
        })
      }
    }
  }

  onData (chunk) {
    const { res } = this
    return res.push(chunk)
  }

  onComplete (trailers) {
    const { res } = this

    removeSignal(this)

    util.parseHeaders(trailers, this.trailers)

    res.push(null)
  }

  onError (err) {
    const { res, callback, body, opaque } = this

    removeSignal(this)

    if (callback) {
      // TODO: Does this need queueMicrotask?
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }

    if (res) {
      this.res = null
      // Ensure all queued handlers are invoked before destroying res.
      queueMicrotask(() => {
        util.destroy(res, err)
      })
    }

    if (body) {
      this.body = null
      util.destroy(body, err)
    }
  }
}

function request (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      request.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    this.dispatch(opts, new RequestHandler(opts, callback))
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = request
module.exports.RequestHandler = RequestHandler


/***/ }),

/***/ 2310:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { finished, PassThrough } = __nccwpck_require__(2203)
const {
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError
} = __nccwpck_require__(1581)
const util = __nccwpck_require__(4606)
const { getResolveErrorBodyCallback } = __nccwpck_require__(757)
const { AsyncResource } = __nccwpck_require__(290)
const { addSignal, removeSignal } = __nccwpck_require__(8788)

class StreamHandler extends AsyncResource {
  constructor (opts, factory, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts

    try {
      if (typeof callback !== 'function') {
        throw new InvalidArgumentError('invalid callback')
      }

      if (typeof factory !== 'function') {
        throw new InvalidArgumentError('invalid factory')
      }

      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
      }

      if (method === 'CONNECT') {
        throw new InvalidArgumentError('invalid method')
      }

      if (onInfo && typeof onInfo !== 'function') {
        throw new InvalidArgumentError('invalid onInfo callback')
      }

      super('UNDICI_STREAM')
    } catch (err) {
      if (util.isStream(body)) {
        util.destroy(body.on('error', util.nop), err)
      }
      throw err
    }

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.factory = factory
    this.callback = callback
    this.res = null
    this.abort = null
    this.context = null
    this.trailers = null
    this.body = body
    this.onInfo = onInfo || null
    this.throwOnError = throwOnError || false

    if (util.isStream(body)) {
      body.on('error', (err) => {
        this.onError(err)
      })
    }

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const { factory, opaque, context, callback, responseHeaders } = this

    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)

    if (statusCode < 200) {
      if (this.onInfo) {
        this.onInfo({ statusCode, headers })
      }
      return
    }

    this.factory = null

    let res

    if (this.throwOnError && statusCode >= 400) {
      const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers
      const contentType = parsedHeaders['content-type']
      res = new PassThrough()

      this.callback = null
      this.runInAsyncScope(getResolveErrorBodyCallback, null,
        { callback, body: res, contentType, statusCode, statusMessage, headers }
      )
    } else {
      if (factory === null) {
        return
      }

      res = this.runInAsyncScope(factory, null, {
        statusCode,
        headers,
        opaque,
        context
      })

      if (
        !res ||
        typeof res.write !== 'function' ||
        typeof res.end !== 'function' ||
        typeof res.on !== 'function'
      ) {
        throw new InvalidReturnValueError('expected Writable')
      }

      // TODO: Avoid finished. It registers an unnecessary amount of listeners.
      finished(res, { readable: false }, (err) => {
        const { callback, res, opaque, trailers, abort } = this

        this.res = null
        if (err || !res.readable) {
          util.destroy(res, err)
        }

        this.callback = null
        this.runInAsyncScope(callback, null, err || null, { opaque, trailers })

        if (err) {
          abort()
        }
      })
    }

    res.on('drain', resume)

    this.res = res

    const needDrain = res.writableNeedDrain !== undefined
      ? res.writableNeedDrain
      : res._writableState && res._writableState.needDrain

    return needDrain !== true
  }

  onData (chunk) {
    const { res } = this

    return res ? res.write(chunk) : true
  }

  onComplete (trailers) {
    const { res } = this

    removeSignal(this)

    if (!res) {
      return
    }

    this.trailers = util.parseHeaders(trailers)

    res.end()
  }

  onError (err) {
    const { res, callback, opaque, body } = this

    removeSignal(this)

    this.factory = null

    if (res) {
      this.res = null
      util.destroy(res, err)
    } else if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }

    if (body) {
      this.body = null
      util.destroy(body, err)
    }
  }
}

function stream (opts, factory, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      stream.call(this, opts, factory, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    this.dispatch(opts, new StreamHandler(opts, factory, callback))
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = stream


/***/ }),

/***/ 7236:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { InvalidArgumentError, RequestAbortedError, SocketError } = __nccwpck_require__(1581)
const { AsyncResource } = __nccwpck_require__(290)
const util = __nccwpck_require__(4606)
const { addSignal, removeSignal } = __nccwpck_require__(8788)
const assert = __nccwpck_require__(2613)

class UpgradeHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    const { signal, opaque, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    super('UNDICI_UPGRADE')

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.callback = callback
    this.abort = null
    this.context = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = null
  }

  onHeaders () {
    throw new SocketError('bad upgrade', null)
  }

  onUpgrade (statusCode, rawHeaders, socket) {
    const { callback, opaque, context } = this

    assert.strictEqual(statusCode, 101)

    removeSignal(this)

    this.callback = null
    const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
    this.runInAsyncScope(callback, null, null, {
      headers,
      socket,
      opaque,
      context
    })
  }

  onError (err) {
    const { callback, opaque } = this

    removeSignal(this)

    if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }
  }
}

function upgrade (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      upgrade.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    const upgradeHandler = new UpgradeHandler(opts, callback)
    this.dispatch({
      ...opts,
      method: opts.method || 'GET',
      upgrade: opts.protocol || 'Websocket'
    }, upgradeHandler)
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = upgrade


/***/ }),

/***/ 8725:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


module.exports.request = __nccwpck_require__(3333)
module.exports.stream = __nccwpck_require__(2310)
module.exports.pipeline = __nccwpck_require__(9840)
module.exports.upgrade = __nccwpck_require__(7236)
module.exports.connect = __nccwpck_require__(3290)


/***/ }),

/***/ 1709:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// Ported from https://github.com/nodejs/undici/pull/907



const assert = __nccwpck_require__(2613)
const { Readable } = __nccwpck_require__(2203)
const { RequestAbortedError, NotSupportedError, InvalidArgumentError } = __nccwpck_require__(1581)
const util = __nccwpck_require__(4606)
const { ReadableStreamFrom, toUSVString } = __nccwpck_require__(4606)

let Blob

const kConsume = Symbol('kConsume')
const kReading = Symbol('kReading')
const kBody = Symbol('kBody')
const kAbort = Symbol('abort')
const kContentType = Symbol('kContentType')

const noop = () => {}

module.exports = class BodyReadable extends Readable {
  constructor ({
    resume,
    abort,
    contentType = '',
    highWaterMark = 64 * 1024 // Same as nodejs fs streams.
  }) {
    super({
      autoDestroy: true,
      read: resume,
      highWaterMark
    })

    this._readableState.dataEmitted = false

    this[kAbort] = abort
    this[kConsume] = null
    this[kBody] = null
    this[kContentType] = contentType

    // Is stream being consumed through Readable API?
    // This is an optimization so that we avoid checking
    // for 'data' and 'readable' listeners in the hot path
    // inside push().
    this[kReading] = false
  }

  destroy (err) {
    if (this.destroyed) {
      // Node < 16
      return this
    }

    if (!err && !this._readableState.endEmitted) {
      err = new RequestAbortedError()
    }

    if (err) {
      this[kAbort]()
    }

    return super.destroy(err)
  }

  emit (ev, ...args) {
    if (ev === 'data') {
      // Node < 16.7
      this._readableState.dataEmitted = true
    } else if (ev === 'error') {
      // Node < 16
      this._readableState.errorEmitted = true
    }
    return super.emit(ev, ...args)
  }

  on (ev, ...args) {
    if (ev === 'data' || ev === 'readable') {
      this[kReading] = true
    }
    return super.on(ev, ...args)
  }

  addListener (ev, ...args) {
    return this.on(ev, ...args)
  }

  off (ev, ...args) {
    const ret = super.off(ev, ...args)
    if (ev === 'data' || ev === 'readable') {
      this[kReading] = (
        this.listenerCount('data') > 0 ||
        this.listenerCount('readable') > 0
      )
    }
    return ret
  }

  removeListener (ev, ...args) {
    return this.off(ev, ...args)
  }

  push (chunk) {
    if (this[kConsume] && chunk !== null && this.readableLength === 0) {
      consumePush(this[kConsume], chunk)
      return this[kReading] ? super.push(chunk) : true
    }
    return super.push(chunk)
  }

  // https://fetch.spec.whatwg.org/#dom-body-text
  async text () {
    return consume(this, 'text')
  }

  // https://fetch.spec.whatwg.org/#dom-body-json
  async json () {
    return consume(this, 'json')
  }

  // https://fetch.spec.whatwg.org/#dom-body-blob
  async blob () {
    return consume(this, 'blob')
  }

  // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
  async arrayBuffer () {
    return consume(this, 'arrayBuffer')
  }

  // https://fetch.spec.whatwg.org/#dom-body-formdata
  async formData () {
    // TODO: Implement.
    throw new NotSupportedError()
  }

  // https://fetch.spec.whatwg.org/#dom-body-bodyused
  get bodyUsed () {
    return util.isDisturbed(this)
  }

  // https://fetch.spec.whatwg.org/#dom-body-body
  get body () {
    if (!this[kBody]) {
      this[kBody] = ReadableStreamFrom(this)
      if (this[kConsume]) {
        // TODO: Is this the best way to force a lock?
        this[kBody].getReader() // Ensure stream is locked.
        assert(this[kBody].locked)
      }
    }
    return this[kBody]
  }

  dump (opts) {
    let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144
    const signal = opts && opts.signal

    if (signal) {
      try {
        if (typeof signal !== 'object' || !('aborted' in signal)) {
          throw new InvalidArgumentError('signal must be an AbortSignal')
        }
        util.throwIfAborted(signal)
      } catch (err) {
        return Promise.reject(err)
      }
    }

    if (this.closed) {
      return Promise.resolve(null)
    }

    return new Promise((resolve, reject) => {
      const signalListenerCleanup = signal
        ? util.addAbortListener(signal, () => {
          this.destroy()
        })
        : noop

      this
        .on('close', function () {
          signalListenerCleanup()
          if (signal && signal.aborted) {
            reject(signal.reason || Object.assign(new Error('The operation was aborted'), { name: 'AbortError' }))
          } else {
            resolve(null)
          }
        })
        .on('error', noop)
        .on('data', function (chunk) {
          limit -= chunk.length
          if (limit <= 0) {
            this.destroy()
          }
        })
        .resume()
    })
  }
}

// https://streams.spec.whatwg.org/#readablestream-locked
function isLocked (self) {
  // Consume is an implicit lock.
  return (self[kBody] && self[kBody].locked === true) || self[kConsume]
}

// https://fetch.spec.whatwg.org/#body-unusable
function isUnusable (self) {
  return util.isDisturbed(self) || isLocked(self)
}

async function consume (stream, type) {
  if (isUnusable(stream)) {
    throw new TypeError('unusable')
  }

  assert(!stream[kConsume])

  return new Promise((resolve, reject) => {
    stream[kConsume] = {
      type,
      stream,
      resolve,
      reject,
      length: 0,
      body: []
    }

    stream
      .on('error', function (err) {
        consumeFinish(this[kConsume], err)
      })
      .on('close', function () {
        if (this[kConsume].body !== null) {
          consumeFinish(this[kConsume], new RequestAbortedError())
        }
      })

    process.nextTick(consumeStart, stream[kConsume])
  })
}

function consumeStart (consume) {
  if (consume.body === null) {
    return
  }

  const { _readableState: state } = consume.stream

  for (const chunk of state.buffer) {
    consumePush(consume, chunk)
  }

  if (state.endEmitted) {
    consumeEnd(this[kConsume])
  } else {
    consume.stream.on('end', function () {
      consumeEnd(this[kConsume])
    })
  }

  consume.stream.resume()

  while (consume.stream.read() != null) {
    // Loop
  }
}

function consumeEnd (consume) {
  const { type, body, resolve, stream, length } = consume

  try {
    if (type === 'text') {
      resolve(toUSVString(Buffer.concat(body)))
    } else if (type === 'json') {
      resolve(JSON.parse(Buffer.concat(body)))
    } else if (type === 'arrayBuffer') {
      const dst = new Uint8Array(length)

      let pos = 0
      for (const buf of body) {
        dst.set(buf, pos)
        pos += buf.byteLength
      }

      resolve(dst.buffer)
    } else if (type === 'blob') {
      if (!Blob) {
        Blob = (__nccwpck_require__(181).Blob)
      }
      resolve(new Blob(body, { type: stream[kContentType] }))
    }

    consumeFinish(consume)
  } catch (err) {
    stream.destroy(err)
  }
}

function consumePush (consume, chunk) {
  consume.length += chunk.length
  consume.body.push(chunk)
}

function consumeFinish (consume, err) {
  if (consume.body === null) {
    return
  }

  if (err) {
    consume.reject(err)
  } else {
    consume.resolve()
  }

  consume.type = null
  consume.stream = null
  consume.resolve = null
  consume.reject = null
  consume.length = 0
  consume.body = null
}


/***/ }),

/***/ 757:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(2613)
const {
  ResponseStatusCodeError
} = __nccwpck_require__(1581)
const { toUSVString } = __nccwpck_require__(4606)

async function getResolveErrorBodyCallback ({ callback, body, contentType, statusCode, statusMessage, headers }) {
  assert(body)

  let chunks = []
  let limit = 0

  for await (const chunk of body) {
    chunks.push(chunk)
    limit += chunk.length
    if (limit > 128 * 1024) {
      chunks = null
      break
    }
  }

  if (statusCode === 204 || !contentType || !chunks) {
    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))
    return
  }

  try {
    if (contentType.startsWith('application/json')) {
      const payload = JSON.parse(toUSVString(Buffer.concat(chunks)))
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))
      return
    }

    if (contentType.startsWith('text/')) {
      const payload = toUSVString(Buffer.concat(chunks))
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))
      return
    }
  } catch (err) {
    // Process in a fallback if error
  }

  process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))
}

module.exports = { getResolveErrorBodyCallback }


/***/ }),

/***/ 3375:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  BalancedPoolMissingUpstreamError,
  InvalidArgumentError
} = __nccwpck_require__(1581)
const {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kRemoveClient,
  kGetDispatcher
} = __nccwpck_require__(9974)
const Pool = __nccwpck_require__(6086)
const { kUrl, kInterceptors } = __nccwpck_require__(5773)
const { parseOrigin } = __nccwpck_require__(4606)
const kFactory = Symbol('factory')

const kOptions = Symbol('options')
const kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor')
const kCurrentWeight = Symbol('kCurrentWeight')
const kIndex = Symbol('kIndex')
const kWeight = Symbol('kWeight')
const kMaxWeightPerServer = Symbol('kMaxWeightPerServer')
const kErrorPenalty = Symbol('kErrorPenalty')

function getGreatestCommonDivisor (a, b) {
  if (b === 0) return a
  return getGreatestCommonDivisor(b, a % b)
}

function defaultFactory (origin, opts) {
  return new Pool(origin, opts)
}

class BalancedPool extends PoolBase {
  constructor (upstreams = [], { factory = defaultFactory, ...opts } = {}) {
    super()

    this[kOptions] = opts
    this[kIndex] = -1
    this[kCurrentWeight] = 0

    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100
    this[kErrorPenalty] = this[kOptions].errorPenalty || 15

    if (!Array.isArray(upstreams)) {
      upstreams = [upstreams]
    }

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool)
      ? opts.interceptors.BalancedPool
      : []
    this[kFactory] = factory

    for (const upstream of upstreams) {
      this.addUpstream(upstream)
    }
    this._updateBalancedPoolStats()
  }

  addUpstream (upstream) {
    const upstreamOrigin = parseOrigin(upstream).origin

    if (this[kClients].find((pool) => (
      pool[kUrl].origin === upstreamOrigin &&
      pool.closed !== true &&
      pool.destroyed !== true
    ))) {
      return this
    }
    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]))

    this[kAddClient](pool)
    pool.on('connect', () => {
      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty])
    })

    pool.on('connectionError', () => {
      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])
      this._updateBalancedPoolStats()
    })

    pool.on('disconnect', (...args) => {
      const err = args[2]
      if (err && err.code === 'UND_ERR_SOCKET') {
        // decrease the weight of the pool.
        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])
        this._updateBalancedPoolStats()
      }
    })

    for (const client of this[kClients]) {
      client[kWeight] = this[kMaxWeightPerServer]
    }

    this._updateBalancedPoolStats()

    return this
  }

  _updateBalancedPoolStats () {
    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0)
  }

  removeUpstream (upstream) {
    const upstreamOrigin = parseOrigin(upstream).origin

    const pool = this[kClients].find((pool) => (
      pool[kUrl].origin === upstreamOrigin &&
      pool.closed !== true &&
      pool.destroyed !== true
    ))

    if (pool) {
      this[kRemoveClient](pool)
    }

    return this
  }

  get upstreams () {
    return this[kClients]
      .filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true)
      .map((p) => p[kUrl].origin)
  }

  [kGetDispatcher] () {
    // We validate that pools is greater than 0,
    // otherwise we would have to wait until an upstream
    // is added, which might never happen.
    if (this[kClients].length === 0) {
      throw new BalancedPoolMissingUpstreamError()
    }

    const dispatcher = this[kClients].find(dispatcher => (
      !dispatcher[kNeedDrain] &&
      dispatcher.closed !== true &&
      dispatcher.destroyed !== true
    ))

    if (!dispatcher) {
      return
    }

    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true)

    if (allClientsBusy) {
      return
    }

    let counter = 0

    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain])

    while (counter++ < this[kClients].length) {
      this[kIndex] = (this[kIndex] + 1) % this[kClients].length
      const pool = this[kClients][this[kIndex]]

      // find pool index with the largest weight
      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
        maxWeightIndex = this[kIndex]
      }

      // decrease the current weight every `this[kClients].length`.
      if (this[kIndex] === 0) {
        // Set the current weight to the next lower weight.
        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor]

        if (this[kCurrentWeight] <= 0) {
          this[kCurrentWeight] = this[kMaxWeightPerServer]
        }
      }
      if (pool[kWeight] >= this[kCurrentWeight] && (!pool[kNeedDrain])) {
        return pool
      }
    }

    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight]
    this[kIndex] = maxWeightIndex
    return this[kClients][maxWeightIndex]
  }
}

module.exports = BalancedPool


/***/ }),

/***/ 3761:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kConstruct } = __nccwpck_require__(5914)
const { urlEquals, fieldValues: getFieldValues } = __nccwpck_require__(3175)
const { kEnumerableProperty, isDisturbed } = __nccwpck_require__(4606)
const { kHeadersList } = __nccwpck_require__(5773)
const { webidl } = __nccwpck_require__(3476)
const { Response, cloneResponse } = __nccwpck_require__(6062)
const { Request } = __nccwpck_require__(2204)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(1088)
const { fetching } = __nccwpck_require__(9401)
const { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = __nccwpck_require__(8961)
const assert = __nccwpck_require__(2613)
const { getGlobalDispatcher } = __nccwpck_require__(9456)

/**
 * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
 * @typedef {Object} CacheBatchOperation
 * @property {'delete' | 'put'} type
 * @property {any} request
 * @property {any} response
 * @property {import('../../types/cache').CacheQueryOptions} options
 */

/**
 * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
 * @typedef {[any, any][]} requestResponseList
 */

class Cache {
  /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
   * @type {requestResponseList}
   */
  #relevantRequestResponseList

  constructor () {
    if (arguments[0] !== kConstruct) {
      webidl.illegalConstructor()
    }

    this.#relevantRequestResponseList = arguments[1]
  }

  async match (request, options = {}) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.match' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    const p = await this.matchAll(request, options)

    if (p.length === 0) {
      return
    }

    return p[0]
  }

  async matchAll (request = undefined, options = {}) {
    webidl.brandCheck(this, Cache)

    if (request !== undefined) request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    // 1.
    let r = null

    // 2.
    if (request !== undefined) {
      if (request instanceof Request) {
        // 2.1.1
        r = request[kState]

        // 2.1.2
        if (r.method !== 'GET' && !options.ignoreMethod) {
          return []
        }
      } else if (typeof request === 'string') {
        // 2.2.1
        r = new Request(request)[kState]
      }
    }

    // 5.
    // 5.1
    const responses = []

    // 5.2
    if (request === undefined) {
      // 5.2.1
      for (const requestResponse of this.#relevantRequestResponseList) {
        responses.push(requestResponse[1])
      }
    } else { // 5.3
      // 5.3.1
      const requestResponses = this.#queryCache(r, options)

      // 5.3.2
      for (const requestResponse of requestResponses) {
        responses.push(requestResponse[1])
      }
    }

    // 5.4
    // We don't implement CORs so we don't need to loop over the responses, yay!

    // 5.5.1
    const responseList = []

    // 5.5.2
    for (const response of responses) {
      // 5.5.2.1
      const responseObject = new Response(response.body?.source ?? null)
      const body = responseObject[kState].body
      responseObject[kState] = response
      responseObject[kState].body = body
      responseObject[kHeaders][kHeadersList] = response.headersList
      responseObject[kHeaders][kGuard] = 'immutable'

      responseList.push(responseObject)
    }

    // 6.
    return Object.freeze(responseList)
  }

  async add (request) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.add' })

    request = webidl.converters.RequestInfo(request)

    // 1.
    const requests = [request]

    // 2.
    const responseArrayPromise = this.addAll(requests)

    // 3.
    return await responseArrayPromise
  }

  async addAll (requests) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.addAll' })

    requests = webidl.converters['sequence<RequestInfo>'](requests)

    // 1.
    const responsePromises = []

    // 2.
    const requestList = []

    // 3.
    for (const request of requests) {
      if (typeof request === 'string') {
        continue
      }

      // 3.1
      const r = request[kState]

      // 3.2
      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {
        throw webidl.errors.exception({
          header: 'Cache.addAll',
          message: 'Expected http/s scheme when method is not GET.'
        })
      }
    }

    // 4.
    /** @type {ReturnType<typeof fetching>[]} */
    const fetchControllers = []

    // 5.
    for (const request of requests) {
      // 5.1
      const r = new Request(request)[kState]

      // 5.2
      if (!urlIsHttpHttpsScheme(r.url)) {
        throw webidl.errors.exception({
          header: 'Cache.addAll',
          message: 'Expected http/s scheme.'
        })
      }

      // 5.4
      r.initiator = 'fetch'
      r.destination = 'subresource'

      // 5.5
      requestList.push(r)

      // 5.6
      const responsePromise = createDeferredPromise()

      // 5.7
      fetchControllers.push(fetching({
        request: r,
        dispatcher: getGlobalDispatcher(),
        processResponse (response) {
          // 1.
          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {
            responsePromise.reject(webidl.errors.exception({
              header: 'Cache.addAll',
              message: 'Received an invalid status code or the request failed.'
            }))
          } else if (response.headersList.contains('vary')) { // 2.
            // 2.1
            const fieldValues = getFieldValues(response.headersList.get('vary'))

            // 2.2
            for (const fieldValue of fieldValues) {
              // 2.2.1
              if (fieldValue === '*') {
                responsePromise.reject(webidl.errors.exception({
                  header: 'Cache.addAll',
                  message: 'invalid vary field value'
                }))

                for (const controller of fetchControllers) {
                  controller.abort()
                }

                return
              }
            }
          }
        },
        processResponseEndOfBody (response) {
          // 1.
          if (response.aborted) {
            responsePromise.reject(new DOMException('aborted', 'AbortError'))
            return
          }

          // 2.
          responsePromise.resolve(response)
        }
      }))

      // 5.8
      responsePromises.push(responsePromise.promise)
    }

    // 6.
    const p = Promise.all(responsePromises)

    // 7.
    const responses = await p

    // 7.1
    const operations = []

    // 7.2
    let index = 0

    // 7.3
    for (const response of responses) {
      // 7.3.1
      /** @type {CacheBatchOperation} */
      const operation = {
        type: 'put', // 7.3.2
        request: requestList[index], // 7.3.3
        response // 7.3.4
      }

      operations.push(operation) // 7.3.5

      index++ // 7.3.6
    }

    // 7.5
    const cacheJobPromise = createDeferredPromise()

    // 7.6.1
    let errorData = null

    // 7.6.2
    try {
      this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    // 7.6.3
    queueMicrotask(() => {
      // 7.6.3.1
      if (errorData === null) {
        cacheJobPromise.resolve(undefined)
      } else {
        // 7.6.3.2
        cacheJobPromise.reject(errorData)
      }
    })

    // 7.7
    return cacheJobPromise.promise
  }

  async put (request, response) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 2, { header: 'Cache.put' })

    request = webidl.converters.RequestInfo(request)
    response = webidl.converters.Response(response)

    // 1.
    let innerRequest = null

    // 2.
    if (request instanceof Request) {
      innerRequest = request[kState]
    } else { // 3.
      innerRequest = new Request(request)[kState]
    }

    // 4.
    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Expected an http/s scheme when method is not GET'
      })
    }

    // 5.
    const innerResponse = response[kState]

    // 6.
    if (innerResponse.status === 206) {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Got 206 status'
      })
    }

    // 7.
    if (innerResponse.headersList.contains('vary')) {
      // 7.1.
      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'))

      // 7.2.
      for (const fieldValue of fieldValues) {
        // 7.2.1
        if (fieldValue === '*') {
          throw webidl.errors.exception({
            header: 'Cache.put',
            message: 'Got * vary field value'
          })
        }
      }
    }

    // 8.
    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Response body is locked or disturbed'
      })
    }

    // 9.
    const clonedResponse = cloneResponse(innerResponse)

    // 10.
    const bodyReadPromise = createDeferredPromise()

    // 11.
    if (innerResponse.body != null) {
      // 11.1
      const stream = innerResponse.body.stream

      // 11.2
      const reader = stream.getReader()

      // 11.3
      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject)
    } else {
      bodyReadPromise.resolve(undefined)
    }

    // 12.
    /** @type {CacheBatchOperation[]} */
    const operations = []

    // 13.
    /** @type {CacheBatchOperation} */
    const operation = {
      type: 'put', // 14.
      request: innerRequest, // 15.
      response: clonedResponse // 16.
    }

    // 17.
    operations.push(operation)

    // 19.
    const bytes = await bodyReadPromise.promise

    if (clonedResponse.body != null) {
      clonedResponse.body.source = bytes
    }

    // 19.1
    const cacheJobPromise = createDeferredPromise()

    // 19.2.1
    let errorData = null

    // 19.2.2
    try {
      this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    // 19.2.3
    queueMicrotask(() => {
      // 19.2.3.1
      if (errorData === null) {
        cacheJobPromise.resolve()
      } else { // 19.2.3.2
        cacheJobPromise.reject(errorData)
      }
    })

    return cacheJobPromise.promise
  }

  async delete (request, options = {}) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.delete' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    /**
     * @type {Request}
     */
    let r = null

    if (request instanceof Request) {
      r = request[kState]

      if (r.method !== 'GET' && !options.ignoreMethod) {
        return false
      }
    } else {
      assert(typeof request === 'string')

      r = new Request(request)[kState]
    }

    /** @type {CacheBatchOperation[]} */
    const operations = []

    /** @type {CacheBatchOperation} */
    const operation = {
      type: 'delete',
      request: r,
      options
    }

    operations.push(operation)

    const cacheJobPromise = createDeferredPromise()

    let errorData = null
    let requestResponses

    try {
      requestResponses = this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    queueMicrotask(() => {
      if (errorData === null) {
        cacheJobPromise.resolve(!!requestResponses?.length)
      } else {
        cacheJobPromise.reject(errorData)
      }
    })

    return cacheJobPromise.promise
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
   * @param {any} request
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @returns {readonly Request[]}
   */
  async keys (request = undefined, options = {}) {
    webidl.brandCheck(this, Cache)

    if (request !== undefined) request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    // 1.
    let r = null

    // 2.
    if (request !== undefined) {
      // 2.1
      if (request instanceof Request) {
        // 2.1.1
        r = request[kState]

        // 2.1.2
        if (r.method !== 'GET' && !options.ignoreMethod) {
          return []
        }
      } else if (typeof request === 'string') { // 2.2
        r = new Request(request)[kState]
      }
    }

    // 4.
    const promise = createDeferredPromise()

    // 5.
    // 5.1
    const requests = []

    // 5.2
    if (request === undefined) {
      // 5.2.1
      for (const requestResponse of this.#relevantRequestResponseList) {
        // 5.2.1.1
        requests.push(requestResponse[0])
      }
    } else { // 5.3
      // 5.3.1
      const requestResponses = this.#queryCache(r, options)

      // 5.3.2
      for (const requestResponse of requestResponses) {
        // 5.3.2.1
        requests.push(requestResponse[0])
      }
    }

    // 5.4
    queueMicrotask(() => {
      // 5.4.1
      const requestList = []

      // 5.4.2
      for (const request of requests) {
        const requestObject = new Request('https://a')
        requestObject[kState] = request
        requestObject[kHeaders][kHeadersList] = request.headersList
        requestObject[kHeaders][kGuard] = 'immutable'
        requestObject[kRealm] = request.client

        // 5.4.2.1
        requestList.push(requestObject)
      }

      // 5.4.3
      promise.resolve(Object.freeze(requestList))
    })

    return promise.promise
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
   * @param {CacheBatchOperation[]} operations
   * @returns {requestResponseList}
   */
  #batchCacheOperations (operations) {
    // 1.
    const cache = this.#relevantRequestResponseList

    // 2.
    const backupCache = [...cache]

    // 3.
    const addedItems = []

    // 4.1
    const resultList = []

    try {
      // 4.2
      for (const operation of operations) {
        // 4.2.1
        if (operation.type !== 'delete' && operation.type !== 'put') {
          throw webidl.errors.exception({
            header: 'Cache.#batchCacheOperations',
            message: 'operation type does not match "delete" or "put"'
          })
        }

        // 4.2.2
        if (operation.type === 'delete' && operation.response != null) {
          throw webidl.errors.exception({
            header: 'Cache.#batchCacheOperations',
            message: 'delete operation should not have an associated response'
          })
        }

        // 4.2.3
        if (this.#queryCache(operation.request, operation.options, addedItems).length) {
          throw new DOMException('???', 'InvalidStateError')
        }

        // 4.2.4
        let requestResponses

        // 4.2.5
        if (operation.type === 'delete') {
          // 4.2.5.1
          requestResponses = this.#queryCache(operation.request, operation.options)

          // TODO: the spec is wrong, this is needed to pass WPTs
          if (requestResponses.length === 0) {
            return []
          }

          // 4.2.5.2
          for (const requestResponse of requestResponses) {
            const idx = cache.indexOf(requestResponse)
            assert(idx !== -1)

            // 4.2.5.2.1
            cache.splice(idx, 1)
          }
        } else if (operation.type === 'put') { // 4.2.6
          // 4.2.6.1
          if (operation.response == null) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'put operation should have an associated response'
            })
          }

          // 4.2.6.2
          const r = operation.request

          // 4.2.6.3
          if (!urlIsHttpHttpsScheme(r.url)) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'expected http or https scheme'
            })
          }

          // 4.2.6.4
          if (r.method !== 'GET') {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'not get method'
            })
          }

          // 4.2.6.5
          if (operation.options != null) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'options must not be defined'
            })
          }

          // 4.2.6.6
          requestResponses = this.#queryCache(operation.request)

          // 4.2.6.7
          for (const requestResponse of requestResponses) {
            const idx = cache.indexOf(requestResponse)
            assert(idx !== -1)

            // 4.2.6.7.1
            cache.splice(idx, 1)
          }

          // 4.2.6.8
          cache.push([operation.request, operation.response])

          // 4.2.6.10
          addedItems.push([operation.request, operation.response])
        }

        // 4.2.7
        resultList.push([operation.request, operation.response])
      }

      // 4.3
      return resultList
    } catch (e) { // 5.
      // 5.1
      this.#relevantRequestResponseList.length = 0

      // 5.2
      this.#relevantRequestResponseList = backupCache

      // 5.3
      throw e
    }
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#query-cache
   * @param {any} requestQuery
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @param {requestResponseList} targetStorage
   * @returns {requestResponseList}
   */
  #queryCache (requestQuery, options, targetStorage) {
    /** @type {requestResponseList} */
    const resultList = []

    const storage = targetStorage ?? this.#relevantRequestResponseList

    for (const requestResponse of storage) {
      const [cachedRequest, cachedResponse] = requestResponse
      if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
        resultList.push(requestResponse)
      }
    }

    return resultList
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
   * @param {any} requestQuery
   * @param {any} request
   * @param {any | null} response
   * @param {import('../../types/cache').CacheQueryOptions | undefined} options
   * @returns {boolean}
   */
  #requestMatchesCachedItem (requestQuery, request, response = null, options) {
    // if (options?.ignoreMethod === false && request.method === 'GET') {
    //   return false
    // }

    const queryURL = new URL(requestQuery.url)

    const cachedURL = new URL(request.url)

    if (options?.ignoreSearch) {
      cachedURL.search = ''

      queryURL.search = ''
    }

    if (!urlEquals(queryURL, cachedURL, true)) {
      return false
    }

    if (
      response == null ||
      options?.ignoreVary ||
      !response.headersList.contains('vary')
    ) {
      return true
    }

    const fieldValues = getFieldValues(response.headersList.get('vary'))

    for (const fieldValue of fieldValues) {
      if (fieldValue === '*') {
        return false
      }

      const requestValue = request.headersList.get(fieldValue)
      const queryValue = requestQuery.headersList.get(fieldValue)

      // If one has the header and the other doesn't, or one has
      // a different value than the other, return false
      if (requestValue !== queryValue) {
        return false
      }
    }

    return true
  }
}

Object.defineProperties(Cache.prototype, {
  [Symbol.toStringTag]: {
    value: 'Cache',
    configurable: true
  },
  match: kEnumerableProperty,
  matchAll: kEnumerableProperty,
  add: kEnumerableProperty,
  addAll: kEnumerableProperty,
  put: kEnumerableProperty,
  delete: kEnumerableProperty,
  keys: kEnumerableProperty
})

const cacheQueryOptionConverters = [
  {
    key: 'ignoreSearch',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'ignoreMethod',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'ignoreVary',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
]

webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters)

webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
  ...cacheQueryOptionConverters,
  {
    key: 'cacheName',
    converter: webidl.converters.DOMString
  }
])

webidl.converters.Response = webidl.interfaceConverter(Response)

webidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(
  webidl.converters.RequestInfo
)

module.exports = {
  Cache
}


/***/ }),

/***/ 8400:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kConstruct } = __nccwpck_require__(5914)
const { Cache } = __nccwpck_require__(3761)
const { webidl } = __nccwpck_require__(3476)
const { kEnumerableProperty } = __nccwpck_require__(4606)

class CacheStorage {
  /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
   * @type {Map<string, import('./cache').requestResponseList}
   */
  #caches = new Map()

  constructor () {
    if (arguments[0] !== kConstruct) {
      webidl.illegalConstructor()
    }
  }

  async match (request, options = {}) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.match' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.MultiCacheQueryOptions(options)

    // 1.
    if (options.cacheName != null) {
      // 1.1.1.1
      if (this.#caches.has(options.cacheName)) {
        // 1.1.1.1.1
        const cacheList = this.#caches.get(options.cacheName)
        const cache = new Cache(kConstruct, cacheList)

        return await cache.match(request, options)
      }
    } else { // 2.
      // 2.2
      for (const cacheList of this.#caches.values()) {
        const cache = new Cache(kConstruct, cacheList)

        // 2.2.1.2
        const response = await cache.match(request, options)

        if (response !== undefined) {
          return response
        }
      }
    }
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */
  async has (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.has' })

    cacheName = webidl.converters.DOMString(cacheName)

    // 2.1.1
    // 2.2
    return this.#caches.has(cacheName)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
   * @param {string} cacheName
   * @returns {Promise<Cache>}
   */
  async open (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.open' })

    cacheName = webidl.converters.DOMString(cacheName)

    // 2.1
    if (this.#caches.has(cacheName)) {
      // await caches.open('v1') !== await caches.open('v1')

      // 2.1.1
      const cache = this.#caches.get(cacheName)

      // 2.1.1.1
      return new Cache(kConstruct, cache)
    }

    // 2.2
    const cache = []

    // 2.3
    this.#caches.set(cacheName, cache)

    // 2.4
    return new Cache(kConstruct, cache)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */
  async delete (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.delete' })

    cacheName = webidl.converters.DOMString(cacheName)

    return this.#caches.delete(cacheName)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
   * @returns {string[]}
   */
  async keys () {
    webidl.brandCheck(this, CacheStorage)

    // 2.1
    const keys = this.#caches.keys()

    // 2.2
    return [...keys]
  }
}

Object.defineProperties(CacheStorage.prototype, {
  [Symbol.toStringTag]: {
    value: 'CacheStorage',
    configurable: true
  },
  match: kEnumerableProperty,
  has: kEnumerableProperty,
  open: kEnumerableProperty,
  delete: kEnumerableProperty,
  keys: kEnumerableProperty
})

module.exports = {
  CacheStorage
}


/***/ }),

/***/ 5914:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


module.exports = {
  kConstruct: (__nccwpck_require__(5773).kConstruct)
}


/***/ }),

/***/ 3175:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const assert = __nccwpck_require__(2613)
const { URLSerializer } = __nccwpck_require__(6960)
const { isValidHeaderName } = __nccwpck_require__(8961)

/**
 * @see https://url.spec.whatwg.org/#concept-url-equals
 * @param {URL} A
 * @param {URL} B
 * @param {boolean | undefined} excludeFragment
 * @returns {boolean}
 */
function urlEquals (A, B, excludeFragment = false) {
  const serializedA = URLSerializer(A, excludeFragment)

  const serializedB = URLSerializer(B, excludeFragment)

  return serializedA === serializedB
}

/**
 * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
 * @param {string} header
 */
function fieldValues (header) {
  assert(header !== null)

  const values = []

  for (let value of header.split(',')) {
    value = value.trim()

    if (!value.length) {
      continue
    } else if (!isValidHeaderName(value)) {
      continue
    }

    values.push(value)
  }

  return values
}

module.exports = {
  urlEquals,
  fieldValues
}


/***/ }),

/***/ 439:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// @ts-check



/* global WebAssembly */

const assert = __nccwpck_require__(2613)
const net = __nccwpck_require__(9278)
const http = __nccwpck_require__(8611)
const { pipeline } = __nccwpck_require__(2203)
const util = __nccwpck_require__(4606)
const timers = __nccwpck_require__(2374)
const Request = __nccwpck_require__(3505)
const DispatcherBase = __nccwpck_require__(9787)
const {
  RequestContentLengthMismatchError,
  ResponseContentLengthMismatchError,
  InvalidArgumentError,
  RequestAbortedError,
  HeadersTimeoutError,
  HeadersOverflowError,
  SocketError,
  InformationalError,
  BodyTimeoutError,
  HTTPParserError,
  ResponseExceededMaxSizeError,
  ClientDestroyedError
} = __nccwpck_require__(1581)
const buildConnector = __nccwpck_require__(110)
const {
  kUrl,
  kReset,
  kServerName,
  kClient,
  kBusy,
  kParser,
  kConnect,
  kBlocking,
  kResuming,
  kRunning,
  kPending,
  kSize,
  kWriting,
  kQueue,
  kConnected,
  kConnecting,
  kNeedDrain,
  kNoRef,
  kKeepAliveDefaultTimeout,
  kHostHeader,
  kPendingIdx,
  kRunningIdx,
  kError,
  kPipelining,
  kSocket,
  kKeepAliveTimeoutValue,
  kMaxHeadersSize,
  kKeepAliveMaxTimeout,
  kKeepAliveTimeoutThreshold,
  kHeadersTimeout,
  kBodyTimeout,
  kStrictContentLength,
  kConnector,
  kMaxRedirections,
  kMaxRequests,
  kCounter,
  kClose,
  kDestroy,
  kDispatch,
  kInterceptors,
  kLocalAddress,
  kMaxResponseSize,
  kHTTPConnVersion,
  // HTTP2
  kHost,
  kHTTP2Session,
  kHTTP2SessionState,
  kHTTP2BuildRequest,
  kHTTP2CopyHeaders,
  kHTTP1BuildRequest
} = __nccwpck_require__(5773)

/** @type {import('http2')} */
let http2
try {
  http2 = __nccwpck_require__(5675)
} catch {
  // @ts-ignore
  http2 = { constants: {} }
}

const {
  constants: {
    HTTP2_HEADER_AUTHORITY,
    HTTP2_HEADER_METHOD,
    HTTP2_HEADER_PATH,
    HTTP2_HEADER_SCHEME,
    HTTP2_HEADER_CONTENT_LENGTH,
    HTTP2_HEADER_EXPECT,
    HTTP2_HEADER_STATUS
  }
} = http2

// Experimental
let h2ExperimentalWarned = false

const FastBuffer = Buffer[Symbol.species]

const kClosedResolve = Symbol('kClosedResolve')

const channels = {}

try {
  const diagnosticsChannel = __nccwpck_require__(1637)
  channels.sendHeaders = diagnosticsChannel.channel('undici:client:sendHeaders')
  channels.beforeConnect = diagnosticsChannel.channel('undici:client:beforeConnect')
  channels.connectError = diagnosticsChannel.channel('undici:client:connectError')
  channels.connected = diagnosticsChannel.channel('undici:client:connected')
} catch {
  channels.sendHeaders = { hasSubscribers: false }
  channels.beforeConnect = { hasSubscribers: false }
  channels.connectError = { hasSubscribers: false }
  channels.connected = { hasSubscribers: false }
}

/**
 * @type {import('../types/client').default}
 */
class Client extends DispatcherBase {
  /**
   *
   * @param {string|URL} url
   * @param {import('../types/client').Client.Options} options
   */
  constructor (url, {
    interceptors,
    maxHeaderSize,
    headersTimeout,
    socketTimeout,
    requestTimeout,
    connectTimeout,
    bodyTimeout,
    idleTimeout,
    keepAlive,
    keepAliveTimeout,
    maxKeepAliveTimeout,
    keepAliveMaxTimeout,
    keepAliveTimeoutThreshold,
    socketPath,
    pipelining,
    tls,
    strictContentLength,
    maxCachedSessions,
    maxRedirections,
    connect,
    maxRequestsPerClient,
    localAddress,
    maxResponseSize,
    autoSelectFamily,
    autoSelectFamilyAttemptTimeout,
    // h2
    allowH2,
    maxConcurrentStreams
  } = {}) {
    super()

    if (keepAlive !== undefined) {
      throw new InvalidArgumentError('unsupported keepAlive, use pipelining=0 instead')
    }

    if (socketTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported socketTimeout, use headersTimeout & bodyTimeout instead')
    }

    if (requestTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported requestTimeout, use headersTimeout & bodyTimeout instead')
    }

    if (idleTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported idleTimeout, use keepAliveTimeout instead')
    }

    if (maxKeepAliveTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead')
    }

    if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
      throw new InvalidArgumentError('invalid maxHeaderSize')
    }

    if (socketPath != null && typeof socketPath !== 'string') {
      throw new InvalidArgumentError('invalid socketPath')
    }

    if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
      throw new InvalidArgumentError('invalid connectTimeout')
    }

    if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
      throw new InvalidArgumentError('invalid keepAliveTimeout')
    }

    if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
      throw new InvalidArgumentError('invalid keepAliveMaxTimeout')
    }

    if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
      throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold')
    }

    if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
      throw new InvalidArgumentError('headersTimeout must be a positive integer or zero')
    }

    if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
      throw new InvalidArgumentError('bodyTimeout must be a positive integer or zero')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
      throw new InvalidArgumentError('maxRequestsPerClient must be a positive number')
    }

    if (localAddress != null && (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)) {
      throw new InvalidArgumentError('localAddress must be valid string IP address')
    }

    if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
      throw new InvalidArgumentError('maxResponseSize must be a positive number')
    }

    if (
      autoSelectFamilyAttemptTimeout != null &&
      (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)
    ) {
      throw new InvalidArgumentError('autoSelectFamilyAttemptTimeout must be a positive number')
    }

    // h2
    if (allowH2 != null && typeof allowH2 !== 'boolean') {
      throw new InvalidArgumentError('allowH2 must be a valid boolean value')
    }

    if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)) {
      throw new InvalidArgumentError('maxConcurrentStreams must be a possitive integer, greater than 0')
    }

    if (typeof connect !== 'function') {
      connect = buildConnector({
        ...tls,
        maxCachedSessions,
        allowH2,
        socketPath,
        timeout: connectTimeout,
        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),
        ...connect
      })
    }

    this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client)
      ? interceptors.Client
      : [createRedirectInterceptor({ maxRedirections })]
    this[kUrl] = util.parseOrigin(url)
    this[kConnector] = connect
    this[kSocket] = null
    this[kPipelining] = pipelining != null ? pipelining : 1
    this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize
    this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout
    this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout
    this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold
    this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout]
    this[kServerName] = null
    this[kLocalAddress] = localAddress != null ? localAddress : null
    this[kResuming] = 0 // 0, idle, 1, scheduled, 2 resuming
    this[kNeedDrain] = 0 // 0, idle, 1, scheduled, 2 resuming
    this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}\r\n`
    this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3
    this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3
    this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength
    this[kMaxRedirections] = maxRedirections
    this[kMaxRequests] = maxRequestsPerClient
    this[kClosedResolve] = null
    this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1
    this[kHTTPConnVersion] = 'h1'

    // HTTP/2
    this[kHTTP2Session] = null
    this[kHTTP2SessionState] = !allowH2
      ? null
      : {
        // streams: null, // Fixed queue of streams - For future support of `push`
          openStreams: 0, // Keep track of them to decide wether or not unref the session
          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server
        }
    this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}`

    // kQueue is built up of 3 sections separated by
    // the kRunningIdx and kPendingIdx indices.
    // |   complete   |   running   |   pending   |
    //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length
    // kRunningIdx points to the first running element.
    // kPendingIdx points to the first pending element.
    // This implements a fast queue with an amortized
    // time of O(1).

    this[kQueue] = []
    this[kRunningIdx] = 0
    this[kPendingIdx] = 0
  }

  get pipelining () {
    return this[kPipelining]
  }

  set pipelining (value) {
    this[kPipelining] = value
    resume(this, true)
  }

  get [kPending] () {
    return this[kQueue].length - this[kPendingIdx]
  }

  get [kRunning] () {
    return this[kPendingIdx] - this[kRunningIdx]
  }

  get [kSize] () {
    return this[kQueue].length - this[kRunningIdx]
  }

  get [kConnected] () {
    return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed
  }

  get [kBusy] () {
    const socket = this[kSocket]
    return (
      (socket && (socket[kReset] || socket[kWriting] || socket[kBlocking])) ||
      (this[kSize] >= (this[kPipelining] || 1)) ||
      this[kPending] > 0
    )
  }

  /* istanbul ignore: only used for test */
  [kConnect] (cb) {
    connect(this)
    this.once('connect', cb)
  }

  [kDispatch] (opts, handler) {
    const origin = opts.origin || this[kUrl].origin

    const request = this[kHTTPConnVersion] === 'h2'
      ? Request[kHTTP2BuildRequest](origin, opts, handler)
      : Request[kHTTP1BuildRequest](origin, opts, handler)

    this[kQueue].push(request)
    if (this[kResuming]) {
      // Do nothing.
    } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {
      // Wait a tick in case stream/iterator is ended in the same tick.
      this[kResuming] = 1
      process.nextTick(resume, this)
    } else {
      resume(this, true)
    }

    if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
      this[kNeedDrain] = 2
    }

    return this[kNeedDrain] < 2
  }

  async [kClose] () {
    // TODO: for H2 we need to gracefully flush the remaining enqueued
    // request and close each stream.
    return new Promise((resolve) => {
      if (!this[kSize]) {
        resolve(null)
      } else {
        this[kClosedResolve] = resolve
      }
    })
  }

  async [kDestroy] (err) {
    return new Promise((resolve) => {
      const requests = this[kQueue].splice(this[kPendingIdx])
      for (let i = 0; i < requests.length; i++) {
        const request = requests[i]
        errorRequest(this, request, err)
      }

      const callback = () => {
        if (this[kClosedResolve]) {
          // TODO (fix): Should we error here with ClientDestroyedError?
          this[kClosedResolve]()
          this[kClosedResolve] = null
        }
        resolve()
      }

      if (this[kHTTP2Session] != null) {
        util.destroy(this[kHTTP2Session], err)
        this[kHTTP2Session] = null
        this[kHTTP2SessionState] = null
      }

      if (!this[kSocket]) {
        queueMicrotask(callback)
      } else {
        util.destroy(this[kSocket].on('close', callback), err)
      }

      resume(this)
    })
  }
}

function onHttp2SessionError (err) {
  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')

  this[kSocket][kError] = err

  onError(this[kClient], err)
}

function onHttp2FrameError (type, code, id) {
  const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`)

  if (id === 0) {
    this[kSocket][kError] = err
    onError(this[kClient], err)
  }
}

function onHttp2SessionEnd () {
  util.destroy(this, new SocketError('other side closed'))
  util.destroy(this[kSocket], new SocketError('other side closed'))
}

function onHTTP2GoAway (code) {
  const client = this[kClient]
  const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`)
  client[kSocket] = null
  client[kHTTP2Session] = null

  if (client.destroyed) {
    assert(this[kPending] === 0)

    // Fail entire queue.
    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(this, request, err)
    }
  } else if (client[kRunning] > 0) {
    // Fail head of pipeline.
    const request = client[kQueue][client[kRunningIdx]]
    client[kQueue][client[kRunningIdx]++] = null

    errorRequest(client, request, err)
  }

  client[kPendingIdx] = client[kRunningIdx]

  assert(client[kRunning] === 0)

  client.emit('disconnect',
    client[kUrl],
    [client],
    err
  )

  resume(client)
}

const constants = __nccwpck_require__(862)
const createRedirectInterceptor = __nccwpck_require__(9509)
const EMPTY_BUF = Buffer.alloc(0)

async function lazyllhttp () {
  const llhttpWasmData = process.env.JEST_WORKER_ID ? __nccwpck_require__(8484) : undefined

  let mod
  try {
    mod = await WebAssembly.compile(Buffer.from(__nccwpck_require__(652), 'base64'))
  } catch (e) {
    /* istanbul ignore next */

    // We could check if the error was caused by the simd option not
    // being enabled, but the occurring of this other error
    // * https://github.com/emscripten-core/emscripten/issues/11495
    // got me to remove that check to avoid breaking Node 12.
    mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || __nccwpck_require__(8484), 'base64'))
  }

  return await WebAssembly.instantiate(mod, {
    env: {
      /* eslint-disable camelcase */

      wasm_on_url: (p, at, len) => {
        /* istanbul ignore next */
        return 0
      },
      wasm_on_status: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_message_begin: (p) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onMessageBegin() || 0
      },
      wasm_on_header_field: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_header_value: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0
      },
      wasm_on_body: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_message_complete: (p) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onMessageComplete() || 0
      }

      /* eslint-enable camelcase */
    }
  })
}

let llhttpInstance = null
let llhttpPromise = lazyllhttp()
llhttpPromise.catch()

let currentParser = null
let currentBufferRef = null
let currentBufferSize = 0
let currentBufferPtr = null

const TIMEOUT_HEADERS = 1
const TIMEOUT_BODY = 2
const TIMEOUT_IDLE = 3

class Parser {
  constructor (client, socket, { exports }) {
    assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0)

    this.llhttp = exports
    this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE)
    this.client = client
    this.socket = socket
    this.timeout = null
    this.timeoutValue = null
    this.timeoutType = null
    this.statusCode = null
    this.statusText = ''
    this.upgrade = false
    this.headers = []
    this.headersSize = 0
    this.headersMaxSize = client[kMaxHeadersSize]
    this.shouldKeepAlive = false
    this.paused = false
    this.resume = this.resume.bind(this)

    this.bytesRead = 0

    this.keepAlive = ''
    this.contentLength = ''
    this.connection = ''
    this.maxResponseSize = client[kMaxResponseSize]
  }

  setTimeout (value, type) {
    this.timeoutType = type
    if (value !== this.timeoutValue) {
      timers.clearTimeout(this.timeout)
      if (value) {
        this.timeout = timers.setTimeout(onParserTimeout, value, this)
        // istanbul ignore else: only for jest
        if (this.timeout.unref) {
          this.timeout.unref()
        }
      } else {
        this.timeout = null
      }
      this.timeoutValue = value
    } else if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }
  }

  resume () {
    if (this.socket.destroyed || !this.paused) {
      return
    }

    assert(this.ptr != null)
    assert(currentParser == null)

    this.llhttp.llhttp_resume(this.ptr)

    assert(this.timeoutType === TIMEOUT_BODY)
    if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    this.paused = false
    this.execute(this.socket.read() || EMPTY_BUF) // Flush parser.
    this.readMore()
  }

  readMore () {
    while (!this.paused && this.ptr) {
      const chunk = this.socket.read()
      if (chunk === null) {
        break
      }
      this.execute(chunk)
    }
  }

  execute (data) {
    assert(this.ptr != null)
    assert(currentParser == null)
    assert(!this.paused)

    const { socket, llhttp } = this

    if (data.length > currentBufferSize) {
      if (currentBufferPtr) {
        llhttp.free(currentBufferPtr)
      }
      currentBufferSize = Math.ceil(data.length / 4096) * 4096
      currentBufferPtr = llhttp.malloc(currentBufferSize)
    }

    new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data)

    // Call `execute` on the wasm parser.
    // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,
    // and finally the length of bytes to parse.
    // The return value is an error code or `constants.ERROR.OK`.
    try {
      let ret

      try {
        currentBufferRef = data
        currentParser = this
        ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length)
        /* eslint-disable-next-line no-useless-catch */
      } catch (err) {
        /* istanbul ignore next: difficult to make a test case for */
        throw err
      } finally {
        currentParser = null
        currentBufferRef = null
      }

      const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr

      if (ret === constants.ERROR.PAUSED_UPGRADE) {
        this.onUpgrade(data.slice(offset))
      } else if (ret === constants.ERROR.PAUSED) {
        this.paused = true
        socket.unshift(data.slice(offset))
      } else if (ret !== constants.ERROR.OK) {
        const ptr = llhttp.llhttp_get_error_reason(this.ptr)
        let message = ''
        /* istanbul ignore else: difficult to make a test case for */
        if (ptr) {
          const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0)
          message =
            'Response does not match the HTTP/1.1 protocol (' +
            Buffer.from(llhttp.memory.buffer, ptr, len).toString() +
            ')'
        }
        throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset))
      }
    } catch (err) {
      util.destroy(socket, err)
    }
  }

  destroy () {
    assert(this.ptr != null)
    assert(currentParser == null)

    this.llhttp.llhttp_free(this.ptr)
    this.ptr = null

    timers.clearTimeout(this.timeout)
    this.timeout = null
    this.timeoutValue = null
    this.timeoutType = null

    this.paused = false
  }

  onStatus (buf) {
    this.statusText = buf.toString()
  }

  onMessageBegin () {
    const { socket, client } = this

    /* istanbul ignore next: difficult to make a test case for */
    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]
    if (!request) {
      return -1
    }
  }

  onHeaderField (buf) {
    const len = this.headers.length

    if ((len & 1) === 0) {
      this.headers.push(buf)
    } else {
      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])
    }

    this.trackHeader(buf.length)
  }

  onHeaderValue (buf) {
    let len = this.headers.length

    if ((len & 1) === 1) {
      this.headers.push(buf)
      len += 1
    } else {
      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])
    }

    const key = this.headers[len - 2]
    if (key.length === 10 && key.toString().toLowerCase() === 'keep-alive') {
      this.keepAlive += buf.toString()
    } else if (key.length === 10 && key.toString().toLowerCase() === 'connection') {
      this.connection += buf.toString()
    } else if (key.length === 14 && key.toString().toLowerCase() === 'content-length') {
      this.contentLength += buf.toString()
    }

    this.trackHeader(buf.length)
  }

  trackHeader (len) {
    this.headersSize += len
    if (this.headersSize >= this.headersMaxSize) {
      util.destroy(this.socket, new HeadersOverflowError())
    }
  }

  onUpgrade (head) {
    const { upgrade, client, socket, headers, statusCode } = this

    assert(upgrade)

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert(!socket.destroyed)
    assert(socket === client[kSocket])
    assert(!this.paused)
    assert(request.upgrade || request.method === 'CONNECT')

    this.statusCode = null
    this.statusText = ''
    this.shouldKeepAlive = null

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    socket.unshift(head)

    socket[kParser].destroy()
    socket[kParser] = null

    socket[kClient] = null
    socket[kError] = null
    socket
      .removeListener('error', onSocketError)
      .removeListener('readable', onSocketReadable)
      .removeListener('end', onSocketEnd)
      .removeListener('close', onSocketClose)

    client[kSocket] = null
    client[kQueue][client[kRunningIdx]++] = null
    client.emit('disconnect', client[kUrl], [client], new InformationalError('upgrade'))

    try {
      request.onUpgrade(statusCode, headers, socket)
    } catch (err) {
      util.destroy(socket, err)
    }

    resume(client)
  }

  onHeadersComplete (statusCode, upgrade, shouldKeepAlive) {
    const { client, socket, headers, statusText } = this

    /* istanbul ignore next: difficult to make a test case for */
    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]

    /* istanbul ignore next: difficult to make a test case for */
    if (!request) {
      return -1
    }

    assert(!this.upgrade)
    assert(this.statusCode < 200)

    if (statusCode === 100) {
      util.destroy(socket, new SocketError('bad response', util.getSocketInfo(socket)))
      return -1
    }

    /* this can only happen if server is misbehaving */
    if (upgrade && !request.upgrade) {
      util.destroy(socket, new SocketError('bad upgrade', util.getSocketInfo(socket)))
      return -1
    }

    assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS)

    this.statusCode = statusCode
    this.shouldKeepAlive = (
      shouldKeepAlive ||
      // Override llhttp value which does not allow keepAlive for HEAD.
      (request.method === 'HEAD' && !socket[kReset] && this.connection.toLowerCase() === 'keep-alive')
    )

    if (this.statusCode >= 200) {
      const bodyTimeout = request.bodyTimeout != null
        ? request.bodyTimeout
        : client[kBodyTimeout]
      this.setTimeout(bodyTimeout, TIMEOUT_BODY)
    } else if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    if (request.method === 'CONNECT') {
      assert(client[kRunning] === 1)
      this.upgrade = true
      return 2
    }

    if (upgrade) {
      assert(client[kRunning] === 1)
      this.upgrade = true
      return 2
    }

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    if (this.shouldKeepAlive && client[kPipelining]) {
      const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null

      if (keepAliveTimeout != null) {
        const timeout = Math.min(
          keepAliveTimeout - client[kKeepAliveTimeoutThreshold],
          client[kKeepAliveMaxTimeout]
        )
        if (timeout <= 0) {
          socket[kReset] = true
        } else {
          client[kKeepAliveTimeoutValue] = timeout
        }
      } else {
        client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout]
      }
    } else {
      // Stop more requests from being dispatched.
      socket[kReset] = true
    }

    const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false

    if (request.aborted) {
      return -1
    }

    if (request.method === 'HEAD') {
      return 1
    }

    if (statusCode < 200) {
      return 1
    }

    if (socket[kBlocking]) {
      socket[kBlocking] = false
      resume(client)
    }

    return pause ? constants.ERROR.PAUSED : 0
  }

  onBody (buf) {
    const { client, socket, statusCode, maxResponseSize } = this

    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert.strictEqual(this.timeoutType, TIMEOUT_BODY)
    if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    assert(statusCode >= 200)

    if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
      util.destroy(socket, new ResponseExceededMaxSizeError())
      return -1
    }

    this.bytesRead += buf.length

    if (request.onData(buf) === false) {
      return constants.ERROR.PAUSED
    }
  }

  onMessageComplete () {
    const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this

    if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
      return -1
    }

    if (upgrade) {
      return
    }

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert(statusCode >= 100)

    this.statusCode = null
    this.statusText = ''
    this.bytesRead = 0
    this.contentLength = ''
    this.keepAlive = ''
    this.connection = ''

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    if (statusCode < 200) {
      return
    }

    /* istanbul ignore next: should be handled by llhttp? */
    if (request.method !== 'HEAD' && contentLength && bytesRead !== parseInt(contentLength, 10)) {
      util.destroy(socket, new ResponseContentLengthMismatchError())
      return -1
    }

    request.onComplete(headers)

    client[kQueue][client[kRunningIdx]++] = null

    if (socket[kWriting]) {
      assert.strictEqual(client[kRunning], 0)
      // Response completed before request.
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (!shouldKeepAlive) {
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (socket[kReset] && client[kRunning] === 0) {
      // Destroy socket once all requests have completed.
      // The request at the tail of the pipeline is the one
      // that requested reset and no further requests should
      // have been queued since then.
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (client[kPipelining] === 1) {
      // We must wait a full event loop cycle to reuse this socket to make sure
      // that non-spec compliant servers are not closing the connection even if they
      // said they won't.
      setImmediate(resume, client)
    } else {
      resume(client)
    }
  }
}

function onParserTimeout (parser) {
  const { socket, timeoutType, client } = parser

  /* istanbul ignore else */
  if (timeoutType === TIMEOUT_HEADERS) {
    if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
      assert(!parser.paused, 'cannot be paused while waiting for headers')
      util.destroy(socket, new HeadersTimeoutError())
    }
  } else if (timeoutType === TIMEOUT_BODY) {
    if (!parser.paused) {
      util.destroy(socket, new BodyTimeoutError())
    }
  } else if (timeoutType === TIMEOUT_IDLE) {
    assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue])
    util.destroy(socket, new InformationalError('socket idle timeout'))
  }
}

function onSocketReadable () {
  const { [kParser]: parser } = this
  if (parser) {
    parser.readMore()
  }
}

function onSocketError (err) {
  const { [kClient]: client, [kParser]: parser } = this

  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')

  if (client[kHTTPConnVersion] !== 'h2') {
    // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded
    // to the user.
    if (err.code === 'ECONNRESET' && parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so for as a valid response.
      parser.onMessageComplete()
      return
    }
  }

  this[kError] = err

  onError(this[kClient], err)
}

function onError (client, err) {
  if (
    client[kRunning] === 0 &&
    err.code !== 'UND_ERR_INFO' &&
    err.code !== 'UND_ERR_SOCKET'
  ) {
    // Error is not caused by running request and not a recoverable
    // socket error.

    assert(client[kPendingIdx] === client[kRunningIdx])

    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(client, request, err)
    }
    assert(client[kSize] === 0)
  }
}

function onSocketEnd () {
  const { [kParser]: parser, [kClient]: client } = this

  if (client[kHTTPConnVersion] !== 'h2') {
    if (parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so far as a valid response.
      parser.onMessageComplete()
      return
    }
  }

  util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)))
}

function onSocketClose () {
  const { [kClient]: client, [kParser]: parser } = this

  if (client[kHTTPConnVersion] === 'h1' && parser) {
    if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so far as a valid response.
      parser.onMessageComplete()
    }

    this[kParser].destroy()
    this[kParser] = null
  }

  const err = this[kError] || new SocketError('closed', util.getSocketInfo(this))

  client[kSocket] = null

  if (client.destroyed) {
    assert(client[kPending] === 0)

    // Fail entire queue.
    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(client, request, err)
    }
  } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {
    // Fail head of pipeline.
    const request = client[kQueue][client[kRunningIdx]]
    client[kQueue][client[kRunningIdx]++] = null

    errorRequest(client, request, err)
  }

  client[kPendingIdx] = client[kRunningIdx]

  assert(client[kRunning] === 0)

  client.emit('disconnect', client[kUrl], [client], err)

  resume(client)
}

async function connect (client) {
  assert(!client[kConnecting])
  assert(!client[kSocket])

  let { host, hostname, protocol, port } = client[kUrl]

  // Resolve ipv6
  if (hostname[0] === '[') {
    const idx = hostname.indexOf(']')

    assert(idx !== -1)
    const ip = hostname.substring(1, idx)

    assert(net.isIP(ip))
    hostname = ip
  }

  client[kConnecting] = true

  if (channels.beforeConnect.hasSubscribers) {
    channels.beforeConnect.publish({
      connectParams: {
        host,
        hostname,
        protocol,
        port,
        servername: client[kServerName],
        localAddress: client[kLocalAddress]
      },
      connector: client[kConnector]
    })
  }

  try {
    const socket = await new Promise((resolve, reject) => {
      client[kConnector]({
        host,
        hostname,
        protocol,
        port,
        servername: client[kServerName],
        localAddress: client[kLocalAddress]
      }, (err, socket) => {
        if (err) {
          reject(err)
        } else {
          resolve(socket)
        }
      })
    })

    if (client.destroyed) {
      util.destroy(socket.on('error', () => {}), new ClientDestroyedError())
      return
    }

    client[kConnecting] = false

    assert(socket)

    const isH2 = socket.alpnProtocol === 'h2'
    if (isH2) {
      if (!h2ExperimentalWarned) {
        h2ExperimentalWarned = true
        process.emitWarning('H2 support is experimental, expect them to change at any time.', {
          code: 'UNDICI-H2'
        })
      }

      const session = http2.connect(client[kUrl], {
        createConnection: () => socket,
        peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
      })

      client[kHTTPConnVersion] = 'h2'
      session[kClient] = client
      session[kSocket] = socket
      session.on('error', onHttp2SessionError)
      session.on('frameError', onHttp2FrameError)
      session.on('end', onHttp2SessionEnd)
      session.on('goaway', onHTTP2GoAway)
      session.on('close', onSocketClose)
      session.unref()

      client[kHTTP2Session] = session
      socket[kHTTP2Session] = session
    } else {
      if (!llhttpInstance) {
        llhttpInstance = await llhttpPromise
        llhttpPromise = null
      }

      socket[kNoRef] = false
      socket[kWriting] = false
      socket[kReset] = false
      socket[kBlocking] = false
      socket[kParser] = new Parser(client, socket, llhttpInstance)
    }

    socket[kCounter] = 0
    socket[kMaxRequests] = client[kMaxRequests]
    socket[kClient] = client
    socket[kError] = null

    socket
      .on('error', onSocketError)
      .on('readable', onSocketReadable)
      .on('end', onSocketEnd)
      .on('close', onSocketClose)

    client[kSocket] = socket

    if (channels.connected.hasSubscribers) {
      channels.connected.publish({
        connectParams: {
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        },
        connector: client[kConnector],
        socket
      })
    }
    client.emit('connect', client[kUrl], [client])
  } catch (err) {
    if (client.destroyed) {
      return
    }

    client[kConnecting] = false

    if (channels.connectError.hasSubscribers) {
      channels.connectError.publish({
        connectParams: {
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        },
        connector: client[kConnector],
        error: err
      })
    }

    if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {
      assert(client[kRunning] === 0)
      while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
        const request = client[kQueue][client[kPendingIdx]++]
        errorRequest(client, request, err)
      }
    } else {
      onError(client, err)
    }

    client.emit('connectionError', client[kUrl], [client], err)
  }

  resume(client)
}

function emitDrain (client) {
  client[kNeedDrain] = 0
  client.emit('drain', client[kUrl], [client])
}

function resume (client, sync) {
  if (client[kResuming] === 2) {
    return
  }

  client[kResuming] = 2

  _resume(client, sync)
  client[kResuming] = 0

  if (client[kRunningIdx] > 256) {
    client[kQueue].splice(0, client[kRunningIdx])
    client[kPendingIdx] -= client[kRunningIdx]
    client[kRunningIdx] = 0
  }
}

function _resume (client, sync) {
  while (true) {
    if (client.destroyed) {
      assert(client[kPending] === 0)
      return
    }

    if (client[kClosedResolve] && !client[kSize]) {
      client[kClosedResolve]()
      client[kClosedResolve] = null
      return
    }

    const socket = client[kSocket]

    if (socket && !socket.destroyed && socket.alpnProtocol !== 'h2') {
      if (client[kSize] === 0) {
        if (!socket[kNoRef] && socket.unref) {
          socket.unref()
          socket[kNoRef] = true
        }
      } else if (socket[kNoRef] && socket.ref) {
        socket.ref()
        socket[kNoRef] = false
      }

      if (client[kSize] === 0) {
        if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
          socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE)
        }
      } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
        if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
          const request = client[kQueue][client[kRunningIdx]]
          const headersTimeout = request.headersTimeout != null
            ? request.headersTimeout
            : client[kHeadersTimeout]
          socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS)
        }
      }
    }

    if (client[kBusy]) {
      client[kNeedDrain] = 2
    } else if (client[kNeedDrain] === 2) {
      if (sync) {
        client[kNeedDrain] = 1
        process.nextTick(emitDrain, client)
      } else {
        emitDrain(client)
      }
      continue
    }

    if (client[kPending] === 0) {
      return
    }

    if (client[kRunning] >= (client[kPipelining] || 1)) {
      return
    }

    const request = client[kQueue][client[kPendingIdx]]

    if (client[kUrl].protocol === 'https:' && client[kServerName] !== request.servername) {
      if (client[kRunning] > 0) {
        return
      }

      client[kServerName] = request.servername

      if (socket && socket.servername !== request.servername) {
        util.destroy(socket, new InformationalError('servername changed'))
        return
      }
    }

    if (client[kConnecting]) {
      return
    }

    if (!socket && !client[kHTTP2Session]) {
      connect(client)
      return
    }

    if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
      return
    }

    if (client[kRunning] > 0 && !request.idempotent) {
      // Non-idempotent request cannot be retried.
      // Ensure that no other requests are inflight and
      // could cause failure.
      return
    }

    if (client[kRunning] > 0 && (request.upgrade || request.method === 'CONNECT')) {
      // Don't dispatch an upgrade until all preceding requests have completed.
      // A misbehaving server might upgrade the connection before all pipelined
      // request has completed.
      return
    }

    if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 &&
      (util.isStream(request.body) || util.isAsyncIterable(request.body))) {
      // Request with stream or iterator body can error while other requests
      // are inflight and indirectly error those as well.
      // Ensure this doesn't happen by waiting for inflight
      // to complete before dispatching.

      // Request with stream or iterator body cannot be retried.
      // Ensure that no other requests are inflight and
      // could cause failure.
      return
    }

    if (!request.aborted && write(client, request)) {
      client[kPendingIdx]++
    } else {
      client[kQueue].splice(client[kPendingIdx], 1)
    }
  }
}

// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2
function shouldSendContentLength (method) {
  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT'
}

function write (client, request) {
  if (client[kHTTPConnVersion] === 'h2') {
    writeH2(client, client[kHTTP2Session], request)
    return
  }

  const { body, method, path, host, upgrade, headers, blocking, reset } = request

  // https://tools.ietf.org/html/rfc7231#section-4.3.1
  // https://tools.ietf.org/html/rfc7231#section-4.3.2
  // https://tools.ietf.org/html/rfc7231#section-4.3.5

  // Sending a payload body on a request that does not
  // expect it can cause undefined behavior on some
  // servers and corrupt connection state. Do not
  // re-use the connection for further requests.

  const expectsPayload = (
    method === 'PUT' ||
    method === 'POST' ||
    method === 'PATCH'
  )

  if (body && typeof body.read === 'function') {
    // Try to read EOF in order to get length.
    body.read(0)
  }

  const bodyLength = util.bodyLength(body)

  let contentLength = bodyLength

  if (contentLength === null) {
    contentLength = request.contentLength
  }

  if (contentLength === 0 && !expectsPayload) {
    // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.

    contentLength = null
  }

  // https://github.com/nodejs/undici/issues/2046
  // A user agent may send a Content-Length header with 0 value, this should be allowed.
  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
    if (client[kStrictContentLength]) {
      errorRequest(client, request, new RequestContentLengthMismatchError())
      return false
    }

    process.emitWarning(new RequestContentLengthMismatchError())
  }

  const socket = client[kSocket]

  try {
    request.onConnect((err) => {
      if (request.aborted || request.completed) {
        return
      }

      errorRequest(client, request, err || new RequestAbortedError())

      util.destroy(socket, new InformationalError('aborted'))
    })
  } catch (err) {
    errorRequest(client, request, err)
  }

  if (request.aborted) {
    return false
  }

  if (method === 'HEAD') {
    // https://github.com/mcollina/undici/issues/258
    // Close after a HEAD request to interop with misbehaving servers
    // that may send a body in the response.

    socket[kReset] = true
  }

  if (upgrade || method === 'CONNECT') {
    // On CONNECT or upgrade, block pipeline from dispatching further
    // requests on this connection.

    socket[kReset] = true
  }

  if (reset != null) {
    socket[kReset] = reset
  }

  if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
    socket[kReset] = true
  }

  if (blocking) {
    socket[kBlocking] = true
  }

  let header = `${method} ${path} HTTP/1.1\r\n`

  if (typeof host === 'string') {
    header += `host: ${host}\r\n`
  } else {
    header += client[kHostHeader]
  }

  if (upgrade) {
    header += `connection: upgrade\r\nupgrade: ${upgrade}\r\n`
  } else if (client[kPipelining] && !socket[kReset]) {
    header += 'connection: keep-alive\r\n'
  } else {
    header += 'connection: close\r\n'
  }

  if (headers) {
    header += headers
  }

  if (channels.sendHeaders.hasSubscribers) {
    channels.sendHeaders.publish({ request, headers: header, socket })
  }

  /* istanbul ignore else: assertion */
  if (!body || bodyLength === 0) {
    if (contentLength === 0) {
      socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1')
    } else {
      assert(contentLength === null, 'no body must not have content length')
      socket.write(`${header}\r\n`, 'latin1')
    }
    request.onRequestSent()
  } else if (util.isBuffer(body)) {
    assert(contentLength === body.byteLength, 'buffer body must have content length')

    socket.cork()
    socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
    socket.write(body)
    socket.uncork()
    request.onBodySent(body)
    request.onRequestSent()
    if (!expectsPayload) {
      socket[kReset] = true
    }
  } else if (util.isBlobLike(body)) {
    if (typeof body.stream === 'function') {
      writeIterable({ body: body.stream(), client, request, socket, contentLength, header, expectsPayload })
    } else {
      writeBlob({ body, client, request, socket, contentLength, header, expectsPayload })
    }
  } else if (util.isStream(body)) {
    writeStream({ body, client, request, socket, contentLength, header, expectsPayload })
  } else if (util.isIterable(body)) {
    writeIterable({ body, client, request, socket, contentLength, header, expectsPayload })
  } else {
    assert(false)
  }

  return true
}

function writeH2 (client, session, request) {
  const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request

  let headers
  if (typeof reqHeaders === 'string') headers = Request[kHTTP2CopyHeaders](reqHeaders.trim())
  else headers = reqHeaders

  if (upgrade) {
    errorRequest(client, request, new Error('Upgrade not supported for H2'))
    return false
  }

  try {
    // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?
    request.onConnect((err) => {
      if (request.aborted || request.completed) {
        return
      }

      errorRequest(client, request, err || new RequestAbortedError())
    })
  } catch (err) {
    errorRequest(client, request, err)
  }

  if (request.aborted) {
    return false
  }

  /** @type {import('node:http2').ClientHttp2Stream} */
  let stream
  const h2State = client[kHTTP2SessionState]

  headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost]
  headers[HTTP2_HEADER_METHOD] = method

  if (method === 'CONNECT') {
    session.ref()
    // we are already connected, streams are pending, first request
    // will create a new stream. We trigger a request to create the stream and wait until
    // `ready` event is triggered
    // We disabled endStream to allow the user to write to the stream
    stream = session.request(headers, { endStream: false, signal })

    if (stream.id && !stream.pending) {
      request.onUpgrade(null, null, stream)
      ++h2State.openStreams
    } else {
      stream.once('ready', () => {
        request.onUpgrade(null, null, stream)
        ++h2State.openStreams
      })
    }

    stream.once('close', () => {
      h2State.openStreams -= 1
      // TODO(HTTP/2): unref only if current streams count is 0
      if (h2State.openStreams === 0) session.unref()
    })

    return true
  }

  // https://tools.ietf.org/html/rfc7540#section-8.3
  // :path and :scheme headers must be omited when sending CONNECT

  headers[HTTP2_HEADER_PATH] = path
  headers[HTTP2_HEADER_SCHEME] = 'https'

  // https://tools.ietf.org/html/rfc7231#section-4.3.1
  // https://tools.ietf.org/html/rfc7231#section-4.3.2
  // https://tools.ietf.org/html/rfc7231#section-4.3.5

  // Sending a payload body on a request that does not
  // expect it can cause undefined behavior on some
  // servers and corrupt connection state. Do not
  // re-use the connection for further requests.

  const expectsPayload = (
    method === 'PUT' ||
    method === 'POST' ||
    method === 'PATCH'
  )

  if (body && typeof body.read === 'function') {
    // Try to read EOF in order to get length.
    body.read(0)
  }

  let contentLength = util.bodyLength(body)

  if (contentLength == null) {
    contentLength = request.contentLength
  }

  if (contentLength === 0 || !expectsPayload) {
    // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.

    contentLength = null
  }

  // https://github.com/nodejs/undici/issues/2046
  // A user agent may send a Content-Length header with 0 value, this should be allowed.
  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
    if (client[kStrictContentLength]) {
      errorRequest(client, request, new RequestContentLengthMismatchError())
      return false
    }

    process.emitWarning(new RequestContentLengthMismatchError())
  }

  if (contentLength != null) {
    assert(body, 'no body must not have content length')
    headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`
  }

  session.ref()

  const shouldEndStream = method === 'GET' || method === 'HEAD'
  if (expectContinue) {
    headers[HTTP2_HEADER_EXPECT] = '100-continue'
    stream = session.request(headers, { endStream: shouldEndStream, signal })

    stream.once('continue', writeBodyH2)
  } else {
    stream = session.request(headers, {
      endStream: shouldEndStream,
      signal
    })
    writeBodyH2()
  }

  // Increment counter as we have new several streams open
  ++h2State.openStreams

  stream.once('response', headers => {
    const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers

    if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), '') === false) {
      stream.pause()
    }
  })

  stream.once('end', () => {
    request.onComplete([])
  })

  stream.on('data', (chunk) => {
    if (request.onData(chunk) === false) {
      stream.pause()
    }
  })

  stream.once('close', () => {
    h2State.openStreams -= 1
    // TODO(HTTP/2): unref only if current streams count is 0
    if (h2State.openStreams === 0) {
      session.unref()
    }
  })

  stream.once('error', function (err) {
    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
      h2State.streams -= 1
      util.destroy(stream, err)
    }
  })

  stream.once('frameError', (type, code) => {
    const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`)
    errorRequest(client, request, err)

    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
      h2State.streams -= 1
      util.destroy(stream, err)
    }
  })

  // stream.on('aborted', () => {
  //   // TODO(HTTP/2): Support aborted
  // })

  // stream.on('timeout', () => {
  //   // TODO(HTTP/2): Support timeout
  // })

  // stream.on('push', headers => {
  //   // TODO(HTTP/2): Suppor push
  // })

  // stream.on('trailers', headers => {
  //   // TODO(HTTP/2): Support trailers
  // })

  return true

  function writeBodyH2 () {
    /* istanbul ignore else: assertion */
    if (!body) {
      request.onRequestSent()
    } else if (util.isBuffer(body)) {
      assert(contentLength === body.byteLength, 'buffer body must have content length')
      stream.cork()
      stream.write(body)
      stream.uncork()
      stream.end()
      request.onBodySent(body)
      request.onRequestSent()
    } else if (util.isBlobLike(body)) {
      if (typeof body.stream === 'function') {
        writeIterable({
          client,
          request,
          contentLength,
          h2stream: stream,
          expectsPayload,
          body: body.stream(),
          socket: client[kSocket],
          header: ''
        })
      } else {
        writeBlob({
          body,
          client,
          request,
          contentLength,
          expectsPayload,
          h2stream: stream,
          header: '',
          socket: client[kSocket]
        })
      }
    } else if (util.isStream(body)) {
      writeStream({
        body,
        client,
        request,
        contentLength,
        expectsPayload,
        socket: client[kSocket],
        h2stream: stream,
        header: ''
      })
    } else if (util.isIterable(body)) {
      writeIterable({
        body,
        client,
        request,
        contentLength,
        expectsPayload,
        header: '',
        h2stream: stream,
        socket: client[kSocket]
      })
    } else {
      assert(false)
    }
  }
}

function writeStream ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined')

  if (client[kHTTPConnVersion] === 'h2') {
    // For HTTP/2, is enough to pipe the stream
    const pipe = pipeline(
      body,
      h2stream,
      (err) => {
        if (err) {
          util.destroy(body, err)
          util.destroy(h2stream, err)
        } else {
          request.onRequestSent()
        }
      }
    )

    pipe.on('data', onPipeData)
    pipe.once('end', () => {
      pipe.removeListener('data', onPipeData)
      util.destroy(pipe)
    })

    function onPipeData (chunk) {
      request.onBodySent(chunk)
    }

    return
  }

  let finished = false

  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })

  const onData = function (chunk) {
    if (finished) {
      return
    }

    try {
      if (!writer.write(chunk) && this.pause) {
        this.pause()
      }
    } catch (err) {
      util.destroy(this, err)
    }
  }
  const onDrain = function () {
    if (finished) {
      return
    }

    if (body.resume) {
      body.resume()
    }
  }
  const onAbort = function () {
    if (finished) {
      return
    }
    const err = new RequestAbortedError()
    queueMicrotask(() => onFinished(err))
  }
  const onFinished = function (err) {
    if (finished) {
      return
    }

    finished = true

    assert(socket.destroyed || (socket[kWriting] && client[kRunning] <= 1))

    socket
      .off('drain', onDrain)
      .off('error', onFinished)

    body
      .removeListener('data', onData)
      .removeListener('end', onFinished)
      .removeListener('error', onFinished)
      .removeListener('close', onAbort)

    if (!err) {
      try {
        writer.end()
      } catch (er) {
        err = er
      }
    }

    writer.destroy(err)

    if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {
      util.destroy(body, err)
    } else {
      util.destroy(body)
    }
  }

  body
    .on('data', onData)
    .on('end', onFinished)
    .on('error', onFinished)
    .on('close', onAbort)

  if (body.resume) {
    body.resume()
  }

  socket
    .on('drain', onDrain)
    .on('error', onFinished)
}

async function writeBlob ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength === body.size, 'blob body must have content length')

  const isH2 = client[kHTTPConnVersion] === 'h2'
  try {
    if (contentLength != null && contentLength !== body.size) {
      throw new RequestContentLengthMismatchError()
    }

    const buffer = Buffer.from(await body.arrayBuffer())

    if (isH2) {
      h2stream.cork()
      h2stream.write(buffer)
      h2stream.uncork()
    } else {
      socket.cork()
      socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
      socket.write(buffer)
      socket.uncork()
    }

    request.onBodySent(buffer)
    request.onRequestSent()

    if (!expectsPayload) {
      socket[kReset] = true
    }

    resume(client)
  } catch (err) {
    util.destroy(isH2 ? h2stream : socket, err)
  }
}

async function writeIterable ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined')

  let callback = null
  function onDrain () {
    if (callback) {
      const cb = callback
      callback = null
      cb()
    }
  }

  const waitForDrain = () => new Promise((resolve, reject) => {
    assert(callback === null)

    if (socket[kError]) {
      reject(socket[kError])
    } else {
      callback = resolve
    }
  })

  if (client[kHTTPConnVersion] === 'h2') {
    h2stream
      .on('close', onDrain)
      .on('drain', onDrain)

    try {
      // It's up to the user to somehow abort the async iterable.
      for await (const chunk of body) {
        if (socket[kError]) {
          throw socket[kError]
        }

        const res = h2stream.write(chunk)
        request.onBodySent(chunk)
        if (!res) {
          await waitForDrain()
        }
      }
    } catch (err) {
      h2stream.destroy(err)
    } finally {
      request.onRequestSent()
      h2stream.end()
      h2stream
        .off('close', onDrain)
        .off('drain', onDrain)
    }

    return
  }

  socket
    .on('close', onDrain)
    .on('drain', onDrain)

  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })
  try {
    // It's up to the user to somehow abort the async iterable.
    for await (const chunk of body) {
      if (socket[kError]) {
        throw socket[kError]
      }

      if (!writer.write(chunk)) {
        await waitForDrain()
      }
    }

    writer.end()
  } catch (err) {
    writer.destroy(err)
  } finally {
    socket
      .off('close', onDrain)
      .off('drain', onDrain)
  }
}

class AsyncWriter {
  constructor ({ socket, request, contentLength, client, expectsPayload, header }) {
    this.socket = socket
    this.request = request
    this.contentLength = contentLength
    this.client = client
    this.bytesWritten = 0
    this.expectsPayload = expectsPayload
    this.header = header

    socket[kWriting] = true
  }

  write (chunk) {
    const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this

    if (socket[kError]) {
      throw socket[kError]
    }

    if (socket.destroyed) {
      return false
    }

    const len = Buffer.byteLength(chunk)
    if (!len) {
      return true
    }

    // We should defer writing chunks.
    if (contentLength !== null && bytesWritten + len > contentLength) {
      if (client[kStrictContentLength]) {
        throw new RequestContentLengthMismatchError()
      }

      process.emitWarning(new RequestContentLengthMismatchError())
    }

    socket.cork()

    if (bytesWritten === 0) {
      if (!expectsPayload) {
        socket[kReset] = true
      }

      if (contentLength === null) {
        socket.write(`${header}transfer-encoding: chunked\r\n`, 'latin1')
      } else {
        socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
      }
    }

    if (contentLength === null) {
      socket.write(`\r\n${len.toString(16)}\r\n`, 'latin1')
    }

    this.bytesWritten += len

    const ret = socket.write(chunk)

    socket.uncork()

    request.onBodySent(chunk)

    if (!ret) {
      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
        // istanbul ignore else: only for jest
        if (socket[kParser].timeout.refresh) {
          socket[kParser].timeout.refresh()
        }
      }
    }

    return ret
  }

  end () {
    const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this
    request.onRequestSent()

    socket[kWriting] = false

    if (socket[kError]) {
      throw socket[kError]
    }

    if (socket.destroyed) {
      return
    }

    if (bytesWritten === 0) {
      if (expectsPayload) {
        // https://tools.ietf.org/html/rfc7230#section-3.3.2
        // A user agent SHOULD send a Content-Length in a request message when
        // no Transfer-Encoding is sent and the request method defines a meaning
        // for an enclosed payload body.

        socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1')
      } else {
        socket.write(`${header}\r\n`, 'latin1')
      }
    } else if (contentLength === null) {
      socket.write('\r\n0\r\n\r\n', 'latin1')
    }

    if (contentLength !== null && bytesWritten !== contentLength) {
      if (client[kStrictContentLength]) {
        throw new RequestContentLengthMismatchError()
      } else {
        process.emitWarning(new RequestContentLengthMismatchError())
      }
    }

    if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
      // istanbul ignore else: only for jest
      if (socket[kParser].timeout.refresh) {
        socket[kParser].timeout.refresh()
      }
    }

    resume(client)
  }

  destroy (err) {
    const { socket, client } = this

    socket[kWriting] = false

    if (err) {
      assert(client[kRunning] <= 1, 'pipeline should only contain this request')
      util.destroy(socket, err)
    }
  }
}

function errorRequest (client, request, err) {
  try {
    request.onError(err)
    assert(request.aborted)
  } catch (err) {
    client.emit('error', err)
  }
}

module.exports = Client


/***/ }),

/***/ 1408:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


/* istanbul ignore file: only for Node 12 */

const { kConnected, kSize } = __nccwpck_require__(5773)

class CompatWeakRef {
  constructor (value) {
    this.value = value
  }

  deref () {
    return this.value[kConnected] === 0 && this.value[kSize] === 0
      ? undefined
      : this.value
  }
}

class CompatFinalizer {
  constructor (finalizer) {
    this.finalizer = finalizer
  }

  register (dispatcher, key) {
    if (dispatcher.on) {
      dispatcher.on('disconnect', () => {
        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
          this.finalizer(key)
        }
      })
    }
  }
}

module.exports = function () {
  // FIXME: remove workaround when the Node bug is fixed
  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
  if (process.env.NODE_V8_COVERAGE) {
    return {
      WeakRef: CompatWeakRef,
      FinalizationRegistry: CompatFinalizer
    }
  }
  return {
    WeakRef: global.WeakRef || CompatWeakRef,
    FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
  }
}


/***/ }),

/***/ 8803:
/***/ ((module) => {

"use strict";


// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size
const maxAttributeValueSize = 1024

// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size
const maxNameValuePairSize = 4096

module.exports = {
  maxAttributeValueSize,
  maxNameValuePairSize
}


/***/ }),

/***/ 7426:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { parseSetCookie } = __nccwpck_require__(7889)
const { stringify } = __nccwpck_require__(3692)
const { webidl } = __nccwpck_require__(3476)
const { Headers } = __nccwpck_require__(2223)

/**
 * @typedef {Object} Cookie
 * @property {string} name
 * @property {string} value
 * @property {Date|number|undefined} expires
 * @property {number|undefined} maxAge
 * @property {string|undefined} domain
 * @property {string|undefined} path
 * @property {boolean|undefined} secure
 * @property {boolean|undefined} httpOnly
 * @property {'Strict'|'Lax'|'None'} sameSite
 * @property {string[]} unparsed
 */

/**
 * @param {Headers} headers
 * @returns {Record<string, string>}
 */
function getCookies (headers) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'getCookies' })

  webidl.brandCheck(headers, Headers, { strict: false })

  const cookie = headers.get('cookie')
  const out = {}

  if (!cookie) {
    return out
  }

  for (const piece of cookie.split(';')) {
    const [name, ...value] = piece.split('=')

    out[name.trim()] = value.join('=')
  }

  return out
}

/**
 * @param {Headers} headers
 * @param {string} name
 * @param {{ path?: string, domain?: string }|undefined} attributes
 * @returns {void}
 */
function deleteCookie (headers, name, attributes) {
  webidl.argumentLengthCheck(arguments, 2, { header: 'deleteCookie' })

  webidl.brandCheck(headers, Headers, { strict: false })

  name = webidl.converters.DOMString(name)
  attributes = webidl.converters.DeleteCookieAttributes(attributes)

  // Matches behavior of
  // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278
  setCookie(headers, {
    name,
    value: '',
    expires: new Date(0),
    ...attributes
  })
}

/**
 * @param {Headers} headers
 * @returns {Cookie[]}
 */
function getSetCookies (headers) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'getSetCookies' })

  webidl.brandCheck(headers, Headers, { strict: false })

  const cookies = headers.getSetCookie()

  if (!cookies) {
    return []
  }

  return cookies.map((pair) => parseSetCookie(pair))
}

/**
 * @param {Headers} headers
 * @param {Cookie} cookie
 * @returns {void}
 */
function setCookie (headers, cookie) {
  webidl.argumentLengthCheck(arguments, 2, { header: 'setCookie' })

  webidl.brandCheck(headers, Headers, { strict: false })

  cookie = webidl.converters.Cookie(cookie)

  const str = stringify(cookie)

  if (str) {
    headers.append('Set-Cookie', stringify(cookie))
  }
}

webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'path',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'domain',
    defaultValue: null
  }
])

webidl.converters.Cookie = webidl.dictionaryConverter([
  {
    converter: webidl.converters.DOMString,
    key: 'name'
  },
  {
    converter: webidl.converters.DOMString,
    key: 'value'
  },
  {
    converter: webidl.nullableConverter((value) => {
      if (typeof value === 'number') {
        return webidl.converters['unsigned long long'](value)
      }

      return new Date(value)
    }),
    key: 'expires',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters['long long']),
    key: 'maxAge',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'domain',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'path',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: 'secure',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: 'httpOnly',
    defaultValue: null
  },
  {
    converter: webidl.converters.USVString,
    key: 'sameSite',
    allowedValues: ['Strict', 'Lax', 'None']
  },
  {
    converter: webidl.sequenceConverter(webidl.converters.DOMString),
    key: 'unparsed',
    defaultValue: []
  }
])

module.exports = {
  getCookies,
  deleteCookie,
  getSetCookies,
  setCookie
}


/***/ }),

/***/ 7889:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { maxNameValuePairSize, maxAttributeValueSize } = __nccwpck_require__(8803)
const { isCTLExcludingHtab } = __nccwpck_require__(3692)
const { collectASequenceOfCodePointsFast } = __nccwpck_require__(6960)
const assert = __nccwpck_require__(2613)

/**
 * @description Parses the field-value attributes of a set-cookie header string.
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} header
 * @returns if the header is invalid, null will be returned
 */
function parseSetCookie (header) {
  // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F
  //    character (CTL characters excluding HTAB): Abort these steps and
  //    ignore the set-cookie-string entirely.
  if (isCTLExcludingHtab(header)) {
    return null
  }

  let nameValuePair = ''
  let unparsedAttributes = ''
  let name = ''
  let value = ''

  // 2. If the set-cookie-string contains a %x3B (";") character:
  if (header.includes(';')) {
    // 1. The name-value-pair string consists of the characters up to,
    //    but not including, the first %x3B (";"), and the unparsed-
    //    attributes consist of the remainder of the set-cookie-string
    //    (including the %x3B (";") in question).
    const position = { position: 0 }

    nameValuePair = collectASequenceOfCodePointsFast(';', header, position)
    unparsedAttributes = header.slice(position.position)
  } else {
    // Otherwise:

    // 1. The name-value-pair string consists of all the characters
    //    contained in the set-cookie-string, and the unparsed-
    //    attributes is the empty string.
    nameValuePair = header
  }

  // 3. If the name-value-pair string lacks a %x3D ("=") character, then
  //    the name string is empty, and the value string is the value of
  //    name-value-pair.
  if (!nameValuePair.includes('=')) {
    value = nameValuePair
  } else {
    //    Otherwise, the name string consists of the characters up to, but
    //    not including, the first %x3D ("=") character, and the (possibly
    //    empty) value string consists of the characters after the first
    //    %x3D ("=") character.
    const position = { position: 0 }
    name = collectASequenceOfCodePointsFast(
      '=',
      nameValuePair,
      position
    )
    value = nameValuePair.slice(position.position + 1)
  }

  // 4. Remove any leading or trailing WSP characters from the name
  //    string and the value string.
  name = name.trim()
  value = value.trim()

  // 5. If the sum of the lengths of the name string and the value string
  //    is more than 4096 octets, abort these steps and ignore the set-
  //    cookie-string entirely.
  if (name.length + value.length > maxNameValuePairSize) {
    return null
  }

  // 6. The cookie-name is the name string, and the cookie-value is the
  //    value string.
  return {
    name, value, ...parseUnparsedAttributes(unparsedAttributes)
  }
}

/**
 * Parses the remaining attributes of a set-cookie header
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} unparsedAttributes
 * @param {[Object.<string, unknown>]={}} cookieAttributeList
 */
function parseUnparsedAttributes (unparsedAttributes, cookieAttributeList = {}) {
  // 1. If the unparsed-attributes string is empty, skip the rest of
  //    these steps.
  if (unparsedAttributes.length === 0) {
    return cookieAttributeList
  }

  // 2. Discard the first character of the unparsed-attributes (which
  //    will be a %x3B (";") character).
  assert(unparsedAttributes[0] === ';')
  unparsedAttributes = unparsedAttributes.slice(1)

  let cookieAv = ''

  // 3. If the remaining unparsed-attributes contains a %x3B (";")
  //    character:
  if (unparsedAttributes.includes(';')) {
    // 1. Consume the characters of the unparsed-attributes up to, but
    //    not including, the first %x3B (";") character.
    cookieAv = collectASequenceOfCodePointsFast(
      ';',
      unparsedAttributes,
      { position: 0 }
    )
    unparsedAttributes = unparsedAttributes.slice(cookieAv.length)
  } else {
    // Otherwise:

    // 1. Consume the remainder of the unparsed-attributes.
    cookieAv = unparsedAttributes
    unparsedAttributes = ''
  }

  // Let the cookie-av string be the characters consumed in this step.

  let attributeName = ''
  let attributeValue = ''

  // 4. If the cookie-av string contains a %x3D ("=") character:
  if (cookieAv.includes('=')) {
    // 1. The (possibly empty) attribute-name string consists of the
    //    characters up to, but not including, the first %x3D ("=")
    //    character, and the (possibly empty) attribute-value string
    //    consists of the characters after the first %x3D ("=")
    //    character.
    const position = { position: 0 }

    attributeName = collectASequenceOfCodePointsFast(
      '=',
      cookieAv,
      position
    )
    attributeValue = cookieAv.slice(position.position + 1)
  } else {
    // Otherwise:

    // 1. The attribute-name string consists of the entire cookie-av
    //    string, and the attribute-value string is empty.
    attributeName = cookieAv
  }

  // 5. Remove any leading or trailing WSP characters from the attribute-
  //    name string and the attribute-value string.
  attributeName = attributeName.trim()
  attributeValue = attributeValue.trim()

  // 6. If the attribute-value is longer than 1024 octets, ignore the
  //    cookie-av string and return to Step 1 of this algorithm.
  if (attributeValue.length > maxAttributeValueSize) {
    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
  }

  // 7. Process the attribute-name and attribute-value according to the
  //    requirements in the following subsections.  (Notice that
  //    attributes with unrecognized attribute-names are ignored.)
  const attributeNameLowercase = attributeName.toLowerCase()

  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1
  // If the attribute-name case-insensitively matches the string
  // "Expires", the user agent MUST process the cookie-av as follows.
  if (attributeNameLowercase === 'expires') {
    // 1. Let the expiry-time be the result of parsing the attribute-value
    //    as cookie-date (see Section 5.1.1).
    const expiryTime = new Date(attributeValue)

    // 2. If the attribute-value failed to parse as a cookie date, ignore
    //    the cookie-av.

    cookieAttributeList.expires = expiryTime
  } else if (attributeNameLowercase === 'max-age') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2
    // If the attribute-name case-insensitively matches the string "Max-
    // Age", the user agent MUST process the cookie-av as follows.

    // 1. If the first character of the attribute-value is not a DIGIT or a
    //    "-" character, ignore the cookie-av.
    const charCode = attributeValue.charCodeAt(0)

    if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
    }

    // 2. If the remainder of attribute-value contains a non-DIGIT
    //    character, ignore the cookie-av.
    if (!/^\d+$/.test(attributeValue)) {
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
    }

    // 3. Let delta-seconds be the attribute-value converted to an integer.
    const deltaSeconds = Number(attributeValue)

    // 4. Let cookie-age-limit be the maximum age of the cookie (which
    //    SHOULD be 400 days or less, see Section 4.1.2.2).

    // 5. Set delta-seconds to the smaller of its present value and cookie-
    //    age-limit.
    // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)

    // 6. If delta-seconds is less than or equal to zero (0), let expiry-
    //    time be the earliest representable date and time.  Otherwise, let
    //    the expiry-time be the current date and time plus delta-seconds
    //    seconds.
    // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds

    // 7. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Max-Age and an attribute-value of expiry-time.
    cookieAttributeList.maxAge = deltaSeconds
  } else if (attributeNameLowercase === 'domain') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3
    // If the attribute-name case-insensitively matches the string "Domain",
    // the user agent MUST process the cookie-av as follows.

    // 1. Let cookie-domain be the attribute-value.
    let cookieDomain = attributeValue

    // 2. If cookie-domain starts with %x2E ("."), let cookie-domain be
    //    cookie-domain without its leading %x2E (".").
    if (cookieDomain[0] === '.') {
      cookieDomain = cookieDomain.slice(1)
    }

    // 3. Convert the cookie-domain to lower case.
    cookieDomain = cookieDomain.toLowerCase()

    // 4. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Domain and an attribute-value of cookie-domain.
    cookieAttributeList.domain = cookieDomain
  } else if (attributeNameLowercase === 'path') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4
    // If the attribute-name case-insensitively matches the string "Path",
    // the user agent MUST process the cookie-av as follows.

    // 1. If the attribute-value is empty or if the first character of the
    //    attribute-value is not %x2F ("/"):
    let cookiePath = ''
    if (attributeValue.length === 0 || attributeValue[0] !== '/') {
      // 1. Let cookie-path be the default-path.
      cookiePath = '/'
    } else {
      // Otherwise:

      // 1. Let cookie-path be the attribute-value.
      cookiePath = attributeValue
    }

    // 2. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Path and an attribute-value of cookie-path.
    cookieAttributeList.path = cookiePath
  } else if (attributeNameLowercase === 'secure') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5
    // If the attribute-name case-insensitively matches the string "Secure",
    // the user agent MUST append an attribute to the cookie-attribute-list
    // with an attribute-name of Secure and an empty attribute-value.

    cookieAttributeList.secure = true
  } else if (attributeNameLowercase === 'httponly') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6
    // If the attribute-name case-insensitively matches the string
    // "HttpOnly", the user agent MUST append an attribute to the cookie-
    // attribute-list with an attribute-name of HttpOnly and an empty
    // attribute-value.

    cookieAttributeList.httpOnly = true
  } else if (attributeNameLowercase === 'samesite') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7
    // If the attribute-name case-insensitively matches the string
    // "SameSite", the user agent MUST process the cookie-av as follows:

    // 1. Let enforcement be "Default".
    let enforcement = 'Default'

    const attributeValueLowercase = attributeValue.toLowerCase()
    // 2. If cookie-av's attribute-value is a case-insensitive match for
    //    "None", set enforcement to "None".
    if (attributeValueLowercase.includes('none')) {
      enforcement = 'None'
    }

    // 3. If cookie-av's attribute-value is a case-insensitive match for
    //    "Strict", set enforcement to "Strict".
    if (attributeValueLowercase.includes('strict')) {
      enforcement = 'Strict'
    }

    // 4. If cookie-av's attribute-value is a case-insensitive match for
    //    "Lax", set enforcement to "Lax".
    if (attributeValueLowercase.includes('lax')) {
      enforcement = 'Lax'
    }

    // 5. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of "SameSite" and an attribute-value of
    //    enforcement.
    cookieAttributeList.sameSite = enforcement
  } else {
    cookieAttributeList.unparsed ??= []

    cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`)
  }

  // 8. Return to Step 1 of this algorithm.
  return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
}

module.exports = {
  parseSetCookie,
  parseUnparsedAttributes
}


/***/ }),

/***/ 3692:
/***/ ((module) => {

"use strict";


/**
 * @param {string} value
 * @returns {boolean}
 */
function isCTLExcludingHtab (value) {
  if (value.length === 0) {
    return false
  }

  for (const char of value) {
    const code = char.charCodeAt(0)

    if (
      (code >= 0x00 || code <= 0x08) ||
      (code >= 0x0A || code <= 0x1F) ||
      code === 0x7F
    ) {
      return false
    }
  }
}

/**
 CHAR           = <any US-ASCII character (octets 0 - 127)>
 token          = 1*<any CHAR except CTLs or separators>
 separators     = "(" | ")" | "<" | ">" | "@"
                | "," | ";" | ":" | "\" | <">
                | "/" | "[" | "]" | "?" | "="
                | "{" | "}" | SP | HT
 * @param {string} name
 */
function validateCookieName (name) {
  for (const char of name) {
    const code = char.charCodeAt(0)

    if (
      (code <= 0x20 || code > 0x7F) ||
      char === '(' ||
      char === ')' ||
      char === '>' ||
      char === '<' ||
      char === '@' ||
      char === ',' ||
      char === ';' ||
      char === ':' ||
      char === '\\' ||
      char === '"' ||
      char === '/' ||
      char === '[' ||
      char === ']' ||
      char === '?' ||
      char === '=' ||
      char === '{' ||
      char === '}'
    ) {
      throw new Error('Invalid cookie name')
    }
  }
}

/**
 cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
 cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
 * @param {string} value
 */
function validateCookieValue (value) {
  for (const char of value) {
    const code = char.charCodeAt(0)

    if (
      code < 0x21 || // exclude CTLs (0-31)
      code === 0x22 ||
      code === 0x2C ||
      code === 0x3B ||
      code === 0x5C ||
      code > 0x7E // non-ascii
    ) {
      throw new Error('Invalid header value')
    }
  }
}

/**
 * path-value        = <any CHAR except CTLs or ";">
 * @param {string} path
 */
function validateCookiePath (path) {
  for (const char of path) {
    const code = char.charCodeAt(0)

    if (code < 0x21 || char === ';') {
      throw new Error('Invalid cookie path')
    }
  }
}

/**
 * I have no idea why these values aren't allowed to be honest,
 * but Deno tests these. - Khafra
 * @param {string} domain
 */
function validateCookieDomain (domain) {
  if (
    domain.startsWith('-') ||
    domain.endsWith('.') ||
    domain.endsWith('-')
  ) {
    throw new Error('Invalid cookie domain')
  }
}

/**
 * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
 * @param {number|Date} date
  IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
  ; fixed length/zone/capitalization subset of the format
  ; see Section 3.3 of [RFC5322]

  day-name     = %x4D.6F.6E ; "Mon", case-sensitive
              / %x54.75.65 ; "Tue", case-sensitive
              / %x57.65.64 ; "Wed", case-sensitive
              / %x54.68.75 ; "Thu", case-sensitive
              / %x46.72.69 ; "Fri", case-sensitive
              / %x53.61.74 ; "Sat", case-sensitive
              / %x53.75.6E ; "Sun", case-sensitive
  date1        = day SP month SP year
                  ; e.g., 02 Jun 1982

  day          = 2DIGIT
  month        = %x4A.61.6E ; "Jan", case-sensitive
              / %x46.65.62 ; "Feb", case-sensitive
              / %x4D.61.72 ; "Mar", case-sensitive
              / %x41.70.72 ; "Apr", case-sensitive
              / %x4D.61.79 ; "May", case-sensitive
              / %x4A.75.6E ; "Jun", case-sensitive
              / %x4A.75.6C ; "Jul", case-sensitive
              / %x41.75.67 ; "Aug", case-sensitive
              / %x53.65.70 ; "Sep", case-sensitive
              / %x4F.63.74 ; "Oct", case-sensitive
              / %x4E.6F.76 ; "Nov", case-sensitive
              / %x44.65.63 ; "Dec", case-sensitive
  year         = 4DIGIT

  GMT          = %x47.4D.54 ; "GMT", case-sensitive

  time-of-day  = hour ":" minute ":" second
              ; 00:00:00 - 23:59:60 (leap second)

  hour         = 2DIGIT
  minute       = 2DIGIT
  second       = 2DIGIT
 */
function toIMFDate (date) {
  if (typeof date === 'number') {
    date = new Date(date)
  }

  const days = [
    'Sun', 'Mon', 'Tue', 'Wed',
    'Thu', 'Fri', 'Sat'
  ]

  const months = [
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
  ]

  const dayName = days[date.getUTCDay()]
  const day = date.getUTCDate().toString().padStart(2, '0')
  const month = months[date.getUTCMonth()]
  const year = date.getUTCFullYear()
  const hour = date.getUTCHours().toString().padStart(2, '0')
  const minute = date.getUTCMinutes().toString().padStart(2, '0')
  const second = date.getUTCSeconds().toString().padStart(2, '0')

  return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`
}

/**
 max-age-av        = "Max-Age=" non-zero-digit *DIGIT
                       ; In practice, both expires-av and max-age-av
                       ; are limited to dates representable by the
                       ; user agent.
 * @param {number} maxAge
 */
function validateCookieMaxAge (maxAge) {
  if (maxAge < 0) {
    throw new Error('Invalid cookie max-age')
  }
}

/**
 * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
 * @param {import('./index').Cookie} cookie
 */
function stringify (cookie) {
  if (cookie.name.length === 0) {
    return null
  }

  validateCookieName(cookie.name)
  validateCookieValue(cookie.value)

  const out = [`${cookie.name}=${cookie.value}`]

  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1
  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2
  if (cookie.name.startsWith('__Secure-')) {
    cookie.secure = true
  }

  if (cookie.name.startsWith('__Host-')) {
    cookie.secure = true
    cookie.domain = null
    cookie.path = '/'
  }

  if (cookie.secure) {
    out.push('Secure')
  }

  if (cookie.httpOnly) {
    out.push('HttpOnly')
  }

  if (typeof cookie.maxAge === 'number') {
    validateCookieMaxAge(cookie.maxAge)
    out.push(`Max-Age=${cookie.maxAge}`)
  }

  if (cookie.domain) {
    validateCookieDomain(cookie.domain)
    out.push(`Domain=${cookie.domain}`)
  }

  if (cookie.path) {
    validateCookiePath(cookie.path)
    out.push(`Path=${cookie.path}`)
  }

  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {
    out.push(`Expires=${toIMFDate(cookie.expires)}`)
  }

  if (cookie.sameSite) {
    out.push(`SameSite=${cookie.sameSite}`)
  }

  for (const part of cookie.unparsed) {
    if (!part.includes('=')) {
      throw new Error('Invalid unparsed')
    }

    const [key, ...value] = part.split('=')

    out.push(`${key.trim()}=${value.join('=')}`)
  }

  return out.join('; ')
}

module.exports = {
  isCTLExcludingHtab,
  validateCookieName,
  validateCookiePath,
  validateCookieValue,
  toIMFDate,
  stringify
}


/***/ }),

/***/ 110:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const net = __nccwpck_require__(9278)
const assert = __nccwpck_require__(2613)
const util = __nccwpck_require__(4606)
const { InvalidArgumentError, ConnectTimeoutError } = __nccwpck_require__(1581)

let tls // include tls conditionally since it is not always available

// TODO: session re-use does not wait for the first
// connection to resolve the session and might therefore
// resolve the same servername multiple times even when
// re-use is enabled.

let SessionCache
// FIXME: remove workaround when the Node bug is fixed
// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
  SessionCache = class WeakSessionCache {
    constructor (maxCachedSessions) {
      this._maxCachedSessions = maxCachedSessions
      this._sessionCache = new Map()
      this._sessionRegistry = new global.FinalizationRegistry((key) => {
        if (this._sessionCache.size < this._maxCachedSessions) {
          return
        }

        const ref = this._sessionCache.get(key)
        if (ref !== undefined && ref.deref() === undefined) {
          this._sessionCache.delete(key)
        }
      })
    }

    get (sessionKey) {
      const ref = this._sessionCache.get(sessionKey)
      return ref ? ref.deref() : null
    }

    set (sessionKey, session) {
      if (this._maxCachedSessions === 0) {
        return
      }

      this._sessionCache.set(sessionKey, new WeakRef(session))
      this._sessionRegistry.register(session, sessionKey)
    }
  }
} else {
  SessionCache = class SimpleSessionCache {
    constructor (maxCachedSessions) {
      this._maxCachedSessions = maxCachedSessions
      this._sessionCache = new Map()
    }

    get (sessionKey) {
      return this._sessionCache.get(sessionKey)
    }

    set (sessionKey, session) {
      if (this._maxCachedSessions === 0) {
        return
      }

      if (this._sessionCache.size >= this._maxCachedSessions) {
        // remove the oldest session
        const { value: oldestKey } = this._sessionCache.keys().next()
        this._sessionCache.delete(oldestKey)
      }

      this._sessionCache.set(sessionKey, session)
    }
  }
}

function buildConnector ({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {
  if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
    throw new InvalidArgumentError('maxCachedSessions must be a positive integer or zero')
  }

  const options = { path: socketPath, ...opts }
  const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions)
  timeout = timeout == null ? 10e3 : timeout
  allowH2 = allowH2 != null ? allowH2 : false
  return function connect ({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
    let socket
    if (protocol === 'https:') {
      if (!tls) {
        tls = __nccwpck_require__(4756)
      }
      servername = servername || options.servername || util.getServerName(host) || null

      const sessionKey = servername || hostname
      const session = sessionCache.get(sessionKey) || null

      assert(sessionKey)

      socket = tls.connect({
        highWaterMark: 16384, // TLS in node can't have bigger HWM anyway...
        ...options,
        servername,
        session,
        localAddress,
        // TODO(HTTP/2): Add support for h2c
        ALPNProtocols: allowH2 ? ['http/1.1', 'h2'] : ['http/1.1'],
        socket: httpSocket, // upgrade socket connection
        port: port || 443,
        host: hostname
      })

      socket
        .on('session', function (session) {
          // TODO (fix): Can a session become invalid once established? Don't think so?
          sessionCache.set(sessionKey, session)
        })
    } else {
      assert(!httpSocket, 'httpSocket can only be sent on TLS update')
      socket = net.connect({
        highWaterMark: 64 * 1024, // Same as nodejs fs streams.
        ...options,
        localAddress,
        port: port || 80,
        host: hostname
      })
    }

    // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket
    if (options.keepAlive == null || options.keepAlive) {
      const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay
      socket.setKeepAlive(true, keepAliveInitialDelay)
    }

    const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout)

    socket
      .setNoDelay(true)
      .once(protocol === 'https:' ? 'secureConnect' : 'connect', function () {
        cancelTimeout()

        if (callback) {
          const cb = callback
          callback = null
          cb(null, this)
        }
      })
      .on('error', function (err) {
        cancelTimeout()

        if (callback) {
          const cb = callback
          callback = null
          cb(err)
        }
      })

    return socket
  }
}

function setupTimeout (onConnectTimeout, timeout) {
  if (!timeout) {
    return () => {}
  }

  let s1 = null
  let s2 = null
  const timeoutId = setTimeout(() => {
    // setImmediate is added to make sure that we priotorise socket error events over timeouts
    s1 = setImmediate(() => {
      if (process.platform === 'win32') {
        // Windows needs an extra setImmediate probably due to implementation differences in the socket logic
        s2 = setImmediate(() => onConnectTimeout())
      } else {
        onConnectTimeout()
      }
    })
  }, timeout)
  return () => {
    clearTimeout(timeoutId)
    clearImmediate(s1)
    clearImmediate(s2)
  }
}

function onConnectTimeout (socket) {
  util.destroy(socket, new ConnectTimeoutError())
}

module.exports = buildConnector


/***/ }),

/***/ 7281:
/***/ ((module) => {

"use strict";


/** @type {Record<string, string | undefined>} */
const headerNameLowerCasedRecord = {}

// https://developer.mozilla.org/docs/Web/HTTP/Headers
const wellknownHeaderNames = [
  'Accept',
  'Accept-Encoding',
  'Accept-Language',
  'Accept-Ranges',
  'Access-Control-Allow-Credentials',
  'Access-Control-Allow-Headers',
  'Access-Control-Allow-Methods',
  'Access-Control-Allow-Origin',
  'Access-Control-Expose-Headers',
  'Access-Control-Max-Age',
  'Access-Control-Request-Headers',
  'Access-Control-Request-Method',
  'Age',
  'Allow',
  'Alt-Svc',
  'Alt-Used',
  'Authorization',
  'Cache-Control',
  'Clear-Site-Data',
  'Connection',
  'Content-Disposition',
  'Content-Encoding',
  'Content-Language',
  'Content-Length',
  'Content-Location',
  'Content-Range',
  'Content-Security-Policy',
  'Content-Security-Policy-Report-Only',
  'Content-Type',
  'Cookie',
  'Cross-Origin-Embedder-Policy',
  'Cross-Origin-Opener-Policy',
  'Cross-Origin-Resource-Policy',
  'Date',
  'Device-Memory',
  'Downlink',
  'ECT',
  'ETag',
  'Expect',
  'Expect-CT',
  'Expires',
  'Forwarded',
  'From',
  'Host',
  'If-Match',
  'If-Modified-Since',
  'If-None-Match',
  'If-Range',
  'If-Unmodified-Since',
  'Keep-Alive',
  'Last-Modified',
  'Link',
  'Location',
  'Max-Forwards',
  'Origin',
  'Permissions-Policy',
  'Pragma',
  'Proxy-Authenticate',
  'Proxy-Authorization',
  'RTT',
  'Range',
  'Referer',
  'Referrer-Policy',
  'Refresh',
  'Retry-After',
  'Sec-WebSocket-Accept',
  'Sec-WebSocket-Extensions',
  'Sec-WebSocket-Key',
  'Sec-WebSocket-Protocol',
  'Sec-WebSocket-Version',
  'Server',
  'Server-Timing',
  'Service-Worker-Allowed',
  'Service-Worker-Navigation-Preload',
  'Set-Cookie',
  'SourceMap',
  'Strict-Transport-Security',
  'Supports-Loading-Mode',
  'TE',
  'Timing-Allow-Origin',
  'Trailer',
  'Transfer-Encoding',
  'Upgrade',
  'Upgrade-Insecure-Requests',
  'User-Agent',
  'Vary',
  'Via',
  'WWW-Authenticate',
  'X-Content-Type-Options',
  'X-DNS-Prefetch-Control',
  'X-Frame-Options',
  'X-Permitted-Cross-Domain-Policies',
  'X-Powered-By',
  'X-Requested-With',
  'X-XSS-Protection'
]

for (let i = 0; i < wellknownHeaderNames.length; ++i) {
  const key = wellknownHeaderNames[i]
  const lowerCasedKey = key.toLowerCase()
  headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] =
    lowerCasedKey
}

// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf(headerNameLowerCasedRecord, null)

module.exports = {
  wellknownHeaderNames,
  headerNameLowerCasedRecord
}


/***/ }),

/***/ 1581:
/***/ ((module) => {

"use strict";


class UndiciError extends Error {
  constructor (message) {
    super(message)
    this.name = 'UndiciError'
    this.code = 'UND_ERR'
  }
}

class ConnectTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ConnectTimeoutError)
    this.name = 'ConnectTimeoutError'
    this.message = message || 'Connect Timeout Error'
    this.code = 'UND_ERR_CONNECT_TIMEOUT'
  }
}

class HeadersTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, HeadersTimeoutError)
    this.name = 'HeadersTimeoutError'
    this.message = message || 'Headers Timeout Error'
    this.code = 'UND_ERR_HEADERS_TIMEOUT'
  }
}

class HeadersOverflowError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, HeadersOverflowError)
    this.name = 'HeadersOverflowError'
    this.message = message || 'Headers Overflow Error'
    this.code = 'UND_ERR_HEADERS_OVERFLOW'
  }
}

class BodyTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, BodyTimeoutError)
    this.name = 'BodyTimeoutError'
    this.message = message || 'Body Timeout Error'
    this.code = 'UND_ERR_BODY_TIMEOUT'
  }
}

class ResponseStatusCodeError extends UndiciError {
  constructor (message, statusCode, headers, body) {
    super(message)
    Error.captureStackTrace(this, ResponseStatusCodeError)
    this.name = 'ResponseStatusCodeError'
    this.message = message || 'Response Status Code Error'
    this.code = 'UND_ERR_RESPONSE_STATUS_CODE'
    this.body = body
    this.status = statusCode
    this.statusCode = statusCode
    this.headers = headers
  }
}

class InvalidArgumentError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InvalidArgumentError)
    this.name = 'InvalidArgumentError'
    this.message = message || 'Invalid Argument Error'
    this.code = 'UND_ERR_INVALID_ARG'
  }
}

class InvalidReturnValueError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InvalidReturnValueError)
    this.name = 'InvalidReturnValueError'
    this.message = message || 'Invalid Return Value Error'
    this.code = 'UND_ERR_INVALID_RETURN_VALUE'
  }
}

class RequestAbortedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, RequestAbortedError)
    this.name = 'AbortError'
    this.message = message || 'Request aborted'
    this.code = 'UND_ERR_ABORTED'
  }
}

class InformationalError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InformationalError)
    this.name = 'InformationalError'
    this.message = message || 'Request information'
    this.code = 'UND_ERR_INFO'
  }
}

class RequestContentLengthMismatchError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, RequestContentLengthMismatchError)
    this.name = 'RequestContentLengthMismatchError'
    this.message = message || 'Request body length does not match content-length header'
    this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH'
  }
}

class ResponseContentLengthMismatchError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ResponseContentLengthMismatchError)
    this.name = 'ResponseContentLengthMismatchError'
    this.message = message || 'Response body length does not match content-length header'
    this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH'
  }
}

class ClientDestroyedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ClientDestroyedError)
    this.name = 'ClientDestroyedError'
    this.message = message || 'The client is destroyed'
    this.code = 'UND_ERR_DESTROYED'
  }
}

class ClientClosedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ClientClosedError)
    this.name = 'ClientClosedError'
    this.message = message || 'The client is closed'
    this.code = 'UND_ERR_CLOSED'
  }
}

class SocketError extends UndiciError {
  constructor (message, socket) {
    super(message)
    Error.captureStackTrace(this, SocketError)
    this.name = 'SocketError'
    this.message = message || 'Socket error'
    this.code = 'UND_ERR_SOCKET'
    this.socket = socket
  }
}

class NotSupportedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, NotSupportedError)
    this.name = 'NotSupportedError'
    this.message = message || 'Not supported error'
    this.code = 'UND_ERR_NOT_SUPPORTED'
  }
}

class BalancedPoolMissingUpstreamError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, NotSupportedError)
    this.name = 'MissingUpstreamError'
    this.message = message || 'No upstream has been added to the BalancedPool'
    this.code = 'UND_ERR_BPL_MISSING_UPSTREAM'
  }
}

class HTTPParserError extends Error {
  constructor (message, code, data) {
    super(message)
    Error.captureStackTrace(this, HTTPParserError)
    this.name = 'HTTPParserError'
    this.code = code ? `HPE_${code}` : undefined
    this.data = data ? data.toString() : undefined
  }
}

class ResponseExceededMaxSizeError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ResponseExceededMaxSizeError)
    this.name = 'ResponseExceededMaxSizeError'
    this.message = message || 'Response content exceeded max size'
    this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE'
  }
}

class RequestRetryError extends UndiciError {
  constructor (message, code, { headers, data }) {
    super(message)
    Error.captureStackTrace(this, RequestRetryError)
    this.name = 'RequestRetryError'
    this.message = message || 'Request retry error'
    this.code = 'UND_ERR_REQ_RETRY'
    this.statusCode = code
    this.data = data
    this.headers = headers
  }
}

module.exports = {
  HTTPParserError,
  UndiciError,
  HeadersTimeoutError,
  HeadersOverflowError,
  BodyTimeoutError,
  RequestContentLengthMismatchError,
  ConnectTimeoutError,
  ResponseStatusCodeError,
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError,
  ClientDestroyedError,
  ClientClosedError,
  InformationalError,
  SocketError,
  NotSupportedError,
  ResponseContentLengthMismatchError,
  BalancedPoolMissingUpstreamError,
  ResponseExceededMaxSizeError,
  RequestRetryError
}


/***/ }),

/***/ 3505:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  InvalidArgumentError,
  NotSupportedError
} = __nccwpck_require__(1581)
const assert = __nccwpck_require__(2613)
const { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = __nccwpck_require__(5773)
const util = __nccwpck_require__(4606)

// tokenRegExp and headerCharRegex have been lifted from
// https://github.com/nodejs/node/blob/main/lib/_http_common.js

/**
 * Verifies that the given val is a valid HTTP token
 * per the rules defined in RFC 7230
 * See https://tools.ietf.org/html/rfc7230#section-3.2.6
 */
const tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/

/**
 * Matches if val contains an invalid field-vchar
 *  field-value    = *( field-content / obs-fold )
 *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 *  field-vchar    = VCHAR / obs-text
 */
const headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/

// Verifies that a given path is valid does not contain control chars \x00 to \x20
const invalidPathRegex = /[^\u0021-\u00ff]/

const kHandler = Symbol('handler')

const channels = {}

let extractBody

try {
  const diagnosticsChannel = __nccwpck_require__(1637)
  channels.create = diagnosticsChannel.channel('undici:request:create')
  channels.bodySent = diagnosticsChannel.channel('undici:request:bodySent')
  channels.headers = diagnosticsChannel.channel('undici:request:headers')
  channels.trailers = diagnosticsChannel.channel('undici:request:trailers')
  channels.error = diagnosticsChannel.channel('undici:request:error')
} catch {
  channels.create = { hasSubscribers: false }
  channels.bodySent = { hasSubscribers: false }
  channels.headers = { hasSubscribers: false }
  channels.trailers = { hasSubscribers: false }
  channels.error = { hasSubscribers: false }
}

class Request {
  constructor (origin, {
    path,
    method,
    body,
    headers,
    query,
    idempotent,
    blocking,
    upgrade,
    headersTimeout,
    bodyTimeout,
    reset,
    throwOnError,
    expectContinue
  }, handler) {
    if (typeof path !== 'string') {
      throw new InvalidArgumentError('path must be a string')
    } else if (
      path[0] !== '/' &&
      !(path.startsWith('http://') || path.startsWith('https://')) &&
      method !== 'CONNECT'
    ) {
      throw new InvalidArgumentError('path must be an absolute URL or start with a slash')
    } else if (invalidPathRegex.exec(path) !== null) {
      throw new InvalidArgumentError('invalid request path')
    }

    if (typeof method !== 'string') {
      throw new InvalidArgumentError('method must be a string')
    } else if (tokenRegExp.exec(method) === null) {
      throw new InvalidArgumentError('invalid request method')
    }

    if (upgrade && typeof upgrade !== 'string') {
      throw new InvalidArgumentError('upgrade must be a string')
    }

    if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
      throw new InvalidArgumentError('invalid headersTimeout')
    }

    if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
      throw new InvalidArgumentError('invalid bodyTimeout')
    }

    if (reset != null && typeof reset !== 'boolean') {
      throw new InvalidArgumentError('invalid reset')
    }

    if (expectContinue != null && typeof expectContinue !== 'boolean') {
      throw new InvalidArgumentError('invalid expectContinue')
    }

    this.headersTimeout = headersTimeout

    this.bodyTimeout = bodyTimeout

    this.throwOnError = throwOnError === true

    this.method = method

    this.abort = null

    if (body == null) {
      this.body = null
    } else if (util.isStream(body)) {
      this.body = body

      const rState = this.body._readableState
      if (!rState || !rState.autoDestroy) {
        this.endHandler = function autoDestroy () {
          util.destroy(this)
        }
        this.body.on('end', this.endHandler)
      }

      this.errorHandler = err => {
        if (this.abort) {
          this.abort(err)
        } else {
          this.error = err
        }
      }
      this.body.on('error', this.errorHandler)
    } else if (util.isBuffer(body)) {
      this.body = body.byteLength ? body : null
    } else if (ArrayBuffer.isView(body)) {
      this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null
    } else if (body instanceof ArrayBuffer) {
      this.body = body.byteLength ? Buffer.from(body) : null
    } else if (typeof body === 'string') {
      this.body = body.length ? Buffer.from(body) : null
    } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {
      this.body = body
    } else {
      throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable')
    }

    this.completed = false

    this.aborted = false

    this.upgrade = upgrade || null

    this.path = query ? util.buildURL(path, query) : path

    this.origin = origin

    this.idempotent = idempotent == null
      ? method === 'HEAD' || method === 'GET'
      : idempotent

    this.blocking = blocking == null ? false : blocking

    this.reset = reset == null ? null : reset

    this.host = null

    this.contentLength = null

    this.contentType = null

    this.headers = ''

    // Only for H2
    this.expectContinue = expectContinue != null ? expectContinue : false

    if (Array.isArray(headers)) {
      if (headers.length % 2 !== 0) {
        throw new InvalidArgumentError('headers array must be even')
      }
      for (let i = 0; i < headers.length; i += 2) {
        processHeader(this, headers[i], headers[i + 1])
      }
    } else if (headers && typeof headers === 'object') {
      const keys = Object.keys(headers)
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i]
        processHeader(this, key, headers[key])
      }
    } else if (headers != null) {
      throw new InvalidArgumentError('headers must be an object or an array')
    }

    if (util.isFormDataLike(this.body)) {
      if (util.nodeMajor < 16 || (util.nodeMajor === 16 && util.nodeMinor < 8)) {
        throw new InvalidArgumentError('Form-Data bodies are only supported in node v16.8 and newer.')
      }

      if (!extractBody) {
        extractBody = (__nccwpck_require__(8009).extractBody)
      }

      const [bodyStream, contentType] = extractBody(body)
      if (this.contentType == null) {
        this.contentType = contentType
        this.headers += `content-type: ${contentType}\r\n`
      }
      this.body = bodyStream.stream
      this.contentLength = bodyStream.length
    } else if (util.isBlobLike(body) && this.contentType == null && body.type) {
      this.contentType = body.type
      this.headers += `content-type: ${body.type}\r\n`
    }

    util.validateHandler(handler, method, upgrade)

    this.servername = util.getServerName(this.host)

    this[kHandler] = handler

    if (channels.create.hasSubscribers) {
      channels.create.publish({ request: this })
    }
  }

  onBodySent (chunk) {
    if (this[kHandler].onBodySent) {
      try {
        return this[kHandler].onBodySent(chunk)
      } catch (err) {
        this.abort(err)
      }
    }
  }

  onRequestSent () {
    if (channels.bodySent.hasSubscribers) {
      channels.bodySent.publish({ request: this })
    }

    if (this[kHandler].onRequestSent) {
      try {
        return this[kHandler].onRequestSent()
      } catch (err) {
        this.abort(err)
      }
    }
  }

  onConnect (abort) {
    assert(!this.aborted)
    assert(!this.completed)

    if (this.error) {
      abort(this.error)
    } else {
      this.abort = abort
      return this[kHandler].onConnect(abort)
    }
  }

  onHeaders (statusCode, headers, resume, statusText) {
    assert(!this.aborted)
    assert(!this.completed)

    if (channels.headers.hasSubscribers) {
      channels.headers.publish({ request: this, response: { statusCode, headers, statusText } })
    }

    try {
      return this[kHandler].onHeaders(statusCode, headers, resume, statusText)
    } catch (err) {
      this.abort(err)
    }
  }

  onData (chunk) {
    assert(!this.aborted)
    assert(!this.completed)

    try {
      return this[kHandler].onData(chunk)
    } catch (err) {
      this.abort(err)
      return false
    }
  }

  onUpgrade (statusCode, headers, socket) {
    assert(!this.aborted)
    assert(!this.completed)

    return this[kHandler].onUpgrade(statusCode, headers, socket)
  }

  onComplete (trailers) {
    this.onFinally()

    assert(!this.aborted)

    this.completed = true
    if (channels.trailers.hasSubscribers) {
      channels.trailers.publish({ request: this, trailers })
    }

    try {
      return this[kHandler].onComplete(trailers)
    } catch (err) {
      // TODO (fix): This might be a bad idea?
      this.onError(err)
    }
  }

  onError (error) {
    this.onFinally()

    if (channels.error.hasSubscribers) {
      channels.error.publish({ request: this, error })
    }

    if (this.aborted) {
      return
    }
    this.aborted = true

    return this[kHandler].onError(error)
  }

  onFinally () {
    if (this.errorHandler) {
      this.body.off('error', this.errorHandler)
      this.errorHandler = null
    }

    if (this.endHandler) {
      this.body.off('end', this.endHandler)
      this.endHandler = null
    }
  }

  // TODO: adjust to support H2
  addHeader (key, value) {
    processHeader(this, key, value)
    return this
  }

  static [kHTTP1BuildRequest] (origin, opts, handler) {
    // TODO: Migrate header parsing here, to make Requests
    // HTTP agnostic
    return new Request(origin, opts, handler)
  }

  static [kHTTP2BuildRequest] (origin, opts, handler) {
    const headers = opts.headers
    opts = { ...opts, headers: null }

    const request = new Request(origin, opts, handler)

    request.headers = {}

    if (Array.isArray(headers)) {
      if (headers.length % 2 !== 0) {
        throw new InvalidArgumentError('headers array must be even')
      }
      for (let i = 0; i < headers.length; i += 2) {
        processHeader(request, headers[i], headers[i + 1], true)
      }
    } else if (headers && typeof headers === 'object') {
      const keys = Object.keys(headers)
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i]
        processHeader(request, key, headers[key], true)
      }
    } else if (headers != null) {
      throw new InvalidArgumentError('headers must be an object or an array')
    }

    return request
  }

  static [kHTTP2CopyHeaders] (raw) {
    const rawHeaders = raw.split('\r\n')
    const headers = {}

    for (const header of rawHeaders) {
      const [key, value] = header.split(': ')

      if (value == null || value.length === 0) continue

      if (headers[key]) headers[key] += `,${value}`
      else headers[key] = value
    }

    return headers
  }
}

function processHeaderValue (key, val, skipAppend) {
  if (val && typeof val === 'object') {
    throw new InvalidArgumentError(`invalid ${key} header`)
  }

  val = val != null ? `${val}` : ''

  if (headerCharRegex.exec(val) !== null) {
    throw new InvalidArgumentError(`invalid ${key} header`)
  }

  return skipAppend ? val : `${key}: ${val}\r\n`
}

function processHeader (request, key, val, skipAppend = false) {
  if (val && (typeof val === 'object' && !Array.isArray(val))) {
    throw new InvalidArgumentError(`invalid ${key} header`)
  } else if (val === undefined) {
    return
  }

  if (
    request.host === null &&
    key.length === 4 &&
    key.toLowerCase() === 'host'
  ) {
    if (headerCharRegex.exec(val) !== null) {
      throw new InvalidArgumentError(`invalid ${key} header`)
    }
    // Consumed by Client
    request.host = val
  } else if (
    request.contentLength === null &&
    key.length === 14 &&
    key.toLowerCase() === 'content-length'
  ) {
    request.contentLength = parseInt(val, 10)
    if (!Number.isFinite(request.contentLength)) {
      throw new InvalidArgumentError('invalid content-length header')
    }
  } else if (
    request.contentType === null &&
    key.length === 12 &&
    key.toLowerCase() === 'content-type'
  ) {
    request.contentType = val
    if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)
    else request.headers += processHeaderValue(key, val)
  } else if (
    key.length === 17 &&
    key.toLowerCase() === 'transfer-encoding'
  ) {
    throw new InvalidArgumentError('invalid transfer-encoding header')
  } else if (
    key.length === 10 &&
    key.toLowerCase() === 'connection'
  ) {
    const value = typeof val === 'string' ? val.toLowerCase() : null
    if (value !== 'close' && value !== 'keep-alive') {
      throw new InvalidArgumentError('invalid connection header')
    } else if (value === 'close') {
      request.reset = true
    }
  } else if (
    key.length === 10 &&
    key.toLowerCase() === 'keep-alive'
  ) {
    throw new InvalidArgumentError('invalid keep-alive header')
  } else if (
    key.length === 7 &&
    key.toLowerCase() === 'upgrade'
  ) {
    throw new InvalidArgumentError('invalid upgrade header')
  } else if (
    key.length === 6 &&
    key.toLowerCase() === 'expect'
  ) {
    throw new NotSupportedError('expect header not supported')
  } else if (tokenRegExp.exec(key) === null) {
    throw new InvalidArgumentError('invalid header key')
  } else {
    if (Array.isArray(val)) {
      for (let i = 0; i < val.length; i++) {
        if (skipAppend) {
          if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`
          else request.headers[key] = processHeaderValue(key, val[i], skipAppend)
        } else {
          request.headers += processHeaderValue(key, val[i])
        }
      }
    } else {
      if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)
      else request.headers += processHeaderValue(key, val)
    }
  }
}

module.exports = Request


/***/ }),

/***/ 5773:
/***/ ((module) => {

module.exports = {
  kClose: Symbol('close'),
  kDestroy: Symbol('destroy'),
  kDispatch: Symbol('dispatch'),
  kUrl: Symbol('url'),
  kWriting: Symbol('writing'),
  kResuming: Symbol('resuming'),
  kQueue: Symbol('queue'),
  kConnect: Symbol('connect'),
  kConnecting: Symbol('connecting'),
  kHeadersList: Symbol('headers list'),
  kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),
  kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),
  kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),
  kKeepAliveTimeoutValue: Symbol('keep alive timeout'),
  kKeepAlive: Symbol('keep alive'),
  kHeadersTimeout: Symbol('headers timeout'),
  kBodyTimeout: Symbol('body timeout'),
  kServerName: Symbol('server name'),
  kLocalAddress: Symbol('local address'),
  kHost: Symbol('host'),
  kNoRef: Symbol('no ref'),
  kBodyUsed: Symbol('used'),
  kRunning: Symbol('running'),
  kBlocking: Symbol('blocking'),
  kPending: Symbol('pending'),
  kSize: Symbol('size'),
  kBusy: Symbol('busy'),
  kQueued: Symbol('queued'),
  kFree: Symbol('free'),
  kConnected: Symbol('connected'),
  kClosed: Symbol('closed'),
  kNeedDrain: Symbol('need drain'),
  kReset: Symbol('reset'),
  kDestroyed: Symbol.for('nodejs.stream.destroyed'),
  kMaxHeadersSize: Symbol('max headers size'),
  kRunningIdx: Symbol('running index'),
  kPendingIdx: Symbol('pending index'),
  kError: Symbol('error'),
  kClients: Symbol('clients'),
  kClient: Symbol('client'),
  kParser: Symbol('parser'),
  kOnDestroyed: Symbol('destroy callbacks'),
  kPipelining: Symbol('pipelining'),
  kSocket: Symbol('socket'),
  kHostHeader: Symbol('host header'),
  kConnector: Symbol('connector'),
  kStrictContentLength: Symbol('strict content length'),
  kMaxRedirections: Symbol('maxRedirections'),
  kMaxRequests: Symbol('maxRequestsPerClient'),
  kProxy: Symbol('proxy agent options'),
  kCounter: Symbol('socket request counter'),
  kInterceptors: Symbol('dispatch interceptors'),
  kMaxResponseSize: Symbol('max response size'),
  kHTTP2Session: Symbol('http2Session'),
  kHTTP2SessionState: Symbol('http2Session state'),
  kHTTP2BuildRequest: Symbol('http2 build request'),
  kHTTP1BuildRequest: Symbol('http1 build request'),
  kHTTP2CopyHeaders: Symbol('http2 copy headers'),
  kHTTPConnVersion: Symbol('http connection version'),
  kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),
  kConstruct: Symbol('constructable')
}


/***/ }),

/***/ 4606:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const assert = __nccwpck_require__(2613)
const { kDestroyed, kBodyUsed } = __nccwpck_require__(5773)
const { IncomingMessage } = __nccwpck_require__(8611)
const stream = __nccwpck_require__(2203)
const net = __nccwpck_require__(9278)
const { InvalidArgumentError } = __nccwpck_require__(1581)
const { Blob } = __nccwpck_require__(181)
const nodeUtil = __nccwpck_require__(9023)
const { stringify } = __nccwpck_require__(3480)
const { headerNameLowerCasedRecord } = __nccwpck_require__(7281)

const [nodeMajor, nodeMinor] = process.versions.node.split('.').map(v => Number(v))

function nop () {}

function isStream (obj) {
  return obj && typeof obj === 'object' && typeof obj.pipe === 'function' && typeof obj.on === 'function'
}

// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)
function isBlobLike (object) {
  return (Blob && object instanceof Blob) || (
    object &&
    typeof object === 'object' &&
    (typeof object.stream === 'function' ||
      typeof object.arrayBuffer === 'function') &&
    /^(Blob|File)$/.test(object[Symbol.toStringTag])
  )
}

function buildURL (url, queryParams) {
  if (url.includes('?') || url.includes('#')) {
    throw new Error('Query params cannot be passed when url already contains "?" or "#".')
  }

  const stringified = stringify(queryParams)

  if (stringified) {
    url += '?' + stringified
  }

  return url
}

function parseURL (url) {
  if (typeof url === 'string') {
    url = new URL(url)

    if (!/^https?:/.test(url.origin || url.protocol)) {
      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')
    }

    return url
  }

  if (!url || typeof url !== 'object') {
    throw new InvalidArgumentError('Invalid URL: The URL argument must be a non-null object.')
  }

  if (!/^https?:/.test(url.origin || url.protocol)) {
    throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')
  }

  if (!(url instanceof URL)) {
    if (url.port != null && url.port !== '' && !Number.isFinite(parseInt(url.port))) {
      throw new InvalidArgumentError('Invalid URL: port must be a valid integer or a string representation of an integer.')
    }

    if (url.path != null && typeof url.path !== 'string') {
      throw new InvalidArgumentError('Invalid URL path: the path must be a string or null/undefined.')
    }

    if (url.pathname != null && typeof url.pathname !== 'string') {
      throw new InvalidArgumentError('Invalid URL pathname: the pathname must be a string or null/undefined.')
    }

    if (url.hostname != null && typeof url.hostname !== 'string') {
      throw new InvalidArgumentError('Invalid URL hostname: the hostname must be a string or null/undefined.')
    }

    if (url.origin != null && typeof url.origin !== 'string') {
      throw new InvalidArgumentError('Invalid URL origin: the origin must be a string or null/undefined.')
    }

    const port = url.port != null
      ? url.port
      : (url.protocol === 'https:' ? 443 : 80)
    let origin = url.origin != null
      ? url.origin
      : `${url.protocol}//${url.hostname}:${port}`
    let path = url.path != null
      ? url.path
      : `${url.pathname || ''}${url.search || ''}`

    if (origin.endsWith('/')) {
      origin = origin.substring(0, origin.length - 1)
    }

    if (path && !path.startsWith('/')) {
      path = `/${path}`
    }
    // new URL(path, origin) is unsafe when `path` contains an absolute URL
    // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:
    // If first parameter is a relative URL, second param is required, and will be used as the base URL.
    // If first parameter is an absolute URL, a given second param will be ignored.
    url = new URL(origin + path)
  }

  return url
}

function parseOrigin (url) {
  url = parseURL(url)

  if (url.pathname !== '/' || url.search || url.hash) {
    throw new InvalidArgumentError('invalid url')
  }

  return url
}

function getHostname (host) {
  if (host[0] === '[') {
    const idx = host.indexOf(']')

    assert(idx !== -1)
    return host.substring(1, idx)
  }

  const idx = host.indexOf(':')
  if (idx === -1) return host

  return host.substring(0, idx)
}

// IP addresses are not valid server names per RFC6066
// > Currently, the only server names supported are DNS hostnames
function getServerName (host) {
  if (!host) {
    return null
  }

  assert.strictEqual(typeof host, 'string')

  const servername = getHostname(host)
  if (net.isIP(servername)) {
    return ''
  }

  return servername
}

function deepClone (obj) {
  return JSON.parse(JSON.stringify(obj))
}

function isAsyncIterable (obj) {
  return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function')
}

function isIterable (obj) {
  return !!(obj != null && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function'))
}

function bodyLength (body) {
  if (body == null) {
    return 0
  } else if (isStream(body)) {
    const state = body._readableState
    return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length)
      ? state.length
      : null
  } else if (isBlobLike(body)) {
    return body.size != null ? body.size : null
  } else if (isBuffer(body)) {
    return body.byteLength
  }

  return null
}

function isDestroyed (stream) {
  return !stream || !!(stream.destroyed || stream[kDestroyed])
}

function isReadableAborted (stream) {
  const state = stream && stream._readableState
  return isDestroyed(stream) && state && !state.endEmitted
}

function destroy (stream, err) {
  if (stream == null || !isStream(stream) || isDestroyed(stream)) {
    return
  }

  if (typeof stream.destroy === 'function') {
    if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {
      // See: https://github.com/nodejs/node/pull/38505/files
      stream.socket = null
    }

    stream.destroy(err)
  } else if (err) {
    process.nextTick((stream, err) => {
      stream.emit('error', err)
    }, stream, err)
  }

  if (stream.destroyed !== true) {
    stream[kDestroyed] = true
  }
}

const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/
function parseKeepAliveTimeout (val) {
  const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR)
  return m ? parseInt(m[1], 10) * 1000 : null
}

/**
 * Retrieves a header name and returns its lowercase value.
 * @param {string | Buffer} value Header name
 * @returns {string}
 */
function headerNameToString (value) {
  return headerNameLowerCasedRecord[value] || value.toLowerCase()
}

function parseHeaders (headers, obj = {}) {
  // For H2 support
  if (!Array.isArray(headers)) return headers

  for (let i = 0; i < headers.length; i += 2) {
    const key = headers[i].toString().toLowerCase()
    let val = obj[key]

    if (!val) {
      if (Array.isArray(headers[i + 1])) {
        obj[key] = headers[i + 1].map(x => x.toString('utf8'))
      } else {
        obj[key] = headers[i + 1].toString('utf8')
      }
    } else {
      if (!Array.isArray(val)) {
        val = [val]
        obj[key] = val
      }
      val.push(headers[i + 1].toString('utf8'))
    }
  }

  // See https://github.com/nodejs/node/pull/46528
  if ('content-length' in obj && 'content-disposition' in obj) {
    obj['content-disposition'] = Buffer.from(obj['content-disposition']).toString('latin1')
  }

  return obj
}

function parseRawHeaders (headers) {
  const ret = []
  let hasContentLength = false
  let contentDispositionIdx = -1

  for (let n = 0; n < headers.length; n += 2) {
    const key = headers[n + 0].toString()
    const val = headers[n + 1].toString('utf8')

    if (key.length === 14 && (key === 'content-length' || key.toLowerCase() === 'content-length')) {
      ret.push(key, val)
      hasContentLength = true
    } else if (key.length === 19 && (key === 'content-disposition' || key.toLowerCase() === 'content-disposition')) {
      contentDispositionIdx = ret.push(key, val) - 1
    } else {
      ret.push(key, val)
    }
  }

  // See https://github.com/nodejs/node/pull/46528
  if (hasContentLength && contentDispositionIdx !== -1) {
    ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString('latin1')
  }

  return ret
}

function isBuffer (buffer) {
  // See, https://github.com/mcollina/undici/pull/319
  return buffer instanceof Uint8Array || Buffer.isBuffer(buffer)
}

function validateHandler (handler, method, upgrade) {
  if (!handler || typeof handler !== 'object') {
    throw new InvalidArgumentError('handler must be an object')
  }

  if (typeof handler.onConnect !== 'function') {
    throw new InvalidArgumentError('invalid onConnect method')
  }

  if (typeof handler.onError !== 'function') {
    throw new InvalidArgumentError('invalid onError method')
  }

  if (typeof handler.onBodySent !== 'function' && handler.onBodySent !== undefined) {
    throw new InvalidArgumentError('invalid onBodySent method')
  }

  if (upgrade || method === 'CONNECT') {
    if (typeof handler.onUpgrade !== 'function') {
      throw new InvalidArgumentError('invalid onUpgrade method')
    }
  } else {
    if (typeof handler.onHeaders !== 'function') {
      throw new InvalidArgumentError('invalid onHeaders method')
    }

    if (typeof handler.onData !== 'function') {
      throw new InvalidArgumentError('invalid onData method')
    }

    if (typeof handler.onComplete !== 'function') {
      throw new InvalidArgumentError('invalid onComplete method')
    }
  }
}

// A body is disturbed if it has been read from and it cannot
// be re-used without losing state or data.
function isDisturbed (body) {
  return !!(body && (
    stream.isDisturbed
      ? stream.isDisturbed(body) || body[kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?
      : body[kBodyUsed] ||
        body.readableDidRead ||
        (body._readableState && body._readableState.dataEmitted) ||
        isReadableAborted(body)
  ))
}

function isErrored (body) {
  return !!(body && (
    stream.isErrored
      ? stream.isErrored(body)
      : /state: 'errored'/.test(nodeUtil.inspect(body)
      )))
}

function isReadable (body) {
  return !!(body && (
    stream.isReadable
      ? stream.isReadable(body)
      : /state: 'readable'/.test(nodeUtil.inspect(body)
      )))
}

function getSocketInfo (socket) {
  return {
    localAddress: socket.localAddress,
    localPort: socket.localPort,
    remoteAddress: socket.remoteAddress,
    remotePort: socket.remotePort,
    remoteFamily: socket.remoteFamily,
    timeout: socket.timeout,
    bytesWritten: socket.bytesWritten,
    bytesRead: socket.bytesRead
  }
}

async function * convertIterableToBuffer (iterable) {
  for await (const chunk of iterable) {
    yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk)
  }
}

let ReadableStream
function ReadableStreamFrom (iterable) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(3774).ReadableStream)
  }

  if (ReadableStream.from) {
    return ReadableStream.from(convertIterableToBuffer(iterable))
  }

  let iterator
  return new ReadableStream(
    {
      async start () {
        iterator = iterable[Symbol.asyncIterator]()
      },
      async pull (controller) {
        const { done, value } = await iterator.next()
        if (done) {
          queueMicrotask(() => {
            controller.close()
          })
        } else {
          const buf = Buffer.isBuffer(value) ? value : Buffer.from(value)
          controller.enqueue(new Uint8Array(buf))
        }
        return controller.desiredSize > 0
      },
      async cancel (reason) {
        await iterator.return()
      }
    },
    0
  )
}

// The chunk should be a FormData instance and contains
// all the required methods.
function isFormDataLike (object) {
  return (
    object &&
    typeof object === 'object' &&
    typeof object.append === 'function' &&
    typeof object.delete === 'function' &&
    typeof object.get === 'function' &&
    typeof object.getAll === 'function' &&
    typeof object.has === 'function' &&
    typeof object.set === 'function' &&
    object[Symbol.toStringTag] === 'FormData'
  )
}

function throwIfAborted (signal) {
  if (!signal) { return }
  if (typeof signal.throwIfAborted === 'function') {
    signal.throwIfAborted()
  } else {
    if (signal.aborted) {
      // DOMException not available < v17.0.0
      const err = new Error('The operation was aborted')
      err.name = 'AbortError'
      throw err
    }
  }
}

function addAbortListener (signal, listener) {
  if ('addEventListener' in signal) {
    signal.addEventListener('abort', listener, { once: true })
    return () => signal.removeEventListener('abort', listener)
  }
  signal.addListener('abort', listener)
  return () => signal.removeListener('abort', listener)
}

const hasToWellFormed = !!String.prototype.toWellFormed

/**
 * @param {string} val
 */
function toUSVString (val) {
  if (hasToWellFormed) {
    return `${val}`.toWellFormed()
  } else if (nodeUtil.toUSVString) {
    return nodeUtil.toUSVString(val)
  }

  return `${val}`
}

// Parsed accordingly to RFC 9110
// https://www.rfc-editor.org/rfc/rfc9110#field.content-range
function parseRangeHeader (range) {
  if (range == null || range === '') return { start: 0, end: null, size: null }

  const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null
  return m
    ? {
        start: parseInt(m[1]),
        end: m[2] ? parseInt(m[2]) : null,
        size: m[3] ? parseInt(m[3]) : null
      }
    : null
}

const kEnumerableProperty = Object.create(null)
kEnumerableProperty.enumerable = true

module.exports = {
  kEnumerableProperty,
  nop,
  isDisturbed,
  isErrored,
  isReadable,
  toUSVString,
  isReadableAborted,
  isBlobLike,
  parseOrigin,
  parseURL,
  getServerName,
  isStream,
  isIterable,
  isAsyncIterable,
  isDestroyed,
  headerNameToString,
  parseRawHeaders,
  parseHeaders,
  parseKeepAliveTimeout,
  destroy,
  bodyLength,
  deepClone,
  ReadableStreamFrom,
  isBuffer,
  validateHandler,
  getSocketInfo,
  isFormDataLike,
  buildURL,
  throwIfAborted,
  addAbortListener,
  parseRangeHeader,
  nodeMajor,
  nodeMinor,
  nodeHasAutoSelectFamily: nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 13),
  safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE']
}


/***/ }),

/***/ 9787:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Dispatcher = __nccwpck_require__(3553)
const {
  ClientDestroyedError,
  ClientClosedError,
  InvalidArgumentError
} = __nccwpck_require__(1581)
const { kDestroy, kClose, kDispatch, kInterceptors } = __nccwpck_require__(5773)

const kDestroyed = Symbol('destroyed')
const kClosed = Symbol('closed')
const kOnDestroyed = Symbol('onDestroyed')
const kOnClosed = Symbol('onClosed')
const kInterceptedDispatch = Symbol('Intercepted Dispatch')

class DispatcherBase extends Dispatcher {
  constructor () {
    super()

    this[kDestroyed] = false
    this[kOnDestroyed] = null
    this[kClosed] = false
    this[kOnClosed] = []
  }

  get destroyed () {
    return this[kDestroyed]
  }

  get closed () {
    return this[kClosed]
  }

  get interceptors () {
    return this[kInterceptors]
  }

  set interceptors (newInterceptors) {
    if (newInterceptors) {
      for (let i = newInterceptors.length - 1; i >= 0; i--) {
        const interceptor = this[kInterceptors][i]
        if (typeof interceptor !== 'function') {
          throw new InvalidArgumentError('interceptor must be an function')
        }
      }
    }

    this[kInterceptors] = newInterceptors
  }

  close (callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        this.close((err, data) => {
          return err ? reject(err) : resolve(data)
        })
      })
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    if (this[kDestroyed]) {
      queueMicrotask(() => callback(new ClientDestroyedError(), null))
      return
    }

    if (this[kClosed]) {
      if (this[kOnClosed]) {
        this[kOnClosed].push(callback)
      } else {
        queueMicrotask(() => callback(null, null))
      }
      return
    }

    this[kClosed] = true
    this[kOnClosed].push(callback)

    const onClosed = () => {
      const callbacks = this[kOnClosed]
      this[kOnClosed] = null
      for (let i = 0; i < callbacks.length; i++) {
        callbacks[i](null, null)
      }
    }

    // Should not error.
    this[kClose]()
      .then(() => this.destroy())
      .then(() => {
        queueMicrotask(onClosed)
      })
  }

  destroy (err, callback) {
    if (typeof err === 'function') {
      callback = err
      err = null
    }

    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        this.destroy(err, (err, data) => {
          return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data)
        })
      })
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    if (this[kDestroyed]) {
      if (this[kOnDestroyed]) {
        this[kOnDestroyed].push(callback)
      } else {
        queueMicrotask(() => callback(null, null))
      }
      return
    }

    if (!err) {
      err = new ClientDestroyedError()
    }

    this[kDestroyed] = true
    this[kOnDestroyed] = this[kOnDestroyed] || []
    this[kOnDestroyed].push(callback)

    const onDestroyed = () => {
      const callbacks = this[kOnDestroyed]
      this[kOnDestroyed] = null
      for (let i = 0; i < callbacks.length; i++) {
        callbacks[i](null, null)
      }
    }

    // Should not error.
    this[kDestroy](err).then(() => {
      queueMicrotask(onDestroyed)
    })
  }

  [kInterceptedDispatch] (opts, handler) {
    if (!this[kInterceptors] || this[kInterceptors].length === 0) {
      this[kInterceptedDispatch] = this[kDispatch]
      return this[kDispatch](opts, handler)
    }

    let dispatch = this[kDispatch].bind(this)
    for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
      dispatch = this[kInterceptors][i](dispatch)
    }
    this[kInterceptedDispatch] = dispatch
    return dispatch(opts, handler)
  }

  dispatch (opts, handler) {
    if (!handler || typeof handler !== 'object') {
      throw new InvalidArgumentError('handler must be an object')
    }

    try {
      if (!opts || typeof opts !== 'object') {
        throw new InvalidArgumentError('opts must be an object.')
      }

      if (this[kDestroyed] || this[kOnDestroyed]) {
        throw new ClientDestroyedError()
      }

      if (this[kClosed]) {
        throw new ClientClosedError()
      }

      return this[kInterceptedDispatch](opts, handler)
    } catch (err) {
      if (typeof handler.onError !== 'function') {
        throw new InvalidArgumentError('invalid onError method')
      }

      handler.onError(err)

      return false
    }
  }
}

module.exports = DispatcherBase


/***/ }),

/***/ 3553:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const EventEmitter = __nccwpck_require__(4434)

class Dispatcher extends EventEmitter {
  dispatch () {
    throw new Error('not implemented')
  }

  close () {
    throw new Error('not implemented')
  }

  destroy () {
    throw new Error('not implemented')
  }
}

module.exports = Dispatcher


/***/ }),

/***/ 8009:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Busboy = __nccwpck_require__(9766)
const util = __nccwpck_require__(4606)
const {
  ReadableStreamFrom,
  isBlobLike,
  isReadableStreamLike,
  readableStreamClose,
  createDeferredPromise,
  fullyReadBody
} = __nccwpck_require__(8961)
const { FormData } = __nccwpck_require__(1187)
const { kState } = __nccwpck_require__(1088)
const { webidl } = __nccwpck_require__(3476)
const { DOMException, structuredClone } = __nccwpck_require__(7536)
const { Blob, File: NativeFile } = __nccwpck_require__(181)
const { kBodyUsed } = __nccwpck_require__(5773)
const assert = __nccwpck_require__(2613)
const { isErrored } = __nccwpck_require__(4606)
const { isUint8Array, isArrayBuffer } = __nccwpck_require__(8253)
const { File: UndiciFile } = __nccwpck_require__(4091)
const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(6960)

let random
try {
  const crypto = __nccwpck_require__(7598)
  random = (max) => crypto.randomInt(0, max)
} catch {
  random = (max) => Math.floor(Math.random(max))
}

let ReadableStream = globalThis.ReadableStream

/** @type {globalThis['File']} */
const File = NativeFile ?? UndiciFile
const textEncoder = new TextEncoder()
const textDecoder = new TextDecoder()

// https://fetch.spec.whatwg.org/#concept-bodyinit-extract
function extractBody (object, keepalive = false) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(3774).ReadableStream)
  }

  // 1. Let stream be null.
  let stream = null

  // 2. If object is a ReadableStream object, then set stream to object.
  if (object instanceof ReadableStream) {
    stream = object
  } else if (isBlobLike(object)) {
    // 3. Otherwise, if object is a Blob object, set stream to the
    //    result of running object’s get stream.
    stream = object.stream()
  } else {
    // 4. Otherwise, set stream to a new ReadableStream object, and set
    //    up stream.
    stream = new ReadableStream({
      async pull (controller) {
        controller.enqueue(
          typeof source === 'string' ? textEncoder.encode(source) : source
        )
        queueMicrotask(() => readableStreamClose(controller))
      },
      start () {},
      type: undefined
    })
  }

  // 5. Assert: stream is a ReadableStream object.
  assert(isReadableStreamLike(stream))

  // 6. Let action be null.
  let action = null

  // 7. Let source be null.
  let source = null

  // 8. Let length be null.
  let length = null

  // 9. Let type be null.
  let type = null

  // 10. Switch on object:
  if (typeof object === 'string') {
    // Set source to the UTF-8 encoding of object.
    // Note: setting source to a Uint8Array here breaks some mocking assumptions.
    source = object

    // Set type to `text/plain;charset=UTF-8`.
    type = 'text/plain;charset=UTF-8'
  } else if (object instanceof URLSearchParams) {
    // URLSearchParams

    // spec says to run application/x-www-form-urlencoded on body.list
    // this is implemented in Node.js as apart of an URLSearchParams instance toString method
    // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490
    // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100

    // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.
    source = object.toString()

    // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.
    type = 'application/x-www-form-urlencoded;charset=UTF-8'
  } else if (isArrayBuffer(object)) {
    // BufferSource/ArrayBuffer

    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.slice())
  } else if (ArrayBuffer.isView(object)) {
    // BufferSource/ArrayBufferView

    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength))
  } else if (util.isFormDataLike(object)) {
    const boundary = `----formdata-undici-0${`${random(1e11)}`.padStart(11, '0')}`
    const prefix = `--${boundary}\r\nContent-Disposition: form-data`

    /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
    const escape = (str) =>
      str.replace(/\n/g, '%0A').replace(/\r/g, '%0D').replace(/"/g, '%22')
    const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, '\r\n')

    // Set action to this step: run the multipart/form-data
    // encoding algorithm, with object’s entry list and UTF-8.
    // - This ensures that the body is immutable and can't be changed afterwords
    // - That the content-length is calculated in advance.
    // - And that all parts are pre-encoded and ready to be sent.

    const blobParts = []
    const rn = new Uint8Array([13, 10]) // '\r\n'
    length = 0
    let hasUnknownSizeValue = false

    for (const [name, value] of object) {
      if (typeof value === 'string') {
        const chunk = textEncoder.encode(prefix +
          `; name="${escape(normalizeLinefeeds(name))}"` +
          `\r\n\r\n${normalizeLinefeeds(value)}\r\n`)
        blobParts.push(chunk)
        length += chunk.byteLength
      } else {
        const chunk = textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` +
          (value.name ? `; filename="${escape(value.name)}"` : '') + '\r\n' +
          `Content-Type: ${
            value.type || 'application/octet-stream'
          }\r\n\r\n`)
        blobParts.push(chunk, value, rn)
        if (typeof value.size === 'number') {
          length += chunk.byteLength + value.size + rn.byteLength
        } else {
          hasUnknownSizeValue = true
        }
      }
    }

    const chunk = textEncoder.encode(`--${boundary}--`)
    blobParts.push(chunk)
    length += chunk.byteLength
    if (hasUnknownSizeValue) {
      length = null
    }

    // Set source to object.
    source = object

    action = async function * () {
      for (const part of blobParts) {
        if (part.stream) {
          yield * part.stream()
        } else {
          yield part
        }
      }
    }

    // Set type to `multipart/form-data; boundary=`,
    // followed by the multipart/form-data boundary string generated
    // by the multipart/form-data encoding algorithm.
    type = 'multipart/form-data; boundary=' + boundary
  } else if (isBlobLike(object)) {
    // Blob

    // Set source to object.
    source = object

    // Set length to object’s size.
    length = object.size

    // If object’s type attribute is not the empty byte sequence, set
    // type to its value.
    if (object.type) {
      type = object.type
    }
  } else if (typeof object[Symbol.asyncIterator] === 'function') {
    // If keepalive is true, then throw a TypeError.
    if (keepalive) {
      throw new TypeError('keepalive')
    }

    // If object is disturbed or locked, then throw a TypeError.
    if (util.isDisturbed(object) || object.locked) {
      throw new TypeError(
        'Response body object should not be disturbed or locked'
      )
    }

    stream =
      object instanceof ReadableStream ? object : ReadableStreamFrom(object)
  }

  // 11. If source is a byte sequence, then set action to a
  // step that returns source and length to source’s length.
  if (typeof source === 'string' || util.isBuffer(source)) {
    length = Buffer.byteLength(source)
  }

  // 12. If action is non-null, then run these steps in in parallel:
  if (action != null) {
    // Run action.
    let iterator
    stream = new ReadableStream({
      async start () {
        iterator = action(object)[Symbol.asyncIterator]()
      },
      async pull (controller) {
        const { value, done } = await iterator.next()
        if (done) {
          // When running action is done, close stream.
          queueMicrotask(() => {
            controller.close()
          })
        } else {
          // Whenever one or more bytes are available and stream is not errored,
          // enqueue a Uint8Array wrapping an ArrayBuffer containing the available
          // bytes into stream.
          if (!isErrored(stream)) {
            controller.enqueue(new Uint8Array(value))
          }
        }
        return controller.desiredSize > 0
      },
      async cancel (reason) {
        await iterator.return()
      },
      type: undefined
    })
  }

  // 13. Let body be a body whose stream is stream, source is source,
  // and length is length.
  const body = { stream, source, length }

  // 14. Return (body, type).
  return [body, type]
}

// https://fetch.spec.whatwg.org/#bodyinit-safely-extract
function safelyExtractBody (object, keepalive = false) {
  if (!ReadableStream) {
    // istanbul ignore next
    ReadableStream = (__nccwpck_require__(3774).ReadableStream)
  }

  // To safely extract a body and a `Content-Type` value from
  // a byte sequence or BodyInit object object, run these steps:

  // 1. If object is a ReadableStream object, then:
  if (object instanceof ReadableStream) {
    // Assert: object is neither disturbed nor locked.
    // istanbul ignore next
    assert(!util.isDisturbed(object), 'The body has already been consumed.')
    // istanbul ignore next
    assert(!object.locked, 'The stream is locked.')
  }

  // 2. Return the results of extracting object.
  return extractBody(object, keepalive)
}

function cloneBody (body) {
  // To clone a body body, run these steps:

  // https://fetch.spec.whatwg.org/#concept-body-clone

  // 1. Let « out1, out2 » be the result of teeing body’s stream.
  const [out1, out2] = body.stream.tee()
  const out2Clone = structuredClone(out2, { transfer: [out2] })
  // This, for whatever reasons, unrefs out2Clone which allows
  // the process to exit by itself.
  const [, finalClone] = out2Clone.tee()

  // 2. Set body’s stream to out1.
  body.stream = out1

  // 3. Return a body whose stream is out2 and other members are copied from body.
  return {
    stream: finalClone,
    length: body.length,
    source: body.source
  }
}

async function * consumeBody (body) {
  if (body) {
    if (isUint8Array(body)) {
      yield body
    } else {
      const stream = body.stream

      if (util.isDisturbed(stream)) {
        throw new TypeError('The body has already been consumed.')
      }

      if (stream.locked) {
        throw new TypeError('The stream is locked.')
      }

      // Compat.
      stream[kBodyUsed] = true

      yield * stream
    }
  }
}

function throwIfAborted (state) {
  if (state.aborted) {
    throw new DOMException('The operation was aborted.', 'AbortError')
  }
}

function bodyMixinMethods (instance) {
  const methods = {
    blob () {
      // The blob() method steps are to return the result of
      // running consume body with this and the following step
      // given a byte sequence bytes: return a Blob whose
      // contents are bytes and whose type attribute is this’s
      // MIME type.
      return specConsumeBody(this, (bytes) => {
        let mimeType = bodyMimeType(this)

        if (mimeType === 'failure') {
          mimeType = ''
        } else if (mimeType) {
          mimeType = serializeAMimeType(mimeType)
        }

        // Return a Blob whose contents are bytes and type attribute
        // is mimeType.
        return new Blob([bytes], { type: mimeType })
      }, instance)
    },

    arrayBuffer () {
      // The arrayBuffer() method steps are to return the result
      // of running consume body with this and the following step
      // given a byte sequence bytes: return a new ArrayBuffer
      // whose contents are bytes.
      return specConsumeBody(this, (bytes) => {
        return new Uint8Array(bytes).buffer
      }, instance)
    },

    text () {
      // The text() method steps are to return the result of running
      // consume body with this and UTF-8 decode.
      return specConsumeBody(this, utf8DecodeBytes, instance)
    },

    json () {
      // The json() method steps are to return the result of running
      // consume body with this and parse JSON from bytes.
      return specConsumeBody(this, parseJSONFromBytes, instance)
    },

    async formData () {
      webidl.brandCheck(this, instance)

      throwIfAborted(this[kState])

      const contentType = this.headers.get('Content-Type')

      // If mimeType’s essence is "multipart/form-data", then:
      if (/multipart\/form-data/.test(contentType)) {
        const headers = {}
        for (const [key, value] of this.headers) headers[key.toLowerCase()] = value

        const responseFormData = new FormData()

        let busboy

        try {
          busboy = new Busboy({
            headers,
            preservePath: true
          })
        } catch (err) {
          throw new DOMException(`${err}`, 'AbortError')
        }

        busboy.on('field', (name, value) => {
          responseFormData.append(name, value)
        })
        busboy.on('file', (name, value, filename, encoding, mimeType) => {
          const chunks = []

          if (encoding === 'base64' || encoding.toLowerCase() === 'base64') {
            let base64chunk = ''

            value.on('data', (chunk) => {
              base64chunk += chunk.toString().replace(/[\r\n]/gm, '')

              const end = base64chunk.length - base64chunk.length % 4
              chunks.push(Buffer.from(base64chunk.slice(0, end), 'base64'))

              base64chunk = base64chunk.slice(end)
            })
            value.on('end', () => {
              chunks.push(Buffer.from(base64chunk, 'base64'))
              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))
            })
          } else {
            value.on('data', (chunk) => {
              chunks.push(chunk)
            })
            value.on('end', () => {
              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))
            })
          }
        })

        const busboyResolve = new Promise((resolve, reject) => {
          busboy.on('finish', resolve)
          busboy.on('error', (err) => reject(new TypeError(err)))
        })

        if (this.body !== null) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk)
        busboy.end()
        await busboyResolve

        return responseFormData
      } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
        // Otherwise, if mimeType’s essence is "application/x-www-form-urlencoded", then:

        // 1. Let entries be the result of parsing bytes.
        let entries
        try {
          let text = ''
          // application/x-www-form-urlencoded parser will keep the BOM.
          // https://url.spec.whatwg.org/#concept-urlencoded-parser
          // Note that streaming decoder is stateful and cannot be reused
          const streamingDecoder = new TextDecoder('utf-8', { ignoreBOM: true })

          for await (const chunk of consumeBody(this[kState].body)) {
            if (!isUint8Array(chunk)) {
              throw new TypeError('Expected Uint8Array chunk')
            }
            text += streamingDecoder.decode(chunk, { stream: true })
          }
          text += streamingDecoder.decode()
          entries = new URLSearchParams(text)
        } catch (err) {
          // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.
          // 2. If entries is failure, then throw a TypeError.
          throw Object.assign(new TypeError(), { cause: err })
        }

        // 3. Return a new FormData object whose entries are entries.
        const formData = new FormData()
        for (const [name, value] of entries) {
          formData.append(name, value)
        }
        return formData
      } else {
        // Wait a tick before checking if the request has been aborted.
        // Otherwise, a TypeError can be thrown when an AbortError should.
        await Promise.resolve()

        throwIfAborted(this[kState])

        // Otherwise, throw a TypeError.
        throw webidl.errors.exception({
          header: `${instance.name}.formData`,
          message: 'Could not parse content as FormData.'
        })
      }
    }
  }

  return methods
}

function mixinBody (prototype) {
  Object.assign(prototype.prototype, bodyMixinMethods(prototype))
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-body-consume-body
 * @param {Response|Request} object
 * @param {(value: unknown) => unknown} convertBytesToJSValue
 * @param {Response|Request} instance
 */
async function specConsumeBody (object, convertBytesToJSValue, instance) {
  webidl.brandCheck(object, instance)

  throwIfAborted(object[kState])

  // 1. If object is unusable, then return a promise rejected
  //    with a TypeError.
  if (bodyUnusable(object[kState].body)) {
    throw new TypeError('Body is unusable')
  }

  // 2. Let promise be a new promise.
  const promise = createDeferredPromise()

  // 3. Let errorSteps given error be to reject promise with error.
  const errorSteps = (error) => promise.reject(error)

  // 4. Let successSteps given a byte sequence data be to resolve
  //    promise with the result of running convertBytesToJSValue
  //    with data. If that threw an exception, then run errorSteps
  //    with that exception.
  const successSteps = (data) => {
    try {
      promise.resolve(convertBytesToJSValue(data))
    } catch (e) {
      errorSteps(e)
    }
  }

  // 5. If object’s body is null, then run successSteps with an
  //    empty byte sequence.
  if (object[kState].body == null) {
    successSteps(new Uint8Array())
    return promise.promise
  }

  // 6. Otherwise, fully read object’s body given successSteps,
  //    errorSteps, and object’s relevant global object.
  await fullyReadBody(object[kState].body, successSteps, errorSteps)

  // 7. Return promise.
  return promise.promise
}

// https://fetch.spec.whatwg.org/#body-unusable
function bodyUnusable (body) {
  // An object including the Body interface mixin is
  // said to be unusable if its body is non-null and
  // its body’s stream is disturbed or locked.
  return body != null && (body.stream.locked || util.isDisturbed(body.stream))
}

/**
 * @see https://encoding.spec.whatwg.org/#utf-8-decode
 * @param {Buffer} buffer
 */
function utf8DecodeBytes (buffer) {
  if (buffer.length === 0) {
    return ''
  }

  // 1. Let buffer be the result of peeking three bytes from
  //    ioQueue, converted to a byte sequence.

  // 2. If buffer is 0xEF 0xBB 0xBF, then read three
  //    bytes from ioQueue. (Do nothing with those bytes.)
  if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {
    buffer = buffer.subarray(3)
  }

  // 3. Process a queue with an instance of UTF-8’s
  //    decoder, ioQueue, output, and "replacement".
  const output = textDecoder.decode(buffer)

  // 4. Return output.
  return output
}

/**
 * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
 * @param {Uint8Array} bytes
 */
function parseJSONFromBytes (bytes) {
  return JSON.parse(utf8DecodeBytes(bytes))
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-body-mime-type
 * @param {import('./response').Response|import('./request').Request} object
 */
function bodyMimeType (object) {
  const { headersList } = object[kState]
  const contentType = headersList.get('content-type')

  if (contentType === null) {
    return 'failure'
  }

  return parseMIMEType(contentType)
}

module.exports = {
  extractBody,
  safelyExtractBody,
  cloneBody,
  mixinBody
}


/***/ }),

/***/ 7536:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { MessageChannel, receiveMessageOnPort } = __nccwpck_require__(8167)

const corsSafeListedMethods = ['GET', 'HEAD', 'POST']
const corsSafeListedMethodsSet = new Set(corsSafeListedMethods)

const nullBodyStatus = [101, 204, 205, 304]

const redirectStatus = [301, 302, 303, 307, 308]
const redirectStatusSet = new Set(redirectStatus)

// https://fetch.spec.whatwg.org/#block-bad-port
const badPorts = [
  '1', '7', '9', '11', '13', '15', '17', '19', '20', '21', '22', '23', '25', '37', '42', '43', '53', '69', '77', '79',
  '87', '95', '101', '102', '103', '104', '109', '110', '111', '113', '115', '117', '119', '123', '135', '137',
  '139', '143', '161', '179', '389', '427', '465', '512', '513', '514', '515', '526', '530', '531', '532',
  '540', '548', '554', '556', '563', '587', '601', '636', '989', '990', '993', '995', '1719', '1720', '1723',
  '2049', '3659', '4045', '5060', '5061', '6000', '6566', '6665', '6666', '6667', '6668', '6669', '6697',
  '10080'
]

const badPortsSet = new Set(badPorts)

// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies
const referrerPolicy = [
  '',
  'no-referrer',
  'no-referrer-when-downgrade',
  'same-origin',
  'origin',
  'strict-origin',
  'origin-when-cross-origin',
  'strict-origin-when-cross-origin',
  'unsafe-url'
]
const referrerPolicySet = new Set(referrerPolicy)

const requestRedirect = ['follow', 'manual', 'error']

const safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE']
const safeMethodsSet = new Set(safeMethods)

const requestMode = ['navigate', 'same-origin', 'no-cors', 'cors']

const requestCredentials = ['omit', 'same-origin', 'include']

const requestCache = [
  'default',
  'no-store',
  'reload',
  'no-cache',
  'force-cache',
  'only-if-cached'
]

// https://fetch.spec.whatwg.org/#request-body-header-name
const requestBodyHeader = [
  'content-encoding',
  'content-language',
  'content-location',
  'content-type',
  // See https://github.com/nodejs/undici/issues/2021
  // 'Content-Length' is a forbidden header name, which is typically
  // removed in the Headers implementation. However, undici doesn't
  // filter out headers, so we add it here.
  'content-length'
]

// https://fetch.spec.whatwg.org/#enumdef-requestduplex
const requestDuplex = [
  'half'
]

// http://fetch.spec.whatwg.org/#forbidden-method
const forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK']
const forbiddenMethodsSet = new Set(forbiddenMethods)

const subresource = [
  'audio',
  'audioworklet',
  'font',
  'image',
  'manifest',
  'paintworklet',
  'script',
  'style',
  'track',
  'video',
  'xslt',
  ''
]
const subresourceSet = new Set(subresource)

/** @type {globalThis['DOMException']} */
const DOMException = globalThis.DOMException ?? (() => {
  // DOMException was only made a global in Node v17.0.0,
  // but fetch supports >= v16.8.
  try {
    atob('~')
  } catch (err) {
    return Object.getPrototypeOf(err).constructor
  }
})()

let channel

/** @type {globalThis['structuredClone']} */
const structuredClone =
  globalThis.structuredClone ??
  // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
  // structuredClone was added in v17.0.0, but fetch supports v16.8
  function structuredClone (value, options = undefined) {
    if (arguments.length === 0) {
      throw new TypeError('missing argument')
    }

    if (!channel) {
      channel = new MessageChannel()
    }
    channel.port1.unref()
    channel.port2.unref()
    channel.port1.postMessage(value, options?.transfer)
    return receiveMessageOnPort(channel.port2).message
  }

module.exports = {
  DOMException,
  structuredClone,
  subresource,
  forbiddenMethods,
  requestBodyHeader,
  referrerPolicy,
  requestRedirect,
  requestMode,
  requestCredentials,
  requestCache,
  redirectStatus,
  corsSafeListedMethods,
  nullBodyStatus,
  safeMethods,
  badPorts,
  requestDuplex,
  subresourceSet,
  badPortsSet,
  redirectStatusSet,
  corsSafeListedMethodsSet,
  safeMethodsSet,
  forbiddenMethodsSet,
  referrerPolicySet
}


/***/ }),

/***/ 6960:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(2613)
const { atob } = __nccwpck_require__(181)
const { isomorphicDecode } = __nccwpck_require__(8961)

const encoder = new TextEncoder()

/**
 * @see https://mimesniff.spec.whatwg.org/#http-token-code-point
 */
const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/
const HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/ // eslint-disable-line
/**
 * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
 */
const HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/ // eslint-disable-line

// https://fetch.spec.whatwg.org/#data-url-processor
/** @param {URL} dataURL */
function dataURLProcessor (dataURL) {
  // 1. Assert: dataURL’s scheme is "data".
  assert(dataURL.protocol === 'data:')

  // 2. Let input be the result of running the URL
  // serializer on dataURL with exclude fragment
  // set to true.
  let input = URLSerializer(dataURL, true)

  // 3. Remove the leading "data:" string from input.
  input = input.slice(5)

  // 4. Let position point at the start of input.
  const position = { position: 0 }

  // 5. Let mimeType be the result of collecting a
  // sequence of code points that are not equal
  // to U+002C (,), given position.
  let mimeType = collectASequenceOfCodePointsFast(
    ',',
    input,
    position
  )

  // 6. Strip leading and trailing ASCII whitespace
  // from mimeType.
  // Undici implementation note: we need to store the
  // length because if the mimetype has spaces removed,
  // the wrong amount will be sliced from the input in
  // step #9
  const mimeTypeLength = mimeType.length
  mimeType = removeASCIIWhitespace(mimeType, true, true)

  // 7. If position is past the end of input, then
  // return failure
  if (position.position >= input.length) {
    return 'failure'
  }

  // 8. Advance position by 1.
  position.position++

  // 9. Let encodedBody be the remainder of input.
  const encodedBody = input.slice(mimeTypeLength + 1)

  // 10. Let body be the percent-decoding of encodedBody.
  let body = stringPercentDecode(encodedBody)

  // 11. If mimeType ends with U+003B (;), followed by
  // zero or more U+0020 SPACE, followed by an ASCII
  // case-insensitive match for "base64", then:
  if (/;(\u0020){0,}base64$/i.test(mimeType)) {
    // 1. Let stringBody be the isomorphic decode of body.
    const stringBody = isomorphicDecode(body)

    // 2. Set body to the forgiving-base64 decode of
    // stringBody.
    body = forgivingBase64(stringBody)

    // 3. If body is failure, then return failure.
    if (body === 'failure') {
      return 'failure'
    }

    // 4. Remove the last 6 code points from mimeType.
    mimeType = mimeType.slice(0, -6)

    // 5. Remove trailing U+0020 SPACE code points from mimeType,
    // if any.
    mimeType = mimeType.replace(/(\u0020)+$/, '')

    // 6. Remove the last U+003B (;) code point from mimeType.
    mimeType = mimeType.slice(0, -1)
  }

  // 12. If mimeType starts with U+003B (;), then prepend
  // "text/plain" to mimeType.
  if (mimeType.startsWith(';')) {
    mimeType = 'text/plain' + mimeType
  }

  // 13. Let mimeTypeRecord be the result of parsing
  // mimeType.
  let mimeTypeRecord = parseMIMEType(mimeType)

  // 14. If mimeTypeRecord is failure, then set
  // mimeTypeRecord to text/plain;charset=US-ASCII.
  if (mimeTypeRecord === 'failure') {
    mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII')
  }

  // 15. Return a new data: URL struct whose MIME
  // type is mimeTypeRecord and body is body.
  // https://fetch.spec.whatwg.org/#data-url-struct
  return { mimeType: mimeTypeRecord, body }
}

// https://url.spec.whatwg.org/#concept-url-serializer
/**
 * @param {URL} url
 * @param {boolean} excludeFragment
 */
function URLSerializer (url, excludeFragment = false) {
  if (!excludeFragment) {
    return url.href
  }

  const href = url.href
  const hashLength = url.hash.length

  return hashLength === 0 ? href : href.substring(0, href.length - hashLength)
}

// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points
/**
 * @param {(char: string) => boolean} condition
 * @param {string} input
 * @param {{ position: number }} position
 */
function collectASequenceOfCodePoints (condition, input, position) {
  // 1. Let result be the empty string.
  let result = ''

  // 2. While position doesn’t point past the end of input and the
  // code point at position within input meets the condition condition:
  while (position.position < input.length && condition(input[position.position])) {
    // 1. Append that code point to the end of result.
    result += input[position.position]

    // 2. Advance position by 1.
    position.position++
  }

  // 3. Return result.
  return result
}

/**
 * A faster collectASequenceOfCodePoints that only works when comparing a single character.
 * @param {string} char
 * @param {string} input
 * @param {{ position: number }} position
 */
function collectASequenceOfCodePointsFast (char, input, position) {
  const idx = input.indexOf(char, position.position)
  const start = position.position

  if (idx === -1) {
    position.position = input.length
    return input.slice(start)
  }

  position.position = idx
  return input.slice(start, position.position)
}

// https://url.spec.whatwg.org/#string-percent-decode
/** @param {string} input */
function stringPercentDecode (input) {
  // 1. Let bytes be the UTF-8 encoding of input.
  const bytes = encoder.encode(input)

  // 2. Return the percent-decoding of bytes.
  return percentDecode(bytes)
}

// https://url.spec.whatwg.org/#percent-decode
/** @param {Uint8Array} input */
function percentDecode (input) {
  // 1. Let output be an empty byte sequence.
  /** @type {number[]} */
  const output = []

  // 2. For each byte byte in input:
  for (let i = 0; i < input.length; i++) {
    const byte = input[i]

    // 1. If byte is not 0x25 (%), then append byte to output.
    if (byte !== 0x25) {
      output.push(byte)

    // 2. Otherwise, if byte is 0x25 (%) and the next two bytes
    // after byte in input are not in the ranges
    // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),
    // and 0x61 (a) to 0x66 (f), all inclusive, append byte
    // to output.
    } else if (
      byte === 0x25 &&
      !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))
    ) {
      output.push(0x25)

    // 3. Otherwise:
    } else {
      // 1. Let bytePoint be the two bytes after byte in input,
      // decoded, and then interpreted as hexadecimal number.
      const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2])
      const bytePoint = Number.parseInt(nextTwoBytes, 16)

      // 2. Append a byte whose value is bytePoint to output.
      output.push(bytePoint)

      // 3. Skip the next two bytes in input.
      i += 2
    }
  }

  // 3. Return output.
  return Uint8Array.from(output)
}

// https://mimesniff.spec.whatwg.org/#parse-a-mime-type
/** @param {string} input */
function parseMIMEType (input) {
  // 1. Remove any leading and trailing HTTP whitespace
  // from input.
  input = removeHTTPWhitespace(input, true, true)

  // 2. Let position be a position variable for input,
  // initially pointing at the start of input.
  const position = { position: 0 }

  // 3. Let type be the result of collecting a sequence
  // of code points that are not U+002F (/) from
  // input, given position.
  const type = collectASequenceOfCodePointsFast(
    '/',
    input,
    position
  )

  // 4. If type is the empty string or does not solely
  // contain HTTP token code points, then return failure.
  // https://mimesniff.spec.whatwg.org/#http-token-code-point
  if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
    return 'failure'
  }

  // 5. If position is past the end of input, then return
  // failure
  if (position.position > input.length) {
    return 'failure'
  }

  // 6. Advance position by 1. (This skips past U+002F (/).)
  position.position++

  // 7. Let subtype be the result of collecting a sequence of
  // code points that are not U+003B (;) from input, given
  // position.
  let subtype = collectASequenceOfCodePointsFast(
    ';',
    input,
    position
  )

  // 8. Remove any trailing HTTP whitespace from subtype.
  subtype = removeHTTPWhitespace(subtype, false, true)

  // 9. If subtype is the empty string or does not solely
  // contain HTTP token code points, then return failure.
  if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
    return 'failure'
  }

  const typeLowercase = type.toLowerCase()
  const subtypeLowercase = subtype.toLowerCase()

  // 10. Let mimeType be a new MIME type record whose type
  // is type, in ASCII lowercase, and subtype is subtype,
  // in ASCII lowercase.
  // https://mimesniff.spec.whatwg.org/#mime-type
  const mimeType = {
    type: typeLowercase,
    subtype: subtypeLowercase,
    /** @type {Map<string, string>} */
    parameters: new Map(),
    // https://mimesniff.spec.whatwg.org/#mime-type-essence
    essence: `${typeLowercase}/${subtypeLowercase}`
  }

  // 11. While position is not past the end of input:
  while (position.position < input.length) {
    // 1. Advance position by 1. (This skips past U+003B (;).)
    position.position++

    // 2. Collect a sequence of code points that are HTTP
    // whitespace from input given position.
    collectASequenceOfCodePoints(
      // https://fetch.spec.whatwg.org/#http-whitespace
      char => HTTP_WHITESPACE_REGEX.test(char),
      input,
      position
    )

    // 3. Let parameterName be the result of collecting a
    // sequence of code points that are not U+003B (;)
    // or U+003D (=) from input, given position.
    let parameterName = collectASequenceOfCodePoints(
      (char) => char !== ';' && char !== '=',
      input,
      position
    )

    // 4. Set parameterName to parameterName, in ASCII
    // lowercase.
    parameterName = parameterName.toLowerCase()

    // 5. If position is not past the end of input, then:
    if (position.position < input.length) {
      // 1. If the code point at position within input is
      // U+003B (;), then continue.
      if (input[position.position] === ';') {
        continue
      }

      // 2. Advance position by 1. (This skips past U+003D (=).)
      position.position++
    }

    // 6. If position is past the end of input, then break.
    if (position.position > input.length) {
      break
    }

    // 7. Let parameterValue be null.
    let parameterValue = null

    // 8. If the code point at position within input is
    // U+0022 ("), then:
    if (input[position.position] === '"') {
      // 1. Set parameterValue to the result of collecting
      // an HTTP quoted string from input, given position
      // and the extract-value flag.
      parameterValue = collectAnHTTPQuotedString(input, position, true)

      // 2. Collect a sequence of code points that are not
      // U+003B (;) from input, given position.
      collectASequenceOfCodePointsFast(
        ';',
        input,
        position
      )

    // 9. Otherwise:
    } else {
      // 1. Set parameterValue to the result of collecting
      // a sequence of code points that are not U+003B (;)
      // from input, given position.
      parameterValue = collectASequenceOfCodePointsFast(
        ';',
        input,
        position
      )

      // 2. Remove any trailing HTTP whitespace from parameterValue.
      parameterValue = removeHTTPWhitespace(parameterValue, false, true)

      // 3. If parameterValue is the empty string, then continue.
      if (parameterValue.length === 0) {
        continue
      }
    }

    // 10. If all of the following are true
    // - parameterName is not the empty string
    // - parameterName solely contains HTTP token code points
    // - parameterValue solely contains HTTP quoted-string token code points
    // - mimeType’s parameters[parameterName] does not exist
    // then set mimeType’s parameters[parameterName] to parameterValue.
    if (
      parameterName.length !== 0 &&
      HTTP_TOKEN_CODEPOINTS.test(parameterName) &&
      (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) &&
      !mimeType.parameters.has(parameterName)
    ) {
      mimeType.parameters.set(parameterName, parameterValue)
    }
  }

  // 12. Return mimeType.
  return mimeType
}

// https://infra.spec.whatwg.org/#forgiving-base64-decode
/** @param {string} data */
function forgivingBase64 (data) {
  // 1. Remove all ASCII whitespace from data.
  data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, '')  // eslint-disable-line

  // 2. If data’s code point length divides by 4 leaving
  // no remainder, then:
  if (data.length % 4 === 0) {
    // 1. If data ends with one or two U+003D (=) code points,
    // then remove them from data.
    data = data.replace(/=?=$/, '')
  }

  // 3. If data’s code point length divides by 4 leaving
  // a remainder of 1, then return failure.
  if (data.length % 4 === 1) {
    return 'failure'
  }

  // 4. If data contains a code point that is not one of
  //  U+002B (+)
  //  U+002F (/)
  //  ASCII alphanumeric
  // then return failure.
  if (/[^+/0-9A-Za-z]/.test(data)) {
    return 'failure'
  }

  const binary = atob(data)
  const bytes = new Uint8Array(binary.length)

  for (let byte = 0; byte < binary.length; byte++) {
    bytes[byte] = binary.charCodeAt(byte)
  }

  return bytes
}

// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string
// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string
/**
 * @param {string} input
 * @param {{ position: number }} position
 * @param {boolean?} extractValue
 */
function collectAnHTTPQuotedString (input, position, extractValue) {
  // 1. Let positionStart be position.
  const positionStart = position.position

  // 2. Let value be the empty string.
  let value = ''

  // 3. Assert: the code point at position within input
  // is U+0022 (").
  assert(input[position.position] === '"')

  // 4. Advance position by 1.
  position.position++

  // 5. While true:
  while (true) {
    // 1. Append the result of collecting a sequence of code points
    // that are not U+0022 (") or U+005C (\) from input, given
    // position, to value.
    value += collectASequenceOfCodePoints(
      (char) => char !== '"' && char !== '\\',
      input,
      position
    )

    // 2. If position is past the end of input, then break.
    if (position.position >= input.length) {
      break
    }

    // 3. Let quoteOrBackslash be the code point at position within
    // input.
    const quoteOrBackslash = input[position.position]

    // 4. Advance position by 1.
    position.position++

    // 5. If quoteOrBackslash is U+005C (\), then:
    if (quoteOrBackslash === '\\') {
      // 1. If position is past the end of input, then append
      // U+005C (\) to value and break.
      if (position.position >= input.length) {
        value += '\\'
        break
      }

      // 2. Append the code point at position within input to value.
      value += input[position.position]

      // 3. Advance position by 1.
      position.position++

    // 6. Otherwise:
    } else {
      // 1. Assert: quoteOrBackslash is U+0022 (").
      assert(quoteOrBackslash === '"')

      // 2. Break.
      break
    }
  }

  // 6. If the extract-value flag is set, then return value.
  if (extractValue) {
    return value
  }

  // 7. Return the code points from positionStart to position,
  // inclusive, within input.
  return input.slice(positionStart, position.position)
}

/**
 * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
 */
function serializeAMimeType (mimeType) {
  assert(mimeType !== 'failure')
  const { parameters, essence } = mimeType

  // 1. Let serialization be the concatenation of mimeType’s
  //    type, U+002F (/), and mimeType’s subtype.
  let serialization = essence

  // 2. For each name → value of mimeType’s parameters:
  for (let [name, value] of parameters.entries()) {
    // 1. Append U+003B (;) to serialization.
    serialization += ';'

    // 2. Append name to serialization.
    serialization += name

    // 3. Append U+003D (=) to serialization.
    serialization += '='

    // 4. If value does not solely contain HTTP token code
    //    points or value is the empty string, then:
    if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
      // 1. Precede each occurence of U+0022 (") or
      //    U+005C (\) in value with U+005C (\).
      value = value.replace(/(\\|")/g, '\\$1')

      // 2. Prepend U+0022 (") to value.
      value = '"' + value

      // 3. Append U+0022 (") to value.
      value += '"'
    }

    // 5. Append value to serialization.
    serialization += value
  }

  // 3. Return serialization.
  return serialization
}

/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} char
 */
function isHTTPWhiteSpace (char) {
  return char === '\r' || char === '\n' || char === '\t' || char === ' '
}

/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} str
 */
function removeHTTPWhitespace (str, leading = true, trailing = true) {
  let lead = 0
  let trail = str.length - 1

  if (leading) {
    for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);
  }

  if (trailing) {
    for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);
  }

  return str.slice(lead, trail + 1)
}

/**
 * @see https://infra.spec.whatwg.org/#ascii-whitespace
 * @param {string} char
 */
function isASCIIWhitespace (char) {
  return char === '\r' || char === '\n' || char === '\t' || char === '\f' || char === ' '
}

/**
 * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
 */
function removeASCIIWhitespace (str, leading = true, trailing = true) {
  let lead = 0
  let trail = str.length - 1

  if (leading) {
    for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);
  }

  if (trailing) {
    for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);
  }

  return str.slice(lead, trail + 1)
}

module.exports = {
  dataURLProcessor,
  URLSerializer,
  collectASequenceOfCodePoints,
  collectASequenceOfCodePointsFast,
  stringPercentDecode,
  parseMIMEType,
  collectAnHTTPQuotedString,
  serializeAMimeType
}


/***/ }),

/***/ 4091:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Blob, File: NativeFile } = __nccwpck_require__(181)
const { types } = __nccwpck_require__(9023)
const { kState } = __nccwpck_require__(1088)
const { isBlobLike } = __nccwpck_require__(8961)
const { webidl } = __nccwpck_require__(3476)
const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(6960)
const { kEnumerableProperty } = __nccwpck_require__(4606)
const encoder = new TextEncoder()

class File extends Blob {
  constructor (fileBits, fileName, options = {}) {
    // The File constructor is invoked with two or three parameters, depending
    // on whether the optional dictionary parameter is used. When the File()
    // constructor is invoked, user agents must run the following steps:
    webidl.argumentLengthCheck(arguments, 2, { header: 'File constructor' })

    fileBits = webidl.converters['sequence<BlobPart>'](fileBits)
    fileName = webidl.converters.USVString(fileName)
    options = webidl.converters.FilePropertyBag(options)

    // 1. Let bytes be the result of processing blob parts given fileBits and
    // options.
    // Note: Blob handles this for us

    // 2. Let n be the fileName argument to the constructor.
    const n = fileName

    // 3. Process FilePropertyBag dictionary argument by running the following
    // substeps:

    //    1. If the type member is provided and is not the empty string, let t
    //    be set to the type dictionary member. If t contains any characters
    //    outside the range U+0020 to U+007E, then set t to the empty string
    //    and return from these substeps.
    //    2. Convert every character in t to ASCII lowercase.
    let t = options.type
    let d

    // eslint-disable-next-line no-labels
    substep: {
      if (t) {
        t = parseMIMEType(t)

        if (t === 'failure') {
          t = ''
          // eslint-disable-next-line no-labels
          break substep
        }

        t = serializeAMimeType(t).toLowerCase()
      }

      //    3. If the lastModified member is provided, let d be set to the
      //    lastModified dictionary member. If it is not provided, set d to the
      //    current date and time represented as the number of milliseconds since
      //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
      d = options.lastModified
    }

    // 4. Return a new File object F such that:
    // F refers to the bytes byte sequence.
    // F.size is set to the number of total bytes in bytes.
    // F.name is set to n.
    // F.type is set to t.
    // F.lastModified is set to d.

    super(processBlobParts(fileBits, options), { type: t })
    this[kState] = {
      name: n,
      lastModified: d,
      type: t
    }
  }

  get name () {
    webidl.brandCheck(this, File)

    return this[kState].name
  }

  get lastModified () {
    webidl.brandCheck(this, File)

    return this[kState].lastModified
  }

  get type () {
    webidl.brandCheck(this, File)

    return this[kState].type
  }
}

class FileLike {
  constructor (blobLike, fileName, options = {}) {
    // TODO: argument idl type check

    // The File constructor is invoked with two or three parameters, depending
    // on whether the optional dictionary parameter is used. When the File()
    // constructor is invoked, user agents must run the following steps:

    // 1. Let bytes be the result of processing blob parts given fileBits and
    // options.

    // 2. Let n be the fileName argument to the constructor.
    const n = fileName

    // 3. Process FilePropertyBag dictionary argument by running the following
    // substeps:

    //    1. If the type member is provided and is not the empty string, let t
    //    be set to the type dictionary member. If t contains any characters
    //    outside the range U+0020 to U+007E, then set t to the empty string
    //    and return from these substeps.
    //    TODO
    const t = options.type

    //    2. Convert every character in t to ASCII lowercase.
    //    TODO

    //    3. If the lastModified member is provided, let d be set to the
    //    lastModified dictionary member. If it is not provided, set d to the
    //    current date and time represented as the number of milliseconds since
    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
    const d = options.lastModified ?? Date.now()

    // 4. Return a new File object F such that:
    // F refers to the bytes byte sequence.
    // F.size is set to the number of total bytes in bytes.
    // F.name is set to n.
    // F.type is set to t.
    // F.lastModified is set to d.

    this[kState] = {
      blobLike,
      name: n,
      type: t,
      lastModified: d
    }
  }

  stream (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.stream(...args)
  }

  arrayBuffer (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.arrayBuffer(...args)
  }

  slice (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.slice(...args)
  }

  text (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.text(...args)
  }

  get size () {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.size
  }

  get type () {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.type
  }

  get name () {
    webidl.brandCheck(this, FileLike)

    return this[kState].name
  }

  get lastModified () {
    webidl.brandCheck(this, FileLike)

    return this[kState].lastModified
  }

  get [Symbol.toStringTag] () {
    return 'File'
  }
}

Object.defineProperties(File.prototype, {
  [Symbol.toStringTag]: {
    value: 'File',
    configurable: true
  },
  name: kEnumerableProperty,
  lastModified: kEnumerableProperty
})

webidl.converters.Blob = webidl.interfaceConverter(Blob)

webidl.converters.BlobPart = function (V, opts) {
  if (webidl.util.Type(V) === 'Object') {
    if (isBlobLike(V)) {
      return webidl.converters.Blob(V, { strict: false })
    }

    if (
      ArrayBuffer.isView(V) ||
      types.isAnyArrayBuffer(V)
    ) {
      return webidl.converters.BufferSource(V, opts)
    }
  }

  return webidl.converters.USVString(V, opts)
}

webidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(
  webidl.converters.BlobPart
)

// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag
webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
  {
    key: 'lastModified',
    converter: webidl.converters['long long'],
    get defaultValue () {
      return Date.now()
    }
  },
  {
    key: 'type',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'endings',
    converter: (value) => {
      value = webidl.converters.DOMString(value)
      value = value.toLowerCase()

      if (value !== 'native') {
        value = 'transparent'
      }

      return value
    },
    defaultValue: 'transparent'
  }
])

/**
 * @see https://www.w3.org/TR/FileAPI/#process-blob-parts
 * @param {(NodeJS.TypedArray|Blob|string)[]} parts
 * @param {{ type: string, endings: string }} options
 */
function processBlobParts (parts, options) {
  // 1. Let bytes be an empty sequence of bytes.
  /** @type {NodeJS.TypedArray[]} */
  const bytes = []

  // 2. For each element in parts:
  for (const element of parts) {
    // 1. If element is a USVString, run the following substeps:
    if (typeof element === 'string') {
      // 1. Let s be element.
      let s = element

      // 2. If the endings member of options is "native", set s
      //    to the result of converting line endings to native
      //    of element.
      if (options.endings === 'native') {
        s = convertLineEndingsNative(s)
      }

      // 3. Append the result of UTF-8 encoding s to bytes.
      bytes.push(encoder.encode(s))
    } else if (
      types.isAnyArrayBuffer(element) ||
      types.isTypedArray(element)
    ) {
      // 2. If element is a BufferSource, get a copy of the
      //    bytes held by the buffer source, and append those
      //    bytes to bytes.
      if (!element.buffer) { // ArrayBuffer
        bytes.push(new Uint8Array(element))
      } else {
        bytes.push(
          new Uint8Array(element.buffer, element.byteOffset, element.byteLength)
        )
      }
    } else if (isBlobLike(element)) {
      // 3. If element is a Blob, append the bytes it represents
      //    to bytes.
      bytes.push(element)
    }
  }

  // 3. Return bytes.
  return bytes
}

/**
 * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
 * @param {string} s
 */
function convertLineEndingsNative (s) {
  // 1. Let native line ending be be the code point U+000A LF.
  let nativeLineEnding = '\n'

  // 2. If the underlying platform’s conventions are to
  //    represent newlines as a carriage return and line feed
  //    sequence, set native line ending to the code point
  //    U+000D CR followed by the code point U+000A LF.
  if (process.platform === 'win32') {
    nativeLineEnding = '\r\n'
  }

  return s.replace(/\r?\n/g, nativeLineEnding)
}

// If this function is moved to ./util.js, some tools (such as
// rollup) will warn about circular dependencies. See:
// https://github.com/nodejs/undici/issues/1629
function isFileLike (object) {
  return (
    (NativeFile && object instanceof NativeFile) ||
    object instanceof File || (
      object &&
      (typeof object.stream === 'function' ||
      typeof object.arrayBuffer === 'function') &&
      object[Symbol.toStringTag] === 'File'
    )
  )
}

module.exports = { File, FileLike, isFileLike }


/***/ }),

/***/ 1187:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { isBlobLike, toUSVString, makeIterator } = __nccwpck_require__(8961)
const { kState } = __nccwpck_require__(1088)
const { File: UndiciFile, FileLike, isFileLike } = __nccwpck_require__(4091)
const { webidl } = __nccwpck_require__(3476)
const { Blob, File: NativeFile } = __nccwpck_require__(181)

/** @type {globalThis['File']} */
const File = NativeFile ?? UndiciFile

// https://xhr.spec.whatwg.org/#formdata
class FormData {
  constructor (form) {
    if (form !== undefined) {
      throw webidl.errors.conversionFailed({
        prefix: 'FormData constructor',
        argument: 'Argument 1',
        types: ['undefined']
      })
    }

    this[kState] = []
  }

  append (name, value, filename = undefined) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.append' })

    if (arguments.length === 3 && !isBlobLike(value)) {
      throw new TypeError(
        "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
      )
    }

    // 1. Let value be value if given; otherwise blobValue.

    name = webidl.converters.USVString(name)
    value = isBlobLike(value)
      ? webidl.converters.Blob(value, { strict: false })
      : webidl.converters.USVString(value)
    filename = arguments.length === 3
      ? webidl.converters.USVString(filename)
      : undefined

    // 2. Let entry be the result of creating an entry with
    // name, value, and filename if given.
    const entry = makeEntry(name, value, filename)

    // 3. Append entry to this’s entry list.
    this[kState].push(entry)
  }

  delete (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.delete' })

    name = webidl.converters.USVString(name)

    // The delete(name) method steps are to remove all entries whose name
    // is name from this’s entry list.
    this[kState] = this[kState].filter(entry => entry.name !== name)
  }

  get (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.get' })

    name = webidl.converters.USVString(name)

    // 1. If there is no entry whose name is name in this’s entry list,
    // then return null.
    const idx = this[kState].findIndex((entry) => entry.name === name)
    if (idx === -1) {
      return null
    }

    // 2. Return the value of the first entry whose name is name from
    // this’s entry list.
    return this[kState][idx].value
  }

  getAll (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.getAll' })

    name = webidl.converters.USVString(name)

    // 1. If there is no entry whose name is name in this’s entry list,
    // then return the empty list.
    // 2. Return the values of all entries whose name is name, in order,
    // from this’s entry list.
    return this[kState]
      .filter((entry) => entry.name === name)
      .map((entry) => entry.value)
  }

  has (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.has' })

    name = webidl.converters.USVString(name)

    // The has(name) method steps are to return true if there is an entry
    // whose name is name in this’s entry list; otherwise false.
    return this[kState].findIndex((entry) => entry.name === name) !== -1
  }

  set (name, value, filename = undefined) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.set' })

    if (arguments.length === 3 && !isBlobLike(value)) {
      throw new TypeError(
        "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
      )
    }

    // The set(name, value) and set(name, blobValue, filename) method steps
    // are:

    // 1. Let value be value if given; otherwise blobValue.

    name = webidl.converters.USVString(name)
    value = isBlobLike(value)
      ? webidl.converters.Blob(value, { strict: false })
      : webidl.converters.USVString(value)
    filename = arguments.length === 3
      ? toUSVString(filename)
      : undefined

    // 2. Let entry be the result of creating an entry with name, value, and
    // filename if given.
    const entry = makeEntry(name, value, filename)

    // 3. If there are entries in this’s entry list whose name is name, then
    // replace the first such entry with entry and remove the others.
    const idx = this[kState].findIndex((entry) => entry.name === name)
    if (idx !== -1) {
      this[kState] = [
        ...this[kState].slice(0, idx),
        entry,
        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)
      ]
    } else {
      // 4. Otherwise, append entry to this’s entry list.
      this[kState].push(entry)
    }
  }

  entries () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'key+value'
    )
  }

  keys () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'key'
    )
  }

  values () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'value'
    )
  }

  /**
   * @param {(value: string, key: string, self: FormData) => void} callbackFn
   * @param {unknown} thisArg
   */
  forEach (callbackFn, thisArg = globalThis) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.forEach' })

    if (typeof callbackFn !== 'function') {
      throw new TypeError(
        "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
      )
    }

    for (const [key, value] of this) {
      callbackFn.apply(thisArg, [value, key, this])
    }
  }
}

FormData.prototype[Symbol.iterator] = FormData.prototype.entries

Object.defineProperties(FormData.prototype, {
  [Symbol.toStringTag]: {
    value: 'FormData',
    configurable: true
  }
})

/**
 * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
 * @param {string} name
 * @param {string|Blob} value
 * @param {?string} filename
 * @returns
 */
function makeEntry (name, value, filename) {
  // 1. Set name to the result of converting name into a scalar value string.
  // "To convert a string into a scalar value string, replace any surrogates
  //  with U+FFFD."
  // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end
  name = Buffer.from(name).toString('utf8')

  // 2. If value is a string, then set value to the result of converting
  //    value into a scalar value string.
  if (typeof value === 'string') {
    value = Buffer.from(value).toString('utf8')
  } else {
    // 3. Otherwise:

    // 1. If value is not a File object, then set value to a new File object,
    //    representing the same bytes, whose name attribute value is "blob"
    if (!isFileLike(value)) {
      value = value instanceof Blob
        ? new File([value], 'blob', { type: value.type })
        : new FileLike(value, 'blob', { type: value.type })
    }

    // 2. If filename is given, then set value to a new File object,
    //    representing the same bytes, whose name attribute is filename.
    if (filename !== undefined) {
      /** @type {FilePropertyBag} */
      const options = {
        type: value.type,
        lastModified: value.lastModified
      }

      value = (NativeFile && value instanceof NativeFile) || value instanceof UndiciFile
        ? new File([value], filename, options)
        : new FileLike(value, filename, options)
    }
  }

  // 4. Return an entry whose name is name and whose value is value.
  return { name, value }
}

module.exports = { FormData }


/***/ }),

/***/ 742:
/***/ ((module) => {

"use strict";


// In case of breaking changes, increase the version
// number to avoid conflicts.
const globalOrigin = Symbol.for('undici.globalOrigin.1')

function getGlobalOrigin () {
  return globalThis[globalOrigin]
}

function setGlobalOrigin (newOrigin) {
  if (newOrigin === undefined) {
    Object.defineProperty(globalThis, globalOrigin, {
      value: undefined,
      writable: true,
      enumerable: false,
      configurable: false
    })

    return
  }

  const parsedURL = new URL(newOrigin)

  if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {
    throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`)
  }

  Object.defineProperty(globalThis, globalOrigin, {
    value: parsedURL,
    writable: true,
    enumerable: false,
    configurable: false
  })
}

module.exports = {
  getGlobalOrigin,
  setGlobalOrigin
}


/***/ }),

/***/ 2223:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// https://github.com/Ethan-Arrowood/undici-fetch



const { kHeadersList, kConstruct } = __nccwpck_require__(5773)
const { kGuard } = __nccwpck_require__(1088)
const { kEnumerableProperty } = __nccwpck_require__(4606)
const {
  makeIterator,
  isValidHeaderName,
  isValidHeaderValue
} = __nccwpck_require__(8961)
const util = __nccwpck_require__(9023)
const { webidl } = __nccwpck_require__(3476)
const assert = __nccwpck_require__(2613)

const kHeadersMap = Symbol('headers map')
const kHeadersSortedMap = Symbol('headers map sorted')

/**
 * @param {number} code
 */
function isHTTPWhiteSpaceCharCode (code) {
  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
 * @param {string} potentialValue
 */
function headerValueNormalize (potentialValue) {
  //  To normalize a byte sequence potentialValue, remove
  //  any leading and trailing HTTP whitespace bytes from
  //  potentialValue.
  let i = 0; let j = potentialValue.length

  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j
  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i

  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j)
}

function fill (headers, object) {
  // To fill a Headers object headers with a given object object, run these steps:

  // 1. If object is a sequence, then for each header in object:
  // Note: webidl conversion to array has already been done.
  if (Array.isArray(object)) {
    for (let i = 0; i < object.length; ++i) {
      const header = object[i]
      // 1. If header does not contain exactly two items, then throw a TypeError.
      if (header.length !== 2) {
        throw webidl.errors.exception({
          header: 'Headers constructor',
          message: `expected name/value pair to be length 2, found ${header.length}.`
        })
      }

      // 2. Append (header’s first item, header’s second item) to headers.
      appendHeader(headers, header[0], header[1])
    }
  } else if (typeof object === 'object' && object !== null) {
    // Note: null should throw

    // 2. Otherwise, object is a record, then for each key → value in object,
    //    append (key, value) to headers
    const keys = Object.keys(object)
    for (let i = 0; i < keys.length; ++i) {
      appendHeader(headers, keys[i], object[keys[i]])
    }
  } else {
    throw webidl.errors.conversionFailed({
      prefix: 'Headers constructor',
      argument: 'Argument 1',
      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
    })
  }
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-headers-append
 */
function appendHeader (headers, name, value) {
  // 1. Normalize value.
  value = headerValueNormalize(value)

  // 2. If name is not a header name or value is not a
  //    header value, then throw a TypeError.
  if (!isValidHeaderName(name)) {
    throw webidl.errors.invalidArgument({
      prefix: 'Headers.append',
      value: name,
      type: 'header name'
    })
  } else if (!isValidHeaderValue(value)) {
    throw webidl.errors.invalidArgument({
      prefix: 'Headers.append',
      value,
      type: 'header value'
    })
  }

  // 3. If headers’s guard is "immutable", then throw a TypeError.
  // 4. Otherwise, if headers’s guard is "request" and name is a
  //    forbidden header name, return.
  // Note: undici does not implement forbidden header names
  if (headers[kGuard] === 'immutable') {
    throw new TypeError('immutable')
  } else if (headers[kGuard] === 'request-no-cors') {
    // 5. Otherwise, if headers’s guard is "request-no-cors":
    // TODO
  }

  // 6. Otherwise, if headers’s guard is "response" and name is a
  //    forbidden response-header name, return.

  // 7. Append (name, value) to headers’s header list.
  return headers[kHeadersList].append(name, value)

  // 8. If headers’s guard is "request-no-cors", then remove
  //    privileged no-CORS request headers from headers
}

class HeadersList {
  /** @type {[string, string][]|null} */
  cookies = null

  constructor (init) {
    if (init instanceof HeadersList) {
      this[kHeadersMap] = new Map(init[kHeadersMap])
      this[kHeadersSortedMap] = init[kHeadersSortedMap]
      this.cookies = init.cookies === null ? null : [...init.cookies]
    } else {
      this[kHeadersMap] = new Map(init)
      this[kHeadersSortedMap] = null
    }
  }

  // https://fetch.spec.whatwg.org/#header-list-contains
  contains (name) {
    // A header list list contains a header name name if list
    // contains a header whose name is a byte-case-insensitive
    // match for name.
    name = name.toLowerCase()

    return this[kHeadersMap].has(name)
  }

  clear () {
    this[kHeadersMap].clear()
    this[kHeadersSortedMap] = null
    this.cookies = null
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-append
  append (name, value) {
    this[kHeadersSortedMap] = null

    // 1. If list contains name, then set name to the first such
    //    header’s name.
    const lowercaseName = name.toLowerCase()
    const exists = this[kHeadersMap].get(lowercaseName)

    // 2. Append (name, value) to list.
    if (exists) {
      const delimiter = lowercaseName === 'cookie' ? '; ' : ', '
      this[kHeadersMap].set(lowercaseName, {
        name: exists.name,
        value: `${exists.value}${delimiter}${value}`
      })
    } else {
      this[kHeadersMap].set(lowercaseName, { name, value })
    }

    if (lowercaseName === 'set-cookie') {
      this.cookies ??= []
      this.cookies.push(value)
    }
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-set
  set (name, value) {
    this[kHeadersSortedMap] = null
    const lowercaseName = name.toLowerCase()

    if (lowercaseName === 'set-cookie') {
      this.cookies = [value]
    }

    // 1. If list contains name, then set the value of
    //    the first such header to value and remove the
    //    others.
    // 2. Otherwise, append header (name, value) to list.
    this[kHeadersMap].set(lowercaseName, { name, value })
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-delete
  delete (name) {
    this[kHeadersSortedMap] = null

    name = name.toLowerCase()

    if (name === 'set-cookie') {
      this.cookies = null
    }

    this[kHeadersMap].delete(name)
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-get
  get (name) {
    const value = this[kHeadersMap].get(name.toLowerCase())

    // 1. If list does not contain name, then return null.
    // 2. Return the values of all headers in list whose name
    //    is a byte-case-insensitive match for name,
    //    separated from each other by 0x2C 0x20, in order.
    return value === undefined ? null : value.value
  }

  * [Symbol.iterator] () {
    // use the lowercased name
    for (const [name, { value }] of this[kHeadersMap]) {
      yield [name, value]
    }
  }

  get entries () {
    const headers = {}

    if (this[kHeadersMap].size) {
      for (const { name, value } of this[kHeadersMap].values()) {
        headers[name] = value
      }
    }

    return headers
  }
}

// https://fetch.spec.whatwg.org/#headers-class
class Headers {
  constructor (init = undefined) {
    if (init === kConstruct) {
      return
    }
    this[kHeadersList] = new HeadersList()

    // The new Headers(init) constructor steps are:

    // 1. Set this’s guard to "none".
    this[kGuard] = 'none'

    // 2. If init is given, then fill this with init.
    if (init !== undefined) {
      init = webidl.converters.HeadersInit(init)
      fill(this, init)
    }
  }

  // https://fetch.spec.whatwg.org/#dom-headers-append
  append (name, value) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.append' })

    name = webidl.converters.ByteString(name)
    value = webidl.converters.ByteString(value)

    return appendHeader(this, name, value)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-delete
  delete (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.delete' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.delete',
        value: name,
        type: 'header name'
      })
    }

    // 2. If this’s guard is "immutable", then throw a TypeError.
    // 3. Otherwise, if this’s guard is "request" and name is a
    //    forbidden header name, return.
    // 4. Otherwise, if this’s guard is "request-no-cors", name
    //    is not a no-CORS-safelisted request-header name, and
    //    name is not a privileged no-CORS request-header name,
    //    return.
    // 5. Otherwise, if this’s guard is "response" and name is
    //    a forbidden response-header name, return.
    // Note: undici does not implement forbidden header names
    if (this[kGuard] === 'immutable') {
      throw new TypeError('immutable')
    } else if (this[kGuard] === 'request-no-cors') {
      // TODO
    }

    // 6. If this’s header list does not contain name, then
    //    return.
    if (!this[kHeadersList].contains(name)) {
      return
    }

    // 7. Delete name from this’s header list.
    // 8. If this’s guard is "request-no-cors", then remove
    //    privileged no-CORS request headers from this.
    this[kHeadersList].delete(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-get
  get (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.get' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.get',
        value: name,
        type: 'header name'
      })
    }

    // 2. Return the result of getting name from this’s header
    //    list.
    return this[kHeadersList].get(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-has
  has (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.has' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.has',
        value: name,
        type: 'header name'
      })
    }

    // 2. Return true if this’s header list contains name;
    //    otherwise false.
    return this[kHeadersList].contains(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-set
  set (name, value) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.set' })

    name = webidl.converters.ByteString(name)
    value = webidl.converters.ByteString(value)

    // 1. Normalize value.
    value = headerValueNormalize(value)

    // 2. If name is not a header name or value is not a
    //    header value, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.set',
        value: name,
        type: 'header name'
      })
    } else if (!isValidHeaderValue(value)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.set',
        value,
        type: 'header value'
      })
    }

    // 3. If this’s guard is "immutable", then throw a TypeError.
    // 4. Otherwise, if this’s guard is "request" and name is a
    //    forbidden header name, return.
    // 5. Otherwise, if this’s guard is "request-no-cors" and
    //    name/value is not a no-CORS-safelisted request-header,
    //    return.
    // 6. Otherwise, if this’s guard is "response" and name is a
    //    forbidden response-header name, return.
    // Note: undici does not implement forbidden header names
    if (this[kGuard] === 'immutable') {
      throw new TypeError('immutable')
    } else if (this[kGuard] === 'request-no-cors') {
      // TODO
    }

    // 7. Set (name, value) in this’s header list.
    // 8. If this’s guard is "request-no-cors", then remove
    //    privileged no-CORS request headers from this
    this[kHeadersList].set(name, value)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
  getSetCookie () {
    webidl.brandCheck(this, Headers)

    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».
    // 2. Return the values of all headers in this’s header list whose name is
    //    a byte-case-insensitive match for `Set-Cookie`, in order.

    const list = this[kHeadersList].cookies

    if (list) {
      return [...list]
    }

    return []
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
  get [kHeadersSortedMap] () {
    if (this[kHeadersList][kHeadersSortedMap]) {
      return this[kHeadersList][kHeadersSortedMap]
    }

    // 1. Let headers be an empty list of headers with the key being the name
    //    and value the value.
    const headers = []

    // 2. Let names be the result of convert header names to a sorted-lowercase
    //    set with all the names of the headers in list.
    const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1)
    const cookies = this[kHeadersList].cookies

    // 3. For each name of names:
    for (let i = 0; i < names.length; ++i) {
      const [name, value] = names[i]
      // 1. If name is `set-cookie`, then:
      if (name === 'set-cookie') {
        // 1. Let values be a list of all values of headers in list whose name
        //    is a byte-case-insensitive match for name, in order.

        // 2. For each value of values:
        // 1. Append (name, value) to headers.
        for (let j = 0; j < cookies.length; ++j) {
          headers.push([name, cookies[j]])
        }
      } else {
        // 2. Otherwise:

        // 1. Let value be the result of getting name from list.

        // 2. Assert: value is non-null.
        assert(value !== null)

        // 3. Append (name, value) to headers.
        headers.push([name, value])
      }
    }

    this[kHeadersList][kHeadersSortedMap] = headers

    // 4. Return headers.
    return headers
  }

  keys () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'key')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'key'
    )
  }

  values () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'value')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'value'
    )
  }

  entries () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'key+value')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'key+value'
    )
  }

  /**
   * @param {(value: string, key: string, self: Headers) => void} callbackFn
   * @param {unknown} thisArg
   */
  forEach (callbackFn, thisArg = globalThis) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.forEach' })

    if (typeof callbackFn !== 'function') {
      throw new TypeError(
        "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
      )
    }

    for (const [key, value] of this) {
      callbackFn.apply(thisArg, [value, key, this])
    }
  }

  [Symbol.for('nodejs.util.inspect.custom')] () {
    webidl.brandCheck(this, Headers)

    return this[kHeadersList]
  }
}

Headers.prototype[Symbol.iterator] = Headers.prototype.entries

Object.defineProperties(Headers.prototype, {
  append: kEnumerableProperty,
  delete: kEnumerableProperty,
  get: kEnumerableProperty,
  has: kEnumerableProperty,
  set: kEnumerableProperty,
  getSetCookie: kEnumerableProperty,
  keys: kEnumerableProperty,
  values: kEnumerableProperty,
  entries: kEnumerableProperty,
  forEach: kEnumerableProperty,
  [Symbol.iterator]: { enumerable: false },
  [Symbol.toStringTag]: {
    value: 'Headers',
    configurable: true
  },
  [util.inspect.custom]: {
    enumerable: false
  }
})

webidl.converters.HeadersInit = function (V) {
  if (webidl.util.Type(V) === 'Object') {
    if (V[Symbol.iterator]) {
      return webidl.converters['sequence<sequence<ByteString>>'](V)
    }

    return webidl.converters['record<ByteString, ByteString>'](V)
  }

  throw webidl.errors.conversionFailed({
    prefix: 'Headers constructor',
    argument: 'Argument 1',
    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
  })
}

module.exports = {
  fill,
  Headers,
  HeadersList
}


/***/ }),

/***/ 9401:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// https://github.com/Ethan-Arrowood/undici-fetch



const {
  Response,
  makeNetworkError,
  makeAppropriateNetworkError,
  filterResponse,
  makeResponse
} = __nccwpck_require__(6062)
const { Headers } = __nccwpck_require__(2223)
const { Request, makeRequest } = __nccwpck_require__(2204)
const zlib = __nccwpck_require__(3106)
const {
  bytesMatch,
  makePolicyContainer,
  clonePolicyContainer,
  requestBadPort,
  TAOCheck,
  appendRequestOriginHeader,
  responseLocationURL,
  requestCurrentURL,
  setRequestReferrerPolicyOnRedirect,
  tryUpgradeRequestToAPotentiallyTrustworthyURL,
  createOpaqueTimingInfo,
  appendFetchMetadata,
  corsCheck,
  crossOriginResourcePolicyCheck,
  determineRequestsReferrer,
  coarsenedSharedCurrentTime,
  createDeferredPromise,
  isBlobLike,
  sameOrigin,
  isCancelled,
  isAborted,
  isErrorLike,
  fullyReadBody,
  readableStreamClose,
  isomorphicEncode,
  urlIsLocal,
  urlIsHttpHttpsScheme,
  urlHasHttpsScheme
} = __nccwpck_require__(8961)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(1088)
const assert = __nccwpck_require__(2613)
const { safelyExtractBody } = __nccwpck_require__(8009)
const {
  redirectStatusSet,
  nullBodyStatus,
  safeMethodsSet,
  requestBodyHeader,
  subresourceSet,
  DOMException
} = __nccwpck_require__(7536)
const { kHeadersList } = __nccwpck_require__(5773)
const EE = __nccwpck_require__(4434)
const { Readable, pipeline } = __nccwpck_require__(2203)
const { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = __nccwpck_require__(4606)
const { dataURLProcessor, serializeAMimeType } = __nccwpck_require__(6960)
const { TransformStream } = __nccwpck_require__(3774)
const { getGlobalDispatcher } = __nccwpck_require__(9456)
const { webidl } = __nccwpck_require__(3476)
const { STATUS_CODES } = __nccwpck_require__(8611)
const GET_OR_HEAD = ['GET', 'HEAD']

/** @type {import('buffer').resolveObjectURL} */
let resolveObjectURL
let ReadableStream = globalThis.ReadableStream

class Fetch extends EE {
  constructor (dispatcher) {
    super()

    this.dispatcher = dispatcher
    this.connection = null
    this.dump = false
    this.state = 'ongoing'
    // 2 terminated listeners get added per request,
    // but only 1 gets removed. If there are 20 redirects,
    // 21 listeners will be added.
    // See https://github.com/nodejs/undici/issues/1711
    // TODO (fix): Find and fix root cause for leaked listener.
    this.setMaxListeners(21)
  }

  terminate (reason) {
    if (this.state !== 'ongoing') {
      return
    }

    this.state = 'terminated'
    this.connection?.destroy(reason)
    this.emit('terminated', reason)
  }

  // https://fetch.spec.whatwg.org/#fetch-controller-abort
  abort (error) {
    if (this.state !== 'ongoing') {
      return
    }

    // 1. Set controller’s state to "aborted".
    this.state = 'aborted'

    // 2. Let fallbackError be an "AbortError" DOMException.
    // 3. Set error to fallbackError if it is not given.
    if (!error) {
      error = new DOMException('The operation was aborted.', 'AbortError')
    }

    // 4. Let serializedError be StructuredSerialize(error).
    //    If that threw an exception, catch it, and let
    //    serializedError be StructuredSerialize(fallbackError).

    // 5. Set controller’s serialized abort reason to serializedError.
    this.serializedAbortReason = error

    this.connection?.destroy(error)
    this.emit('terminated', error)
  }
}

// https://fetch.spec.whatwg.org/#fetch-method
function fetch (input, init = {}) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'globalThis.fetch' })

  // 1. Let p be a new promise.
  const p = createDeferredPromise()

  // 2. Let requestObject be the result of invoking the initial value of
  // Request as constructor with input and init as arguments. If this throws
  // an exception, reject p with it and return p.
  let requestObject

  try {
    requestObject = new Request(input, init)
  } catch (e) {
    p.reject(e)
    return p.promise
  }

  // 3. Let request be requestObject’s request.
  const request = requestObject[kState]

  // 4. If requestObject’s signal’s aborted flag is set, then:
  if (requestObject.signal.aborted) {
    // 1. Abort the fetch() call with p, request, null, and
    //    requestObject’s signal’s abort reason.
    abortFetch(p, request, null, requestObject.signal.reason)

    // 2. Return p.
    return p.promise
  }

  // 5. Let globalObject be request’s client’s global object.
  const globalObject = request.client.globalObject

  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set
  // request’s service-workers mode to "none".
  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {
    request.serviceWorkers = 'none'
  }

  // 7. Let responseObject be null.
  let responseObject = null

  // 8. Let relevantRealm be this’s relevant Realm.
  const relevantRealm = null

  // 9. Let locallyAborted be false.
  let locallyAborted = false

  // 10. Let controller be null.
  let controller = null

  // 11. Add the following abort steps to requestObject’s signal:
  addAbortListener(
    requestObject.signal,
    () => {
      // 1. Set locallyAborted to true.
      locallyAborted = true

      // 2. Assert: controller is non-null.
      assert(controller != null)

      // 3. Abort controller with requestObject’s signal’s abort reason.
      controller.abort(requestObject.signal.reason)

      // 4. Abort the fetch() call with p, request, responseObject,
      //    and requestObject’s signal’s abort reason.
      abortFetch(p, request, responseObject, requestObject.signal.reason)
    }
  )

  // 12. Let handleFetchDone given response response be to finalize and
  // report timing with response, globalObject, and "fetch".
  const handleFetchDone = (response) =>
    finalizeAndReportTiming(response, 'fetch')

  // 13. Set controller to the result of calling fetch given request,
  // with processResponseEndOfBody set to handleFetchDone, and processResponse
  // given response being these substeps:

  const processResponse = (response) => {
    // 1. If locallyAborted is true, terminate these substeps.
    if (locallyAborted) {
      return Promise.resolve()
    }

    // 2. If response’s aborted flag is set, then:
    if (response.aborted) {
      // 1. Let deserializedError be the result of deserialize a serialized
      //    abort reason given controller’s serialized abort reason and
      //    relevantRealm.

      // 2. Abort the fetch() call with p, request, responseObject, and
      //    deserializedError.

      abortFetch(p, request, responseObject, controller.serializedAbortReason)
      return Promise.resolve()
    }

    // 3. If response is a network error, then reject p with a TypeError
    // and terminate these substeps.
    if (response.type === 'error') {
      p.reject(
        Object.assign(new TypeError('fetch failed'), { cause: response.error })
      )
      return Promise.resolve()
    }

    // 4. Set responseObject to the result of creating a Response object,
    // given response, "immutable", and relevantRealm.
    responseObject = new Response()
    responseObject[kState] = response
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kHeadersList] = response.headersList
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 5. Resolve p with responseObject.
    p.resolve(responseObject)
  }

  controller = fetching({
    request,
    processResponseEndOfBody: handleFetchDone,
    processResponse,
    dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici
  })

  // 14. Return p.
  return p.promise
}

// https://fetch.spec.whatwg.org/#finalize-and-report-timing
function finalizeAndReportTiming (response, initiatorType = 'other') {
  // 1. If response is an aborted network error, then return.
  if (response.type === 'error' && response.aborted) {
    return
  }

  // 2. If response’s URL list is null or empty, then return.
  if (!response.urlList?.length) {
    return
  }

  // 3. Let originalURL be response’s URL list[0].
  const originalURL = response.urlList[0]

  // 4. Let timingInfo be response’s timing info.
  let timingInfo = response.timingInfo

  // 5. Let cacheState be response’s cache state.
  let cacheState = response.cacheState

  // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.
  if (!urlIsHttpHttpsScheme(originalURL)) {
    return
  }

  // 7. If timingInfo is null, then return.
  if (timingInfo === null) {
    return
  }

  // 8. If response’s timing allow passed flag is not set, then:
  if (!response.timingAllowPassed) {
    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.
    timingInfo = createOpaqueTimingInfo({
      startTime: timingInfo.startTime
    })

    //  2. Set cacheState to the empty string.
    cacheState = ''
  }

  // 9. Set timingInfo’s end time to the coarsened shared current time
  // given global’s relevant settings object’s cross-origin isolated
  // capability.
  // TODO: given global’s relevant settings object’s cross-origin isolated
  // capability?
  timingInfo.endTime = coarsenedSharedCurrentTime()

  // 10. Set response’s timing info to timingInfo.
  response.timingInfo = timingInfo

  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,
  // global, and cacheState.
  markResourceTiming(
    timingInfo,
    originalURL,
    initiatorType,
    globalThis,
    cacheState
  )
}

// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing
function markResourceTiming (timingInfo, originalURL, initiatorType, globalThis, cacheState) {
  if (nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 2)) {
    performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState)
  }
}

// https://fetch.spec.whatwg.org/#abort-fetch
function abortFetch (p, request, responseObject, error) {
  // Note: AbortSignal.reason was added in node v17.2.0
  // which would give us an undefined error to reject with.
  // Remove this once node v16 is no longer supported.
  if (!error) {
    error = new DOMException('The operation was aborted.', 'AbortError')
  }

  // 1. Reject promise with error.
  p.reject(error)

  // 2. If request’s body is not null and is readable, then cancel request’s
  // body with error.
  if (request.body != null && isReadable(request.body?.stream)) {
    request.body.stream.cancel(error).catch((err) => {
      if (err.code === 'ERR_INVALID_STATE') {
        // Node bug?
        return
      }
      throw err
    })
  }

  // 3. If responseObject is null, then return.
  if (responseObject == null) {
    return
  }

  // 4. Let response be responseObject’s response.
  const response = responseObject[kState]

  // 5. If response’s body is not null and is readable, then error response’s
  // body with error.
  if (response.body != null && isReadable(response.body?.stream)) {
    response.body.stream.cancel(error).catch((err) => {
      if (err.code === 'ERR_INVALID_STATE') {
        // Node bug?
        return
      }
      throw err
    })
  }
}

// https://fetch.spec.whatwg.org/#fetching
function fetching ({
  request,
  processRequestBodyChunkLength,
  processRequestEndOfBody,
  processResponse,
  processResponseEndOfBody,
  processResponseConsumeBody,
  useParallelQueue = false,
  dispatcher // undici
}) {
  // 1. Let taskDestination be null.
  let taskDestination = null

  // 2. Let crossOriginIsolatedCapability be false.
  let crossOriginIsolatedCapability = false

  // 3. If request’s client is non-null, then:
  if (request.client != null) {
    // 1. Set taskDestination to request’s client’s global object.
    taskDestination = request.client.globalObject

    // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin
    // isolated capability.
    crossOriginIsolatedCapability =
      request.client.crossOriginIsolatedCapability
  }

  // 4. If useParallelQueue is true, then set taskDestination to the result of
  // starting a new parallel queue.
  // TODO

  // 5. Let timingInfo be a new fetch timing info whose start time and
  // post-redirect start time are the coarsened shared current time given
  // crossOriginIsolatedCapability.
  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability)
  const timingInfo = createOpaqueTimingInfo({
    startTime: currenTime
  })

  // 6. Let fetchParams be a new fetch params whose
  // request is request,
  // timing info is timingInfo,
  // process request body chunk length is processRequestBodyChunkLength,
  // process request end-of-body is processRequestEndOfBody,
  // process response is processResponse,
  // process response consume body is processResponseConsumeBody,
  // process response end-of-body is processResponseEndOfBody,
  // task destination is taskDestination,
  // and cross-origin isolated capability is crossOriginIsolatedCapability.
  const fetchParams = {
    controller: new Fetch(dispatcher),
    request,
    timingInfo,
    processRequestBodyChunkLength,
    processRequestEndOfBody,
    processResponse,
    processResponseConsumeBody,
    processResponseEndOfBody,
    taskDestination,
    crossOriginIsolatedCapability
  }

  // 7. If request’s body is a byte sequence, then set request’s body to
  //    request’s body as a body.
  // NOTE: Since fetching is only called from fetch, body should already be
  // extracted.
  assert(!request.body || request.body.stream)

  // 8. If request’s window is "client", then set request’s window to request’s
  // client, if request’s client’s global object is a Window object; otherwise
  // "no-window".
  if (request.window === 'client') {
    // TODO: What if request.client is null?
    request.window =
      request.client?.globalObject?.constructor?.name === 'Window'
        ? request.client
        : 'no-window'
  }

  // 9. If request’s origin is "client", then set request’s origin to request’s
  // client’s origin.
  if (request.origin === 'client') {
    // TODO: What if request.client is null?
    request.origin = request.client?.origin
  }

  // 10. If all of the following conditions are true:
  // TODO

  // 11. If request’s policy container is "client", then:
  if (request.policyContainer === 'client') {
    // 1. If request’s client is non-null, then set request’s policy
    // container to a clone of request’s client’s policy container. [HTML]
    if (request.client != null) {
      request.policyContainer = clonePolicyContainer(
        request.client.policyContainer
      )
    } else {
      // 2. Otherwise, set request’s policy container to a new policy
      // container.
      request.policyContainer = makePolicyContainer()
    }
  }

  // 12. If request’s header list does not contain `Accept`, then:
  if (!request.headersList.contains('accept')) {
    // 1. Let value be `*/*`.
    const value = '*/*'

    // 2. A user agent should set value to the first matching statement, if
    // any, switching on request’s destination:
    // "document"
    // "frame"
    // "iframe"
    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`
    // "image"
    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`
    // "style"
    // `text/css,*/*;q=0.1`
    // TODO

    // 3. Append `Accept`/value to request’s header list.
    request.headersList.append('accept', value)
  }

  // 13. If request’s header list does not contain `Accept-Language`, then
  // user agents should append `Accept-Language`/an appropriate value to
  // request’s header list.
  if (!request.headersList.contains('accept-language')) {
    request.headersList.append('accept-language', '*')
  }

  // 14. If request’s priority is null, then use request’s initiator and
  // destination appropriately in setting request’s priority to a
  // user-agent-defined object.
  if (request.priority === null) {
    // TODO
  }

  // 15. If request is a subresource request, then:
  if (subresourceSet.has(request.destination)) {
    // TODO
  }

  // 16. Run main fetch given fetchParams.
  mainFetch(fetchParams)
    .catch(err => {
      fetchParams.controller.terminate(err)
    })

  // 17. Return fetchParam's controller
  return fetchParams.controller
}

// https://fetch.spec.whatwg.org/#concept-main-fetch
async function mainFetch (fetchParams, recursive = false) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. If request’s local-URLs-only flag is set and request’s current URL is
  // not local, then set response to a network error.
  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
    response = makeNetworkError('local URLs only')
  }

  // 4. Run report Content Security Policy violations for request.
  // TODO

  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.
  tryUpgradeRequestToAPotentiallyTrustworthyURL(request)

  // 6. If should request be blocked due to a bad port, should fetching request
  // be blocked as mixed content, or should request be blocked by Content
  // Security Policy returns blocked, then set response to a network error.
  if (requestBadPort(request) === 'blocked') {
    response = makeNetworkError('bad port')
  }
  // TODO: should fetching request be blocked as mixed content?
  // TODO: should request be blocked by Content Security Policy?

  // 7. If request’s referrer policy is the empty string, then set request’s
  // referrer policy to request’s policy container’s referrer policy.
  if (request.referrerPolicy === '') {
    request.referrerPolicy = request.policyContainer.referrerPolicy
  }

  // 8. If request’s referrer is not "no-referrer", then set request’s
  // referrer to the result of invoking determine request’s referrer.
  if (request.referrer !== 'no-referrer') {
    request.referrer = determineRequestsReferrer(request)
  }

  // 9. Set request’s current URL’s scheme to "https" if all of the following
  // conditions are true:
  // - request’s current URL’s scheme is "http"
  // - request’s current URL’s host is a domain
  // - Matching request’s current URL’s host per Known HSTS Host Domain Name
  //   Matching results in either a superdomain match with an asserted
  //   includeSubDomains directive or a congruent match (with or without an
  //   asserted includeSubDomains directive). [HSTS]
  // TODO

  // 10. If recursive is false, then run the remaining steps in parallel.
  // TODO

  // 11. If response is null, then set response to the result of running
  // the steps corresponding to the first matching statement:
  if (response === null) {
    response = await (async () => {
      const currentURL = requestCurrentURL(request)

      if (
        // - request’s current URL’s origin is same origin with request’s origin,
        //   and request’s response tainting is "basic"
        (sameOrigin(currentURL, request.url) && request.responseTainting === 'basic') ||
        // request’s current URL’s scheme is "data"
        (currentURL.protocol === 'data:') ||
        // - request’s mode is "navigate" or "websocket"
        (request.mode === 'navigate' || request.mode === 'websocket')
      ) {
        // 1. Set request’s response tainting to "basic".
        request.responseTainting = 'basic'

        // 2. Return the result of running scheme fetch given fetchParams.
        return await schemeFetch(fetchParams)
      }

      // request’s mode is "same-origin"
      if (request.mode === 'same-origin') {
        // 1. Return a network error.
        return makeNetworkError('request mode cannot be "same-origin"')
      }

      // request’s mode is "no-cors"
      if (request.mode === 'no-cors') {
        // 1. If request’s redirect mode is not "follow", then return a network
        // error.
        if (request.redirect !== 'follow') {
          return makeNetworkError(
            'redirect mode cannot be "follow" for "no-cors" request'
          )
        }

        // 2. Set request’s response tainting to "opaque".
        request.responseTainting = 'opaque'

        // 3. Return the result of running scheme fetch given fetchParams.
        return await schemeFetch(fetchParams)
      }

      // request’s current URL’s scheme is not an HTTP(S) scheme
      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
        // Return a network error.
        return makeNetworkError('URL scheme must be a HTTP(S) scheme')
      }

      // - request’s use-CORS-preflight flag is set
      // - request’s unsafe-request flag is set and either request’s method is
      //   not a CORS-safelisted method or CORS-unsafe request-header names with
      //   request’s header list is not empty
      //    1. Set request’s response tainting to "cors".
      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch
      //    given fetchParams and true.
      //    3. If corsWithPreflightResponse is a network error, then clear cache
      //    entries using request.
      //    4. Return corsWithPreflightResponse.
      // TODO

      // Otherwise
      //    1. Set request’s response tainting to "cors".
      request.responseTainting = 'cors'

      //    2. Return the result of running HTTP fetch given fetchParams.
      return await httpFetch(fetchParams)
    })()
  }

  // 12. If recursive is true, then return response.
  if (recursive) {
    return response
  }

  // 13. If response is not a network error and response is not a filtered
  // response, then:
  if (response.status !== 0 && !response.internalResponse) {
    // If request’s response tainting is "cors", then:
    if (request.responseTainting === 'cors') {
      // 1. Let headerNames be the result of extracting header list values
      // given `Access-Control-Expose-Headers` and response’s header list.
      // TODO
      // 2. If request’s credentials mode is not "include" and headerNames
      // contains `*`, then set response’s CORS-exposed header-name list to
      // all unique header names in response’s header list.
      // TODO
      // 3. Otherwise, if headerNames is not null or failure, then set
      // response’s CORS-exposed header-name list to headerNames.
      // TODO
    }

    // Set response to the following filtered response with response as its
    // internal response, depending on request’s response tainting:
    if (request.responseTainting === 'basic') {
      response = filterResponse(response, 'basic')
    } else if (request.responseTainting === 'cors') {
      response = filterResponse(response, 'cors')
    } else if (request.responseTainting === 'opaque') {
      response = filterResponse(response, 'opaque')
    } else {
      assert(false)
    }
  }

  // 14. Let internalResponse be response, if response is a network error,
  // and response’s internal response otherwise.
  let internalResponse =
    response.status === 0 ? response : response.internalResponse

  // 15. If internalResponse’s URL list is empty, then set it to a clone of
  // request’s URL list.
  if (internalResponse.urlList.length === 0) {
    internalResponse.urlList.push(...request.urlList)
  }

  // 16. If request’s timing allow failed flag is unset, then set
  // internalResponse’s timing allow passed flag.
  if (!request.timingAllowFailed) {
    response.timingAllowPassed = true
  }

  // 17. If response is not a network error and any of the following returns
  // blocked
  // - should internalResponse to request be blocked as mixed content
  // - should internalResponse to request be blocked by Content Security Policy
  // - should internalResponse to request be blocked due to its MIME type
  // - should internalResponse to request be blocked due to nosniff
  // TODO

  // 18. If response’s type is "opaque", internalResponse’s status is 206,
  // internalResponse’s range-requested flag is set, and request’s header
  // list does not contain `Range`, then set response and internalResponse
  // to a network error.
  if (
    response.type === 'opaque' &&
    internalResponse.status === 206 &&
    internalResponse.rangeRequested &&
    !request.headers.contains('range')
  ) {
    response = internalResponse = makeNetworkError()
  }

  // 19. If response is not a network error and either request’s method is
  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,
  // set internalResponse’s body to null and disregard any enqueuing toward
  // it (if any).
  if (
    response.status !== 0 &&
    (request.method === 'HEAD' ||
      request.method === 'CONNECT' ||
      nullBodyStatus.includes(internalResponse.status))
  ) {
    internalResponse.body = null
    fetchParams.controller.dump = true
  }

  // 20. If request’s integrity metadata is not the empty string, then:
  if (request.integrity) {
    // 1. Let processBodyError be this step: run fetch finale given fetchParams
    // and a network error.
    const processBodyError = (reason) =>
      fetchFinale(fetchParams, makeNetworkError(reason))

    // 2. If request’s response tainting is "opaque", or response’s body is null,
    // then run processBodyError and abort these steps.
    if (request.responseTainting === 'opaque' || response.body == null) {
      processBodyError(response.error)
      return
    }

    // 3. Let processBody given bytes be these steps:
    const processBody = (bytes) => {
      // 1. If bytes do not match request’s integrity metadata,
      // then run processBodyError and abort these steps. [SRI]
      if (!bytesMatch(bytes, request.integrity)) {
        processBodyError('integrity mismatch')
        return
      }

      // 2. Set response’s body to bytes as a body.
      response.body = safelyExtractBody(bytes)[0]

      // 3. Run fetch finale given fetchParams and response.
      fetchFinale(fetchParams, response)
    }

    // 4. Fully read response’s body given processBody and processBodyError.
    await fullyReadBody(response.body, processBody, processBodyError)
  } else {
    // 21. Otherwise, run fetch finale given fetchParams and response.
    fetchFinale(fetchParams, response)
  }
}

// https://fetch.spec.whatwg.org/#concept-scheme-fetch
// given a fetch params fetchParams
function schemeFetch (fetchParams) {
  // Note: since the connection is destroyed on redirect, which sets fetchParams to a
  // cancelled state, we do not want this condition to trigger *unless* there have been
  // no redirects. See https://github.com/nodejs/undici/issues/1776
  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
    return Promise.resolve(makeAppropriateNetworkError(fetchParams))
  }

  // 2. Let request be fetchParams’s request.
  const { request } = fetchParams

  const { protocol: scheme } = requestCurrentURL(request)

  // 3. Switch on request’s current URL’s scheme and run the associated steps:
  switch (scheme) {
    case 'about:': {
      // If request’s current URL’s path is the string "blank", then return a new response
      // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,
      // and body is the empty byte sequence as a body.

      // Otherwise, return a network error.
      return Promise.resolve(makeNetworkError('about scheme is not supported'))
    }
    case 'blob:': {
      if (!resolveObjectURL) {
        resolveObjectURL = (__nccwpck_require__(181).resolveObjectURL)
      }

      // 1. Let blobURLEntry be request’s current URL’s blob URL entry.
      const blobURLEntry = requestCurrentURL(request)

      // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56
      // Buffer.resolveObjectURL does not ignore URL queries.
      if (blobURLEntry.search.length !== 0) {
        return Promise.resolve(makeNetworkError('NetworkError when attempting to fetch resource.'))
      }

      const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString())

      // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s
      //    object is not a Blob object, then return a network error.
      if (request.method !== 'GET' || !isBlobLike(blobURLEntryObject)) {
        return Promise.resolve(makeNetworkError('invalid method'))
      }

      // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.
      const bodyWithType = safelyExtractBody(blobURLEntryObject)

      // 4. Let body be bodyWithType’s body.
      const body = bodyWithType[0]

      // 5. Let length be body’s length, serialized and isomorphic encoded.
      const length = isomorphicEncode(`${body.length}`)

      // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.
      const type = bodyWithType[1] ?? ''

      // 7. Return a new response whose status message is `OK`, header list is
      //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.
      const response = makeResponse({
        statusText: 'OK',
        headersList: [
          ['content-length', { name: 'Content-Length', value: length }],
          ['content-type', { name: 'Content-Type', value: type }]
        ]
      })

      response.body = body

      return Promise.resolve(response)
    }
    case 'data:': {
      // 1. Let dataURLStruct be the result of running the
      //    data: URL processor on request’s current URL.
      const currentURL = requestCurrentURL(request)
      const dataURLStruct = dataURLProcessor(currentURL)

      // 2. If dataURLStruct is failure, then return a
      //    network error.
      if (dataURLStruct === 'failure') {
        return Promise.resolve(makeNetworkError('failed to fetch the data URL'))
      }

      // 3. Let mimeType be dataURLStruct’s MIME type, serialized.
      const mimeType = serializeAMimeType(dataURLStruct.mimeType)

      // 4. Return a response whose status message is `OK`,
      //    header list is « (`Content-Type`, mimeType) »,
      //    and body is dataURLStruct’s body as a body.
      return Promise.resolve(makeResponse({
        statusText: 'OK',
        headersList: [
          ['content-type', { name: 'Content-Type', value: mimeType }]
        ],
        body: safelyExtractBody(dataURLStruct.body)[0]
      }))
    }
    case 'file:': {
      // For now, unfortunate as it is, file URLs are left as an exercise for the reader.
      // When in doubt, return a network error.
      return Promise.resolve(makeNetworkError('not implemented... yet...'))
    }
    case 'http:':
    case 'https:': {
      // Return the result of running HTTP fetch given fetchParams.

      return httpFetch(fetchParams)
        .catch((err) => makeNetworkError(err))
    }
    default: {
      return Promise.resolve(makeNetworkError('unknown scheme'))
    }
  }
}

// https://fetch.spec.whatwg.org/#finalize-response
function finalizeResponse (fetchParams, response) {
  // 1. Set fetchParams’s request’s done flag.
  fetchParams.request.done = true

  // 2, If fetchParams’s process response done is not null, then queue a fetch
  // task to run fetchParams’s process response done given response, with
  // fetchParams’s task destination.
  if (fetchParams.processResponseDone != null) {
    queueMicrotask(() => fetchParams.processResponseDone(response))
  }
}

// https://fetch.spec.whatwg.org/#fetch-finale
function fetchFinale (fetchParams, response) {
  // 1. If response is a network error, then:
  if (response.type === 'error') {
    // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».
    response.urlList = [fetchParams.request.urlList[0]]

    // 2. Set response’s timing info to the result of creating an opaque timing
    // info for fetchParams’s timing info.
    response.timingInfo = createOpaqueTimingInfo({
      startTime: fetchParams.timingInfo.startTime
    })
  }

  // 2. Let processResponseEndOfBody be the following steps:
  const processResponseEndOfBody = () => {
    // 1. Set fetchParams’s request’s done flag.
    fetchParams.request.done = true

    // If fetchParams’s process response end-of-body is not null,
    // then queue a fetch task to run fetchParams’s process response
    // end-of-body given response with fetchParams’s task destination.
    if (fetchParams.processResponseEndOfBody != null) {
      queueMicrotask(() => fetchParams.processResponseEndOfBody(response))
    }
  }

  // 3. If fetchParams’s process response is non-null, then queue a fetch task
  // to run fetchParams’s process response given response, with fetchParams’s
  // task destination.
  if (fetchParams.processResponse != null) {
    queueMicrotask(() => fetchParams.processResponse(response))
  }

  // 4. If response’s body is null, then run processResponseEndOfBody.
  if (response.body == null) {
    processResponseEndOfBody()
  } else {
  // 5. Otherwise:

    // 1. Let transformStream be a new a TransformStream.

    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,
    // enqueues chunk in transformStream.
    const identityTransformAlgorithm = (chunk, controller) => {
      controller.enqueue(chunk)
    }

    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm
    // and flushAlgorithm set to processResponseEndOfBody.
    const transformStream = new TransformStream({
      start () {},
      transform: identityTransformAlgorithm,
      flush: processResponseEndOfBody
    }, {
      size () {
        return 1
      }
    }, {
      size () {
        return 1
      }
    })

    // 4. Set response’s body to the result of piping response’s body through transformStream.
    response.body = { stream: response.body.stream.pipeThrough(transformStream) }
  }

  // 6. If fetchParams’s process response consume body is non-null, then:
  if (fetchParams.processResponseConsumeBody != null) {
    // 1. Let processBody given nullOrBytes be this step: run fetchParams’s
    // process response consume body given response and nullOrBytes.
    const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes)

    // 2. Let processBodyError be this step: run fetchParams’s process
    // response consume body given response and failure.
    const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure)

    // 3. If response’s body is null, then queue a fetch task to run processBody
    // given null, with fetchParams’s task destination.
    if (response.body == null) {
      queueMicrotask(() => processBody(null))
    } else {
      // 4. Otherwise, fully read response’s body given processBody, processBodyError,
      // and fetchParams’s task destination.
      return fullyReadBody(response.body, processBody, processBodyError)
    }
    return Promise.resolve()
  }
}

// https://fetch.spec.whatwg.org/#http-fetch
async function httpFetch (fetchParams) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. Let actualResponse be null.
  let actualResponse = null

  // 4. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 5. If request’s service-workers mode is "all", then:
  if (request.serviceWorkers === 'all') {
    // TODO
  }

  // 6. If response is null, then:
  if (response === null) {
    // 1. If makeCORSPreflight is true and one of these conditions is true:
    // TODO

    // 2. If request’s redirect mode is "follow", then set request’s
    // service-workers mode to "none".
    if (request.redirect === 'follow') {
      request.serviceWorkers = 'none'
    }

    // 3. Set response and actualResponse to the result of running
    // HTTP-network-or-cache fetch given fetchParams.
    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams)

    // 4. If request’s response tainting is "cors" and a CORS check
    // for request and response returns failure, then return a network error.
    if (
      request.responseTainting === 'cors' &&
      corsCheck(request, response) === 'failure'
    ) {
      return makeNetworkError('cors failure')
    }

    // 5. If the TAO check for request and response returns failure, then set
    // request’s timing allow failed flag.
    if (TAOCheck(request, response) === 'failure') {
      request.timingAllowFailed = true
    }
  }

  // 7. If either request’s response tainting or response’s type
  // is "opaque", and the cross-origin resource policy check with
  // request’s origin, request’s client, request’s destination,
  // and actualResponse returns blocked, then return a network error.
  if (
    (request.responseTainting === 'opaque' || response.type === 'opaque') &&
    crossOriginResourcePolicyCheck(
      request.origin,
      request.client,
      request.destination,
      actualResponse
    ) === 'blocked'
  ) {
    return makeNetworkError('blocked')
  }

  // 8. If actualResponse’s status is a redirect status, then:
  if (redirectStatusSet.has(actualResponse.status)) {
    // 1. If actualResponse’s status is not 303, request’s body is not null,
    // and the connection uses HTTP/2, then user agents may, and are even
    // encouraged to, transmit an RST_STREAM frame.
    // See, https://github.com/whatwg/fetch/issues/1288
    if (request.redirect !== 'manual') {
      fetchParams.controller.connection.destroy()
    }

    // 2. Switch on request’s redirect mode:
    if (request.redirect === 'error') {
      // Set response to a network error.
      response = makeNetworkError('unexpected redirect')
    } else if (request.redirect === 'manual') {
      // Set response to an opaque-redirect filtered response whose internal
      // response is actualResponse.
      // NOTE(spec): On the web this would return an `opaqueredirect` response,
      // but that doesn't make sense server side.
      // See https://github.com/nodejs/undici/issues/1193.
      response = actualResponse
    } else if (request.redirect === 'follow') {
      // Set response to the result of running HTTP-redirect fetch given
      // fetchParams and response.
      response = await httpRedirectFetch(fetchParams, response)
    } else {
      assert(false)
    }
  }

  // 9. Set response’s timing info to timingInfo.
  response.timingInfo = timingInfo

  // 10. Return response.
  return response
}

// https://fetch.spec.whatwg.org/#http-redirect-fetch
function httpRedirectFetch (fetchParams, response) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let actualResponse be response, if response is not a filtered response,
  // and response’s internal response otherwise.
  const actualResponse = response.internalResponse
    ? response.internalResponse
    : response

  // 3. Let locationURL be actualResponse’s location URL given request’s current
  // URL’s fragment.
  let locationURL

  try {
    locationURL = responseLocationURL(
      actualResponse,
      requestCurrentURL(request).hash
    )

    // 4. If locationURL is null, then return response.
    if (locationURL == null) {
      return response
    }
  } catch (err) {
    // 5. If locationURL is failure, then return a network error.
    return Promise.resolve(makeNetworkError(err))
  }

  // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network
  // error.
  if (!urlIsHttpHttpsScheme(locationURL)) {
    return Promise.resolve(makeNetworkError('URL scheme must be a HTTP(S) scheme'))
  }

  // 7. If request’s redirect count is 20, then return a network error.
  if (request.redirectCount === 20) {
    return Promise.resolve(makeNetworkError('redirect count exceeded'))
  }

  // 8. Increase request’s redirect count by 1.
  request.redirectCount += 1

  // 9. If request’s mode is "cors", locationURL includes credentials, and
  // request’s origin is not same origin with locationURL’s origin, then return
  //  a network error.
  if (
    request.mode === 'cors' &&
    (locationURL.username || locationURL.password) &&
    !sameOrigin(request, locationURL)
  ) {
    return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'))
  }

  // 10. If request’s response tainting is "cors" and locationURL includes
  // credentials, then return a network error.
  if (
    request.responseTainting === 'cors' &&
    (locationURL.username || locationURL.password)
  ) {
    return Promise.resolve(makeNetworkError(
      'URL cannot contain credentials for request mode "cors"'
    ))
  }

  // 11. If actualResponse’s status is not 303, request’s body is non-null,
  // and request’s body’s source is null, then return a network error.
  if (
    actualResponse.status !== 303 &&
    request.body != null &&
    request.body.source == null
  ) {
    return Promise.resolve(makeNetworkError())
  }

  // 12. If one of the following is true
  // - actualResponse’s status is 301 or 302 and request’s method is `POST`
  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`
  if (
    ([301, 302].includes(actualResponse.status) && request.method === 'POST') ||
    (actualResponse.status === 303 &&
      !GET_OR_HEAD.includes(request.method))
  ) {
    // then:
    // 1. Set request’s method to `GET` and request’s body to null.
    request.method = 'GET'
    request.body = null

    // 2. For each headerName of request-body-header name, delete headerName from
    // request’s header list.
    for (const headerName of requestBodyHeader) {
      request.headersList.delete(headerName)
    }
  }

  // 13. If request’s current URL’s origin is not same origin with locationURL’s
  //     origin, then for each headerName of CORS non-wildcard request-header name,
  //     delete headerName from request’s header list.
  if (!sameOrigin(requestCurrentURL(request), locationURL)) {
    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name
    request.headersList.delete('authorization')

    // https://fetch.spec.whatwg.org/#authentication-entries
    request.headersList.delete('proxy-authorization', true)

    // "Cookie" and "Host" are forbidden request-headers, which undici doesn't implement.
    request.headersList.delete('cookie')
    request.headersList.delete('host')
  }

  // 14. If request’s body is non-null, then set request’s body to the first return
  // value of safely extracting request’s body’s source.
  if (request.body != null) {
    assert(request.body.source != null)
    request.body = safelyExtractBody(request.body.source)[0]
  }

  // 15. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 16. Set timingInfo’s redirect end time and post-redirect start time to the
  // coarsened shared current time given fetchParams’s cross-origin isolated
  // capability.
  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =
    coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability)

  // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s
  //  redirect start time to timingInfo’s start time.
  if (timingInfo.redirectStartTime === 0) {
    timingInfo.redirectStartTime = timingInfo.startTime
  }

  // 18. Append locationURL to request’s URL list.
  request.urlList.push(locationURL)

  // 19. Invoke set request’s referrer policy on redirect on request and
  // actualResponse.
  setRequestReferrerPolicyOnRedirect(request, actualResponse)

  // 20. Return the result of running main fetch given fetchParams and true.
  return mainFetch(fetchParams, true)
}

// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch
async function httpNetworkOrCacheFetch (
  fetchParams,
  isAuthenticationFetch = false,
  isNewConnectionFetch = false
) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let httpFetchParams be null.
  let httpFetchParams = null

  // 3. Let httpRequest be null.
  let httpRequest = null

  // 4. Let response be null.
  let response = null

  // 5. Let storedResponse be null.
  // TODO: cache

  // 6. Let httpCache be null.
  const httpCache = null

  // 7. Let the revalidatingFlag be unset.
  const revalidatingFlag = false

  // 8. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. If request’s window is "no-window" and request’s redirect mode is
  //    "error", then set httpFetchParams to fetchParams and httpRequest to
  //    request.
  if (request.window === 'no-window' && request.redirect === 'error') {
    httpFetchParams = fetchParams
    httpRequest = request
  } else {
    // Otherwise:

    // 1. Set httpRequest to a clone of request.
    httpRequest = makeRequest(request)

    // 2. Set httpFetchParams to a copy of fetchParams.
    httpFetchParams = { ...fetchParams }

    // 3. Set httpFetchParams’s request to httpRequest.
    httpFetchParams.request = httpRequest
  }

  //    3. Let includeCredentials be true if one of
  const includeCredentials =
    request.credentials === 'include' ||
    (request.credentials === 'same-origin' &&
      request.responseTainting === 'basic')

  //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s
  //    body is non-null; otherwise null.
  const contentLength = httpRequest.body ? httpRequest.body.length : null

  //    5. Let contentLengthHeaderValue be null.
  let contentLengthHeaderValue = null

  //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or
  //    `PUT`, then set contentLengthHeaderValue to `0`.
  if (
    httpRequest.body == null &&
    ['POST', 'PUT'].includes(httpRequest.method)
  ) {
    contentLengthHeaderValue = '0'
  }

  //    7. If contentLength is non-null, then set contentLengthHeaderValue to
  //    contentLength, serialized and isomorphic encoded.
  if (contentLength != null) {
    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`)
  }

  //    8. If contentLengthHeaderValue is non-null, then append
  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header
  //    list.
  if (contentLengthHeaderValue != null) {
    httpRequest.headersList.append('content-length', contentLengthHeaderValue)
  }

  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,
  //    contentLengthHeaderValue) to httpRequest’s header list.

  //    10. If contentLength is non-null and httpRequest’s keepalive is true,
  //    then:
  if (contentLength != null && httpRequest.keepalive) {
    // NOTE: keepalive is a noop outside of browser context.
  }

  //    11. If httpRequest’s referrer is a URL, then append
  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,
  //     to httpRequest’s header list.
  if (httpRequest.referrer instanceof URL) {
    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href))
  }

  //    12. Append a request `Origin` header for httpRequest.
  appendRequestOriginHeader(httpRequest)

  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]
  appendFetchMetadata(httpRequest)

  //    14. If httpRequest’s header list does not contain `User-Agent`, then
  //    user agents should append `User-Agent`/default `User-Agent` value to
  //    httpRequest’s header list.
  if (!httpRequest.headersList.contains('user-agent')) {
    httpRequest.headersList.append('user-agent', typeof esbuildDetection === 'undefined' ? 'undici' : 'node')
  }

  //    15. If httpRequest’s cache mode is "default" and httpRequest’s header
  //    list contains `If-Modified-Since`, `If-None-Match`,
  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set
  //    httpRequest’s cache mode to "no-store".
  if (
    httpRequest.cache === 'default' &&
    (httpRequest.headersList.contains('if-modified-since') ||
      httpRequest.headersList.contains('if-none-match') ||
      httpRequest.headersList.contains('if-unmodified-since') ||
      httpRequest.headersList.contains('if-match') ||
      httpRequest.headersList.contains('if-range'))
  ) {
    httpRequest.cache = 'no-store'
  }

  //    16. If httpRequest’s cache mode is "no-cache", httpRequest’s prevent
  //    no-cache cache-control header modification flag is unset, and
  //    httpRequest’s header list does not contain `Cache-Control`, then append
  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.
  if (
    httpRequest.cache === 'no-cache' &&
    !httpRequest.preventNoCacheCacheControlHeaderModification &&
    !httpRequest.headersList.contains('cache-control')
  ) {
    httpRequest.headersList.append('cache-control', 'max-age=0')
  }

  //    17. If httpRequest’s cache mode is "no-store" or "reload", then:
  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {
    // 1. If httpRequest’s header list does not contain `Pragma`, then append
    // `Pragma`/`no-cache` to httpRequest’s header list.
    if (!httpRequest.headersList.contains('pragma')) {
      httpRequest.headersList.append('pragma', 'no-cache')
    }

    // 2. If httpRequest’s header list does not contain `Cache-Control`,
    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.
    if (!httpRequest.headersList.contains('cache-control')) {
      httpRequest.headersList.append('cache-control', 'no-cache')
    }
  }

  //    18. If httpRequest’s header list contains `Range`, then append
  //    `Accept-Encoding`/`identity` to httpRequest’s header list.
  if (httpRequest.headersList.contains('range')) {
    httpRequest.headersList.append('accept-encoding', 'identity')
  }

  //    19. Modify httpRequest’s header list per HTTP. Do not append a given
  //    header if httpRequest’s header list contains that header’s name.
  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129
  if (!httpRequest.headersList.contains('accept-encoding')) {
    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate')
    } else {
      httpRequest.headersList.append('accept-encoding', 'gzip, deflate')
    }
  }

  httpRequest.headersList.delete('host')

  //    20. If includeCredentials is true, then:
  if (includeCredentials) {
    // 1. If the user agent is not configured to block cookies for httpRequest
    // (see section 7 of [COOKIES]), then:
    // TODO: credentials
    // 2. If httpRequest’s header list does not contain `Authorization`, then:
    // TODO: credentials
  }

  //    21. If there’s a proxy-authentication entry, use it as appropriate.
  //    TODO: proxy-authentication

  //    22. Set httpCache to the result of determining the HTTP cache
  //    partition, given httpRequest.
  //    TODO: cache

  //    23. If httpCache is null, then set httpRequest’s cache mode to
  //    "no-store".
  if (httpCache == null) {
    httpRequest.cache = 'no-store'
  }

  //    24. If httpRequest’s cache mode is neither "no-store" nor "reload",
  //    then:
  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {
    // TODO: cache
  }

  // 9. If aborted, then return the appropriate network error for fetchParams.
  // TODO

  // 10. If response is null, then:
  if (response == null) {
    // 1. If httpRequest’s cache mode is "only-if-cached", then return a
    // network error.
    if (httpRequest.mode === 'only-if-cached') {
      return makeNetworkError('only if cached')
    }

    // 2. Let forwardResponse be the result of running HTTP-network fetch
    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.
    const forwardResponse = await httpNetworkFetch(
      httpFetchParams,
      includeCredentials,
      isNewConnectionFetch
    )

    // 3. If httpRequest’s method is unsafe and forwardResponse’s status is
    // in the range 200 to 399, inclusive, invalidate appropriate stored
    // responses in httpCache, as per the "Invalidation" chapter of HTTP
    // Caching, and set storedResponse to null. [HTTP-CACHING]
    if (
      !safeMethodsSet.has(httpRequest.method) &&
      forwardResponse.status >= 200 &&
      forwardResponse.status <= 399
    ) {
      // TODO: cache
    }

    // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,
    // then:
    if (revalidatingFlag && forwardResponse.status === 304) {
      // TODO: cache
    }

    // 5. If response is null, then:
    if (response == null) {
      // 1. Set response to forwardResponse.
      response = forwardResponse

      // 2. Store httpRequest and forwardResponse in httpCache, as per the
      // "Storing Responses in Caches" chapter of HTTP Caching. [HTTP-CACHING]
      // TODO: cache
    }
  }

  // 11. Set response’s URL list to a clone of httpRequest’s URL list.
  response.urlList = [...httpRequest.urlList]

  // 12. If httpRequest’s header list contains `Range`, then set response’s
  // range-requested flag.
  if (httpRequest.headersList.contains('range')) {
    response.rangeRequested = true
  }

  // 13. Set response’s request-includes-credentials to includeCredentials.
  response.requestIncludesCredentials = includeCredentials

  // 14. If response’s status is 401, httpRequest’s response tainting is not
  // "cors", includeCredentials is true, and request’s window is an environment
  // settings object, then:
  // TODO

  // 15. If response’s status is 407, then:
  if (response.status === 407) {
    // 1. If request’s window is "no-window", then return a network error.
    if (request.window === 'no-window') {
      return makeNetworkError()
    }

    // 2. ???

    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.
    if (isCancelled(fetchParams)) {
      return makeAppropriateNetworkError(fetchParams)
    }

    // 4. Prompt the end user as appropriate in request’s window and store
    // the result as a proxy-authentication entry. [HTTP-AUTH]
    // TODO: Invoke some kind of callback?

    // 5. Set response to the result of running HTTP-network-or-cache fetch given
    // fetchParams.
    // TODO
    return makeNetworkError('proxy authentication required')
  }

  // 16. If all of the following are true
  if (
    // response’s status is 421
    response.status === 421 &&
    // isNewConnectionFetch is false
    !isNewConnectionFetch &&
    // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
    (request.body == null || request.body.source != null)
  ) {
    // then:

    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
    if (isCancelled(fetchParams)) {
      return makeAppropriateNetworkError(fetchParams)
    }

    // 2. Set response to the result of running HTTP-network-or-cache
    // fetch given fetchParams, isAuthenticationFetch, and true.

    // TODO (spec): The spec doesn't specify this but we need to cancel
    // the active response before we can start a new one.
    // https://github.com/whatwg/fetch/issues/1293
    fetchParams.controller.connection.destroy()

    response = await httpNetworkOrCacheFetch(
      fetchParams,
      isAuthenticationFetch,
      true
    )
  }

  // 17. If isAuthenticationFetch is true, then create an authentication entry
  if (isAuthenticationFetch) {
    // TODO
  }

  // 18. Return response.
  return response
}

// https://fetch.spec.whatwg.org/#http-network-fetch
async function httpNetworkFetch (
  fetchParams,
  includeCredentials = false,
  forceNewConnection = false
) {
  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed)

  fetchParams.controller.connection = {
    abort: null,
    destroyed: false,
    destroy (err) {
      if (!this.destroyed) {
        this.destroyed = true
        this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'))
      }
    }
  }

  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 4. Let httpCache be the result of determining the HTTP cache partition,
  // given request.
  // TODO: cache
  const httpCache = null

  // 5. If httpCache is null, then set request’s cache mode to "no-store".
  if (httpCache == null) {
    request.cache = 'no-store'
  }

  // 6. Let networkPartitionKey be the result of determining the network
  // partition key given request.
  // TODO

  // 7. Let newConnection be "yes" if forceNewConnection is true; otherwise
  // "no".
  const newConnection = forceNewConnection ? 'yes' : 'no' // eslint-disable-line no-unused-vars

  // 8. Switch on request’s mode:
  if (request.mode === 'websocket') {
    // Let connection be the result of obtaining a WebSocket connection,
    // given request’s current URL.
    // TODO
  } else {
    // Let connection be the result of obtaining a connection, given
    // networkPartitionKey, request’s current URL’s origin,
    // includeCredentials, and forceNewConnection.
    // TODO
  }

  // 9. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. If connection is failure, then return a network error.

  //    2. Set timingInfo’s final connection timing info to the result of
  //    calling clamp and coarsen connection timing info with connection’s
  //    timing info, timingInfo’s post-redirect start time, and fetchParams’s
  //    cross-origin isolated capability.

  //    3. If connection is not an HTTP/2 connection, request’s body is non-null,
  //    and request’s body’s source is null, then append (`Transfer-Encoding`,
  //    `chunked`) to request’s header list.

  //    4. Set timingInfo’s final network-request start time to the coarsened
  //    shared current time given fetchParams’s cross-origin isolated
  //    capability.

  //    5. Set response to the result of making an HTTP request over connection
  //    using request with the following caveats:

  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]
  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]

  //        - If request’s body is non-null, and request’s body’s source is null,
  //        then the user agent may have a buffer of up to 64 kibibytes and store
  //        a part of request’s body in that buffer. If the user agent reads from
  //        request’s body beyond that buffer’s size and the user agent needs to
  //        resend request, then instead return a network error.

  //        - Set timingInfo’s final network-response start time to the coarsened
  //        shared current time given fetchParams’s cross-origin isolated capability,
  //        immediately after the user agent’s HTTP parser receives the first byte
  //        of the response (e.g., frame header bytes for HTTP/2 or response status
  //        line for HTTP/1.x).

  //        - Wait until all the headers are transmitted.

  //        - Any responses whose status is in the range 100 to 199, inclusive,
  //        and is not 101, are to be ignored, except for the purposes of setting
  //        timingInfo’s final network-response start time above.

  //    - If request’s header list contains `Transfer-Encoding`/`chunked` and
  //    response is transferred via HTTP/1.0 or older, then return a network
  //    error.

  //    - If the HTTP request results in a TLS client certificate dialog, then:

  //        1. If request’s window is an environment settings object, make the
  //        dialog available in request’s window.

  //        2. Otherwise, return a network error.

  // To transmit request’s body body, run these steps:
  let requestBody = null
  // 1. If body is null and fetchParams’s process request end-of-body is
  // non-null, then queue a fetch task given fetchParams’s process request
  // end-of-body and fetchParams’s task destination.
  if (request.body == null && fetchParams.processRequestEndOfBody) {
    queueMicrotask(() => fetchParams.processRequestEndOfBody())
  } else if (request.body != null) {
    // 2. Otherwise, if body is non-null:

    //    1. Let processBodyChunk given bytes be these steps:
    const processBodyChunk = async function * (bytes) {
      // 1. If the ongoing fetch is terminated, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. Run this step in parallel: transmit bytes.
      yield bytes

      // 3. If fetchParams’s process request body is non-null, then run
      // fetchParams’s process request body given bytes’s length.
      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength)
    }

    // 2. Let processEndOfBody be these steps:
    const processEndOfBody = () => {
      // 1. If fetchParams is canceled, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. If fetchParams’s process request end-of-body is non-null,
      // then run fetchParams’s process request end-of-body.
      if (fetchParams.processRequestEndOfBody) {
        fetchParams.processRequestEndOfBody()
      }
    }

    // 3. Let processBodyError given e be these steps:
    const processBodyError = (e) => {
      // 1. If fetchParams is canceled, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. If e is an "AbortError" DOMException, then abort fetchParams’s controller.
      if (e.name === 'AbortError') {
        fetchParams.controller.abort()
      } else {
        fetchParams.controller.terminate(e)
      }
    }

    // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,
    // processBodyError, and fetchParams’s task destination.
    requestBody = (async function * () {
      try {
        for await (const bytes of request.body.stream) {
          yield * processBodyChunk(bytes)
        }
        processEndOfBody()
      } catch (err) {
        processBodyError(err)
      }
    })()
  }

  try {
    // socket is only provided for websockets
    const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody })

    if (socket) {
      response = makeResponse({ status, statusText, headersList, socket })
    } else {
      const iterator = body[Symbol.asyncIterator]()
      fetchParams.controller.next = () => iterator.next()

      response = makeResponse({ status, statusText, headersList })
    }
  } catch (err) {
    // 10. If aborted, then:
    if (err.name === 'AbortError') {
      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.
      fetchParams.controller.connection.destroy()

      // 2. Return the appropriate network error for fetchParams.
      return makeAppropriateNetworkError(fetchParams, err)
    }

    return makeNetworkError(err)
  }

  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch
  // if it is suspended.
  const pullAlgorithm = () => {
    fetchParams.controller.resume()
  }

  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s
  // controller with reason, given reason.
  const cancelAlgorithm = (reason) => {
    fetchParams.controller.abort(reason)
  }

  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by
  // the user agent.
  // TODO

  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object
  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.
  // TODO

  // 15. Let stream be a new ReadableStream.
  // 16. Set up stream with pullAlgorithm set to pullAlgorithm,
  // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to
  // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(3774).ReadableStream)
  }

  const stream = new ReadableStream(
    {
      async start (controller) {
        fetchParams.controller.controller = controller
      },
      async pull (controller) {
        await pullAlgorithm(controller)
      },
      async cancel (reason) {
        await cancelAlgorithm(reason)
      }
    },
    {
      highWaterMark: 0,
      size () {
        return 1
      }
    }
  )

  // 17. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. Set response’s body to a new body whose stream is stream.
  response.body = { stream }

  //    2. If response is not a network error and request’s cache mode is
  //    not "no-store", then update response in httpCache for request.
  //    TODO

  //    3. If includeCredentials is true and the user agent is not configured
  //    to block cookies for request (see section 7 of [COOKIES]), then run the
  //    "set-cookie-string" parsing algorithm (see section 5.2 of [COOKIES]) on
  //    the value of each header whose name is a byte-case-insensitive match for
  //    `Set-Cookie` in response’s header list, if any, and request’s current URL.
  //    TODO

  // 18. If aborted, then:
  // TODO

  // 19. Run these steps in parallel:

  //    1. Run these steps, but abort when fetchParams is canceled:
  fetchParams.controller.on('terminated', onAborted)
  fetchParams.controller.resume = async () => {
    // 1. While true
    while (true) {
      // 1-3. See onData...

      // 4. Set bytes to the result of handling content codings given
      // codings and bytes.
      let bytes
      let isFailure
      try {
        const { done, value } = await fetchParams.controller.next()

        if (isAborted(fetchParams)) {
          break
        }

        bytes = done ? undefined : value
      } catch (err) {
        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
          // zlib doesn't like empty streams.
          bytes = undefined
        } else {
          bytes = err

          // err may be propagated from the result of calling readablestream.cancel,
          // which might not be an error. https://github.com/nodejs/undici/issues/2009
          isFailure = true
        }
      }

      if (bytes === undefined) {
        // 2. Otherwise, if the bytes transmission for response’s message
        // body is done normally and stream is readable, then close
        // stream, finalize response for fetchParams and response, and
        // abort these in-parallel steps.
        readableStreamClose(fetchParams.controller.controller)

        finalizeResponse(fetchParams, response)

        return
      }

      // 5. Increase timingInfo’s decoded body size by bytes’s length.
      timingInfo.decodedBodySize += bytes?.byteLength ?? 0

      // 6. If bytes is failure, then terminate fetchParams’s controller.
      if (isFailure) {
        fetchParams.controller.terminate(bytes)
        return
      }

      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes
      // into stream.
      fetchParams.controller.controller.enqueue(new Uint8Array(bytes))

      // 8. If stream is errored, then terminate the ongoing fetch.
      if (isErrored(stream)) {
        fetchParams.controller.terminate()
        return
      }

      // 9. If stream doesn’t need more data ask the user agent to suspend
      // the ongoing fetch.
      if (!fetchParams.controller.controller.desiredSize) {
        return
      }
    }
  }

  //    2. If aborted, then:
  function onAborted (reason) {
    // 2. If fetchParams is aborted, then:
    if (isAborted(fetchParams)) {
      // 1. Set response’s aborted flag.
      response.aborted = true

      // 2. If stream is readable, then error stream with the result of
      //    deserialize a serialized abort reason given fetchParams’s
      //    controller’s serialized abort reason and an
      //    implementation-defined realm.
      if (isReadable(stream)) {
        fetchParams.controller.controller.error(
          fetchParams.controller.serializedAbortReason
        )
      }
    } else {
      // 3. Otherwise, if stream is readable, error stream with a TypeError.
      if (isReadable(stream)) {
        fetchParams.controller.controller.error(new TypeError('terminated', {
          cause: isErrorLike(reason) ? reason : undefined
        }))
      }
    }

    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.
    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.
    fetchParams.controller.connection.destroy()
  }

  // 20. Return response.
  return response

  async function dispatch ({ body }) {
    const url = requestCurrentURL(request)
    /** @type {import('../..').Agent} */
    const agent = fetchParams.controller.dispatcher

    return new Promise((resolve, reject) => agent.dispatch(
      {
        path: url.pathname + url.search,
        origin: url.origin,
        method: request.method,
        body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
        headers: request.headersList.entries,
        maxRedirections: 0,
        upgrade: request.mode === 'websocket' ? 'websocket' : undefined
      },
      {
        body: null,
        abort: null,

        onConnect (abort) {
          // TODO (fix): Do we need connection here?
          const { connection } = fetchParams.controller

          if (connection.destroyed) {
            abort(new DOMException('The operation was aborted.', 'AbortError'))
          } else {
            fetchParams.controller.on('terminated', abort)
            this.abort = connection.abort = abort
          }
        },

        onHeaders (status, headersList, resume, statusText) {
          if (status < 200) {
            return
          }

          let codings = []
          let location = ''

          const headers = new Headers()

          // For H2, the headers are a plain JS object
          // We distinguish between them and iterate accordingly
          if (Array.isArray(headersList)) {
            for (let n = 0; n < headersList.length; n += 2) {
              const key = headersList[n + 0].toString('latin1')
              const val = headersList[n + 1].toString('latin1')
              if (key.toLowerCase() === 'content-encoding') {
                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                // "All content-coding values are case-insensitive..."
                codings = val.toLowerCase().split(',').map((x) => x.trim())
              } else if (key.toLowerCase() === 'location') {
                location = val
              }

              headers[kHeadersList].append(key, val)
            }
          } else {
            const keys = Object.keys(headersList)
            for (const key of keys) {
              const val = headersList[key]
              if (key.toLowerCase() === 'content-encoding') {
                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                // "All content-coding values are case-insensitive..."
                codings = val.toLowerCase().split(',').map((x) => x.trim()).reverse()
              } else if (key.toLowerCase() === 'location') {
                location = val
              }

              headers[kHeadersList].append(key, val)
            }
          }

          this.body = new Readable({ read: resume })

          const decoders = []

          const willFollow = request.redirect === 'follow' &&
            location &&
            redirectStatusSet.has(status)

          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
          if (request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {
            for (const coding of codings) {
              // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2
              if (coding === 'x-gzip' || coding === 'gzip') {
                decoders.push(zlib.createGunzip({
                  // Be less strict when decoding compressed responses, since sometimes
                  // servers send slightly invalid responses that are still accepted
                  // by common browsers.
                  // Always using Z_SYNC_FLUSH is what cURL does.
                  flush: zlib.constants.Z_SYNC_FLUSH,
                  finishFlush: zlib.constants.Z_SYNC_FLUSH
                }))
              } else if (coding === 'deflate') {
                decoders.push(zlib.createInflate())
              } else if (coding === 'br') {
                decoders.push(zlib.createBrotliDecompress())
              } else {
                decoders.length = 0
                break
              }
            }
          }

          resolve({
            status,
            statusText,
            headersList: headers[kHeadersList],
            body: decoders.length
              ? pipeline(this.body, ...decoders, () => { })
              : this.body.on('error', () => {})
          })

          return true
        },

        onData (chunk) {
          if (fetchParams.controller.dump) {
            return
          }

          // 1. If one or more bytes have been transmitted from response’s
          // message body, then:

          //  1. Let bytes be the transmitted bytes.
          const bytes = chunk

          //  2. Let codings be the result of extracting header list values
          //  given `Content-Encoding` and response’s header list.
          //  See pullAlgorithm.

          //  3. Increase timingInfo’s encoded body size by bytes’s length.
          timingInfo.encodedBodySize += bytes.byteLength

          //  4. See pullAlgorithm...

          return this.body.push(bytes)
        },

        onComplete () {
          if (this.abort) {
            fetchParams.controller.off('terminated', this.abort)
          }

          fetchParams.controller.ended = true

          this.body.push(null)
        },

        onError (error) {
          if (this.abort) {
            fetchParams.controller.off('terminated', this.abort)
          }

          this.body?.destroy(error)

          fetchParams.controller.terminate(error)

          reject(error)
        },

        onUpgrade (status, headersList, socket) {
          if (status !== 101) {
            return
          }

          const headers = new Headers()

          for (let n = 0; n < headersList.length; n += 2) {
            const key = headersList[n + 0].toString('latin1')
            const val = headersList[n + 1].toString('latin1')

            headers[kHeadersList].append(key, val)
          }

          resolve({
            status,
            statusText: STATUS_CODES[status],
            headersList: headers[kHeadersList],
            socket
          })

          return true
        }
      }
    ))
  }
}

module.exports = {
  fetch,
  Fetch,
  fetching,
  finalizeAndReportTiming
}


/***/ }),

/***/ 2204:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
/* globals AbortController */



const { extractBody, mixinBody, cloneBody } = __nccwpck_require__(8009)
const { Headers, fill: fillHeaders, HeadersList } = __nccwpck_require__(2223)
const { FinalizationRegistry } = __nccwpck_require__(1408)()
const util = __nccwpck_require__(4606)
const {
  isValidHTTPToken,
  sameOrigin,
  normalizeMethod,
  makePolicyContainer,
  normalizeMethodRecord
} = __nccwpck_require__(8961)
const {
  forbiddenMethodsSet,
  corsSafeListedMethodsSet,
  referrerPolicy,
  requestRedirect,
  requestMode,
  requestCredentials,
  requestCache,
  requestDuplex
} = __nccwpck_require__(7536)
const { kEnumerableProperty } = util
const { kHeaders, kSignal, kState, kGuard, kRealm } = __nccwpck_require__(1088)
const { webidl } = __nccwpck_require__(3476)
const { getGlobalOrigin } = __nccwpck_require__(742)
const { URLSerializer } = __nccwpck_require__(6960)
const { kHeadersList, kConstruct } = __nccwpck_require__(5773)
const assert = __nccwpck_require__(2613)
const { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __nccwpck_require__(4434)

let TransformStream = globalThis.TransformStream

const kAbortController = Symbol('abortController')

const requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
  signal.removeEventListener('abort', abort)
})

// https://fetch.spec.whatwg.org/#request-class
class Request {
  // https://fetch.spec.whatwg.org/#dom-request
  constructor (input, init = {}) {
    if (input === kConstruct) {
      return
    }

    webidl.argumentLengthCheck(arguments, 1, { header: 'Request constructor' })

    input = webidl.converters.RequestInfo(input)
    init = webidl.converters.RequestInit(init)

    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object
    this[kRealm] = {
      settingsObject: {
        baseUrl: getGlobalOrigin(),
        get origin () {
          return this.baseUrl?.origin
        },
        policyContainer: makePolicyContainer()
      }
    }

    // 1. Let request be null.
    let request = null

    // 2. Let fallbackMode be null.
    let fallbackMode = null

    // 3. Let baseURL be this’s relevant settings object’s API base URL.
    const baseUrl = this[kRealm].settingsObject.baseUrl

    // 4. Let signal be null.
    let signal = null

    // 5. If input is a string, then:
    if (typeof input === 'string') {
      // 1. Let parsedURL be the result of parsing input with baseURL.
      // 2. If parsedURL is failure, then throw a TypeError.
      let parsedURL
      try {
        parsedURL = new URL(input, baseUrl)
      } catch (err) {
        throw new TypeError('Failed to parse URL from ' + input, { cause: err })
      }

      // 3. If parsedURL includes credentials, then throw a TypeError.
      if (parsedURL.username || parsedURL.password) {
        throw new TypeError(
          'Request cannot be constructed from a URL that includes credentials: ' +
            input
        )
      }

      // 4. Set request to a new request whose URL is parsedURL.
      request = makeRequest({ urlList: [parsedURL] })

      // 5. Set fallbackMode to "cors".
      fallbackMode = 'cors'
    } else {
      // 6. Otherwise:

      // 7. Assert: input is a Request object.
      assert(input instanceof Request)

      // 8. Set request to input’s request.
      request = input[kState]

      // 9. Set signal to input’s signal.
      signal = input[kSignal]
    }

    // 7. Let origin be this’s relevant settings object’s origin.
    const origin = this[kRealm].settingsObject.origin

    // 8. Let window be "client".
    let window = 'client'

    // 9. If request’s window is an environment settings object and its origin
    // is same origin with origin, then set window to request’s window.
    if (
      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&
      sameOrigin(request.window, origin)
    ) {
      window = request.window
    }

    // 10. If init["window"] exists and is non-null, then throw a TypeError.
    if (init.window != null) {
      throw new TypeError(`'window' option '${window}' must be null`)
    }

    // 11. If init["window"] exists, then set window to "no-window".
    if ('window' in init) {
      window = 'no-window'
    }

    // 12. Set request to a new request with the following properties:
    request = makeRequest({
      // URL request’s URL.
      // undici implementation note: this is set as the first item in request's urlList in makeRequest
      // method request’s method.
      method: request.method,
      // header list A copy of request’s header list.
      // undici implementation note: headersList is cloned in makeRequest
      headersList: request.headersList,
      // unsafe-request flag Set.
      unsafeRequest: request.unsafeRequest,
      // client This’s relevant settings object.
      client: this[kRealm].settingsObject,
      // window window.
      window,
      // priority request’s priority.
      priority: request.priority,
      // origin request’s origin. The propagation of the origin is only significant for navigation requests
      // being handled by a service worker. In this scenario a request can have an origin that is different
      // from the current client.
      origin: request.origin,
      // referrer request’s referrer.
      referrer: request.referrer,
      // referrer policy request’s referrer policy.
      referrerPolicy: request.referrerPolicy,
      // mode request’s mode.
      mode: request.mode,
      // credentials mode request’s credentials mode.
      credentials: request.credentials,
      // cache mode request’s cache mode.
      cache: request.cache,
      // redirect mode request’s redirect mode.
      redirect: request.redirect,
      // integrity metadata request’s integrity metadata.
      integrity: request.integrity,
      // keepalive request’s keepalive.
      keepalive: request.keepalive,
      // reload-navigation flag request’s reload-navigation flag.
      reloadNavigation: request.reloadNavigation,
      // history-navigation flag request’s history-navigation flag.
      historyNavigation: request.historyNavigation,
      // URL list A clone of request’s URL list.
      urlList: [...request.urlList]
    })

    const initHasKey = Object.keys(init).length !== 0

    // 13. If init is not empty, then:
    if (initHasKey) {
      // 1. If request’s mode is "navigate", then set it to "same-origin".
      if (request.mode === 'navigate') {
        request.mode = 'same-origin'
      }

      // 2. Unset request’s reload-navigation flag.
      request.reloadNavigation = false

      // 3. Unset request’s history-navigation flag.
      request.historyNavigation = false

      // 4. Set request’s origin to "client".
      request.origin = 'client'

      // 5. Set request’s referrer to "client"
      request.referrer = 'client'

      // 6. Set request’s referrer policy to the empty string.
      request.referrerPolicy = ''

      // 7. Set request’s URL to request’s current URL.
      request.url = request.urlList[request.urlList.length - 1]

      // 8. Set request’s URL list to « request’s URL ».
      request.urlList = [request.url]
    }

    // 14. If init["referrer"] exists, then:
    if (init.referrer !== undefined) {
      // 1. Let referrer be init["referrer"].
      const referrer = init.referrer

      // 2. If referrer is the empty string, then set request’s referrer to "no-referrer".
      if (referrer === '') {
        request.referrer = 'no-referrer'
      } else {
        // 1. Let parsedReferrer be the result of parsing referrer with
        // baseURL.
        // 2. If parsedReferrer is failure, then throw a TypeError.
        let parsedReferrer
        try {
          parsedReferrer = new URL(referrer, baseUrl)
        } catch (err) {
          throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err })
        }

        // 3. If one of the following is true
        // - parsedReferrer’s scheme is "about" and path is the string "client"
        // - parsedReferrer’s origin is not same origin with origin
        // then set request’s referrer to "client".
        if (
          (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client') ||
          (origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl))
        ) {
          request.referrer = 'client'
        } else {
          // 4. Otherwise, set request’s referrer to parsedReferrer.
          request.referrer = parsedReferrer
        }
      }
    }

    // 15. If init["referrerPolicy"] exists, then set request’s referrer policy
    // to it.
    if (init.referrerPolicy !== undefined) {
      request.referrerPolicy = init.referrerPolicy
    }

    // 16. Let mode be init["mode"] if it exists, and fallbackMode otherwise.
    let mode
    if (init.mode !== undefined) {
      mode = init.mode
    } else {
      mode = fallbackMode
    }

    // 17. If mode is "navigate", then throw a TypeError.
    if (mode === 'navigate') {
      throw webidl.errors.exception({
        header: 'Request constructor',
        message: 'invalid request mode navigate.'
      })
    }

    // 18. If mode is non-null, set request’s mode to mode.
    if (mode != null) {
      request.mode = mode
    }

    // 19. If init["credentials"] exists, then set request’s credentials mode
    // to it.
    if (init.credentials !== undefined) {
      request.credentials = init.credentials
    }

    // 18. If init["cache"] exists, then set request’s cache mode to it.
    if (init.cache !== undefined) {
      request.cache = init.cache
    }

    // 21. If request’s cache mode is "only-if-cached" and request’s mode is
    // not "same-origin", then throw a TypeError.
    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {
      throw new TypeError(
        "'only-if-cached' can be set only with 'same-origin' mode"
      )
    }

    // 22. If init["redirect"] exists, then set request’s redirect mode to it.
    if (init.redirect !== undefined) {
      request.redirect = init.redirect
    }

    // 23. If init["integrity"] exists, then set request’s integrity metadata to it.
    if (init.integrity != null) {
      request.integrity = String(init.integrity)
    }

    // 24. If init["keepalive"] exists, then set request’s keepalive to it.
    if (init.keepalive !== undefined) {
      request.keepalive = Boolean(init.keepalive)
    }

    // 25. If init["method"] exists, then:
    if (init.method !== undefined) {
      // 1. Let method be init["method"].
      let method = init.method

      // 2. If method is not a method or method is a forbidden method, then
      // throw a TypeError.
      if (!isValidHTTPToken(method)) {
        throw new TypeError(`'${method}' is not a valid HTTP method.`)
      }

      if (forbiddenMethodsSet.has(method.toUpperCase())) {
        throw new TypeError(`'${method}' HTTP method is unsupported.`)
      }

      // 3. Normalize method.
      method = normalizeMethodRecord[method] ?? normalizeMethod(method)

      // 4. Set request’s method to method.
      request.method = method
    }

    // 26. If init["signal"] exists, then set signal to it.
    if (init.signal !== undefined) {
      signal = init.signal
    }

    // 27. Set this’s request to request.
    this[kState] = request

    // 28. Set this’s signal to a new AbortSignal object with this’s relevant
    // Realm.
    // TODO: could this be simplified with AbortSignal.any
    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)
    const ac = new AbortController()
    this[kSignal] = ac.signal
    this[kSignal][kRealm] = this[kRealm]

    // 29. If signal is not null, then make this’s signal follow signal.
    if (signal != null) {
      if (
        !signal ||
        typeof signal.aborted !== 'boolean' ||
        typeof signal.addEventListener !== 'function'
      ) {
        throw new TypeError(
          "Failed to construct 'Request': member signal is not of type AbortSignal."
        )
      }

      if (signal.aborted) {
        ac.abort(signal.reason)
      } else {
        // Keep a strong ref to ac while request object
        // is alive. This is needed to prevent AbortController
        // from being prematurely garbage collected.
        // See, https://github.com/nodejs/undici/issues/1926.
        this[kAbortController] = ac

        const acRef = new WeakRef(ac)
        const abort = function () {
          const ac = acRef.deref()
          if (ac !== undefined) {
            ac.abort(this.reason)
          }
        }

        // Third-party AbortControllers may not work with these.
        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.
        try {
          // If the max amount of listeners is equal to the default, increase it
          // This is only available in node >= v19.9.0
          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {
            setMaxListeners(100, signal)
          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {
            setMaxListeners(100, signal)
          }
        } catch {}

        util.addAbortListener(signal, abort)
        requestFinalizer.register(ac, { signal, abort })
      }
    }

    // 30. Set this’s headers to a new Headers object with this’s relevant
    // Realm, whose header list is request’s header list and guard is
    // "request".
    this[kHeaders] = new Headers(kConstruct)
    this[kHeaders][kHeadersList] = request.headersList
    this[kHeaders][kGuard] = 'request'
    this[kHeaders][kRealm] = this[kRealm]

    // 31. If this’s request’s mode is "no-cors", then:
    if (mode === 'no-cors') {
      // 1. If this’s request’s method is not a CORS-safelisted method,
      // then throw a TypeError.
      if (!corsSafeListedMethodsSet.has(request.method)) {
        throw new TypeError(
          `'${request.method} is unsupported in no-cors mode.`
        )
      }

      // 2. Set this’s headers’s guard to "request-no-cors".
      this[kHeaders][kGuard] = 'request-no-cors'
    }

    // 32. If init is not empty, then:
    if (initHasKey) {
      /** @type {HeadersList} */
      const headersList = this[kHeaders][kHeadersList]
      // 1. Let headers be a copy of this’s headers and its associated header
      // list.
      // 2. If init["headers"] exists, then set headers to init["headers"].
      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList)

      // 3. Empty this’s headers’s header list.
      headersList.clear()

      // 4. If headers is a Headers object, then for each header in its header
      // list, append header’s name/header’s value to this’s headers.
      if (headers instanceof HeadersList) {
        for (const [key, val] of headers) {
          headersList.append(key, val)
        }
        // Note: Copy the `set-cookie` meta-data.
        headersList.cookies = headers.cookies
      } else {
        // 5. Otherwise, fill this’s headers with headers.
        fillHeaders(this[kHeaders], headers)
      }
    }

    // 33. Let inputBody be input’s request’s body if input is a Request
    // object; otherwise null.
    const inputBody = input instanceof Request ? input[kState].body : null

    // 34. If either init["body"] exists and is non-null or inputBody is
    // non-null, and request’s method is `GET` or `HEAD`, then throw a
    // TypeError.
    if (
      (init.body != null || inputBody != null) &&
      (request.method === 'GET' || request.method === 'HEAD')
    ) {
      throw new TypeError('Request with GET/HEAD method cannot have body.')
    }

    // 35. Let initBody be null.
    let initBody = null

    // 36. If init["body"] exists and is non-null, then:
    if (init.body != null) {
      // 1. Let Content-Type be null.
      // 2. Set initBody and Content-Type to the result of extracting
      // init["body"], with keepalive set to request’s keepalive.
      const [extractedBody, contentType] = extractBody(
        init.body,
        request.keepalive
      )
      initBody = extractedBody

      // 3, If Content-Type is non-null and this’s headers’s header list does
      // not contain `Content-Type`, then append `Content-Type`/Content-Type to
      // this’s headers.
      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {
        this[kHeaders].append('content-type', contentType)
      }
    }

    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise
    // inputBody.
    const inputOrInitBody = initBody ?? inputBody

    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is
    // null, then:
    if (inputOrInitBody != null && inputOrInitBody.source == null) {
      // 1. If initBody is non-null and init["duplex"] does not exist,
      //    then throw a TypeError.
      if (initBody != null && init.duplex == null) {
        throw new TypeError('RequestInit: duplex option is required when sending a body.')
      }

      // 2. If this’s request’s mode is neither "same-origin" nor "cors",
      // then throw a TypeError.
      if (request.mode !== 'same-origin' && request.mode !== 'cors') {
        throw new TypeError(
          'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
        )
      }

      // 3. Set this’s request’s use-CORS-preflight flag.
      request.useCORSPreflightFlag = true
    }

    // 39. Let finalBody be inputOrInitBody.
    let finalBody = inputOrInitBody

    // 40. If initBody is null and inputBody is non-null, then:
    if (initBody == null && inputBody != null) {
      // 1. If input is unusable, then throw a TypeError.
      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
        throw new TypeError(
          'Cannot construct a Request with a Request object that has already been used.'
        )
      }

      // 2. Set finalBody to the result of creating a proxy for inputBody.
      if (!TransformStream) {
        TransformStream = (__nccwpck_require__(3774).TransformStream)
      }

      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy
      const identityTransform = new TransformStream()
      inputBody.stream.pipeThrough(identityTransform)
      finalBody = {
        source: inputBody.source,
        length: inputBody.length,
        stream: identityTransform.readable
      }
    }

    // 41. Set this’s request’s body to finalBody.
    this[kState].body = finalBody
  }

  // Returns request’s HTTP method, which is "GET" by default.
  get method () {
    webidl.brandCheck(this, Request)

    // The method getter steps are to return this’s request’s method.
    return this[kState].method
  }

  // Returns the URL of request as a string.
  get url () {
    webidl.brandCheck(this, Request)

    // The url getter steps are to return this’s request’s URL, serialized.
    return URLSerializer(this[kState].url)
  }

  // Returns a Headers object consisting of the headers associated with request.
  // Note that headers added in the network layer by the user agent will not
  // be accounted for in this object, e.g., the "Host" header.
  get headers () {
    webidl.brandCheck(this, Request)

    // The headers getter steps are to return this’s headers.
    return this[kHeaders]
  }

  // Returns the kind of resource requested by request, e.g., "document"
  // or "script".
  get destination () {
    webidl.brandCheck(this, Request)

    // The destination getter are to return this’s request’s destination.
    return this[kState].destination
  }

  // Returns the referrer of request. Its value can be a same-origin URL if
  // explicitly set in init, the empty string to indicate no referrer, and
  // "about:client" when defaulting to the global’s default. This is used
  // during fetching to determine the value of the `Referer` header of the
  // request being made.
  get referrer () {
    webidl.brandCheck(this, Request)

    // 1. If this’s request’s referrer is "no-referrer", then return the
    // empty string.
    if (this[kState].referrer === 'no-referrer') {
      return ''
    }

    // 2. If this’s request’s referrer is "client", then return
    // "about:client".
    if (this[kState].referrer === 'client') {
      return 'about:client'
    }

    // Return this’s request’s referrer, serialized.
    return this[kState].referrer.toString()
  }

  // Returns the referrer policy associated with request.
  // This is used during fetching to compute the value of the request’s
  // referrer.
  get referrerPolicy () {
    webidl.brandCheck(this, Request)

    // The referrerPolicy getter steps are to return this’s request’s referrer policy.
    return this[kState].referrerPolicy
  }

  // Returns the mode associated with request, which is a string indicating
  // whether the request will use CORS, or will be restricted to same-origin
  // URLs.
  get mode () {
    webidl.brandCheck(this, Request)

    // The mode getter steps are to return this’s request’s mode.
    return this[kState].mode
  }

  // Returns the credentials mode associated with request,
  // which is a string indicating whether credentials will be sent with the
  // request always, never, or only when sent to a same-origin URL.
  get credentials () {
    // The credentials getter steps are to return this’s request’s credentials mode.
    return this[kState].credentials
  }

  // Returns the cache mode associated with request,
  // which is a string indicating how the request will
  // interact with the browser’s cache when fetching.
  get cache () {
    webidl.brandCheck(this, Request)

    // The cache getter steps are to return this’s request’s cache mode.
    return this[kState].cache
  }

  // Returns the redirect mode associated with request,
  // which is a string indicating how redirects for the
  // request will be handled during fetching. A request
  // will follow redirects by default.
  get redirect () {
    webidl.brandCheck(this, Request)

    // The redirect getter steps are to return this’s request’s redirect mode.
    return this[kState].redirect
  }

  // Returns request’s subresource integrity metadata, which is a
  // cryptographic hash of the resource being fetched. Its value
  // consists of multiple hashes separated by whitespace. [SRI]
  get integrity () {
    webidl.brandCheck(this, Request)

    // The integrity getter steps are to return this’s request’s integrity
    // metadata.
    return this[kState].integrity
  }

  // Returns a boolean indicating whether or not request can outlive the
  // global in which it was created.
  get keepalive () {
    webidl.brandCheck(this, Request)

    // The keepalive getter steps are to return this’s request’s keepalive.
    return this[kState].keepalive
  }

  // Returns a boolean indicating whether or not request is for a reload
  // navigation.
  get isReloadNavigation () {
    webidl.brandCheck(this, Request)

    // The isReloadNavigation getter steps are to return true if this’s
    // request’s reload-navigation flag is set; otherwise false.
    return this[kState].reloadNavigation
  }

  // Returns a boolean indicating whether or not request is for a history
  // navigation (a.k.a. back-foward navigation).
  get isHistoryNavigation () {
    webidl.brandCheck(this, Request)

    // The isHistoryNavigation getter steps are to return true if this’s request’s
    // history-navigation flag is set; otherwise false.
    return this[kState].historyNavigation
  }

  // Returns the signal associated with request, which is an AbortSignal
  // object indicating whether or not request has been aborted, and its
  // abort event handler.
  get signal () {
    webidl.brandCheck(this, Request)

    // The signal getter steps are to return this’s signal.
    return this[kSignal]
  }

  get body () {
    webidl.brandCheck(this, Request)

    return this[kState].body ? this[kState].body.stream : null
  }

  get bodyUsed () {
    webidl.brandCheck(this, Request)

    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
  }

  get duplex () {
    webidl.brandCheck(this, Request)

    return 'half'
  }

  // Returns a clone of request.
  clone () {
    webidl.brandCheck(this, Request)

    // 1. If this is unusable, then throw a TypeError.
    if (this.bodyUsed || this.body?.locked) {
      throw new TypeError('unusable')
    }

    // 2. Let clonedRequest be the result of cloning this’s request.
    const clonedRequest = cloneRequest(this[kState])

    // 3. Let clonedRequestObject be the result of creating a Request object,
    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.
    const clonedRequestObject = new Request(kConstruct)
    clonedRequestObject[kState] = clonedRequest
    clonedRequestObject[kRealm] = this[kRealm]
    clonedRequestObject[kHeaders] = new Headers(kConstruct)
    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList
    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]
    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]

    // 4. Make clonedRequestObject’s signal follow this’s signal.
    const ac = new AbortController()
    if (this.signal.aborted) {
      ac.abort(this.signal.reason)
    } else {
      util.addAbortListener(
        this.signal,
        () => {
          ac.abort(this.signal.reason)
        }
      )
    }
    clonedRequestObject[kSignal] = ac.signal

    // 4. Return clonedRequestObject.
    return clonedRequestObject
  }
}

mixinBody(Request)

function makeRequest (init) {
  // https://fetch.spec.whatwg.org/#requests
  const request = {
    method: 'GET',
    localURLsOnly: false,
    unsafeRequest: false,
    body: null,
    client: null,
    reservedClient: null,
    replacesClientId: '',
    window: 'client',
    keepalive: false,
    serviceWorkers: 'all',
    initiator: '',
    destination: '',
    priority: null,
    origin: 'client',
    policyContainer: 'client',
    referrer: 'client',
    referrerPolicy: '',
    mode: 'no-cors',
    useCORSPreflightFlag: false,
    credentials: 'same-origin',
    useCredentials: false,
    cache: 'default',
    redirect: 'follow',
    integrity: '',
    cryptoGraphicsNonceMetadata: '',
    parserMetadata: '',
    reloadNavigation: false,
    historyNavigation: false,
    userActivation: false,
    taintedOrigin: false,
    redirectCount: 0,
    responseTainting: 'basic',
    preventNoCacheCacheControlHeaderModification: false,
    done: false,
    timingAllowFailed: false,
    ...init,
    headersList: init.headersList
      ? new HeadersList(init.headersList)
      : new HeadersList()
  }
  request.url = request.urlList[0]
  return request
}

// https://fetch.spec.whatwg.org/#concept-request-clone
function cloneRequest (request) {
  // To clone a request request, run these steps:

  // 1. Let newRequest be a copy of request, except for its body.
  const newRequest = makeRequest({ ...request, body: null })

  // 2. If request’s body is non-null, set newRequest’s body to the
  // result of cloning request’s body.
  if (request.body != null) {
    newRequest.body = cloneBody(request.body)
  }

  // 3. Return newRequest.
  return newRequest
}

Object.defineProperties(Request.prototype, {
  method: kEnumerableProperty,
  url: kEnumerableProperty,
  headers: kEnumerableProperty,
  redirect: kEnumerableProperty,
  clone: kEnumerableProperty,
  signal: kEnumerableProperty,
  duplex: kEnumerableProperty,
  destination: kEnumerableProperty,
  body: kEnumerableProperty,
  bodyUsed: kEnumerableProperty,
  isHistoryNavigation: kEnumerableProperty,
  isReloadNavigation: kEnumerableProperty,
  keepalive: kEnumerableProperty,
  integrity: kEnumerableProperty,
  cache: kEnumerableProperty,
  credentials: kEnumerableProperty,
  attribute: kEnumerableProperty,
  referrerPolicy: kEnumerableProperty,
  referrer: kEnumerableProperty,
  mode: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'Request',
    configurable: true
  }
})

webidl.converters.Request = webidl.interfaceConverter(
  Request
)

// https://fetch.spec.whatwg.org/#requestinfo
webidl.converters.RequestInfo = function (V) {
  if (typeof V === 'string') {
    return webidl.converters.USVString(V)
  }

  if (V instanceof Request) {
    return webidl.converters.Request(V)
  }

  return webidl.converters.USVString(V)
}

webidl.converters.AbortSignal = webidl.interfaceConverter(
  AbortSignal
)

// https://fetch.spec.whatwg.org/#requestinit
webidl.converters.RequestInit = webidl.dictionaryConverter([
  {
    key: 'method',
    converter: webidl.converters.ByteString
  },
  {
    key: 'headers',
    converter: webidl.converters.HeadersInit
  },
  {
    key: 'body',
    converter: webidl.nullableConverter(
      webidl.converters.BodyInit
    )
  },
  {
    key: 'referrer',
    converter: webidl.converters.USVString
  },
  {
    key: 'referrerPolicy',
    converter: webidl.converters.DOMString,
    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
    allowedValues: referrerPolicy
  },
  {
    key: 'mode',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#concept-request-mode
    allowedValues: requestMode
  },
  {
    key: 'credentials',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestcredentials
    allowedValues: requestCredentials
  },
  {
    key: 'cache',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestcache
    allowedValues: requestCache
  },
  {
    key: 'redirect',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestredirect
    allowedValues: requestRedirect
  },
  {
    key: 'integrity',
    converter: webidl.converters.DOMString
  },
  {
    key: 'keepalive',
    converter: webidl.converters.boolean
  },
  {
    key: 'signal',
    converter: webidl.nullableConverter(
      (signal) => webidl.converters.AbortSignal(
        signal,
        { strict: false }
      )
    )
  },
  {
    key: 'window',
    converter: webidl.converters.any
  },
  {
    key: 'duplex',
    converter: webidl.converters.DOMString,
    allowedValues: requestDuplex
  }
])

module.exports = { Request, makeRequest }


/***/ }),

/***/ 6062:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Headers, HeadersList, fill } = __nccwpck_require__(2223)
const { extractBody, cloneBody, mixinBody } = __nccwpck_require__(8009)
const util = __nccwpck_require__(4606)
const { kEnumerableProperty } = util
const {
  isValidReasonPhrase,
  isCancelled,
  isAborted,
  isBlobLike,
  serializeJavascriptValueToJSONString,
  isErrorLike,
  isomorphicEncode
} = __nccwpck_require__(8961)
const {
  redirectStatusSet,
  nullBodyStatus,
  DOMException
} = __nccwpck_require__(7536)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(1088)
const { webidl } = __nccwpck_require__(3476)
const { FormData } = __nccwpck_require__(1187)
const { getGlobalOrigin } = __nccwpck_require__(742)
const { URLSerializer } = __nccwpck_require__(6960)
const { kHeadersList, kConstruct } = __nccwpck_require__(5773)
const assert = __nccwpck_require__(2613)
const { types } = __nccwpck_require__(9023)

const ReadableStream = globalThis.ReadableStream || (__nccwpck_require__(3774).ReadableStream)
const textEncoder = new TextEncoder('utf-8')

// https://fetch.spec.whatwg.org/#response-class
class Response {
  // Creates network error Response.
  static error () {
    // TODO
    const relevantRealm = { settingsObject: {} }

    // The static error() method steps are to return the result of creating a
    // Response object, given a new network error, "immutable", and this’s
    // relevant Realm.
    const responseObject = new Response()
    responseObject[kState] = makeNetworkError()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm
    return responseObject
  }

  // https://fetch.spec.whatwg.org/#dom-response-json
  static json (data, init = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.json' })

    if (init !== null) {
      init = webidl.converters.ResponseInit(init)
    }

    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.
    const bytes = textEncoder.encode(
      serializeJavascriptValueToJSONString(data)
    )

    // 2. Let body be the result of extracting bytes.
    const body = extractBody(bytes)

    // 3. Let responseObject be the result of creating a Response object, given a new response,
    //    "response", and this’s relevant Realm.
    const relevantRealm = { settingsObject: {} }
    const responseObject = new Response()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kGuard] = 'response'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 4. Perform initialize a response given responseObject, init, and (body, "application/json").
    initializeResponse(responseObject, init, { body: body[0], type: 'application/json' })

    // 5. Return responseObject.
    return responseObject
  }

  // Creates a redirect Response that redirects to url with status status.
  static redirect (url, status = 302) {
    const relevantRealm = { settingsObject: {} }

    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.redirect' })

    url = webidl.converters.USVString(url)
    status = webidl.converters['unsigned short'](status)

    // 1. Let parsedURL be the result of parsing url with current settings
    // object’s API base URL.
    // 2. If parsedURL is failure, then throw a TypeError.
    // TODO: base-URL?
    let parsedURL
    try {
      parsedURL = new URL(url, getGlobalOrigin())
    } catch (err) {
      throw Object.assign(new TypeError('Failed to parse URL from ' + url), {
        cause: err
      })
    }

    // 3. If status is not a redirect status, then throw a RangeError.
    if (!redirectStatusSet.has(status)) {
      throw new RangeError('Invalid status code ' + status)
    }

    // 4. Let responseObject be the result of creating a Response object,
    // given a new response, "immutable", and this’s relevant Realm.
    const responseObject = new Response()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 5. Set responseObject’s response’s status to status.
    responseObject[kState].status = status

    // 6. Let value be parsedURL, serialized and isomorphic encoded.
    const value = isomorphicEncode(URLSerializer(parsedURL))

    // 7. Append `Location`/value to responseObject’s response’s header list.
    responseObject[kState].headersList.append('location', value)

    // 8. Return responseObject.
    return responseObject
  }

  // https://fetch.spec.whatwg.org/#dom-response
  constructor (body = null, init = {}) {
    if (body !== null) {
      body = webidl.converters.BodyInit(body)
    }

    init = webidl.converters.ResponseInit(init)

    // TODO
    this[kRealm] = { settingsObject: {} }

    // 1. Set this’s response to a new response.
    this[kState] = makeResponse({})

    // 2. Set this’s headers to a new Headers object with this’s relevant
    // Realm, whose header list is this’s response’s header list and guard
    // is "response".
    this[kHeaders] = new Headers(kConstruct)
    this[kHeaders][kGuard] = 'response'
    this[kHeaders][kHeadersList] = this[kState].headersList
    this[kHeaders][kRealm] = this[kRealm]

    // 3. Let bodyWithType be null.
    let bodyWithType = null

    // 4. If body is non-null, then set bodyWithType to the result of extracting body.
    if (body != null) {
      const [extractedBody, type] = extractBody(body)
      bodyWithType = { body: extractedBody, type }
    }

    // 5. Perform initialize a response given this, init, and bodyWithType.
    initializeResponse(this, init, bodyWithType)
  }

  // Returns response’s type, e.g., "cors".
  get type () {
    webidl.brandCheck(this, Response)

    // The type getter steps are to return this’s response’s type.
    return this[kState].type
  }

  // Returns response’s URL, if it has one; otherwise the empty string.
  get url () {
    webidl.brandCheck(this, Response)

    const urlList = this[kState].urlList

    // The url getter steps are to return the empty string if this’s
    // response’s URL is null; otherwise this’s response’s URL,
    // serialized with exclude fragment set to true.
    const url = urlList[urlList.length - 1] ?? null

    if (url === null) {
      return ''
    }

    return URLSerializer(url, true)
  }

  // Returns whether response was obtained through a redirect.
  get redirected () {
    webidl.brandCheck(this, Response)

    // The redirected getter steps are to return true if this’s response’s URL
    // list has more than one item; otherwise false.
    return this[kState].urlList.length > 1
  }

  // Returns response’s status.
  get status () {
    webidl.brandCheck(this, Response)

    // The status getter steps are to return this’s response’s status.
    return this[kState].status
  }

  // Returns whether response’s status is an ok status.
  get ok () {
    webidl.brandCheck(this, Response)

    // The ok getter steps are to return true if this’s response’s status is an
    // ok status; otherwise false.
    return this[kState].status >= 200 && this[kState].status <= 299
  }

  // Returns response’s status message.
  get statusText () {
    webidl.brandCheck(this, Response)

    // The statusText getter steps are to return this’s response’s status
    // message.
    return this[kState].statusText
  }

  // Returns response’s headers as Headers.
  get headers () {
    webidl.brandCheck(this, Response)

    // The headers getter steps are to return this’s headers.
    return this[kHeaders]
  }

  get body () {
    webidl.brandCheck(this, Response)

    return this[kState].body ? this[kState].body.stream : null
  }

  get bodyUsed () {
    webidl.brandCheck(this, Response)

    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
  }

  // Returns a clone of response.
  clone () {
    webidl.brandCheck(this, Response)

    // 1. If this is unusable, then throw a TypeError.
    if (this.bodyUsed || (this.body && this.body.locked)) {
      throw webidl.errors.exception({
        header: 'Response.clone',
        message: 'Body has already been consumed.'
      })
    }

    // 2. Let clonedResponse be the result of cloning this’s response.
    const clonedResponse = cloneResponse(this[kState])

    // 3. Return the result of creating a Response object, given
    // clonedResponse, this’s headers’s guard, and this’s relevant Realm.
    const clonedResponseObject = new Response()
    clonedResponseObject[kState] = clonedResponse
    clonedResponseObject[kRealm] = this[kRealm]
    clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList
    clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard]
    clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm]

    return clonedResponseObject
  }
}

mixinBody(Response)

Object.defineProperties(Response.prototype, {
  type: kEnumerableProperty,
  url: kEnumerableProperty,
  status: kEnumerableProperty,
  ok: kEnumerableProperty,
  redirected: kEnumerableProperty,
  statusText: kEnumerableProperty,
  headers: kEnumerableProperty,
  clone: kEnumerableProperty,
  body: kEnumerableProperty,
  bodyUsed: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'Response',
    configurable: true
  }
})

Object.defineProperties(Response, {
  json: kEnumerableProperty,
  redirect: kEnumerableProperty,
  error: kEnumerableProperty
})

// https://fetch.spec.whatwg.org/#concept-response-clone
function cloneResponse (response) {
  // To clone a response response, run these steps:

  // 1. If response is a filtered response, then return a new identical
  // filtered response whose internal response is a clone of response’s
  // internal response.
  if (response.internalResponse) {
    return filterResponse(
      cloneResponse(response.internalResponse),
      response.type
    )
  }

  // 2. Let newResponse be a copy of response, except for its body.
  const newResponse = makeResponse({ ...response, body: null })

  // 3. If response’s body is non-null, then set newResponse’s body to the
  // result of cloning response’s body.
  if (response.body != null) {
    newResponse.body = cloneBody(response.body)
  }

  // 4. Return newResponse.
  return newResponse
}

function makeResponse (init) {
  return {
    aborted: false,
    rangeRequested: false,
    timingAllowPassed: false,
    requestIncludesCredentials: false,
    type: 'default',
    status: 200,
    timingInfo: null,
    cacheState: '',
    statusText: '',
    ...init,
    headersList: init.headersList
      ? new HeadersList(init.headersList)
      : new HeadersList(),
    urlList: init.urlList ? [...init.urlList] : []
  }
}

function makeNetworkError (reason) {
  const isError = isErrorLike(reason)
  return makeResponse({
    type: 'error',
    status: 0,
    error: isError
      ? reason
      : new Error(reason ? String(reason) : reason),
    aborted: reason && reason.name === 'AbortError'
  })
}

function makeFilteredResponse (response, state) {
  state = {
    internalResponse: response,
    ...state
  }

  return new Proxy(response, {
    get (target, p) {
      return p in state ? state[p] : target[p]
    },
    set (target, p, value) {
      assert(!(p in state))
      target[p] = value
      return true
    }
  })
}

// https://fetch.spec.whatwg.org/#concept-filtered-response
function filterResponse (response, type) {
  // Set response to the following filtered response with response as its
  // internal response, depending on request’s response tainting:
  if (type === 'basic') {
    // A basic filtered response is a filtered response whose type is "basic"
    // and header list excludes any headers in internal response’s header list
    // whose name is a forbidden response-header name.

    // Note: undici does not implement forbidden response-header names
    return makeFilteredResponse(response, {
      type: 'basic',
      headersList: response.headersList
    })
  } else if (type === 'cors') {
    // A CORS filtered response is a filtered response whose type is "cors"
    // and header list excludes any headers in internal response’s header
    // list whose name is not a CORS-safelisted response-header name, given
    // internal response’s CORS-exposed header-name list.

    // Note: undici does not implement CORS-safelisted response-header names
    return makeFilteredResponse(response, {
      type: 'cors',
      headersList: response.headersList
    })
  } else if (type === 'opaque') {
    // An opaque filtered response is a filtered response whose type is
    // "opaque", URL list is the empty list, status is 0, status message
    // is the empty byte sequence, header list is empty, and body is null.

    return makeFilteredResponse(response, {
      type: 'opaque',
      urlList: Object.freeze([]),
      status: 0,
      statusText: '',
      body: null
    })
  } else if (type === 'opaqueredirect') {
    // An opaque-redirect filtered response is a filtered response whose type
    // is "opaqueredirect", status is 0, status message is the empty byte
    // sequence, header list is empty, and body is null.

    return makeFilteredResponse(response, {
      type: 'opaqueredirect',
      status: 0,
      statusText: '',
      headersList: [],
      body: null
    })
  } else {
    assert(false)
  }
}

// https://fetch.spec.whatwg.org/#appropriate-network-error
function makeAppropriateNetworkError (fetchParams, err = null) {
  // 1. Assert: fetchParams is canceled.
  assert(isCancelled(fetchParams))

  // 2. Return an aborted network error if fetchParams is aborted;
  // otherwise return a network error.
  return isAborted(fetchParams)
    ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), { cause: err }))
    : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), { cause: err }))
}

// https://whatpr.org/fetch/1392.html#initialize-a-response
function initializeResponse (response, init, body) {
  // 1. If init["status"] is not in the range 200 to 599, inclusive, then
  //    throw a RangeError.
  if (init.status !== null && (init.status < 200 || init.status > 599)) {
    throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.')
  }

  // 2. If init["statusText"] does not match the reason-phrase token production,
  //    then throw a TypeError.
  if ('statusText' in init && init.statusText != null) {
    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:
    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )
    if (!isValidReasonPhrase(String(init.statusText))) {
      throw new TypeError('Invalid statusText')
    }
  }

  // 3. Set response’s response’s status to init["status"].
  if ('status' in init && init.status != null) {
    response[kState].status = init.status
  }

  // 4. Set response’s response’s status message to init["statusText"].
  if ('statusText' in init && init.statusText != null) {
    response[kState].statusText = init.statusText
  }

  // 5. If init["headers"] exists, then fill response’s headers with init["headers"].
  if ('headers' in init && init.headers != null) {
    fill(response[kHeaders], init.headers)
  }

  // 6. If body was given, then:
  if (body) {
    // 1. If response's status is a null body status, then throw a TypeError.
    if (nullBodyStatus.includes(response.status)) {
      throw webidl.errors.exception({
        header: 'Response constructor',
        message: 'Invalid response status code ' + response.status
      })
    }

    // 2. Set response's body to body's body.
    response[kState].body = body.body

    // 3. If body's type is non-null and response's header list does not contain
    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.
    if (body.type != null && !response[kState].headersList.contains('Content-Type')) {
      response[kState].headersList.append('content-type', body.type)
    }
  }
}

webidl.converters.ReadableStream = webidl.interfaceConverter(
  ReadableStream
)

webidl.converters.FormData = webidl.interfaceConverter(
  FormData
)

webidl.converters.URLSearchParams = webidl.interfaceConverter(
  URLSearchParams
)

// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit
webidl.converters.XMLHttpRequestBodyInit = function (V) {
  if (typeof V === 'string') {
    return webidl.converters.USVString(V)
  }

  if (isBlobLike(V)) {
    return webidl.converters.Blob(V, { strict: false })
  }

  if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
    return webidl.converters.BufferSource(V)
  }

  if (util.isFormDataLike(V)) {
    return webidl.converters.FormData(V, { strict: false })
  }

  if (V instanceof URLSearchParams) {
    return webidl.converters.URLSearchParams(V)
  }

  return webidl.converters.DOMString(V)
}

// https://fetch.spec.whatwg.org/#bodyinit
webidl.converters.BodyInit = function (V) {
  if (V instanceof ReadableStream) {
    return webidl.converters.ReadableStream(V)
  }

  // Note: the spec doesn't include async iterables,
  // this is an undici extension.
  if (V?.[Symbol.asyncIterator]) {
    return V
  }

  return webidl.converters.XMLHttpRequestBodyInit(V)
}

webidl.converters.ResponseInit = webidl.dictionaryConverter([
  {
    key: 'status',
    converter: webidl.converters['unsigned short'],
    defaultValue: 200
  },
  {
    key: 'statusText',
    converter: webidl.converters.ByteString,
    defaultValue: ''
  },
  {
    key: 'headers',
    converter: webidl.converters.HeadersInit
  }
])

module.exports = {
  makeNetworkError,
  makeResponse,
  makeAppropriateNetworkError,
  filterResponse,
  Response,
  cloneResponse
}


/***/ }),

/***/ 1088:
/***/ ((module) => {

"use strict";


module.exports = {
  kUrl: Symbol('url'),
  kHeaders: Symbol('headers'),
  kSignal: Symbol('signal'),
  kState: Symbol('state'),
  kGuard: Symbol('guard'),
  kRealm: Symbol('realm')
}


/***/ }),

/***/ 8961:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = __nccwpck_require__(7536)
const { getGlobalOrigin } = __nccwpck_require__(742)
const { performance } = __nccwpck_require__(2987)
const { isBlobLike, toUSVString, ReadableStreamFrom } = __nccwpck_require__(4606)
const assert = __nccwpck_require__(2613)
const { isUint8Array } = __nccwpck_require__(8253)

let supportedHashes = []

// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable
/** @type {import('crypto')|undefined} */
let crypto

try {
  crypto = __nccwpck_require__(6982)
  const possibleRelevantHashes = ['sha256', 'sha384', 'sha512']
  supportedHashes = crypto.getHashes().filter((hash) => possibleRelevantHashes.includes(hash))
/* c8 ignore next 3 */
} catch {
}

function responseURL (response) {
  // https://fetch.spec.whatwg.org/#responses
  // A response has an associated URL. It is a pointer to the last URL
  // in response’s URL list and null if response’s URL list is empty.
  const urlList = response.urlList
  const length = urlList.length
  return length === 0 ? null : urlList[length - 1].toString()
}

// https://fetch.spec.whatwg.org/#concept-response-location-url
function responseLocationURL (response, requestFragment) {
  // 1. If response’s status is not a redirect status, then return null.
  if (!redirectStatusSet.has(response.status)) {
    return null
  }

  // 2. Let location be the result of extracting header list values given
  // `Location` and response’s header list.
  let location = response.headersList.get('location')

  // 3. If location is a header value, then set location to the result of
  //    parsing location with response’s URL.
  if (location !== null && isValidHeaderValue(location)) {
    location = new URL(location, responseURL(response))
  }

  // 4. If location is a URL whose fragment is null, then set location’s
  // fragment to requestFragment.
  if (location && !location.hash) {
    location.hash = requestFragment
  }

  // 5. Return location.
  return location
}

/** @returns {URL} */
function requestCurrentURL (request) {
  return request.urlList[request.urlList.length - 1]
}

function requestBadPort (request) {
  // 1. Let url be request’s current URL.
  const url = requestCurrentURL(request)

  // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,
  // then return blocked.
  if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
    return 'blocked'
  }

  // 3. Return allowed.
  return 'allowed'
}

function isErrorLike (object) {
  return object instanceof Error || (
    object?.constructor?.name === 'Error' ||
    object?.constructor?.name === 'DOMException'
  )
}

// Check whether |statusText| is a ByteString and
// matches the Reason-Phrase token production.
// RFC 2616: https://tools.ietf.org/html/rfc2616
// RFC 7230: https://tools.ietf.org/html/rfc7230
// "reason-phrase = *( HTAB / SP / VCHAR / obs-text )"
// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116
function isValidReasonPhrase (statusText) {
  for (let i = 0; i < statusText.length; ++i) {
    const c = statusText.charCodeAt(i)
    if (
      !(
        (
          c === 0x09 || // HTAB
          (c >= 0x20 && c <= 0x7e) || // SP / VCHAR
          (c >= 0x80 && c <= 0xff)
        ) // obs-text
      )
    ) {
      return false
    }
  }
  return true
}

/**
 * @see https://tools.ietf.org/html/rfc7230#section-3.2.6
 * @param {number} c
 */
function isTokenCharCode (c) {
  switch (c) {
    case 0x22:
    case 0x28:
    case 0x29:
    case 0x2c:
    case 0x2f:
    case 0x3a:
    case 0x3b:
    case 0x3c:
    case 0x3d:
    case 0x3e:
    case 0x3f:
    case 0x40:
    case 0x5b:
    case 0x5c:
    case 0x5d:
    case 0x7b:
    case 0x7d:
      // DQUOTE and "(),/:;<=>?@[\]{}"
      return false
    default:
      // VCHAR %x21-7E
      return c >= 0x21 && c <= 0x7e
  }
}

/**
 * @param {string} characters
 */
function isValidHTTPToken (characters) {
  if (characters.length === 0) {
    return false
  }
  for (let i = 0; i < characters.length; ++i) {
    if (!isTokenCharCode(characters.charCodeAt(i))) {
      return false
    }
  }
  return true
}

/**
 * @see https://fetch.spec.whatwg.org/#header-name
 * @param {string} potentialValue
 */
function isValidHeaderName (potentialValue) {
  return isValidHTTPToken(potentialValue)
}

/**
 * @see https://fetch.spec.whatwg.org/#header-value
 * @param {string} potentialValue
 */
function isValidHeaderValue (potentialValue) {
  // - Has no leading or trailing HTTP tab or space bytes.
  // - Contains no 0x00 (NUL) or HTTP newline bytes.
  if (
    potentialValue.startsWith('\t') ||
    potentialValue.startsWith(' ') ||
    potentialValue.endsWith('\t') ||
    potentialValue.endsWith(' ')
  ) {
    return false
  }

  if (
    potentialValue.includes('\0') ||
    potentialValue.includes('\r') ||
    potentialValue.includes('\n')
  ) {
    return false
  }

  return true
}

// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect
function setRequestReferrerPolicyOnRedirect (request, actualResponse) {
  //  Given a request request and a response actualResponse, this algorithm
  //  updates request’s referrer policy according to the Referrer-Policy
  //  header (if any) in actualResponse.

  // 1. Let policy be the result of executing § 8.1 Parse a referrer policy
  // from a Referrer-Policy header on actualResponse.

  // 8.1 Parse a referrer policy from a Referrer-Policy header
  // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.
  const { headersList } = actualResponse
  // 2. Let policy be the empty string.
  // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.
  // 4. Return policy.
  const policyHeader = (headersList.get('referrer-policy') ?? '').split(',')

  // Note: As the referrer-policy can contain multiple policies
  // separated by comma, we need to loop through all of them
  // and pick the first valid one.
  // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy
  let policy = ''
  if (policyHeader.length > 0) {
    // The right-most policy takes precedence.
    // The left-most policy is the fallback.
    for (let i = policyHeader.length; i !== 0; i--) {
      const token = policyHeader[i - 1].trim()
      if (referrerPolicyTokens.has(token)) {
        policy = token
        break
      }
    }
  }

  // 2. If policy is not the empty string, then set request’s referrer policy to policy.
  if (policy !== '') {
    request.referrerPolicy = policy
  }
}

// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check
function crossOriginResourcePolicyCheck () {
  // TODO
  return 'allowed'
}

// https://fetch.spec.whatwg.org/#concept-cors-check
function corsCheck () {
  // TODO
  return 'success'
}

// https://fetch.spec.whatwg.org/#concept-tao-check
function TAOCheck () {
  // TODO
  return 'success'
}

function appendFetchMetadata (httpRequest) {
  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header
  //  TODO

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header

  //  1. Assert: r’s url is a potentially trustworthy URL.
  //  TODO

  //  2. Let header be a Structured Header whose value is a token.
  let header = null

  //  3. Set header’s value to r’s mode.
  header = httpRequest.mode

  //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.
  httpRequest.headersList.set('sec-fetch-mode', header)

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header
  //  TODO

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header
  //  TODO
}

// https://fetch.spec.whatwg.org/#append-a-request-origin-header
function appendRequestOriginHeader (request) {
  // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.
  let serializedOrigin = request.origin

  // 2. If request’s response tainting is "cors" or request’s mode is "websocket", then append (`Origin`, serializedOrigin) to request’s header list.
  if (request.responseTainting === 'cors' || request.mode === 'websocket') {
    if (serializedOrigin) {
      request.headersList.append('origin', serializedOrigin)
    }

  // 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:
  } else if (request.method !== 'GET' && request.method !== 'HEAD') {
    // 1. Switch on request’s referrer policy:
    switch (request.referrerPolicy) {
      case 'no-referrer':
        // Set serializedOrigin to `null`.
        serializedOrigin = null
        break
      case 'no-referrer-when-downgrade':
      case 'strict-origin':
      case 'strict-origin-when-cross-origin':
        // If request’s origin is a tuple origin, its scheme is "https", and request’s current URL’s scheme is not "https", then set serializedOrigin to `null`.
        if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
          serializedOrigin = null
        }
        break
      case 'same-origin':
        // If request’s origin is not same origin with request’s current URL’s origin, then set serializedOrigin to `null`.
        if (!sameOrigin(request, requestCurrentURL(request))) {
          serializedOrigin = null
        }
        break
      default:
        // Do nothing.
    }

    if (serializedOrigin) {
      // 2. Append (`Origin`, serializedOrigin) to request’s header list.
      request.headersList.append('origin', serializedOrigin)
    }
  }
}

function coarsenedSharedCurrentTime (crossOriginIsolatedCapability) {
  // TODO
  return performance.now()
}

// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info
function createOpaqueTimingInfo (timingInfo) {
  return {
    startTime: timingInfo.startTime ?? 0,
    redirectStartTime: 0,
    redirectEndTime: 0,
    postRedirectStartTime: timingInfo.startTime ?? 0,
    finalServiceWorkerStartTime: 0,
    finalNetworkResponseStartTime: 0,
    finalNetworkRequestStartTime: 0,
    endTime: 0,
    encodedBodySize: 0,
    decodedBodySize: 0,
    finalConnectionTimingInfo: null
  }
}

// https://html.spec.whatwg.org/multipage/origin.html#policy-container
function makePolicyContainer () {
  // Note: the fetch spec doesn't make use of embedder policy or CSP list
  return {
    referrerPolicy: 'strict-origin-when-cross-origin'
  }
}

// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container
function clonePolicyContainer (policyContainer) {
  return {
    referrerPolicy: policyContainer.referrerPolicy
  }
}

// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer
function determineRequestsReferrer (request) {
  // 1. Let policy be request's referrer policy.
  const policy = request.referrerPolicy

  // Note: policy cannot (shouldn't) be null or an empty string.
  assert(policy)

  // 2. Let environment be request’s client.

  let referrerSource = null

  // 3. Switch on request’s referrer:
  if (request.referrer === 'client') {
    // Note: node isn't a browser and doesn't implement document/iframes,
    // so we bypass this step and replace it with our own.

    const globalOrigin = getGlobalOrigin()

    if (!globalOrigin || globalOrigin.origin === 'null') {
      return 'no-referrer'
    }

    // note: we need to clone it as it's mutated
    referrerSource = new URL(globalOrigin)
  } else if (request.referrer instanceof URL) {
    // Let referrerSource be request’s referrer.
    referrerSource = request.referrer
  }

  // 4. Let request’s referrerURL be the result of stripping referrerSource for
  //    use as a referrer.
  let referrerURL = stripURLForReferrer(referrerSource)

  // 5. Let referrerOrigin be the result of stripping referrerSource for use as
  //    a referrer, with the origin-only flag set to true.
  const referrerOrigin = stripURLForReferrer(referrerSource, true)

  // 6. If the result of serializing referrerURL is a string whose length is
  //    greater than 4096, set referrerURL to referrerOrigin.
  if (referrerURL.toString().length > 4096) {
    referrerURL = referrerOrigin
  }

  const areSameOrigin = sameOrigin(request, referrerURL)
  const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) &&
    !isURLPotentiallyTrustworthy(request.url)

  // 8. Execute the switch statements corresponding to the value of policy:
  switch (policy) {
    case 'origin': return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true)
    case 'unsafe-url': return referrerURL
    case 'same-origin':
      return areSameOrigin ? referrerOrigin : 'no-referrer'
    case 'origin-when-cross-origin':
      return areSameOrigin ? referrerURL : referrerOrigin
    case 'strict-origin-when-cross-origin': {
      const currentURL = requestCurrentURL(request)

      // 1. If the origin of referrerURL and the origin of request’s current
      //    URL are the same, then return referrerURL.
      if (sameOrigin(referrerURL, currentURL)) {
        return referrerURL
      }

      // 2. If referrerURL is a potentially trustworthy URL and request’s
      //    current URL is not a potentially trustworthy URL, then return no
      //    referrer.
      if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
        return 'no-referrer'
      }

      // 3. Return referrerOrigin.
      return referrerOrigin
    }
    case 'strict-origin': // eslint-disable-line
      /**
         * 1. If referrerURL is a potentially trustworthy URL and
         * request’s current URL is not a potentially trustworthy URL,
         * then return no referrer.
         * 2. Return referrerOrigin
        */
    case 'no-referrer-when-downgrade': // eslint-disable-line
      /**
       * 1. If referrerURL is a potentially trustworthy URL and
       * request’s current URL is not a potentially trustworthy URL,
       * then return no referrer.
       * 2. Return referrerOrigin
      */

    default: // eslint-disable-line
      return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin
  }
}

/**
 * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
 * @param {URL} url
 * @param {boolean|undefined} originOnly
 */
function stripURLForReferrer (url, originOnly) {
  // 1. Assert: url is a URL.
  assert(url instanceof URL)

  // 2. If url’s scheme is a local scheme, then return no referrer.
  if (url.protocol === 'file:' || url.protocol === 'about:' || url.protocol === 'blank:') {
    return 'no-referrer'
  }

  // 3. Set url’s username to the empty string.
  url.username = ''

  // 4. Set url’s password to the empty string.
  url.password = ''

  // 5. Set url’s fragment to null.
  url.hash = ''

  // 6. If the origin-only flag is true, then:
  if (originOnly) {
    // 1. Set url’s path to « the empty string ».
    url.pathname = ''

    // 2. Set url’s query to null.
    url.search = ''
  }

  // 7. Return url.
  return url
}

function isURLPotentiallyTrustworthy (url) {
  if (!(url instanceof URL)) {
    return false
  }

  // If child of about, return true
  if (url.href === 'about:blank' || url.href === 'about:srcdoc') {
    return true
  }

  // If scheme is data, return true
  if (url.protocol === 'data:') return true

  // If file, return true
  if (url.protocol === 'file:') return true

  return isOriginPotentiallyTrustworthy(url.origin)

  function isOriginPotentiallyTrustworthy (origin) {
    // If origin is explicitly null, return false
    if (origin == null || origin === 'null') return false

    const originAsURL = new URL(origin)

    // If secure, return true
    if (originAsURL.protocol === 'https:' || originAsURL.protocol === 'wss:') {
      return true
    }

    // If localhost or variants, return true
    if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) ||
     (originAsURL.hostname === 'localhost' || originAsURL.hostname.includes('localhost.')) ||
     (originAsURL.hostname.endsWith('.localhost'))) {
      return true
    }

    // If any other, return false
    return false
  }
}

/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
 * @param {Uint8Array} bytes
 * @param {string} metadataList
 */
function bytesMatch (bytes, metadataList) {
  // If node is not built with OpenSSL support, we cannot check
  // a request's integrity, so allow it by default (the spec will
  // allow requests if an invalid hash is given, as precedence).
  /* istanbul ignore if: only if node is built with --without-ssl */
  if (crypto === undefined) {
    return true
  }

  // 1. Let parsedMetadata be the result of parsing metadataList.
  const parsedMetadata = parseMetadata(metadataList)

  // 2. If parsedMetadata is no metadata, return true.
  if (parsedMetadata === 'no metadata') {
    return true
  }

  // 3. If response is not eligible for integrity validation, return false.
  // TODO

  // 4. If parsedMetadata is the empty set, return true.
  if (parsedMetadata.length === 0) {
    return true
  }

  // 5. Let metadata be the result of getting the strongest
  //    metadata from parsedMetadata.
  const strongest = getStrongestMetadata(parsedMetadata)
  const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest)

  // 6. For each item in metadata:
  for (const item of metadata) {
    // 1. Let algorithm be the alg component of item.
    const algorithm = item.algo

    // 2. Let expectedValue be the val component of item.
    const expectedValue = item.hash

    // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e
    // "be liberal with padding". This is annoying, and it's not even in the spec.

    // 3. Let actualValue be the result of applying algorithm to bytes.
    let actualValue = crypto.createHash(algorithm).update(bytes).digest('base64')

    if (actualValue[actualValue.length - 1] === '=') {
      if (actualValue[actualValue.length - 2] === '=') {
        actualValue = actualValue.slice(0, -2)
      } else {
        actualValue = actualValue.slice(0, -1)
      }
    }

    // 4. If actualValue is a case-sensitive match for expectedValue,
    //    return true.
    if (compareBase64Mixed(actualValue, expectedValue)) {
      return true
    }
  }

  // 7. Return false.
  return false
}

// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options
// https://www.w3.org/TR/CSP2/#source-list-syntax
// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1
const parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i

/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
 * @param {string} metadata
 */
function parseMetadata (metadata) {
  // 1. Let result be the empty set.
  /** @type {{ algo: string, hash: string }[]} */
  const result = []

  // 2. Let empty be equal to true.
  let empty = true

  // 3. For each token returned by splitting metadata on spaces:
  for (const token of metadata.split(' ')) {
    // 1. Set empty to false.
    empty = false

    // 2. Parse token as a hash-with-options.
    const parsedToken = parseHashWithOptions.exec(token)

    // 3. If token does not parse, continue to the next token.
    if (
      parsedToken === null ||
      parsedToken.groups === undefined ||
      parsedToken.groups.algo === undefined
    ) {
      // Note: Chromium blocks the request at this point, but Firefox
      // gives a warning that an invalid integrity was given. The
      // correct behavior is to ignore these, and subsequently not
      // check the integrity of the resource.
      continue
    }

    // 4. Let algorithm be the hash-algo component of token.
    const algorithm = parsedToken.groups.algo.toLowerCase()

    // 5. If algorithm is a hash function recognized by the user
    //    agent, add the parsed token to result.
    if (supportedHashes.includes(algorithm)) {
      result.push(parsedToken.groups)
    }
  }

  // 4. Return no metadata if empty is true, otherwise return result.
  if (empty === true) {
    return 'no metadata'
  }

  return result
}

/**
 * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
 */
function getStrongestMetadata (metadataList) {
  // Let algorithm be the algo component of the first item in metadataList.
  // Can be sha256
  let algorithm = metadataList[0].algo
  // If the algorithm is sha512, then it is the strongest
  // and we can return immediately
  if (algorithm[3] === '5') {
    return algorithm
  }

  for (let i = 1; i < metadataList.length; ++i) {
    const metadata = metadataList[i]
    // If the algorithm is sha512, then it is the strongest
    // and we can break the loop immediately
    if (metadata.algo[3] === '5') {
      algorithm = 'sha512'
      break
    // If the algorithm is sha384, then a potential sha256 or sha384 is ignored
    } else if (algorithm[3] === '3') {
      continue
    // algorithm is sha256, check if algorithm is sha384 and if so, set it as
    // the strongest
    } else if (metadata.algo[3] === '3') {
      algorithm = 'sha384'
    }
  }
  return algorithm
}

function filterMetadataListByAlgorithm (metadataList, algorithm) {
  if (metadataList.length === 1) {
    return metadataList
  }

  let pos = 0
  for (let i = 0; i < metadataList.length; ++i) {
    if (metadataList[i].algo === algorithm) {
      metadataList[pos++] = metadataList[i]
    }
  }

  metadataList.length = pos

  return metadataList
}

/**
 * Compares two base64 strings, allowing for base64url
 * in the second string.
 *
* @param {string} actualValue always base64
 * @param {string} expectedValue base64 or base64url
 * @returns {boolean}
 */
function compareBase64Mixed (actualValue, expectedValue) {
  if (actualValue.length !== expectedValue.length) {
    return false
  }
  for (let i = 0; i < actualValue.length; ++i) {
    if (actualValue[i] !== expectedValue[i]) {
      if (
        (actualValue[i] === '+' && expectedValue[i] === '-') ||
        (actualValue[i] === '/' && expectedValue[i] === '_')
      ) {
        continue
      }
      return false
    }
  }

  return true
}

// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request
function tryUpgradeRequestToAPotentiallyTrustworthyURL (request) {
  // TODO
}

/**
 * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
 * @param {URL} A
 * @param {URL} B
 */
function sameOrigin (A, B) {
  // 1. If A and B are the same opaque origin, then return true.
  if (A.origin === B.origin && A.origin === 'null') {
    return true
  }

  // 2. If A and B are both tuple origins and their schemes,
  //    hosts, and port are identical, then return true.
  if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
    return true
  }

  // 3. Return false.
  return false
}

function createDeferredPromise () {
  let res
  let rej
  const promise = new Promise((resolve, reject) => {
    res = resolve
    rej = reject
  })

  return { promise, resolve: res, reject: rej }
}

function isAborted (fetchParams) {
  return fetchParams.controller.state === 'aborted'
}

function isCancelled (fetchParams) {
  return fetchParams.controller.state === 'aborted' ||
    fetchParams.controller.state === 'terminated'
}

const normalizeMethodRecord = {
  delete: 'DELETE',
  DELETE: 'DELETE',
  get: 'GET',
  GET: 'GET',
  head: 'HEAD',
  HEAD: 'HEAD',
  options: 'OPTIONS',
  OPTIONS: 'OPTIONS',
  post: 'POST',
  POST: 'POST',
  put: 'PUT',
  PUT: 'PUT'
}

// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf(normalizeMethodRecord, null)

/**
 * @see https://fetch.spec.whatwg.org/#concept-method-normalize
 * @param {string} method
 */
function normalizeMethod (method) {
  return normalizeMethodRecord[method.toLowerCase()] ?? method
}

// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string
function serializeJavascriptValueToJSONString (value) {
  // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).
  const result = JSON.stringify(value)

  // 2. If result is undefined, then throw a TypeError.
  if (result === undefined) {
    throw new TypeError('Value is not JSON serializable')
  }

  // 3. Assert: result is a string.
  assert(typeof result === 'string')

  // 4. Return result.
  return result
}

// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object
const esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))

/**
 * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
 * @param {() => unknown[]} iterator
 * @param {string} name name of the instance
 * @param {'key'|'value'|'key+value'} kind
 */
function makeIterator (iterator, name, kind) {
  const object = {
    index: 0,
    kind,
    target: iterator
  }

  const i = {
    next () {
      // 1. Let interface be the interface for which the iterator prototype object exists.

      // 2. Let thisValue be the this value.

      // 3. Let object be ? ToObject(thisValue).

      // 4. If object is a platform object, then perform a security
      //    check, passing:

      // 5. If object is not a default iterator object for interface,
      //    then throw a TypeError.
      if (Object.getPrototypeOf(this) !== i) {
        throw new TypeError(
          `'next' called on an object that does not implement interface ${name} Iterator.`
        )
      }

      // 6. Let index be object’s index.
      // 7. Let kind be object’s kind.
      // 8. Let values be object’s target's value pairs to iterate over.
      const { index, kind, target } = object
      const values = target()

      // 9. Let len be the length of values.
      const len = values.length

      // 10. If index is greater than or equal to len, then return
      //     CreateIterResultObject(undefined, true).
      if (index >= len) {
        return { value: undefined, done: true }
      }

      // 11. Let pair be the entry in values at index index.
      const pair = values[index]

      // 12. Set object’s index to index + 1.
      object.index = index + 1

      // 13. Return the iterator result for pair and kind.
      return iteratorResult(pair, kind)
    },
    // The class string of an iterator prototype object for a given interface is the
    // result of concatenating the identifier of the interface and the string " Iterator".
    [Symbol.toStringTag]: `${name} Iterator`
  }

  // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.
  Object.setPrototypeOf(i, esIteratorPrototype)
  // esIteratorPrototype needs to be the prototype of i
  // which is the prototype of an empty object. Yes, it's confusing.
  return Object.setPrototypeOf({}, i)
}

// https://webidl.spec.whatwg.org/#iterator-result
function iteratorResult (pair, kind) {
  let result

  // 1. Let result be a value determined by the value of kind:
  switch (kind) {
    case 'key': {
      // 1. Let idlKey be pair’s key.
      // 2. Let key be the result of converting idlKey to an
      //    ECMAScript value.
      // 3. result is key.
      result = pair[0]
      break
    }
    case 'value': {
      // 1. Let idlValue be pair’s value.
      // 2. Let value be the result of converting idlValue to
      //    an ECMAScript value.
      // 3. result is value.
      result = pair[1]
      break
    }
    case 'key+value': {
      // 1. Let idlKey be pair’s key.
      // 2. Let idlValue be pair’s value.
      // 3. Let key be the result of converting idlKey to an
      //    ECMAScript value.
      // 4. Let value be the result of converting idlValue to
      //    an ECMAScript value.
      // 5. Let array be ! ArrayCreate(2).
      // 6. Call ! CreateDataProperty(array, "0", key).
      // 7. Call ! CreateDataProperty(array, "1", value).
      // 8. result is array.
      result = pair
      break
    }
  }

  // 2. Return CreateIterResultObject(result, false).
  return { value: result, done: false }
}

/**
 * @see https://fetch.spec.whatwg.org/#body-fully-read
 */
async function fullyReadBody (body, processBody, processBodyError) {
  // 1. If taskDestination is null, then set taskDestination to
  //    the result of starting a new parallel queue.

  // 2. Let successSteps given a byte sequence bytes be to queue a
  //    fetch task to run processBody given bytes, with taskDestination.
  const successSteps = processBody

  // 3. Let errorSteps be to queue a fetch task to run processBodyError,
  //    with taskDestination.
  const errorSteps = processBodyError

  // 4. Let reader be the result of getting a reader for body’s stream.
  //    If that threw an exception, then run errorSteps with that
  //    exception and return.
  let reader

  try {
    reader = body.stream.getReader()
  } catch (e) {
    errorSteps(e)
    return
  }

  // 5. Read all bytes from reader, given successSteps and errorSteps.
  try {
    const result = await readAllBytes(reader)
    successSteps(result)
  } catch (e) {
    errorSteps(e)
  }
}

/** @type {ReadableStream} */
let ReadableStream = globalThis.ReadableStream

function isReadableStreamLike (stream) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(3774).ReadableStream)
  }

  return stream instanceof ReadableStream || (
    stream[Symbol.toStringTag] === 'ReadableStream' &&
    typeof stream.tee === 'function'
  )
}

const MAXIMUM_ARGUMENT_LENGTH = 65535

/**
 * @see https://infra.spec.whatwg.org/#isomorphic-decode
 * @param {number[]|Uint8Array} input
 */
function isomorphicDecode (input) {
  // 1. To isomorphic decode a byte sequence input, return a string whose code point
  //    length is equal to input’s length and whose code points have the same values
  //    as the values of input’s bytes, in the same order.

  if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
    return String.fromCharCode(...input)
  }

  return input.reduce((previous, current) => previous + String.fromCharCode(current), '')
}

/**
 * @param {ReadableStreamController<Uint8Array>} controller
 */
function readableStreamClose (controller) {
  try {
    controller.close()
  } catch (err) {
    // TODO: add comment explaining why this error occurs.
    if (!err.message.includes('Controller is already closed')) {
      throw err
    }
  }
}

/**
 * @see https://infra.spec.whatwg.org/#isomorphic-encode
 * @param {string} input
 */
function isomorphicEncode (input) {
  // 1. Assert: input contains no code points greater than U+00FF.
  for (let i = 0; i < input.length; i++) {
    assert(input.charCodeAt(i) <= 0xFF)
  }

  // 2. Return a byte sequence whose length is equal to input’s code
  //    point length and whose bytes have the same values as the
  //    values of input’s code points, in the same order
  return input
}

/**
 * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
 * @see https://streams.spec.whatwg.org/#read-loop
 * @param {ReadableStreamDefaultReader} reader
 */
async function readAllBytes (reader) {
  const bytes = []
  let byteLength = 0

  while (true) {
    const { done, value: chunk } = await reader.read()

    if (done) {
      // 1. Call successSteps with bytes.
      return Buffer.concat(bytes, byteLength)
    }

    // 1. If chunk is not a Uint8Array object, call failureSteps
    //    with a TypeError and abort these steps.
    if (!isUint8Array(chunk)) {
      throw new TypeError('Received non-Uint8Array chunk')
    }

    // 2. Append the bytes represented by chunk to bytes.
    bytes.push(chunk)
    byteLength += chunk.length

    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.
  }
}

/**
 * @see https://fetch.spec.whatwg.org/#is-local
 * @param {URL} url
 */
function urlIsLocal (url) {
  assert('protocol' in url) // ensure it's a url object

  const protocol = url.protocol

  return protocol === 'about:' || protocol === 'blob:' || protocol === 'data:'
}

/**
 * @param {string|URL} url
 */
function urlHasHttpsScheme (url) {
  if (typeof url === 'string') {
    return url.startsWith('https:')
  }

  return url.protocol === 'https:'
}

/**
 * @see https://fetch.spec.whatwg.org/#http-scheme
 * @param {URL} url
 */
function urlIsHttpHttpsScheme (url) {
  assert('protocol' in url) // ensure it's a url object

  const protocol = url.protocol

  return protocol === 'http:' || protocol === 'https:'
}

/**
 * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
 */
const hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key))

module.exports = {
  isAborted,
  isCancelled,
  createDeferredPromise,
  ReadableStreamFrom,
  toUSVString,
  tryUpgradeRequestToAPotentiallyTrustworthyURL,
  coarsenedSharedCurrentTime,
  determineRequestsReferrer,
  makePolicyContainer,
  clonePolicyContainer,
  appendFetchMetadata,
  appendRequestOriginHeader,
  TAOCheck,
  corsCheck,
  crossOriginResourcePolicyCheck,
  createOpaqueTimingInfo,
  setRequestReferrerPolicyOnRedirect,
  isValidHTTPToken,
  requestBadPort,
  requestCurrentURL,
  responseURL,
  responseLocationURL,
  isBlobLike,
  isURLPotentiallyTrustworthy,
  isValidReasonPhrase,
  sameOrigin,
  normalizeMethod,
  serializeJavascriptValueToJSONString,
  makeIterator,
  isValidHeaderName,
  isValidHeaderValue,
  hasOwn,
  isErrorLike,
  fullyReadBody,
  bytesMatch,
  isReadableStreamLike,
  readableStreamClose,
  isomorphicEncode,
  isomorphicDecode,
  urlIsLocal,
  urlHasHttpsScheme,
  urlIsHttpHttpsScheme,
  readAllBytes,
  normalizeMethodRecord,
  parseMetadata
}


/***/ }),

/***/ 3476:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { types } = __nccwpck_require__(9023)
const { hasOwn, toUSVString } = __nccwpck_require__(8961)

/** @type {import('../../types/webidl').Webidl} */
const webidl = {}
webidl.converters = {}
webidl.util = {}
webidl.errors = {}

webidl.errors.exception = function (message) {
  return new TypeError(`${message.header}: ${message.message}`)
}

webidl.errors.conversionFailed = function (context) {
  const plural = context.types.length === 1 ? '' : ' one of'
  const message =
    `${context.argument} could not be converted to` +
    `${plural}: ${context.types.join(', ')}.`

  return webidl.errors.exception({
    header: context.prefix,
    message
  })
}

webidl.errors.invalidArgument = function (context) {
  return webidl.errors.exception({
    header: context.prefix,
    message: `"${context.value}" is an invalid ${context.type}.`
  })
}

// https://webidl.spec.whatwg.org/#implements
webidl.brandCheck = function (V, I, opts = undefined) {
  if (opts?.strict !== false && !(V instanceof I)) {
    throw new TypeError('Illegal invocation')
  } else {
    return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag]
  }
}

webidl.argumentLengthCheck = function ({ length }, min, ctx) {
  if (length < min) {
    throw webidl.errors.exception({
      message: `${min} argument${min !== 1 ? 's' : ''} required, ` +
               `but${length ? ' only' : ''} ${length} found.`,
      ...ctx
    })
  }
}

webidl.illegalConstructor = function () {
  throw webidl.errors.exception({
    header: 'TypeError',
    message: 'Illegal constructor'
  })
}

// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values
webidl.util.Type = function (V) {
  switch (typeof V) {
    case 'undefined': return 'Undefined'
    case 'boolean': return 'Boolean'
    case 'string': return 'String'
    case 'symbol': return 'Symbol'
    case 'number': return 'Number'
    case 'bigint': return 'BigInt'
    case 'function':
    case 'object': {
      if (V === null) {
        return 'Null'
      }

      return 'Object'
    }
  }
}

// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint
webidl.util.ConvertToInt = function (V, bitLength, signedness, opts = {}) {
  let upperBound
  let lowerBound

  // 1. If bitLength is 64, then:
  if (bitLength === 64) {
    // 1. Let upperBound be 2^53 − 1.
    upperBound = Math.pow(2, 53) - 1

    // 2. If signedness is "unsigned", then let lowerBound be 0.
    if (signedness === 'unsigned') {
      lowerBound = 0
    } else {
      // 3. Otherwise let lowerBound be −2^53 + 1.
      lowerBound = Math.pow(-2, 53) + 1
    }
  } else if (signedness === 'unsigned') {
    // 2. Otherwise, if signedness is "unsigned", then:

    // 1. Let lowerBound be 0.
    lowerBound = 0

    // 2. Let upperBound be 2^bitLength − 1.
    upperBound = Math.pow(2, bitLength) - 1
  } else {
    // 3. Otherwise:

    // 1. Let lowerBound be -2^bitLength − 1.
    lowerBound = Math.pow(-2, bitLength) - 1

    // 2. Let upperBound be 2^bitLength − 1 − 1.
    upperBound = Math.pow(2, bitLength - 1) - 1
  }

  // 4. Let x be ? ToNumber(V).
  let x = Number(V)

  // 5. If x is −0, then set x to +0.
  if (x === 0) {
    x = 0
  }

  // 6. If the conversion is to an IDL type associated
  //    with the [EnforceRange] extended attribute, then:
  if (opts.enforceRange === true) {
    // 1. If x is NaN, +∞, or −∞, then throw a TypeError.
    if (
      Number.isNaN(x) ||
      x === Number.POSITIVE_INFINITY ||
      x === Number.NEGATIVE_INFINITY
    ) {
      throw webidl.errors.exception({
        header: 'Integer conversion',
        message: `Could not convert ${V} to an integer.`
      })
    }

    // 2. Set x to IntegerPart(x).
    x = webidl.util.IntegerPart(x)

    // 3. If x < lowerBound or x > upperBound, then
    //    throw a TypeError.
    if (x < lowerBound || x > upperBound) {
      throw webidl.errors.exception({
        header: 'Integer conversion',
        message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
      })
    }

    // 4. Return x.
    return x
  }

  // 7. If x is not NaN and the conversion is to an IDL
  //    type associated with the [Clamp] extended
  //    attribute, then:
  if (!Number.isNaN(x) && opts.clamp === true) {
    // 1. Set x to min(max(x, lowerBound), upperBound).
    x = Math.min(Math.max(x, lowerBound), upperBound)

    // 2. Round x to the nearest integer, choosing the
    //    even integer if it lies halfway between two,
    //    and choosing +0 rather than −0.
    if (Math.floor(x) % 2 === 0) {
      x = Math.floor(x)
    } else {
      x = Math.ceil(x)
    }

    // 3. Return x.
    return x
  }

  // 8. If x is NaN, +0, +∞, or −∞, then return +0.
  if (
    Number.isNaN(x) ||
    (x === 0 && Object.is(0, x)) ||
    x === Number.POSITIVE_INFINITY ||
    x === Number.NEGATIVE_INFINITY
  ) {
    return 0
  }

  // 9. Set x to IntegerPart(x).
  x = webidl.util.IntegerPart(x)

  // 10. Set x to x modulo 2^bitLength.
  x = x % Math.pow(2, bitLength)

  // 11. If signedness is "signed" and x ≥ 2^bitLength − 1,
  //    then return x − 2^bitLength.
  if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {
    return x - Math.pow(2, bitLength)
  }

  // 12. Otherwise, return x.
  return x
}

// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart
webidl.util.IntegerPart = function (n) {
  // 1. Let r be floor(abs(n)).
  const r = Math.floor(Math.abs(n))

  // 2. If n < 0, then return -1 × r.
  if (n < 0) {
    return -1 * r
  }

  // 3. Otherwise, return r.
  return r
}

// https://webidl.spec.whatwg.org/#es-sequence
webidl.sequenceConverter = function (converter) {
  return (V) => {
    // 1. If Type(V) is not Object, throw a TypeError.
    if (webidl.util.Type(V) !== 'Object') {
      throw webidl.errors.exception({
        header: 'Sequence',
        message: `Value of type ${webidl.util.Type(V)} is not an Object.`
      })
    }

    // 2. Let method be ? GetMethod(V, @@iterator).
    /** @type {Generator} */
    const method = V?.[Symbol.iterator]?.()
    const seq = []

    // 3. If method is undefined, throw a TypeError.
    if (
      method === undefined ||
      typeof method.next !== 'function'
    ) {
      throw webidl.errors.exception({
        header: 'Sequence',
        message: 'Object is not an iterator.'
      })
    }

    // https://webidl.spec.whatwg.org/#create-sequence-from-iterable
    while (true) {
      const { done, value } = method.next()

      if (done) {
        break
      }

      seq.push(converter(value))
    }

    return seq
  }
}

// https://webidl.spec.whatwg.org/#es-to-record
webidl.recordConverter = function (keyConverter, valueConverter) {
  return (O) => {
    // 1. If Type(O) is not Object, throw a TypeError.
    if (webidl.util.Type(O) !== 'Object') {
      throw webidl.errors.exception({
        header: 'Record',
        message: `Value of type ${webidl.util.Type(O)} is not an Object.`
      })
    }

    // 2. Let result be a new empty instance of record<K, V>.
    const result = {}

    if (!types.isProxy(O)) {
      // Object.keys only returns enumerable properties
      const keys = Object.keys(O)

      for (const key of keys) {
        // 1. Let typedKey be key converted to an IDL value of type K.
        const typedKey = keyConverter(key)

        // 2. Let value be ? Get(O, key).
        // 3. Let typedValue be value converted to an IDL value of type V.
        const typedValue = valueConverter(O[key])

        // 4. Set result[typedKey] to typedValue.
        result[typedKey] = typedValue
      }

      // 5. Return result.
      return result
    }

    // 3. Let keys be ? O.[[OwnPropertyKeys]]().
    const keys = Reflect.ownKeys(O)

    // 4. For each key of keys.
    for (const key of keys) {
      // 1. Let desc be ? O.[[GetOwnProperty]](key).
      const desc = Reflect.getOwnPropertyDescriptor(O, key)

      // 2. If desc is not undefined and desc.[[Enumerable]] is true:
      if (desc?.enumerable) {
        // 1. Let typedKey be key converted to an IDL value of type K.
        const typedKey = keyConverter(key)

        // 2. Let value be ? Get(O, key).
        // 3. Let typedValue be value converted to an IDL value of type V.
        const typedValue = valueConverter(O[key])

        // 4. Set result[typedKey] to typedValue.
        result[typedKey] = typedValue
      }
    }

    // 5. Return result.
    return result
  }
}

webidl.interfaceConverter = function (i) {
  return (V, opts = {}) => {
    if (opts.strict !== false && !(V instanceof i)) {
      throw webidl.errors.exception({
        header: i.name,
        message: `Expected ${V} to be an instance of ${i.name}.`
      })
    }

    return V
  }
}

webidl.dictionaryConverter = function (converters) {
  return (dictionary) => {
    const type = webidl.util.Type(dictionary)
    const dict = {}

    if (type === 'Null' || type === 'Undefined') {
      return dict
    } else if (type !== 'Object') {
      throw webidl.errors.exception({
        header: 'Dictionary',
        message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
      })
    }

    for (const options of converters) {
      const { key, defaultValue, required, converter } = options

      if (required === true) {
        if (!hasOwn(dictionary, key)) {
          throw webidl.errors.exception({
            header: 'Dictionary',
            message: `Missing required key "${key}".`
          })
        }
      }

      let value = dictionary[key]
      const hasDefault = hasOwn(options, 'defaultValue')

      // Only use defaultValue if value is undefined and
      // a defaultValue options was provided.
      if (hasDefault && value !== null) {
        value = value ?? defaultValue
      }

      // A key can be optional and have no default value.
      // When this happens, do not perform a conversion,
      // and do not assign the key a value.
      if (required || hasDefault || value !== undefined) {
        value = converter(value)

        if (
          options.allowedValues &&
          !options.allowedValues.includes(value)
        ) {
          throw webidl.errors.exception({
            header: 'Dictionary',
            message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(', ')}.`
          })
        }

        dict[key] = value
      }
    }

    return dict
  }
}

webidl.nullableConverter = function (converter) {
  return (V) => {
    if (V === null) {
      return V
    }

    return converter(V)
  }
}

// https://webidl.spec.whatwg.org/#es-DOMString
webidl.converters.DOMString = function (V, opts = {}) {
  // 1. If V is null and the conversion is to an IDL type
  //    associated with the [LegacyNullToEmptyString]
  //    extended attribute, then return the DOMString value
  //    that represents the empty string.
  if (V === null && opts.legacyNullToEmptyString) {
    return ''
  }

  // 2. Let x be ? ToString(V).
  if (typeof V === 'symbol') {
    throw new TypeError('Could not convert argument of type symbol to string.')
  }

  // 3. Return the IDL DOMString value that represents the
  //    same sequence of code units as the one the
  //    ECMAScript String value x represents.
  return String(V)
}

// https://webidl.spec.whatwg.org/#es-ByteString
webidl.converters.ByteString = function (V) {
  // 1. Let x be ? ToString(V).
  // Note: DOMString converter perform ? ToString(V)
  const x = webidl.converters.DOMString(V)

  // 2. If the value of any element of x is greater than
  //    255, then throw a TypeError.
  for (let index = 0; index < x.length; index++) {
    if (x.charCodeAt(index) > 255) {
      throw new TypeError(
        'Cannot convert argument to a ByteString because the character at ' +
        `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`
      )
    }
  }

  // 3. Return an IDL ByteString value whose length is the
  //    length of x, and where the value of each element is
  //    the value of the corresponding element of x.
  return x
}

// https://webidl.spec.whatwg.org/#es-USVString
webidl.converters.USVString = toUSVString

// https://webidl.spec.whatwg.org/#es-boolean
webidl.converters.boolean = function (V) {
  // 1. Let x be the result of computing ToBoolean(V).
  const x = Boolean(V)

  // 2. Return the IDL boolean value that is the one that represents
  //    the same truth value as the ECMAScript Boolean value x.
  return x
}

// https://webidl.spec.whatwg.org/#es-any
webidl.converters.any = function (V) {
  return V
}

// https://webidl.spec.whatwg.org/#es-long-long
webidl.converters['long long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 64, "signed").
  const x = webidl.util.ConvertToInt(V, 64, 'signed')

  // 2. Return the IDL long long value that represents
  //    the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-long-long
webidl.converters['unsigned long long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 64, "unsigned").
  const x = webidl.util.ConvertToInt(V, 64, 'unsigned')

  // 2. Return the IDL unsigned long long value that
  //    represents the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-long
webidl.converters['unsigned long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 32, "unsigned").
  const x = webidl.util.ConvertToInt(V, 32, 'unsigned')

  // 2. Return the IDL unsigned long value that
  //    represents the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-short
webidl.converters['unsigned short'] = function (V, opts) {
  // 1. Let x be ? ConvertToInt(V, 16, "unsigned").
  const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts)

  // 2. Return the IDL unsigned short value that represents
  //    the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#idl-ArrayBuffer
webidl.converters.ArrayBuffer = function (V, opts = {}) {
  // 1. If Type(V) is not Object, or V does not have an
  //    [[ArrayBufferData]] internal slot, then throw a
  //    TypeError.
  // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances
  // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances
  if (
    webidl.util.Type(V) !== 'Object' ||
    !types.isAnyArrayBuffer(V)
  ) {
    throw webidl.errors.conversionFailed({
      prefix: `${V}`,
      argument: `${V}`,
      types: ['ArrayBuffer']
    })
  }

  // 2. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V) is true, then throw a
  //    TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V) is true, then throw a
  //    TypeError.
  // Note: resizable ArrayBuffers are currently a proposal.

  // 4. Return the IDL ArrayBuffer value that is a
  //    reference to the same object as V.
  return V
}

webidl.converters.TypedArray = function (V, T, opts = {}) {
  // 1. Let T be the IDL type V is being converted to.

  // 2. If Type(V) is not Object, or V does not have a
  //    [[TypedArrayName]] internal slot with a value
  //    equal to T’s name, then throw a TypeError.
  if (
    webidl.util.Type(V) !== 'Object' ||
    !types.isTypedArray(V) ||
    V.constructor.name !== T.name
  ) {
    throw webidl.errors.conversionFailed({
      prefix: `${T.name}`,
      argument: `${V}`,
      types: [T.name]
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 4. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  // Note: resizable array buffers are currently a proposal

  // 5. Return the IDL value of type T that is a reference
  //    to the same object as V.
  return V
}

webidl.converters.DataView = function (V, opts = {}) {
  // 1. If Type(V) is not Object, or V does not have a
  //    [[DataView]] internal slot, then throw a TypeError.
  if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {
    throw webidl.errors.exception({
      header: 'DataView',
      message: 'Object is not a DataView.'
    })
  }

  // 2. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,
  //    then throw a TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  // Note: resizable ArrayBuffers are currently a proposal

  // 4. Return the IDL DataView value that is a reference
  //    to the same object as V.
  return V
}

// https://webidl.spec.whatwg.org/#BufferSource
webidl.converters.BufferSource = function (V, opts = {}) {
  if (types.isAnyArrayBuffer(V)) {
    return webidl.converters.ArrayBuffer(V, opts)
  }

  if (types.isTypedArray(V)) {
    return webidl.converters.TypedArray(V, V.constructor)
  }

  if (types.isDataView(V)) {
    return webidl.converters.DataView(V, opts)
  }

  throw new TypeError(`Could not convert ${V} to a BufferSource.`)
}

webidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(
  webidl.converters.ByteString
)

webidl.converters['sequence<sequence<ByteString>>'] = webidl.sequenceConverter(
  webidl.converters['sequence<ByteString>']
)

webidl.converters['record<ByteString, ByteString>'] = webidl.recordConverter(
  webidl.converters.ByteString,
  webidl.converters.ByteString
)

module.exports = {
  webidl
}


/***/ }),

/***/ 202:
/***/ ((module) => {

"use strict";


/**
 * @see https://encoding.spec.whatwg.org/#concept-encoding-get
 * @param {string|undefined} label
 */
function getEncoding (label) {
  if (!label) {
    return 'failure'
  }

  // 1. Remove any leading and trailing ASCII whitespace from label.
  // 2. If label is an ASCII case-insensitive match for any of the
  //    labels listed in the table below, then return the
  //    corresponding encoding; otherwise return failure.
  switch (label.trim().toLowerCase()) {
    case 'unicode-1-1-utf-8':
    case 'unicode11utf8':
    case 'unicode20utf8':
    case 'utf-8':
    case 'utf8':
    case 'x-unicode20utf8':
      return 'UTF-8'
    case '866':
    case 'cp866':
    case 'csibm866':
    case 'ibm866':
      return 'IBM866'
    case 'csisolatin2':
    case 'iso-8859-2':
    case 'iso-ir-101':
    case 'iso8859-2':
    case 'iso88592':
    case 'iso_8859-2':
    case 'iso_8859-2:1987':
    case 'l2':
    case 'latin2':
      return 'ISO-8859-2'
    case 'csisolatin3':
    case 'iso-8859-3':
    case 'iso-ir-109':
    case 'iso8859-3':
    case 'iso88593':
    case 'iso_8859-3':
    case 'iso_8859-3:1988':
    case 'l3':
    case 'latin3':
      return 'ISO-8859-3'
    case 'csisolatin4':
    case 'iso-8859-4':
    case 'iso-ir-110':
    case 'iso8859-4':
    case 'iso88594':
    case 'iso_8859-4':
    case 'iso_8859-4:1988':
    case 'l4':
    case 'latin4':
      return 'ISO-8859-4'
    case 'csisolatincyrillic':
    case 'cyrillic':
    case 'iso-8859-5':
    case 'iso-ir-144':
    case 'iso8859-5':
    case 'iso88595':
    case 'iso_8859-5':
    case 'iso_8859-5:1988':
      return 'ISO-8859-5'
    case 'arabic':
    case 'asmo-708':
    case 'csiso88596e':
    case 'csiso88596i':
    case 'csisolatinarabic':
    case 'ecma-114':
    case 'iso-8859-6':
    case 'iso-8859-6-e':
    case 'iso-8859-6-i':
    case 'iso-ir-127':
    case 'iso8859-6':
    case 'iso88596':
    case 'iso_8859-6':
    case 'iso_8859-6:1987':
      return 'ISO-8859-6'
    case 'csisolatingreek':
    case 'ecma-118':
    case 'elot_928':
    case 'greek':
    case 'greek8':
    case 'iso-8859-7':
    case 'iso-ir-126':
    case 'iso8859-7':
    case 'iso88597':
    case 'iso_8859-7':
    case 'iso_8859-7:1987':
    case 'sun_eu_greek':
      return 'ISO-8859-7'
    case 'csiso88598e':
    case 'csisolatinhebrew':
    case 'hebrew':
    case 'iso-8859-8':
    case 'iso-8859-8-e':
    case 'iso-ir-138':
    case 'iso8859-8':
    case 'iso88598':
    case 'iso_8859-8':
    case 'iso_8859-8:1988':
    case 'visual':
      return 'ISO-8859-8'
    case 'csiso88598i':
    case 'iso-8859-8-i':
    case 'logical':
      return 'ISO-8859-8-I'
    case 'csisolatin6':
    case 'iso-8859-10':
    case 'iso-ir-157':
    case 'iso8859-10':
    case 'iso885910':
    case 'l6':
    case 'latin6':
      return 'ISO-8859-10'
    case 'iso-8859-13':
    case 'iso8859-13':
    case 'iso885913':
      return 'ISO-8859-13'
    case 'iso-8859-14':
    case 'iso8859-14':
    case 'iso885914':
      return 'ISO-8859-14'
    case 'csisolatin9':
    case 'iso-8859-15':
    case 'iso8859-15':
    case 'iso885915':
    case 'iso_8859-15':
    case 'l9':
      return 'ISO-8859-15'
    case 'iso-8859-16':
      return 'ISO-8859-16'
    case 'cskoi8r':
    case 'koi':
    case 'koi8':
    case 'koi8-r':
    case 'koi8_r':
      return 'KOI8-R'
    case 'koi8-ru':
    case 'koi8-u':
      return 'KOI8-U'
    case 'csmacintosh':
    case 'mac':
    case 'macintosh':
    case 'x-mac-roman':
      return 'macintosh'
    case 'iso-8859-11':
    case 'iso8859-11':
    case 'iso885911':
    case 'tis-620':
    case 'windows-874':
      return 'windows-874'
    case 'cp1250':
    case 'windows-1250':
    case 'x-cp1250':
      return 'windows-1250'
    case 'cp1251':
    case 'windows-1251':
    case 'x-cp1251':
      return 'windows-1251'
    case 'ansi_x3.4-1968':
    case 'ascii':
    case 'cp1252':
    case 'cp819':
    case 'csisolatin1':
    case 'ibm819':
    case 'iso-8859-1':
    case 'iso-ir-100':
    case 'iso8859-1':
    case 'iso88591':
    case 'iso_8859-1':
    case 'iso_8859-1:1987':
    case 'l1':
    case 'latin1':
    case 'us-ascii':
    case 'windows-1252':
    case 'x-cp1252':
      return 'windows-1252'
    case 'cp1253':
    case 'windows-1253':
    case 'x-cp1253':
      return 'windows-1253'
    case 'cp1254':
    case 'csisolatin5':
    case 'iso-8859-9':
    case 'iso-ir-148':
    case 'iso8859-9':
    case 'iso88599':
    case 'iso_8859-9':
    case 'iso_8859-9:1989':
    case 'l5':
    case 'latin5':
    case 'windows-1254':
    case 'x-cp1254':
      return 'windows-1254'
    case 'cp1255':
    case 'windows-1255':
    case 'x-cp1255':
      return 'windows-1255'
    case 'cp1256':
    case 'windows-1256':
    case 'x-cp1256':
      return 'windows-1256'
    case 'cp1257':
    case 'windows-1257':
    case 'x-cp1257':
      return 'windows-1257'
    case 'cp1258':
    case 'windows-1258':
    case 'x-cp1258':
      return 'windows-1258'
    case 'x-mac-cyrillic':
    case 'x-mac-ukrainian':
      return 'x-mac-cyrillic'
    case 'chinese':
    case 'csgb2312':
    case 'csiso58gb231280':
    case 'gb2312':
    case 'gb_2312':
    case 'gb_2312-80':
    case 'gbk':
    case 'iso-ir-58':
    case 'x-gbk':
      return 'GBK'
    case 'gb18030':
      return 'gb18030'
    case 'big5':
    case 'big5-hkscs':
    case 'cn-big5':
    case 'csbig5':
    case 'x-x-big5':
      return 'Big5'
    case 'cseucpkdfmtjapanese':
    case 'euc-jp':
    case 'x-euc-jp':
      return 'EUC-JP'
    case 'csiso2022jp':
    case 'iso-2022-jp':
      return 'ISO-2022-JP'
    case 'csshiftjis':
    case 'ms932':
    case 'ms_kanji':
    case 'shift-jis':
    case 'shift_jis':
    case 'sjis':
    case 'windows-31j':
    case 'x-sjis':
      return 'Shift_JIS'
    case 'cseuckr':
    case 'csksc56011987':
    case 'euc-kr':
    case 'iso-ir-149':
    case 'korean':
    case 'ks_c_5601-1987':
    case 'ks_c_5601-1989':
    case 'ksc5601':
    case 'ksc_5601':
    case 'windows-949':
      return 'EUC-KR'
    case 'csiso2022kr':
    case 'hz-gb-2312':
    case 'iso-2022-cn':
    case 'iso-2022-cn-ext':
    case 'iso-2022-kr':
    case 'replacement':
      return 'replacement'
    case 'unicodefffe':
    case 'utf-16be':
      return 'UTF-16BE'
    case 'csunicode':
    case 'iso-10646-ucs-2':
    case 'ucs-2':
    case 'unicode':
    case 'unicodefeff':
    case 'utf-16':
    case 'utf-16le':
      return 'UTF-16LE'
    case 'x-user-defined':
      return 'x-user-defined'
    default: return 'failure'
  }
}

module.exports = {
  getEncoding
}


/***/ }),

/***/ 9086:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  staticPropertyDescriptors,
  readOperation,
  fireAProgressEvent
} = __nccwpck_require__(367)
const {
  kState,
  kError,
  kResult,
  kEvents,
  kAborted
} = __nccwpck_require__(7570)
const { webidl } = __nccwpck_require__(3476)
const { kEnumerableProperty } = __nccwpck_require__(4606)

class FileReader extends EventTarget {
  constructor () {
    super()

    this[kState] = 'empty'
    this[kResult] = null
    this[kError] = null
    this[kEvents] = {
      loadend: null,
      error: null,
      abort: null,
      load: null,
      progress: null,
      loadstart: null
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
   * @param {import('buffer').Blob} blob
   */
  readAsArrayBuffer (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsArrayBuffer' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsArrayBuffer(blob) method, when invoked,
    // must initiate a read operation for blob with ArrayBuffer.
    readOperation(this, blob, 'ArrayBuffer')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#readAsBinaryString
   * @param {import('buffer').Blob} blob
   */
  readAsBinaryString (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsBinaryString' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsBinaryString(blob) method, when invoked,
    // must initiate a read operation for blob with BinaryString.
    readOperation(this, blob, 'BinaryString')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#readAsDataText
   * @param {import('buffer').Blob} blob
   * @param {string?} encoding
   */
  readAsText (blob, encoding = undefined) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsText' })

    blob = webidl.converters.Blob(blob, { strict: false })

    if (encoding !== undefined) {
      encoding = webidl.converters.DOMString(encoding)
    }

    // The readAsText(blob, encoding) method, when invoked,
    // must initiate a read operation for blob with Text and encoding.
    readOperation(this, blob, 'Text', encoding)
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
   * @param {import('buffer').Blob} blob
   */
  readAsDataURL (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsDataURL' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsDataURL(blob) method, when invoked, must
    // initiate a read operation for blob with DataURL.
    readOperation(this, blob, 'DataURL')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-abort
   */
  abort () {
    // 1. If this's state is "empty" or if this's state is
    //    "done" set this's result to null and terminate
    //    this algorithm.
    if (this[kState] === 'empty' || this[kState] === 'done') {
      this[kResult] = null
      return
    }

    // 2. If this's state is "loading" set this's state to
    //    "done" and set this's result to null.
    if (this[kState] === 'loading') {
      this[kState] = 'done'
      this[kResult] = null
    }

    // 3. If there are any tasks from this on the file reading
    //    task source in an affiliated task queue, then remove
    //    those tasks from that task queue.
    this[kAborted] = true

    // 4. Terminate the algorithm for the read method being processed.
    // TODO

    // 5. Fire a progress event called abort at this.
    fireAProgressEvent('abort', this)

    // 6. If this's state is not "loading", fire a progress
    //    event called loadend at this.
    if (this[kState] !== 'loading') {
      fireAProgressEvent('loadend', this)
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
   */
  get readyState () {
    webidl.brandCheck(this, FileReader)

    switch (this[kState]) {
      case 'empty': return this.EMPTY
      case 'loading': return this.LOADING
      case 'done': return this.DONE
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-result
   */
  get result () {
    webidl.brandCheck(this, FileReader)

    // The result attribute’s getter, when invoked, must return
    // this's result.
    return this[kResult]
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-error
   */
  get error () {
    webidl.brandCheck(this, FileReader)

    // The error attribute’s getter, when invoked, must return
    // this's error.
    return this[kError]
  }

  get onloadend () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].loadend
  }

  set onloadend (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].loadend) {
      this.removeEventListener('loadend', this[kEvents].loadend)
    }

    if (typeof fn === 'function') {
      this[kEvents].loadend = fn
      this.addEventListener('loadend', fn)
    } else {
      this[kEvents].loadend = null
    }
  }

  get onerror () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].error
  }

  set onerror (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].error) {
      this.removeEventListener('error', this[kEvents].error)
    }

    if (typeof fn === 'function') {
      this[kEvents].error = fn
      this.addEventListener('error', fn)
    } else {
      this[kEvents].error = null
    }
  }

  get onloadstart () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].loadstart
  }

  set onloadstart (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].loadstart) {
      this.removeEventListener('loadstart', this[kEvents].loadstart)
    }

    if (typeof fn === 'function') {
      this[kEvents].loadstart = fn
      this.addEventListener('loadstart', fn)
    } else {
      this[kEvents].loadstart = null
    }
  }

  get onprogress () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].progress
  }

  set onprogress (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].progress) {
      this.removeEventListener('progress', this[kEvents].progress)
    }

    if (typeof fn === 'function') {
      this[kEvents].progress = fn
      this.addEventListener('progress', fn)
    } else {
      this[kEvents].progress = null
    }
  }

  get onload () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].load
  }

  set onload (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].load) {
      this.removeEventListener('load', this[kEvents].load)
    }

    if (typeof fn === 'function') {
      this[kEvents].load = fn
      this.addEventListener('load', fn)
    } else {
      this[kEvents].load = null
    }
  }

  get onabort () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].abort
  }

  set onabort (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].abort) {
      this.removeEventListener('abort', this[kEvents].abort)
    }

    if (typeof fn === 'function') {
      this[kEvents].abort = fn
      this.addEventListener('abort', fn)
    } else {
      this[kEvents].abort = null
    }
  }
}

// https://w3c.github.io/FileAPI/#dom-filereader-empty
FileReader.EMPTY = FileReader.prototype.EMPTY = 0
// https://w3c.github.io/FileAPI/#dom-filereader-loading
FileReader.LOADING = FileReader.prototype.LOADING = 1
// https://w3c.github.io/FileAPI/#dom-filereader-done
FileReader.DONE = FileReader.prototype.DONE = 2

Object.defineProperties(FileReader.prototype, {
  EMPTY: staticPropertyDescriptors,
  LOADING: staticPropertyDescriptors,
  DONE: staticPropertyDescriptors,
  readAsArrayBuffer: kEnumerableProperty,
  readAsBinaryString: kEnumerableProperty,
  readAsText: kEnumerableProperty,
  readAsDataURL: kEnumerableProperty,
  abort: kEnumerableProperty,
  readyState: kEnumerableProperty,
  result: kEnumerableProperty,
  error: kEnumerableProperty,
  onloadstart: kEnumerableProperty,
  onprogress: kEnumerableProperty,
  onload: kEnumerableProperty,
  onabort: kEnumerableProperty,
  onerror: kEnumerableProperty,
  onloadend: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'FileReader',
    writable: false,
    enumerable: false,
    configurable: true
  }
})

Object.defineProperties(FileReader, {
  EMPTY: staticPropertyDescriptors,
  LOADING: staticPropertyDescriptors,
  DONE: staticPropertyDescriptors
})

module.exports = {
  FileReader
}


/***/ }),

/***/ 5702:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { webidl } = __nccwpck_require__(3476)

const kState = Symbol('ProgressEvent state')

/**
 * @see https://xhr.spec.whatwg.org/#progressevent
 */
class ProgressEvent extends Event {
  constructor (type, eventInitDict = {}) {
    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {})

    super(type, eventInitDict)

    this[kState] = {
      lengthComputable: eventInitDict.lengthComputable,
      loaded: eventInitDict.loaded,
      total: eventInitDict.total
    }
  }

  get lengthComputable () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].lengthComputable
  }

  get loaded () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].loaded
  }

  get total () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].total
  }
}

webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
  {
    key: 'lengthComputable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'loaded',
    converter: webidl.converters['unsigned long long'],
    defaultValue: 0
  },
  {
    key: 'total',
    converter: webidl.converters['unsigned long long'],
    defaultValue: 0
  },
  {
    key: 'bubbles',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'cancelable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'composed',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
])

module.exports = {
  ProgressEvent
}


/***/ }),

/***/ 7570:
/***/ ((module) => {

"use strict";


module.exports = {
  kState: Symbol('FileReader state'),
  kResult: Symbol('FileReader result'),
  kError: Symbol('FileReader error'),
  kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),
  kEvents: Symbol('FileReader events'),
  kAborted: Symbol('FileReader aborted')
}


/***/ }),

/***/ 367:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  kState,
  kError,
  kResult,
  kAborted,
  kLastProgressEventFired
} = __nccwpck_require__(7570)
const { ProgressEvent } = __nccwpck_require__(5702)
const { getEncoding } = __nccwpck_require__(202)
const { DOMException } = __nccwpck_require__(7536)
const { serializeAMimeType, parseMIMEType } = __nccwpck_require__(6960)
const { types } = __nccwpck_require__(9023)
const { StringDecoder } = __nccwpck_require__(3193)
const { btoa } = __nccwpck_require__(181)

/** @type {PropertyDescriptor} */
const staticPropertyDescriptors = {
  enumerable: true,
  writable: false,
  configurable: false
}

/**
 * @see https://w3c.github.io/FileAPI/#readOperation
 * @param {import('./filereader').FileReader} fr
 * @param {import('buffer').Blob} blob
 * @param {string} type
 * @param {string?} encodingName
 */
function readOperation (fr, blob, type, encodingName) {
  // 1. If fr’s state is "loading", throw an InvalidStateError
  //    DOMException.
  if (fr[kState] === 'loading') {
    throw new DOMException('Invalid state', 'InvalidStateError')
  }

  // 2. Set fr’s state to "loading".
  fr[kState] = 'loading'

  // 3. Set fr’s result to null.
  fr[kResult] = null

  // 4. Set fr’s error to null.
  fr[kError] = null

  // 5. Let stream be the result of calling get stream on blob.
  /** @type {import('stream/web').ReadableStream} */
  const stream = blob.stream()

  // 6. Let reader be the result of getting a reader from stream.
  const reader = stream.getReader()

  // 7. Let bytes be an empty byte sequence.
  /** @type {Uint8Array[]} */
  const bytes = []

  // 8. Let chunkPromise be the result of reading a chunk from
  //    stream with reader.
  let chunkPromise = reader.read()

  // 9. Let isFirstChunk be true.
  let isFirstChunk = true

  // 10. In parallel, while true:
  // Note: "In parallel" just means non-blocking
  // Note 2: readOperation itself cannot be async as double
  // reading the body would then reject the promise, instead
  // of throwing an error.
  ;(async () => {
    while (!fr[kAborted]) {
      // 1. Wait for chunkPromise to be fulfilled or rejected.
      try {
        const { done, value } = await chunkPromise

        // 2. If chunkPromise is fulfilled, and isFirstChunk is
        //    true, queue a task to fire a progress event called
        //    loadstart at fr.
        if (isFirstChunk && !fr[kAborted]) {
          queueMicrotask(() => {
            fireAProgressEvent('loadstart', fr)
          })
        }

        // 3. Set isFirstChunk to false.
        isFirstChunk = false

        // 4. If chunkPromise is fulfilled with an object whose
        //    done property is false and whose value property is
        //    a Uint8Array object, run these steps:
        if (!done && types.isUint8Array(value)) {
          // 1. Let bs be the byte sequence represented by the
          //    Uint8Array object.

          // 2. Append bs to bytes.
          bytes.push(value)

          // 3. If roughly 50ms have passed since these steps
          //    were last invoked, queue a task to fire a
          //    progress event called progress at fr.
          if (
            (
              fr[kLastProgressEventFired] === undefined ||
              Date.now() - fr[kLastProgressEventFired] >= 50
            ) &&
            !fr[kAborted]
          ) {
            fr[kLastProgressEventFired] = Date.now()
            queueMicrotask(() => {
              fireAProgressEvent('progress', fr)
            })
          }

          // 4. Set chunkPromise to the result of reading a
          //    chunk from stream with reader.
          chunkPromise = reader.read()
        } else if (done) {
          // 5. Otherwise, if chunkPromise is fulfilled with an
          //    object whose done property is true, queue a task
          //    to run the following steps and abort this algorithm:
          queueMicrotask(() => {
            // 1. Set fr’s state to "done".
            fr[kState] = 'done'

            // 2. Let result be the result of package data given
            //    bytes, type, blob’s type, and encodingName.
            try {
              const result = packageData(bytes, type, blob.type, encodingName)

              // 4. Else:

              if (fr[kAborted]) {
                return
              }

              // 1. Set fr’s result to result.
              fr[kResult] = result

              // 2. Fire a progress event called load at the fr.
              fireAProgressEvent('load', fr)
            } catch (error) {
              // 3. If package data threw an exception error:

              // 1. Set fr’s error to error.
              fr[kError] = error

              // 2. Fire a progress event called error at fr.
              fireAProgressEvent('error', fr)
            }

            // 5. If fr’s state is not "loading", fire a progress
            //    event called loadend at the fr.
            if (fr[kState] !== 'loading') {
              fireAProgressEvent('loadend', fr)
            }
          })

          break
        }
      } catch (error) {
        if (fr[kAborted]) {
          return
        }

        // 6. Otherwise, if chunkPromise is rejected with an
        //    error error, queue a task to run the following
        //    steps and abort this algorithm:
        queueMicrotask(() => {
          // 1. Set fr’s state to "done".
          fr[kState] = 'done'

          // 2. Set fr’s error to error.
          fr[kError] = error

          // 3. Fire a progress event called error at fr.
          fireAProgressEvent('error', fr)

          // 4. If fr’s state is not "loading", fire a progress
          //    event called loadend at fr.
          if (fr[kState] !== 'loading') {
            fireAProgressEvent('loadend', fr)
          }
        })

        break
      }
    }
  })()
}

/**
 * @see https://w3c.github.io/FileAPI/#fire-a-progress-event
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e The name of the event
 * @param {import('./filereader').FileReader} reader
 */
function fireAProgressEvent (e, reader) {
  // The progress event e does not bubble. e.bubbles must be false
  // The progress event e is NOT cancelable. e.cancelable must be false
  const event = new ProgressEvent(e, {
    bubbles: false,
    cancelable: false
  })

  reader.dispatchEvent(event)
}

/**
 * @see https://w3c.github.io/FileAPI/#blob-package-data
 * @param {Uint8Array[]} bytes
 * @param {string} type
 * @param {string?} mimeType
 * @param {string?} encodingName
 */
function packageData (bytes, type, mimeType, encodingName) {
  // 1. A Blob has an associated package data algorithm, given
  //    bytes, a type, a optional mimeType, and a optional
  //    encodingName, which switches on type and runs the
  //    associated steps:

  switch (type) {
    case 'DataURL': {
      // 1. Return bytes as a DataURL [RFC2397] subject to
      //    the considerations below:
      //  * Use mimeType as part of the Data URL if it is
      //    available in keeping with the Data URL
      //    specification [RFC2397].
      //  * If mimeType is not available return a Data URL
      //    without a media-type. [RFC2397].

      // https://datatracker.ietf.org/doc/html/rfc2397#section-3
      // dataurl    := "data:" [ mediatype ] [ ";base64" ] "," data
      // mediatype  := [ type "/" subtype ] *( ";" parameter )
      // data       := *urlchar
      // parameter  := attribute "=" value
      let dataURL = 'data:'

      const parsed = parseMIMEType(mimeType || 'application/octet-stream')

      if (parsed !== 'failure') {
        dataURL += serializeAMimeType(parsed)
      }

      dataURL += ';base64,'

      const decoder = new StringDecoder('latin1')

      for (const chunk of bytes) {
        dataURL += btoa(decoder.write(chunk))
      }

      dataURL += btoa(decoder.end())

      return dataURL
    }
    case 'Text': {
      // 1. Let encoding be failure
      let encoding = 'failure'

      // 2. If the encodingName is present, set encoding to the
      //    result of getting an encoding from encodingName.
      if (encodingName) {
        encoding = getEncoding(encodingName)
      }

      // 3. If encoding is failure, and mimeType is present:
      if (encoding === 'failure' && mimeType) {
        // 1. Let type be the result of parse a MIME type
        //    given mimeType.
        const type = parseMIMEType(mimeType)

        // 2. If type is not failure, set encoding to the result
        //    of getting an encoding from type’s parameters["charset"].
        if (type !== 'failure') {
          encoding = getEncoding(type.parameters.get('charset'))
        }
      }

      // 4. If encoding is failure, then set encoding to UTF-8.
      if (encoding === 'failure') {
        encoding = 'UTF-8'
      }

      // 5. Decode bytes using fallback encoding encoding, and
      //    return the result.
      return decode(bytes, encoding)
    }
    case 'ArrayBuffer': {
      // Return a new ArrayBuffer whose contents are bytes.
      const sequence = combineByteSequences(bytes)

      return sequence.buffer
    }
    case 'BinaryString': {
      // Return bytes as a binary string, in which every byte
      //  is represented by a code unit of equal value [0..255].
      let binaryString = ''

      const decoder = new StringDecoder('latin1')

      for (const chunk of bytes) {
        binaryString += decoder.write(chunk)
      }

      binaryString += decoder.end()

      return binaryString
    }
  }
}

/**
 * @see https://encoding.spec.whatwg.org/#decode
 * @param {Uint8Array[]} ioQueue
 * @param {string} encoding
 */
function decode (ioQueue, encoding) {
  const bytes = combineByteSequences(ioQueue)

  // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.
  const BOMEncoding = BOMSniffing(bytes)

  let slice = 0

  // 2. If BOMEncoding is non-null:
  if (BOMEncoding !== null) {
    // 1. Set encoding to BOMEncoding.
    encoding = BOMEncoding

    // 2. Read three bytes from ioQueue, if BOMEncoding is
    //    UTF-8; otherwise read two bytes.
    //    (Do nothing with those bytes.)
    slice = BOMEncoding === 'UTF-8' ? 3 : 2
  }

  // 3. Process a queue with an instance of encoding’s
  //    decoder, ioQueue, output, and "replacement".

  // 4. Return output.

  const sliced = bytes.slice(slice)
  return new TextDecoder(encoding).decode(sliced)
}

/**
 * @see https://encoding.spec.whatwg.org/#bom-sniff
 * @param {Uint8Array} ioQueue
 */
function BOMSniffing (ioQueue) {
  // 1. Let BOM be the result of peeking 3 bytes from ioQueue,
  //    converted to a byte sequence.
  const [a, b, c] = ioQueue

  // 2. For each of the rows in the table below, starting with
  //    the first one and going down, if BOM starts with the
  //    bytes given in the first column, then return the
  //    encoding given in the cell in the second column of that
  //    row. Otherwise, return null.
  if (a === 0xEF && b === 0xBB && c === 0xBF) {
    return 'UTF-8'
  } else if (a === 0xFE && b === 0xFF) {
    return 'UTF-16BE'
  } else if (a === 0xFF && b === 0xFE) {
    return 'UTF-16LE'
  }

  return null
}

/**
 * @param {Uint8Array[]} sequences
 */
function combineByteSequences (sequences) {
  const size = sequences.reduce((a, b) => {
    return a + b.byteLength
  }, 0)

  let offset = 0

  return sequences.reduce((a, b) => {
    a.set(b, offset)
    offset += b.byteLength
    return a
  }, new Uint8Array(size))
}

module.exports = {
  staticPropertyDescriptors,
  readOperation,
  fireAProgressEvent
}


/***/ }),

/***/ 9456:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


// We include a version number for the Dispatcher API. In case of breaking changes,
// this version number must be increased to avoid conflicts.
const globalDispatcher = Symbol.for('undici.globalDispatcher.1')
const { InvalidArgumentError } = __nccwpck_require__(1581)
const Agent = __nccwpck_require__(8603)

if (getGlobalDispatcher() === undefined) {
  setGlobalDispatcher(new Agent())
}

function setGlobalDispatcher (agent) {
  if (!agent || typeof agent.dispatch !== 'function') {
    throw new InvalidArgumentError('Argument agent must implement Agent')
  }
  Object.defineProperty(globalThis, globalDispatcher, {
    value: agent,
    writable: true,
    enumerable: false,
    configurable: false
  })
}

function getGlobalDispatcher () {
  return globalThis[globalDispatcher]
}

module.exports = {
  setGlobalDispatcher,
  getGlobalDispatcher
}


/***/ }),

/***/ 1858:
/***/ ((module) => {

"use strict";


module.exports = class DecoratorHandler {
  constructor (handler) {
    this.handler = handler
  }

  onConnect (...args) {
    return this.handler.onConnect(...args)
  }

  onError (...args) {
    return this.handler.onError(...args)
  }

  onUpgrade (...args) {
    return this.handler.onUpgrade(...args)
  }

  onHeaders (...args) {
    return this.handler.onHeaders(...args)
  }

  onData (...args) {
    return this.handler.onData(...args)
  }

  onComplete (...args) {
    return this.handler.onComplete(...args)
  }

  onBodySent (...args) {
    return this.handler.onBodySent(...args)
  }
}


/***/ }),

/***/ 3897:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const util = __nccwpck_require__(4606)
const { kBodyUsed } = __nccwpck_require__(5773)
const assert = __nccwpck_require__(2613)
const { InvalidArgumentError } = __nccwpck_require__(1581)
const EE = __nccwpck_require__(4434)

const redirectableStatusCodes = [300, 301, 302, 303, 307, 308]

const kBody = Symbol('body')

class BodyAsyncIterable {
  constructor (body) {
    this[kBody] = body
    this[kBodyUsed] = false
  }

  async * [Symbol.asyncIterator] () {
    assert(!this[kBodyUsed], 'disturbed')
    this[kBodyUsed] = true
    yield * this[kBody]
  }
}

class RedirectHandler {
  constructor (dispatch, maxRedirections, opts, handler) {
    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    util.validateHandler(handler, opts.method, opts.upgrade)

    this.dispatch = dispatch
    this.location = null
    this.abort = null
    this.opts = { ...opts, maxRedirections: 0 } // opts must be a copy
    this.maxRedirections = maxRedirections
    this.handler = handler
    this.history = []

    if (util.isStream(this.opts.body)) {
      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp
      // so that it can be dispatched again?
      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?
      if (util.bodyLength(this.opts.body) === 0) {
        this.opts.body
          .on('data', function () {
            assert(false)
          })
      }

      if (typeof this.opts.body.readableDidRead !== 'boolean') {
        this.opts.body[kBodyUsed] = false
        EE.prototype.on.call(this.opts.body, 'data', function () {
          this[kBodyUsed] = true
        })
      }
    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {
      // TODO (fix): We can't access ReadableStream internal state
      // to determine whether or not it has been disturbed. This is just
      // a workaround.
      this.opts.body = new BodyAsyncIterable(this.opts.body)
    } else if (
      this.opts.body &&
      typeof this.opts.body !== 'string' &&
      !ArrayBuffer.isView(this.opts.body) &&
      util.isIterable(this.opts.body)
    ) {
      // TODO: Should we allow re-using iterable if !this.opts.idempotent
      // or through some other flag?
      this.opts.body = new BodyAsyncIterable(this.opts.body)
    }
  }

  onConnect (abort) {
    this.abort = abort
    this.handler.onConnect(abort, { history: this.history })
  }

  onUpgrade (statusCode, headers, socket) {
    this.handler.onUpgrade(statusCode, headers, socket)
  }

  onError (error) {
    this.handler.onError(error)
  }

  onHeaders (statusCode, headers, resume, statusText) {
    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body)
      ? null
      : parseLocation(statusCode, headers)

    if (this.opts.origin) {
      this.history.push(new URL(this.opts.path, this.opts.origin))
    }

    if (!this.location) {
      return this.handler.onHeaders(statusCode, headers, resume, statusText)
    }

    const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)))
    const path = search ? `${pathname}${search}` : pathname

    // Remove headers referring to the original URL.
    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.
    // https://tools.ietf.org/html/rfc7231#section-6.4
    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin)
    this.opts.path = path
    this.opts.origin = origin
    this.opts.maxRedirections = 0
    this.opts.query = null

    // https://tools.ietf.org/html/rfc7231#section-6.4.4
    // In case of HTTP 303, always replace method to be either HEAD or GET
    if (statusCode === 303 && this.opts.method !== 'HEAD') {
      this.opts.method = 'GET'
      this.opts.body = null
    }
  }

  onData (chunk) {
    if (this.location) {
      /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response bodies.

        Redirection is used to serve the requested resource from another URL, so it is assumes that
        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.

        For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually
        (which means it's optional and not mandated) contain just an hyperlink to the value of
        the Location response header, so the body can be ignored safely.

        For status 300, which is "Multiple Choices", the spec mentions both generating a Location
        response header AND a response body with the other possible location to follow.
        Since the spec explicitily chooses not to specify a format for such body and leave it to
        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.
      */
    } else {
      return this.handler.onData(chunk)
    }
  }

  onComplete (trailers) {
    if (this.location) {
      /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections
        and neither are useful if present.

        See comment on onData method above for more detailed informations.
      */

      this.location = null
      this.abort = null

      this.dispatch(this.opts, this)
    } else {
      this.handler.onComplete(trailers)
    }
  }

  onBodySent (chunk) {
    if (this.handler.onBodySent) {
      this.handler.onBodySent(chunk)
    }
  }
}

function parseLocation (statusCode, headers) {
  if (redirectableStatusCodes.indexOf(statusCode) === -1) {
    return null
  }

  for (let i = 0; i < headers.length; i += 2) {
    if (headers[i].toString().toLowerCase() === 'location') {
      return headers[i + 1]
    }
  }
}

// https://tools.ietf.org/html/rfc7231#section-6.4.4
function shouldRemoveHeader (header, removeContent, unknownOrigin) {
  if (header.length === 4) {
    return util.headerNameToString(header) === 'host'
  }
  if (removeContent && util.headerNameToString(header).startsWith('content-')) {
    return true
  }
  if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
    const name = util.headerNameToString(header)
    return name === 'authorization' || name === 'cookie' || name === 'proxy-authorization'
  }
  return false
}

// https://tools.ietf.org/html/rfc7231#section-6.4
function cleanRequestHeaders (headers, removeContent, unknownOrigin) {
  const ret = []
  if (Array.isArray(headers)) {
    for (let i = 0; i < headers.length; i += 2) {
      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
        ret.push(headers[i], headers[i + 1])
      }
    }
  } else if (headers && typeof headers === 'object') {
    for (const key of Object.keys(headers)) {
      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
        ret.push(key, headers[key])
      }
    }
  } else {
    assert(headers == null, 'headers must be an object or an array')
  }
  return ret
}

module.exports = RedirectHandler


/***/ }),

/***/ 2483:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(2613)

const { kRetryHandlerDefaultRetry } = __nccwpck_require__(5773)
const { RequestRetryError } = __nccwpck_require__(1581)
const { isDisturbed, parseHeaders, parseRangeHeader } = __nccwpck_require__(4606)

function calculateRetryAfterHeader (retryAfter) {
  const current = Date.now()
  const diff = new Date(retryAfter).getTime() - current

  return diff
}

class RetryHandler {
  constructor (opts, handlers) {
    const { retryOptions, ...dispatchOpts } = opts
    const {
      // Retry scoped
      retry: retryFn,
      maxRetries,
      maxTimeout,
      minTimeout,
      timeoutFactor,
      // Response scoped
      methods,
      errorCodes,
      retryAfter,
      statusCodes
    } = retryOptions ?? {}

    this.dispatch = handlers.dispatch
    this.handler = handlers.handler
    this.opts = dispatchOpts
    this.abort = null
    this.aborted = false
    this.retryOpts = {
      retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],
      retryAfter: retryAfter ?? true,
      maxTimeout: maxTimeout ?? 30 * 1000, // 30s,
      timeout: minTimeout ?? 500, // .5s
      timeoutFactor: timeoutFactor ?? 2,
      maxRetries: maxRetries ?? 5,
      // What errors we should retry
      methods: methods ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],
      // Indicates which errors to retry
      statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
      // List of errors to retry
      errorCodes: errorCodes ?? [
        'ECONNRESET',
        'ECONNREFUSED',
        'ENOTFOUND',
        'ENETDOWN',
        'ENETUNREACH',
        'EHOSTDOWN',
        'EHOSTUNREACH',
        'EPIPE'
      ]
    }

    this.retryCount = 0
    this.start = 0
    this.end = null
    this.etag = null
    this.resume = null

    // Handle possible onConnect duplication
    this.handler.onConnect(reason => {
      this.aborted = true
      if (this.abort) {
        this.abort(reason)
      } else {
        this.reason = reason
      }
    })
  }

  onRequestSent () {
    if (this.handler.onRequestSent) {
      this.handler.onRequestSent()
    }
  }

  onUpgrade (statusCode, headers, socket) {
    if (this.handler.onUpgrade) {
      this.handler.onUpgrade(statusCode, headers, socket)
    }
  }

  onConnect (abort) {
    if (this.aborted) {
      abort(this.reason)
    } else {
      this.abort = abort
    }
  }

  onBodySent (chunk) {
    if (this.handler.onBodySent) return this.handler.onBodySent(chunk)
  }

  static [kRetryHandlerDefaultRetry] (err, { state, opts }, cb) {
    const { statusCode, code, headers } = err
    const { method, retryOptions } = opts
    const {
      maxRetries,
      timeout,
      maxTimeout,
      timeoutFactor,
      statusCodes,
      errorCodes,
      methods
    } = retryOptions
    let { counter, currentTimeout } = state

    currentTimeout =
      currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout

    // Any code that is not a Undici's originated and allowed to retry
    if (
      code &&
      code !== 'UND_ERR_REQ_RETRY' &&
      code !== 'UND_ERR_SOCKET' &&
      !errorCodes.includes(code)
    ) {
      cb(err)
      return
    }

    // If a set of method are provided and the current method is not in the list
    if (Array.isArray(methods) && !methods.includes(method)) {
      cb(err)
      return
    }

    // If a set of status code are provided and the current status code is not in the list
    if (
      statusCode != null &&
      Array.isArray(statusCodes) &&
      !statusCodes.includes(statusCode)
    ) {
      cb(err)
      return
    }

    // If we reached the max number of retries
    if (counter > maxRetries) {
      cb(err)
      return
    }

    let retryAfterHeader = headers != null && headers['retry-after']
    if (retryAfterHeader) {
      retryAfterHeader = Number(retryAfterHeader)
      retryAfterHeader = isNaN(retryAfterHeader)
        ? calculateRetryAfterHeader(retryAfterHeader)
        : retryAfterHeader * 1e3 // Retry-After is in seconds
    }

    const retryTimeout =
      retryAfterHeader > 0
        ? Math.min(retryAfterHeader, maxTimeout)
        : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout)

    state.currentTimeout = retryTimeout

    setTimeout(() => cb(null), retryTimeout)
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const headers = parseHeaders(rawHeaders)

    this.retryCount += 1

    if (statusCode >= 300) {
      this.abort(
        new RequestRetryError('Request failed', statusCode, {
          headers,
          count: this.retryCount
        })
      )
      return false
    }

    // Checkpoint for resume from where we left it
    if (this.resume != null) {
      this.resume = null

      if (statusCode !== 206) {
        return true
      }

      const contentRange = parseRangeHeader(headers['content-range'])
      // If no content range
      if (!contentRange) {
        this.abort(
          new RequestRetryError('Content-Range mismatch', statusCode, {
            headers,
            count: this.retryCount
          })
        )
        return false
      }

      // Let's start with a weak etag check
      if (this.etag != null && this.etag !== headers.etag) {
        this.abort(
          new RequestRetryError('ETag mismatch', statusCode, {
            headers,
            count: this.retryCount
          })
        )
        return false
      }

      const { start, size, end = size } = contentRange

      assert(this.start === start, 'content-range mismatch')
      assert(this.end == null || this.end === end, 'content-range mismatch')

      this.resume = resume
      return true
    }

    if (this.end == null) {
      if (statusCode === 206) {
        // First time we receive 206
        const range = parseRangeHeader(headers['content-range'])

        if (range == null) {
          return this.handler.onHeaders(
            statusCode,
            rawHeaders,
            resume,
            statusMessage
          )
        }

        const { start, size, end = size } = range

        assert(
          start != null && Number.isFinite(start) && this.start !== start,
          'content-range mismatch'
        )
        assert(Number.isFinite(start))
        assert(
          end != null && Number.isFinite(end) && this.end !== end,
          'invalid content-length'
        )

        this.start = start
        this.end = end
      }

      // We make our best to checkpoint the body for further range headers
      if (this.end == null) {
        const contentLength = headers['content-length']
        this.end = contentLength != null ? Number(contentLength) : null
      }

      assert(Number.isFinite(this.start))
      assert(
        this.end == null || Number.isFinite(this.end),
        'invalid content-length'
      )

      this.resume = resume
      this.etag = headers.etag != null ? headers.etag : null

      return this.handler.onHeaders(
        statusCode,
        rawHeaders,
        resume,
        statusMessage
      )
    }

    const err = new RequestRetryError('Request failed', statusCode, {
      headers,
      count: this.retryCount
    })

    this.abort(err)

    return false
  }

  onData (chunk) {
    this.start += chunk.length

    return this.handler.onData(chunk)
  }

  onComplete (rawTrailers) {
    this.retryCount = 0
    return this.handler.onComplete(rawTrailers)
  }

  onError (err) {
    if (this.aborted || isDisturbed(this.opts.body)) {
      return this.handler.onError(err)
    }

    this.retryOpts.retry(
      err,
      {
        state: { counter: this.retryCount++, currentTimeout: this.retryAfter },
        opts: { retryOptions: this.retryOpts, ...this.opts }
      },
      onRetry.bind(this)
    )

    function onRetry (err) {
      if (err != null || this.aborted || isDisturbed(this.opts.body)) {
        return this.handler.onError(err)
      }

      if (this.start !== 0) {
        this.opts = {
          ...this.opts,
          headers: {
            ...this.opts.headers,
            range: `bytes=${this.start}-${this.end ?? ''}`
          }
        }
      }

      try {
        this.dispatch(this.opts, this)
      } catch (err) {
        this.handler.onError(err)
      }
    }
  }
}

module.exports = RetryHandler


/***/ }),

/***/ 9509:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const RedirectHandler = __nccwpck_require__(3897)

function createRedirectInterceptor ({ maxRedirections: defaultMaxRedirections }) {
  return (dispatch) => {
    return function Intercept (opts, handler) {
      const { maxRedirections = defaultMaxRedirections } = opts

      if (!maxRedirections) {
        return dispatch(opts, handler)
      }

      const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler)
      opts = { ...opts, maxRedirections: 0 } // Stop sub dispatcher from also redirecting.
      return dispatch(opts, redirectHandler)
    }
  }
}

module.exports = createRedirectInterceptor


/***/ }),

/***/ 862:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
const utils_1 = __nccwpck_require__(1910);
// C headers
var ERROR;
(function (ERROR) {
    ERROR[ERROR["OK"] = 0] = "OK";
    ERROR[ERROR["INTERNAL"] = 1] = "INTERNAL";
    ERROR[ERROR["STRICT"] = 2] = "STRICT";
    ERROR[ERROR["LF_EXPECTED"] = 3] = "LF_EXPECTED";
    ERROR[ERROR["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
    ERROR[ERROR["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
    ERROR[ERROR["INVALID_METHOD"] = 6] = "INVALID_METHOD";
    ERROR[ERROR["INVALID_URL"] = 7] = "INVALID_URL";
    ERROR[ERROR["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
    ERROR[ERROR["INVALID_VERSION"] = 9] = "INVALID_VERSION";
    ERROR[ERROR["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
    ERROR[ERROR["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
    ERROR[ERROR["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
    ERROR[ERROR["INVALID_STATUS"] = 13] = "INVALID_STATUS";
    ERROR[ERROR["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
    ERROR[ERROR["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
    ERROR[ERROR["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
    ERROR[ERROR["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
    ERROR[ERROR["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
    ERROR[ERROR["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
    ERROR[ERROR["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
    ERROR[ERROR["PAUSED"] = 21] = "PAUSED";
    ERROR[ERROR["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
    ERROR[ERROR["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
    ERROR[ERROR["USER"] = 24] = "USER";
})(ERROR = exports.ERROR || (exports.ERROR = {}));
var TYPE;
(function (TYPE) {
    TYPE[TYPE["BOTH"] = 0] = "BOTH";
    TYPE[TYPE["REQUEST"] = 1] = "REQUEST";
    TYPE[TYPE["RESPONSE"] = 2] = "RESPONSE";
})(TYPE = exports.TYPE || (exports.TYPE = {}));
var FLAGS;
(function (FLAGS) {
    FLAGS[FLAGS["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
    FLAGS[FLAGS["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
    FLAGS[FLAGS["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
    FLAGS[FLAGS["CHUNKED"] = 8] = "CHUNKED";
    FLAGS[FLAGS["UPGRADE"] = 16] = "UPGRADE";
    FLAGS[FLAGS["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
    FLAGS[FLAGS["SKIPBODY"] = 64] = "SKIPBODY";
    FLAGS[FLAGS["TRAILING"] = 128] = "TRAILING";
    // 1 << 8 is unused
    FLAGS[FLAGS["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
var LENIENT_FLAGS;
(function (LENIENT_FLAGS) {
    LENIENT_FLAGS[LENIENT_FLAGS["HEADERS"] = 1] = "HEADERS";
    LENIENT_FLAGS[LENIENT_FLAGS["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
    LENIENT_FLAGS[LENIENT_FLAGS["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
var METHODS;
(function (METHODS) {
    METHODS[METHODS["DELETE"] = 0] = "DELETE";
    METHODS[METHODS["GET"] = 1] = "GET";
    METHODS[METHODS["HEAD"] = 2] = "HEAD";
    METHODS[METHODS["POST"] = 3] = "POST";
    METHODS[METHODS["PUT"] = 4] = "PUT";
    /* pathological */
    METHODS[METHODS["CONNECT"] = 5] = "CONNECT";
    METHODS[METHODS["OPTIONS"] = 6] = "OPTIONS";
    METHODS[METHODS["TRACE"] = 7] = "TRACE";
    /* WebDAV */
    METHODS[METHODS["COPY"] = 8] = "COPY";
    METHODS[METHODS["LOCK"] = 9] = "LOCK";
    METHODS[METHODS["MKCOL"] = 10] = "MKCOL";
    METHODS[METHODS["MOVE"] = 11] = "MOVE";
    METHODS[METHODS["PROPFIND"] = 12] = "PROPFIND";
    METHODS[METHODS["PROPPATCH"] = 13] = "PROPPATCH";
    METHODS[METHODS["SEARCH"] = 14] = "SEARCH";
    METHODS[METHODS["UNLOCK"] = 15] = "UNLOCK";
    METHODS[METHODS["BIND"] = 16] = "BIND";
    METHODS[METHODS["REBIND"] = 17] = "REBIND";
    METHODS[METHODS["UNBIND"] = 18] = "UNBIND";
    METHODS[METHODS["ACL"] = 19] = "ACL";
    /* subversion */
    METHODS[METHODS["REPORT"] = 20] = "REPORT";
    METHODS[METHODS["MKACTIVITY"] = 21] = "MKACTIVITY";
    METHODS[METHODS["CHECKOUT"] = 22] = "CHECKOUT";
    METHODS[METHODS["MERGE"] = 23] = "MERGE";
    /* upnp */
    METHODS[METHODS["M-SEARCH"] = 24] = "M-SEARCH";
    METHODS[METHODS["NOTIFY"] = 25] = "NOTIFY";
    METHODS[METHODS["SUBSCRIBE"] = 26] = "SUBSCRIBE";
    METHODS[METHODS["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
    /* RFC-5789 */
    METHODS[METHODS["PATCH"] = 28] = "PATCH";
    METHODS[METHODS["PURGE"] = 29] = "PURGE";
    /* CalDAV */
    METHODS[METHODS["MKCALENDAR"] = 30] = "MKCALENDAR";
    /* RFC-2068, section 19.6.1.2 */
    METHODS[METHODS["LINK"] = 31] = "LINK";
    METHODS[METHODS["UNLINK"] = 32] = "UNLINK";
    /* icecast */
    METHODS[METHODS["SOURCE"] = 33] = "SOURCE";
    /* RFC-7540, section 11.6 */
    METHODS[METHODS["PRI"] = 34] = "PRI";
    /* RFC-2326 RTSP */
    METHODS[METHODS["DESCRIBE"] = 35] = "DESCRIBE";
    METHODS[METHODS["ANNOUNCE"] = 36] = "ANNOUNCE";
    METHODS[METHODS["SETUP"] = 37] = "SETUP";
    METHODS[METHODS["PLAY"] = 38] = "PLAY";
    METHODS[METHODS["PAUSE"] = 39] = "PAUSE";
    METHODS[METHODS["TEARDOWN"] = 40] = "TEARDOWN";
    METHODS[METHODS["GET_PARAMETER"] = 41] = "GET_PARAMETER";
    METHODS[METHODS["SET_PARAMETER"] = 42] = "SET_PARAMETER";
    METHODS[METHODS["REDIRECT"] = 43] = "REDIRECT";
    METHODS[METHODS["RECORD"] = 44] = "RECORD";
    /* RAOP */
    METHODS[METHODS["FLUSH"] = 45] = "FLUSH";
})(METHODS = exports.METHODS || (exports.METHODS = {}));
exports.METHODS_HTTP = [
    METHODS.DELETE,
    METHODS.GET,
    METHODS.HEAD,
    METHODS.POST,
    METHODS.PUT,
    METHODS.CONNECT,
    METHODS.OPTIONS,
    METHODS.TRACE,
    METHODS.COPY,
    METHODS.LOCK,
    METHODS.MKCOL,
    METHODS.MOVE,
    METHODS.PROPFIND,
    METHODS.PROPPATCH,
    METHODS.SEARCH,
    METHODS.UNLOCK,
    METHODS.BIND,
    METHODS.REBIND,
    METHODS.UNBIND,
    METHODS.ACL,
    METHODS.REPORT,
    METHODS.MKACTIVITY,
    METHODS.CHECKOUT,
    METHODS.MERGE,
    METHODS['M-SEARCH'],
    METHODS.NOTIFY,
    METHODS.SUBSCRIBE,
    METHODS.UNSUBSCRIBE,
    METHODS.PATCH,
    METHODS.PURGE,
    METHODS.MKCALENDAR,
    METHODS.LINK,
    METHODS.UNLINK,
    METHODS.PRI,
    // TODO(indutny): should we allow it with HTTP?
    METHODS.SOURCE,
];
exports.METHODS_ICE = [
    METHODS.SOURCE,
];
exports.METHODS_RTSP = [
    METHODS.OPTIONS,
    METHODS.DESCRIBE,
    METHODS.ANNOUNCE,
    METHODS.SETUP,
    METHODS.PLAY,
    METHODS.PAUSE,
    METHODS.TEARDOWN,
    METHODS.GET_PARAMETER,
    METHODS.SET_PARAMETER,
    METHODS.REDIRECT,
    METHODS.RECORD,
    METHODS.FLUSH,
    // For AirPlay
    METHODS.GET,
    METHODS.POST,
];
exports.METHOD_MAP = utils_1.enumToMap(METHODS);
exports.H_METHOD_MAP = {};
Object.keys(exports.METHOD_MAP).forEach((key) => {
    if (/^H/.test(key)) {
        exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
    }
});
var FINISH;
(function (FINISH) {
    FINISH[FINISH["SAFE"] = 0] = "SAFE";
    FINISH[FINISH["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
    FINISH[FINISH["UNSAFE"] = 2] = "UNSAFE";
})(FINISH = exports.FINISH || (exports.FINISH = {}));
exports.ALPHA = [];
for (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {
    // Upper case
    exports.ALPHA.push(String.fromCharCode(i));
    // Lower case
    exports.ALPHA.push(String.fromCharCode(i + 0x20));
}
exports.NUM_MAP = {
    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,
    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,
};
exports.HEX_MAP = {
    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,
    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,
    A: 0XA, B: 0XB, C: 0XC, D: 0XD, E: 0XE, F: 0XF,
    a: 0xa, b: 0xb, c: 0xc, d: 0xd, e: 0xe, f: 0xf,
};
exports.NUM = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
];
exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
exports.MARK = ['-', '_', '.', '!', '~', '*', '\'', '(', ')'];
exports.USERINFO_CHARS = exports.ALPHANUM
    .concat(exports.MARK)
    .concat(['%', ';', ':', '&', '=', '+', '$', ',']);
// TODO(indutny): use RFC
exports.STRICT_URL_CHAR = [
    '!', '"', '$', '%', '&', '\'',
    '(', ')', '*', '+', ',', '-', '.', '/',
    ':', ';', '<', '=', '>',
    '@', '[', '\\', ']', '^', '_',
    '`',
    '{', '|', '}', '~',
].concat(exports.ALPHANUM);
exports.URL_CHAR = exports.STRICT_URL_CHAR
    .concat(['\t', '\f']);
// All characters with 0x80 bit set to 1
for (let i = 0x80; i <= 0xff; i++) {
    exports.URL_CHAR.push(i);
}
exports.HEX = exports.NUM.concat(['a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F']);
/* Tokens as defined by rfc 2616. Also lowercases them.
 *        token       = 1*<any CHAR except CTLs or separators>
 *     separators     = "(" | ")" | "<" | ">" | "@"
 *                    | "," | ";" | ":" | "\" | <">
 *                    | "/" | "[" | "]" | "?" | "="
 *                    | "{" | "}" | SP | HT
 */
exports.STRICT_TOKEN = [
    '!', '#', '$', '%', '&', '\'',
    '*', '+', '-', '.',
    '^', '_', '`',
    '|', '~',
].concat(exports.ALPHANUM);
exports.TOKEN = exports.STRICT_TOKEN.concat([' ']);
/*
 * Verify that a char is a valid visible (printable) US-ASCII
 * character or %x80-FF
 */
exports.HEADER_CHARS = ['\t'];
for (let i = 32; i <= 255; i++) {
    if (i !== 127) {
        exports.HEADER_CHARS.push(i);
    }
}
// ',' = \x44
exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
exports.MAJOR = exports.NUM_MAP;
exports.MINOR = exports.MAJOR;
var HEADER_STATE;
(function (HEADER_STATE) {
    HEADER_STATE[HEADER_STATE["GENERAL"] = 0] = "GENERAL";
    HEADER_STATE[HEADER_STATE["CONNECTION"] = 1] = "CONNECTION";
    HEADER_STATE[HEADER_STATE["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
    HEADER_STATE[HEADER_STATE["UPGRADE"] = 4] = "UPGRADE";
    HEADER_STATE[HEADER_STATE["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
    HEADER_STATE[HEADER_STATE["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
    HEADER_STATE[HEADER_STATE["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
exports.SPECIAL_HEADERS = {
    'connection': HEADER_STATE.CONNECTION,
    'content-length': HEADER_STATE.CONTENT_LENGTH,
    'proxy-connection': HEADER_STATE.CONNECTION,
    'transfer-encoding': HEADER_STATE.TRANSFER_ENCODING,
    'upgrade': HEADER_STATE.UPGRADE,
};
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ 8484:
/***/ ((module) => {

module.exports = ''


/***/ }),

/***/ 652:
/***/ ((module) => {

module.exports = ''


/***/ }),

/***/ 1910:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enumToMap = void 0;
function enumToMap(obj) {
    const res = {};
    Object.keys(obj).forEach((key) => {
        const value = obj[key];
        if (typeof value === 'number') {
            res[key] = value;
        }
    });
    return res;
}
exports.enumToMap = enumToMap;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 5343:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kClients } = __nccwpck_require__(5773)
const Agent = __nccwpck_require__(8603)
const {
  kAgent,
  kMockAgentSet,
  kMockAgentGet,
  kDispatches,
  kIsMockActive,
  kNetConnect,
  kGetNetConnect,
  kOptions,
  kFactory
} = __nccwpck_require__(5367)
const MockClient = __nccwpck_require__(4163)
const MockPool = __nccwpck_require__(3722)
const { matchValue, buildMockOptions } = __nccwpck_require__(939)
const { InvalidArgumentError, UndiciError } = __nccwpck_require__(1581)
const Dispatcher = __nccwpck_require__(3553)
const Pluralizer = __nccwpck_require__(1315)
const PendingInterceptorsFormatter = __nccwpck_require__(6584)

class FakeWeakRef {
  constructor (value) {
    this.value = value
  }

  deref () {
    return this.value
  }
}

class MockAgent extends Dispatcher {
  constructor (opts) {
    super(opts)

    this[kNetConnect] = true
    this[kIsMockActive] = true

    // Instantiate Agent and encapsulate
    if ((opts && opts.agent && typeof opts.agent.dispatch !== 'function')) {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }
    const agent = opts && opts.agent ? opts.agent : new Agent(opts)
    this[kAgent] = agent

    this[kClients] = agent[kClients]
    this[kOptions] = buildMockOptions(opts)
  }

  get (origin) {
    let dispatcher = this[kMockAgentGet](origin)

    if (!dispatcher) {
      dispatcher = this[kFactory](origin)
      this[kMockAgentSet](origin, dispatcher)
    }
    return dispatcher
  }

  dispatch (opts, handler) {
    // Call MockAgent.get to perform additional setup before dispatching as normal
    this.get(opts.origin)
    return this[kAgent].dispatch(opts, handler)
  }

  async close () {
    await this[kAgent].close()
    this[kClients].clear()
  }

  deactivate () {
    this[kIsMockActive] = false
  }

  activate () {
    this[kIsMockActive] = true
  }

  enableNetConnect (matcher) {
    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {
      if (Array.isArray(this[kNetConnect])) {
        this[kNetConnect].push(matcher)
      } else {
        this[kNetConnect] = [matcher]
      }
    } else if (typeof matcher === 'undefined') {
      this[kNetConnect] = true
    } else {
      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.')
    }
  }

  disableNetConnect () {
    this[kNetConnect] = false
  }

  // This is required to bypass issues caused by using global symbols - see:
  // https://github.com/nodejs/undici/issues/1447
  get isMockActive () {
    return this[kIsMockActive]
  }

  [kMockAgentSet] (origin, dispatcher) {
    this[kClients].set(origin, new FakeWeakRef(dispatcher))
  }

  [kFactory] (origin) {
    const mockOptions = Object.assign({ agent: this }, this[kOptions])
    return this[kOptions] && this[kOptions].connections === 1
      ? new MockClient(origin, mockOptions)
      : new MockPool(origin, mockOptions)
  }

  [kMockAgentGet] (origin) {
    // First check if we can immediately find it
    const ref = this[kClients].get(origin)
    if (ref) {
      return ref.deref()
    }

    // If the origin is not a string create a dummy parent pool and return to user
    if (typeof origin !== 'string') {
      const dispatcher = this[kFactory]('http://localhost:9999')
      this[kMockAgentSet](origin, dispatcher)
      return dispatcher
    }

    // If we match, create a pool and assign the same dispatches
    for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
      const nonExplicitDispatcher = nonExplicitRef.deref()
      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {
        const dispatcher = this[kFactory](origin)
        this[kMockAgentSet](origin, dispatcher)
        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches]
        return dispatcher
      }
    }
  }

  [kGetNetConnect] () {
    return this[kNetConnect]
  }

  pendingInterceptors () {
    const mockAgentClients = this[kClients]

    return Array.from(mockAgentClients.entries())
      .flatMap(([origin, scope]) => scope.deref()[kDispatches].map(dispatch => ({ ...dispatch, origin })))
      .filter(({ pending }) => pending)
  }

  assertNoPendingInterceptors ({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
    const pending = this.pendingInterceptors()

    if (pending.length === 0) {
      return
    }

    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length)

    throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim())
  }
}

module.exports = MockAgent


/***/ }),

/***/ 4163:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { promisify } = __nccwpck_require__(9023)
const Client = __nccwpck_require__(439)
const { buildMockDispatch } = __nccwpck_require__(939)
const {
  kDispatches,
  kMockAgent,
  kClose,
  kOriginalClose,
  kOrigin,
  kOriginalDispatch,
  kConnected
} = __nccwpck_require__(5367)
const { MockInterceptor } = __nccwpck_require__(3445)
const Symbols = __nccwpck_require__(5773)
const { InvalidArgumentError } = __nccwpck_require__(1581)

/**
 * MockClient provides an API that extends the Client to influence the mockDispatches.
 */
class MockClient extends Client {
  constructor (origin, opts) {
    super(origin, opts)

    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }

    this[kMockAgent] = opts.agent
    this[kOrigin] = origin
    this[kDispatches] = []
    this[kConnected] = 1
    this[kOriginalDispatch] = this.dispatch
    this[kOriginalClose] = this.close.bind(this)

    this.dispatch = buildMockDispatch.call(this)
    this.close = this[kClose]
  }

  get [Symbols.kConnected] () {
    return this[kConnected]
  }

  /**
   * Sets up the base interceptor for mocking replies from undici.
   */
  intercept (opts) {
    return new MockInterceptor(opts, this[kDispatches])
  }

  async [kClose] () {
    await promisify(this[kOriginalClose])()
    this[kConnected] = 0
    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])
  }
}

module.exports = MockClient


/***/ }),

/***/ 2255:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { UndiciError } = __nccwpck_require__(1581)

class MockNotMatchedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, MockNotMatchedError)
    this.name = 'MockNotMatchedError'
    this.message = message || 'The request does not match any registered mock dispatches'
    this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED'
  }
}

module.exports = {
  MockNotMatchedError
}


/***/ }),

/***/ 3445:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { getResponseData, buildKey, addMockDispatch } = __nccwpck_require__(939)
const {
  kDispatches,
  kDispatchKey,
  kDefaultHeaders,
  kDefaultTrailers,
  kContentLength,
  kMockDispatch
} = __nccwpck_require__(5367)
const { InvalidArgumentError } = __nccwpck_require__(1581)
const { buildURL } = __nccwpck_require__(4606)

/**
 * Defines the scope API for an interceptor reply
 */
class MockScope {
  constructor (mockDispatch) {
    this[kMockDispatch] = mockDispatch
  }

  /**
   * Delay a reply by a set amount in ms.
   */
  delay (waitInMs) {
    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {
      throw new InvalidArgumentError('waitInMs must be a valid integer > 0')
    }

    this[kMockDispatch].delay = waitInMs
    return this
  }

  /**
   * For a defined reply, never mark as consumed.
   */
  persist () {
    this[kMockDispatch].persist = true
    return this
  }

  /**
   * Allow one to define a reply for a set amount of matching requests.
   */
  times (repeatTimes) {
    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0')
    }

    this[kMockDispatch].times = repeatTimes
    return this
  }
}

/**
 * Defines an interceptor for a Mock
 */
class MockInterceptor {
  constructor (opts, mockDispatches) {
    if (typeof opts !== 'object') {
      throw new InvalidArgumentError('opts must be an object')
    }
    if (typeof opts.path === 'undefined') {
      throw new InvalidArgumentError('opts.path must be defined')
    }
    if (typeof opts.method === 'undefined') {
      opts.method = 'GET'
    }
    // See https://github.com/nodejs/undici/issues/1245
    // As per RFC 3986, clients are not supposed to send URI
    // fragments to servers when they retrieve a document,
    if (typeof opts.path === 'string') {
      if (opts.query) {
        opts.path = buildURL(opts.path, opts.query)
      } else {
        // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811
        const parsedURL = new URL(opts.path, 'data://')
        opts.path = parsedURL.pathname + parsedURL.search
      }
    }
    if (typeof opts.method === 'string') {
      opts.method = opts.method.toUpperCase()
    }

    this[kDispatchKey] = buildKey(opts)
    this[kDispatches] = mockDispatches
    this[kDefaultHeaders] = {}
    this[kDefaultTrailers] = {}
    this[kContentLength] = false
  }

  createMockScopeDispatchData (statusCode, data, responseOptions = {}) {
    const responseData = getResponseData(data)
    const contentLength = this[kContentLength] ? { 'content-length': responseData.length } : {}
    const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers }
    const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers }

    return { statusCode, data, headers, trailers }
  }

  validateReplyParameters (statusCode, data, responseOptions) {
    if (typeof statusCode === 'undefined') {
      throw new InvalidArgumentError('statusCode must be defined')
    }
    if (typeof data === 'undefined') {
      throw new InvalidArgumentError('data must be defined')
    }
    if (typeof responseOptions !== 'object') {
      throw new InvalidArgumentError('responseOptions must be an object')
    }
  }

  /**
   * Mock an undici request with a defined reply.
   */
  reply (replyData) {
    // Values of reply aren't available right now as they
    // can only be available when the reply callback is invoked.
    if (typeof replyData === 'function') {
      // We'll first wrap the provided callback in another function,
      // this function will properly resolve the data from the callback
      // when invoked.
      const wrappedDefaultsCallback = (opts) => {
        // Our reply options callback contains the parameter for statusCode, data and options.
        const resolvedData = replyData(opts)

        // Check if it is in the right format
        if (typeof resolvedData !== 'object') {
          throw new InvalidArgumentError('reply options callback must return an object')
        }

        const { statusCode, data = '', responseOptions = {} } = resolvedData
        this.validateReplyParameters(statusCode, data, responseOptions)
        // Since the values can be obtained immediately we return them
        // from this higher order function that will be resolved later.
        return {
          ...this.createMockScopeDispatchData(statusCode, data, responseOptions)
        }
      }

      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.
      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback)
      return new MockScope(newMockDispatch)
    }

    // We can have either one or three parameters, if we get here,
    // we should have 1-3 parameters. So we spread the arguments of
    // this function to obtain the parameters, since replyData will always
    // just be the statusCode.
    const [statusCode, data = '', responseOptions = {}] = [...arguments]
    this.validateReplyParameters(statusCode, data, responseOptions)

    // Send in-already provided data like usual
    const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions)
    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData)
    return new MockScope(newMockDispatch)
  }

  /**
   * Mock an undici request with a defined error.
   */
  replyWithError (error) {
    if (typeof error === 'undefined') {
      throw new InvalidArgumentError('error must be defined')
    }

    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error })
    return new MockScope(newMockDispatch)
  }

  /**
   * Set default reply headers on the interceptor for subsequent replies
   */
  defaultReplyHeaders (headers) {
    if (typeof headers === 'undefined') {
      throw new InvalidArgumentError('headers must be defined')
    }

    this[kDefaultHeaders] = headers
    return this
  }

  /**
   * Set default reply trailers on the interceptor for subsequent replies
   */
  defaultReplyTrailers (trailers) {
    if (typeof trailers === 'undefined') {
      throw new InvalidArgumentError('trailers must be defined')
    }

    this[kDefaultTrailers] = trailers
    return this
  }

  /**
   * Set reply content length header for replies on the interceptor
   */
  replyContentLength () {
    this[kContentLength] = true
    return this
  }
}

module.exports.MockInterceptor = MockInterceptor
module.exports.MockScope = MockScope


/***/ }),

/***/ 3722:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { promisify } = __nccwpck_require__(9023)
const Pool = __nccwpck_require__(6086)
const { buildMockDispatch } = __nccwpck_require__(939)
const {
  kDispatches,
  kMockAgent,
  kClose,
  kOriginalClose,
  kOrigin,
  kOriginalDispatch,
  kConnected
} = __nccwpck_require__(5367)
const { MockInterceptor } = __nccwpck_require__(3445)
const Symbols = __nccwpck_require__(5773)
const { InvalidArgumentError } = __nccwpck_require__(1581)

/**
 * MockPool provides an API that extends the Pool to influence the mockDispatches.
 */
class MockPool extends Pool {
  constructor (origin, opts) {
    super(origin, opts)

    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }

    this[kMockAgent] = opts.agent
    this[kOrigin] = origin
    this[kDispatches] = []
    this[kConnected] = 1
    this[kOriginalDispatch] = this.dispatch
    this[kOriginalClose] = this.close.bind(this)

    this.dispatch = buildMockDispatch.call(this)
    this.close = this[kClose]
  }

  get [Symbols.kConnected] () {
    return this[kConnected]
  }

  /**
   * Sets up the base interceptor for mocking replies from undici.
   */
  intercept (opts) {
    return new MockInterceptor(opts, this[kDispatches])
  }

  async [kClose] () {
    await promisify(this[kOriginalClose])()
    this[kConnected] = 0
    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])
  }
}

module.exports = MockPool


/***/ }),

/***/ 5367:
/***/ ((module) => {

"use strict";


module.exports = {
  kAgent: Symbol('agent'),
  kOptions: Symbol('options'),
  kFactory: Symbol('factory'),
  kDispatches: Symbol('dispatches'),
  kDispatchKey: Symbol('dispatch key'),
  kDefaultHeaders: Symbol('default headers'),
  kDefaultTrailers: Symbol('default trailers'),
  kContentLength: Symbol('content length'),
  kMockAgent: Symbol('mock agent'),
  kMockAgentSet: Symbol('mock agent set'),
  kMockAgentGet: Symbol('mock agent get'),
  kMockDispatch: Symbol('mock dispatch'),
  kClose: Symbol('close'),
  kOriginalClose: Symbol('original agent close'),
  kOrigin: Symbol('origin'),
  kIsMockActive: Symbol('is mock active'),
  kNetConnect: Symbol('net connect'),
  kGetNetConnect: Symbol('get net connect'),
  kConnected: Symbol('connected')
}


/***/ }),

/***/ 939:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { MockNotMatchedError } = __nccwpck_require__(2255)
const {
  kDispatches,
  kMockAgent,
  kOriginalDispatch,
  kOrigin,
  kGetNetConnect
} = __nccwpck_require__(5367)
const { buildURL, nop } = __nccwpck_require__(4606)
const { STATUS_CODES } = __nccwpck_require__(8611)
const {
  types: {
    isPromise
  }
} = __nccwpck_require__(9023)

function matchValue (match, value) {
  if (typeof match === 'string') {
    return match === value
  }
  if (match instanceof RegExp) {
    return match.test(value)
  }
  if (typeof match === 'function') {
    return match(value) === true
  }
  return false
}

function lowerCaseEntries (headers) {
  return Object.fromEntries(
    Object.entries(headers).map(([headerName, headerValue]) => {
      return [headerName.toLocaleLowerCase(), headerValue]
    })
  )
}

/**
 * @param {import('../../index').Headers|string[]|Record<string, string>} headers
 * @param {string} key
 */
function getHeaderByName (headers, key) {
  if (Array.isArray(headers)) {
    for (let i = 0; i < headers.length; i += 2) {
      if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
        return headers[i + 1]
      }
    }

    return undefined
  } else if (typeof headers.get === 'function') {
    return headers.get(key)
  } else {
    return lowerCaseEntries(headers)[key.toLocaleLowerCase()]
  }
}

/** @param {string[]} headers */
function buildHeadersFromArray (headers) { // fetch HeadersList
  const clone = headers.slice()
  const entries = []
  for (let index = 0; index < clone.length; index += 2) {
    entries.push([clone[index], clone[index + 1]])
  }
  return Object.fromEntries(entries)
}

function matchHeaders (mockDispatch, headers) {
  if (typeof mockDispatch.headers === 'function') {
    if (Array.isArray(headers)) { // fetch HeadersList
      headers = buildHeadersFromArray(headers)
    }
    return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {})
  }
  if (typeof mockDispatch.headers === 'undefined') {
    return true
  }
  if (typeof headers !== 'object' || typeof mockDispatch.headers !== 'object') {
    return false
  }

  for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)) {
    const headerValue = getHeaderByName(headers, matchHeaderName)

    if (!matchValue(matchHeaderValue, headerValue)) {
      return false
    }
  }
  return true
}

function safeUrl (path) {
  if (typeof path !== 'string') {
    return path
  }

  const pathSegments = path.split('?')

  if (pathSegments.length !== 2) {
    return path
  }

  const qp = new URLSearchParams(pathSegments.pop())
  qp.sort()
  return [...pathSegments, qp.toString()].join('?')
}

function matchKey (mockDispatch, { path, method, body, headers }) {
  const pathMatch = matchValue(mockDispatch.path, path)
  const methodMatch = matchValue(mockDispatch.method, method)
  const bodyMatch = typeof mockDispatch.body !== 'undefined' ? matchValue(mockDispatch.body, body) : true
  const headersMatch = matchHeaders(mockDispatch, headers)
  return pathMatch && methodMatch && bodyMatch && headersMatch
}

function getResponseData (data) {
  if (Buffer.isBuffer(data)) {
    return data
  } else if (typeof data === 'object') {
    return JSON.stringify(data)
  } else {
    return data.toString()
  }
}

function getMockDispatch (mockDispatches, key) {
  const basePath = key.query ? buildURL(key.path, key.query) : key.path
  const resolvedPath = typeof basePath === 'string' ? safeUrl(basePath) : basePath

  // Match path
  let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`)
  }

  // Match method
  matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`)
  }

  // Match body
  matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== 'undefined' ? matchValue(body, key.body) : true)
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`)
  }

  // Match headers
  matchedMockDispatches = matchedMockDispatches.filter((mockDispatch) => matchHeaders(mockDispatch, key.headers))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === 'object' ? JSON.stringify(key.headers) : key.headers}'`)
  }

  return matchedMockDispatches[0]
}

function addMockDispatch (mockDispatches, key, data) {
  const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false }
  const replyData = typeof data === 'function' ? { callback: data } : { ...data }
  const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } }
  mockDispatches.push(newMockDispatch)
  return newMockDispatch
}

function deleteMockDispatch (mockDispatches, key) {
  const index = mockDispatches.findIndex(dispatch => {
    if (!dispatch.consumed) {
      return false
    }
    return matchKey(dispatch, key)
  })
  if (index !== -1) {
    mockDispatches.splice(index, 1)
  }
}

function buildKey (opts) {
  const { path, method, body, headers, query } = opts
  return {
    path,
    method,
    body,
    headers,
    query
  }
}

function generateKeyValues (data) {
  return Object.entries(data).reduce((keyValuePairs, [key, value]) => [
    ...keyValuePairs,
    Buffer.from(`${key}`),
    Array.isArray(value) ? value.map(x => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
  ], [])
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
 * @param {number} statusCode
 */
function getStatusText (statusCode) {
  return STATUS_CODES[statusCode] || 'unknown'
}

async function getResponse (body) {
  const buffers = []
  for await (const data of body) {
    buffers.push(data)
  }
  return Buffer.concat(buffers).toString('utf8')
}

/**
 * Mock dispatch function used to simulate undici dispatches
 */
function mockDispatch (opts, handler) {
  // Get mock dispatch from built key
  const key = buildKey(opts)
  const mockDispatch = getMockDispatch(this[kDispatches], key)

  mockDispatch.timesInvoked++

  // Here's where we resolve a callback if a callback is present for the dispatch data.
  if (mockDispatch.data.callback) {
    mockDispatch.data = { ...mockDispatch.data, ...mockDispatch.data.callback(opts) }
  }

  // Parse mockDispatch data
  const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch
  const { timesInvoked, times } = mockDispatch

  // If it's used up and not persistent, mark as consumed
  mockDispatch.consumed = !persist && timesInvoked >= times
  mockDispatch.pending = timesInvoked < times

  // If specified, trigger dispatch error
  if (error !== null) {
    deleteMockDispatch(this[kDispatches], key)
    handler.onError(error)
    return true
  }

  // Handle the request with a delay if necessary
  if (typeof delay === 'number' && delay > 0) {
    setTimeout(() => {
      handleReply(this[kDispatches])
    }, delay)
  } else {
    handleReply(this[kDispatches])
  }

  function handleReply (mockDispatches, _data = data) {
    // fetch's HeadersList is a 1D string array
    const optsHeaders = Array.isArray(opts.headers)
      ? buildHeadersFromArray(opts.headers)
      : opts.headers
    const body = typeof _data === 'function'
      ? _data({ ...opts, headers: optsHeaders })
      : _data

    // util.types.isPromise is likely needed for jest.
    if (isPromise(body)) {
      // If handleReply is asynchronous, throwing an error
      // in the callback will reject the promise, rather than
      // synchronously throw the error, which breaks some tests.
      // Rather, we wait for the callback to resolve if it is a
      // promise, and then re-run handleReply with the new body.
      body.then((newData) => handleReply(mockDispatches, newData))
      return
    }

    const responseData = getResponseData(body)
    const responseHeaders = generateKeyValues(headers)
    const responseTrailers = generateKeyValues(trailers)

    handler.abort = nop
    handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode))
    handler.onData(Buffer.from(responseData))
    handler.onComplete(responseTrailers)
    deleteMockDispatch(mockDispatches, key)
  }

  function resume () {}

  return true
}

function buildMockDispatch () {
  const agent = this[kMockAgent]
  const origin = this[kOrigin]
  const originalDispatch = this[kOriginalDispatch]

  return function dispatch (opts, handler) {
    if (agent.isMockActive) {
      try {
        mockDispatch.call(this, opts, handler)
      } catch (error) {
        if (error instanceof MockNotMatchedError) {
          const netConnect = agent[kGetNetConnect]()
          if (netConnect === false) {
            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`)
          }
          if (checkNetConnect(netConnect, origin)) {
            originalDispatch.call(this, opts, handler)
          } else {
            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`)
          }
        } else {
          throw error
        }
      }
    } else {
      originalDispatch.call(this, opts, handler)
    }
  }
}

function checkNetConnect (netConnect, origin) {
  const url = new URL(origin)
  if (netConnect === true) {
    return true
  } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
    return true
  }
  return false
}

function buildMockOptions (opts) {
  if (opts) {
    const { agent, ...mockOptions } = opts
    return mockOptions
  }
}

module.exports = {
  getResponseData,
  getMockDispatch,
  addMockDispatch,
  deleteMockDispatch,
  buildKey,
  generateKeyValues,
  matchValue,
  getResponse,
  getStatusText,
  mockDispatch,
  buildMockDispatch,
  checkNetConnect,
  buildMockOptions,
  getHeaderByName
}


/***/ }),

/***/ 6584:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Transform } = __nccwpck_require__(2203)
const { Console } = __nccwpck_require__(4236)

/**
 * Gets the output of `console.table(…)` as a string.
 */
module.exports = class PendingInterceptorsFormatter {
  constructor ({ disableColors } = {}) {
    this.transform = new Transform({
      transform (chunk, _enc, cb) {
        cb(null, chunk)
      }
    })

    this.logger = new Console({
      stdout: this.transform,
      inspectOptions: {
        colors: !disableColors && !process.env.CI
      }
    })
  }

  format (pendingInterceptors) {
    const withPrettyHeaders = pendingInterceptors.map(
      ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
        Method: method,
        Origin: origin,
        Path: path,
        'Status code': statusCode,
        Persistent: persist ? '✅' : '❌',
        Invocations: timesInvoked,
        Remaining: persist ? Infinity : times - timesInvoked
      }))

    this.logger.table(withPrettyHeaders)
    return this.transform.read().toString()
  }
}


/***/ }),

/***/ 1315:
/***/ ((module) => {

"use strict";


const singulars = {
  pronoun: 'it',
  is: 'is',
  was: 'was',
  this: 'this'
}

const plurals = {
  pronoun: 'they',
  is: 'are',
  was: 'were',
  this: 'these'
}

module.exports = class Pluralizer {
  constructor (singular, plural) {
    this.singular = singular
    this.plural = plural
  }

  pluralize (count) {
    const one = count === 1
    const keys = one ? singulars : plurals
    const noun = one ? this.singular : this.plural
    return { ...keys, count, noun }
  }
}


/***/ }),

/***/ 119:
/***/ ((module) => {

"use strict";
/* eslint-disable */



// Extracted from node/lib/internal/fixed_queue.js

// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.
const kSize = 2048;
const kMask = kSize - 1;

// The FixedQueue is implemented as a singly-linked list of fixed-size
// circular buffers. It looks something like this:
//
//  head                                                       tail
//    |                                                          |
//    v                                                          v
// +-----------+ <-----\       +-----------+ <------\         +-----------+
// |  [null]   |        \----- |   next    |         \------- |   next    |
// +-----------+               +-----------+                  +-----------+
// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |       bottom --> |   item    |
// |   item    |               |   item    |                  |   item    |
// |    ...    |               |    ...    |                  |    ...    |
// |   item    |               |   item    |                  |   item    |
// |   item    |               |   item    |                  |   item    |
// |  [empty]  | <-- top       |   item    |                  |   item    |
// |  [empty]  |               |   item    |                  |   item    |
// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |
// +-----------+               +-----------+                  +-----------+
//
// Or, if there is only one circular buffer, it looks something
// like either of these:
//
//  head   tail                                 head   tail
//    |     |                                     |     |
//    v     v                                     v     v
// +-----------+                               +-----------+
// |  [null]   |                               |  [null]   |
// +-----------+                               +-----------+
// |  [empty]  |                               |   item    |
// |  [empty]  |                               |   item    |
// |   item    | <-- bottom            top --> |  [empty]  |
// |   item    |                               |  [empty]  |
// |  [empty]  | <-- top            bottom --> |   item    |
// |  [empty]  |                               |   item    |
// +-----------+                               +-----------+
//
// Adding a value means moving `top` forward by one, removing means
// moving `bottom` forward by one. After reaching the end, the queue
// wraps around.
//
// When `top === bottom` the current queue is empty and when
// `top + 1 === bottom` it's full. This wastes a single space of storage
// but allows much quicker checks.

class FixedCircularBuffer {
  constructor() {
    this.bottom = 0;
    this.top = 0;
    this.list = new Array(kSize);
    this.next = null;
  }

  isEmpty() {
    return this.top === this.bottom;
  }

  isFull() {
    return ((this.top + 1) & kMask) === this.bottom;
  }

  push(data) {
    this.list[this.top] = data;
    this.top = (this.top + 1) & kMask;
  }

  shift() {
    const nextItem = this.list[this.bottom];
    if (nextItem === undefined)
      return null;
    this.list[this.bottom] = undefined;
    this.bottom = (this.bottom + 1) & kMask;
    return nextItem;
  }
}

module.exports = class FixedQueue {
  constructor() {
    this.head = this.tail = new FixedCircularBuffer();
  }

  isEmpty() {
    return this.head.isEmpty();
  }

  push(data) {
    if (this.head.isFull()) {
      // Head is full: Creates a new queue, sets the old queue's `.next` to it,
      // and sets it as the new main queue.
      this.head = this.head.next = new FixedCircularBuffer();
    }
    this.head.push(data);
  }

  shift() {
    const tail = this.tail;
    const next = tail.shift();
    if (tail.isEmpty() && tail.next !== null) {
      // If there is another queue, it forms the new tail.
      this.tail = tail.next;
    }
    return next;
  }
};


/***/ }),

/***/ 9974:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const DispatcherBase = __nccwpck_require__(9787)
const FixedQueue = __nccwpck_require__(119)
const { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = __nccwpck_require__(5773)
const PoolStats = __nccwpck_require__(136)

const kClients = Symbol('clients')
const kNeedDrain = Symbol('needDrain')
const kQueue = Symbol('queue')
const kClosedResolve = Symbol('closed resolve')
const kOnDrain = Symbol('onDrain')
const kOnConnect = Symbol('onConnect')
const kOnDisconnect = Symbol('onDisconnect')
const kOnConnectionError = Symbol('onConnectionError')
const kGetDispatcher = Symbol('get dispatcher')
const kAddClient = Symbol('add client')
const kRemoveClient = Symbol('remove client')
const kStats = Symbol('stats')

class PoolBase extends DispatcherBase {
  constructor () {
    super()

    this[kQueue] = new FixedQueue()
    this[kClients] = []
    this[kQueued] = 0

    const pool = this

    this[kOnDrain] = function onDrain (origin, targets) {
      const queue = pool[kQueue]

      let needDrain = false

      while (!needDrain) {
        const item = queue.shift()
        if (!item) {
          break
        }
        pool[kQueued]--
        needDrain = !this.dispatch(item.opts, item.handler)
      }

      this[kNeedDrain] = needDrain

      if (!this[kNeedDrain] && pool[kNeedDrain]) {
        pool[kNeedDrain] = false
        pool.emit('drain', origin, [pool, ...targets])
      }

      if (pool[kClosedResolve] && queue.isEmpty()) {
        Promise
          .all(pool[kClients].map(c => c.close()))
          .then(pool[kClosedResolve])
      }
    }

    this[kOnConnect] = (origin, targets) => {
      pool.emit('connect', origin, [pool, ...targets])
    }

    this[kOnDisconnect] = (origin, targets, err) => {
      pool.emit('disconnect', origin, [pool, ...targets], err)
    }

    this[kOnConnectionError] = (origin, targets, err) => {
      pool.emit('connectionError', origin, [pool, ...targets], err)
    }

    this[kStats] = new PoolStats(this)
  }

  get [kBusy] () {
    return this[kNeedDrain]
  }

  get [kConnected] () {
    return this[kClients].filter(client => client[kConnected]).length
  }

  get [kFree] () {
    return this[kClients].filter(client => client[kConnected] && !client[kNeedDrain]).length
  }

  get [kPending] () {
    let ret = this[kQueued]
    for (const { [kPending]: pending } of this[kClients]) {
      ret += pending
    }
    return ret
  }

  get [kRunning] () {
    let ret = 0
    for (const { [kRunning]: running } of this[kClients]) {
      ret += running
    }
    return ret
  }

  get [kSize] () {
    let ret = this[kQueued]
    for (const { [kSize]: size } of this[kClients]) {
      ret += size
    }
    return ret
  }

  get stats () {
    return this[kStats]
  }

  async [kClose] () {
    if (this[kQueue].isEmpty()) {
      return Promise.all(this[kClients].map(c => c.close()))
    } else {
      return new Promise((resolve) => {
        this[kClosedResolve] = resolve
      })
    }
  }

  async [kDestroy] (err) {
    while (true) {
      const item = this[kQueue].shift()
      if (!item) {
        break
      }
      item.handler.onError(err)
    }

    return Promise.all(this[kClients].map(c => c.destroy(err)))
  }

  [kDispatch] (opts, handler) {
    const dispatcher = this[kGetDispatcher]()

    if (!dispatcher) {
      this[kNeedDrain] = true
      this[kQueue].push({ opts, handler })
      this[kQueued]++
    } else if (!dispatcher.dispatch(opts, handler)) {
      dispatcher[kNeedDrain] = true
      this[kNeedDrain] = !this[kGetDispatcher]()
    }

    return !this[kNeedDrain]
  }

  [kAddClient] (client) {
    client
      .on('drain', this[kOnDrain])
      .on('connect', this[kOnConnect])
      .on('disconnect', this[kOnDisconnect])
      .on('connectionError', this[kOnConnectionError])

    this[kClients].push(client)

    if (this[kNeedDrain]) {
      process.nextTick(() => {
        if (this[kNeedDrain]) {
          this[kOnDrain](client[kUrl], [this, client])
        }
      })
    }

    return this
  }

  [kRemoveClient] (client) {
    client.close(() => {
      const idx = this[kClients].indexOf(client)
      if (idx !== -1) {
        this[kClients].splice(idx, 1)
      }
    })

    this[kNeedDrain] = this[kClients].some(dispatcher => (
      !dispatcher[kNeedDrain] &&
      dispatcher.closed !== true &&
      dispatcher.destroyed !== true
    ))
  }
}

module.exports = {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kRemoveClient,
  kGetDispatcher
}


/***/ }),

/***/ 136:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { kFree, kConnected, kPending, kQueued, kRunning, kSize } = __nccwpck_require__(5773)
const kPool = Symbol('pool')

class PoolStats {
  constructor (pool) {
    this[kPool] = pool
  }

  get connected () {
    return this[kPool][kConnected]
  }

  get free () {
    return this[kPool][kFree]
  }

  get pending () {
    return this[kPool][kPending]
  }

  get queued () {
    return this[kPool][kQueued]
  }

  get running () {
    return this[kPool][kRunning]
  }

  get size () {
    return this[kPool][kSize]
  }
}

module.exports = PoolStats


/***/ }),

/***/ 6086:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kGetDispatcher
} = __nccwpck_require__(9974)
const Client = __nccwpck_require__(439)
const {
  InvalidArgumentError
} = __nccwpck_require__(1581)
const util = __nccwpck_require__(4606)
const { kUrl, kInterceptors } = __nccwpck_require__(5773)
const buildConnector = __nccwpck_require__(110)

const kOptions = Symbol('options')
const kConnections = Symbol('connections')
const kFactory = Symbol('factory')

function defaultFactory (origin, opts) {
  return new Client(origin, opts)
}

class Pool extends PoolBase {
  constructor (origin, {
    connections,
    factory = defaultFactory,
    connect,
    connectTimeout,
    tls,
    maxCachedSessions,
    socketPath,
    autoSelectFamily,
    autoSelectFamilyAttemptTimeout,
    allowH2,
    ...options
  } = {}) {
    super()

    if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
      throw new InvalidArgumentError('invalid connections')
    }

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (typeof connect !== 'function') {
      connect = buildConnector({
        ...tls,
        maxCachedSessions,
        allowH2,
        socketPath,
        timeout: connectTimeout,
        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),
        ...connect
      })
    }

    this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool)
      ? options.interceptors.Pool
      : []
    this[kConnections] = connections || null
    this[kUrl] = util.parseOrigin(origin)
    this[kOptions] = { ...util.deepClone(options), connect, allowH2 }
    this[kOptions].interceptors = options.interceptors
      ? { ...options.interceptors }
      : undefined
    this[kFactory] = factory

    this.on('connectionError', (origin, targets, error) => {
      // If a connection error occurs, we remove the client from the pool,
      // and emit a connectionError event. They will not be re-used.
      // Fixes https://github.com/nodejs/undici/issues/3895
      for (const target of targets) {
        // Do not use kRemoveClient here, as it will close the client,
        // but the client cannot be closed in this state.
        const idx = this[kClients].indexOf(target)
        if (idx !== -1) {
          this[kClients].splice(idx, 1)
        }
      }
    })
  }

  [kGetDispatcher] () {
    let dispatcher = this[kClients].find(dispatcher => !dispatcher[kNeedDrain])

    if (dispatcher) {
      return dispatcher
    }

    if (!this[kConnections] || this[kClients].length < this[kConnections]) {
      dispatcher = this[kFactory](this[kUrl], this[kOptions])
      this[kAddClient](dispatcher)
    }

    return dispatcher
  }
}

module.exports = Pool


/***/ }),

/***/ 6278:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kProxy, kClose, kDestroy, kInterceptors } = __nccwpck_require__(5773)
const { URL } = __nccwpck_require__(7016)
const Agent = __nccwpck_require__(8603)
const Pool = __nccwpck_require__(6086)
const DispatcherBase = __nccwpck_require__(9787)
const { InvalidArgumentError, RequestAbortedError } = __nccwpck_require__(1581)
const buildConnector = __nccwpck_require__(110)

const kAgent = Symbol('proxy agent')
const kClient = Symbol('proxy client')
const kProxyHeaders = Symbol('proxy headers')
const kRequestTls = Symbol('request tls settings')
const kProxyTls = Symbol('proxy tls settings')
const kConnectEndpoint = Symbol('connect endpoint function')

function defaultProtocolPort (protocol) {
  return protocol === 'https:' ? 443 : 80
}

function buildProxyOptions (opts) {
  if (typeof opts === 'string') {
    opts = { uri: opts }
  }

  if (!opts || !opts.uri) {
    throw new InvalidArgumentError('Proxy opts.uri is mandatory')
  }

  return {
    uri: opts.uri,
    protocol: opts.protocol || 'https'
  }
}

function defaultFactory (origin, opts) {
  return new Pool(origin, opts)
}

class ProxyAgent extends DispatcherBase {
  constructor (opts) {
    super(opts)
    this[kProxy] = buildProxyOptions(opts)
    this[kAgent] = new Agent(opts)
    this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent)
      ? opts.interceptors.ProxyAgent
      : []

    if (typeof opts === 'string') {
      opts = { uri: opts }
    }

    if (!opts || !opts.uri) {
      throw new InvalidArgumentError('Proxy opts.uri is mandatory')
    }

    const { clientFactory = defaultFactory } = opts

    if (typeof clientFactory !== 'function') {
      throw new InvalidArgumentError('Proxy opts.clientFactory must be a function.')
    }

    this[kRequestTls] = opts.requestTls
    this[kProxyTls] = opts.proxyTls
    this[kProxyHeaders] = opts.headers || {}

    const resolvedUrl = new URL(opts.uri)
    const { origin, port, host, username, password } = resolvedUrl

    if (opts.auth && opts.token) {
      throw new InvalidArgumentError('opts.auth cannot be used in combination with opts.token')
    } else if (opts.auth) {
      /* @deprecated in favour of opts.token */
      this[kProxyHeaders]['proxy-authorization'] = `Basic ${opts.auth}`
    } else if (opts.token) {
      this[kProxyHeaders]['proxy-authorization'] = opts.token
    } else if (username && password) {
      this[kProxyHeaders]['proxy-authorization'] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString('base64')}`
    }

    const connect = buildConnector({ ...opts.proxyTls })
    this[kConnectEndpoint] = buildConnector({ ...opts.requestTls })
    this[kClient] = clientFactory(resolvedUrl, { connect })
    this[kAgent] = new Agent({
      ...opts,
      connect: async (opts, callback) => {
        let requestedHost = opts.host
        if (!opts.port) {
          requestedHost += `:${defaultProtocolPort(opts.protocol)}`
        }
        try {
          const { socket, statusCode } = await this[kClient].connect({
            origin,
            port,
            path: requestedHost,
            signal: opts.signal,
            headers: {
              ...this[kProxyHeaders],
              host
            }
          })
          if (statusCode !== 200) {
            socket.on('error', () => {}).destroy()
            callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`))
          }
          if (opts.protocol !== 'https:') {
            callback(null, socket)
            return
          }
          let servername
          if (this[kRequestTls]) {
            servername = this[kRequestTls].servername
          } else {
            servername = opts.servername
          }
          this[kConnectEndpoint]({ ...opts, servername, httpSocket: socket }, callback)
        } catch (err) {
          callback(err)
        }
      }
    })
  }

  dispatch (opts, handler) {
    const { host } = new URL(opts.origin)
    const headers = buildHeaders(opts.headers)
    throwIfProxyAuthIsSent(headers)
    return this[kAgent].dispatch(
      {
        ...opts,
        headers: {
          ...headers,
          host
        }
      },
      handler
    )
  }

  async [kClose] () {
    await this[kAgent].close()
    await this[kClient].close()
  }

  async [kDestroy] () {
    await this[kAgent].destroy()
    await this[kClient].destroy()
  }
}

/**
 * @param {string[] | Record<string, string>} headers
 * @returns {Record<string, string>}
 */
function buildHeaders (headers) {
  // When using undici.fetch, the headers list is stored
  // as an array.
  if (Array.isArray(headers)) {
    /** @type {Record<string, string>} */
    const headersPair = {}

    for (let i = 0; i < headers.length; i += 2) {
      headersPair[headers[i]] = headers[i + 1]
    }

    return headersPair
  }

  return headers
}

/**
 * @param {Record<string, string>} headers
 *
 * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
 * Nevertheless, it was changed and to avoid a security vulnerability by end users
 * this check was created.
 * It should be removed in the next major version for performance reasons
 */
function throwIfProxyAuthIsSent (headers) {
  const existProxyAuth = headers && Object.keys(headers)
    .find((key) => key.toLowerCase() === 'proxy-authorization')
  if (existProxyAuth) {
    throw new InvalidArgumentError('Proxy-Authorization should be sent in ProxyAgent constructor')
  }
}

module.exports = ProxyAgent


/***/ }),

/***/ 2374:
/***/ ((module) => {

"use strict";


let fastNow = Date.now()
let fastNowTimeout

const fastTimers = []

function onTimeout () {
  fastNow = Date.now()

  let len = fastTimers.length
  let idx = 0
  while (idx < len) {
    const timer = fastTimers[idx]

    if (timer.state === 0) {
      timer.state = fastNow + timer.delay
    } else if (timer.state > 0 && fastNow >= timer.state) {
      timer.state = -1
      timer.callback(timer.opaque)
    }

    if (timer.state === -1) {
      timer.state = -2
      if (idx !== len - 1) {
        fastTimers[idx] = fastTimers.pop()
      } else {
        fastTimers.pop()
      }
      len -= 1
    } else {
      idx += 1
    }
  }

  if (fastTimers.length > 0) {
    refreshTimeout()
  }
}

function refreshTimeout () {
  if (fastNowTimeout && fastNowTimeout.refresh) {
    fastNowTimeout.refresh()
  } else {
    clearTimeout(fastNowTimeout)
    fastNowTimeout = setTimeout(onTimeout, 1e3)
    if (fastNowTimeout.unref) {
      fastNowTimeout.unref()
    }
  }
}

class Timeout {
  constructor (callback, delay, opaque) {
    this.callback = callback
    this.delay = delay
    this.opaque = opaque

    //  -2 not in timer list
    //  -1 in timer list but inactive
    //   0 in timer list waiting for time
    // > 0 in timer list waiting for time to expire
    this.state = -2

    this.refresh()
  }

  refresh () {
    if (this.state === -2) {
      fastTimers.push(this)
      if (!fastNowTimeout || fastTimers.length === 1) {
        refreshTimeout()
      }
    }

    this.state = 0
  }

  clear () {
    this.state = -1
  }
}

module.exports = {
  setTimeout (callback, delay, opaque) {
    return delay < 1e3
      ? setTimeout(callback, delay, opaque)
      : new Timeout(callback, delay, opaque)
  },
  clearTimeout (timeout) {
    if (timeout instanceof Timeout) {
      timeout.clear()
    } else {
      clearTimeout(timeout)
    }
  }
}


/***/ }),

/***/ 3760:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const diagnosticsChannel = __nccwpck_require__(1637)
const { uid, states } = __nccwpck_require__(7875)
const {
  kReadyState,
  kSentClose,
  kByteParser,
  kReceivedClose
} = __nccwpck_require__(6063)
const { fireEvent, failWebsocketConnection } = __nccwpck_require__(588)
const { CloseEvent } = __nccwpck_require__(8659)
const { makeRequest } = __nccwpck_require__(2204)
const { fetching } = __nccwpck_require__(9401)
const { Headers } = __nccwpck_require__(2223)
const { getGlobalDispatcher } = __nccwpck_require__(9456)
const { kHeadersList } = __nccwpck_require__(5773)

const channels = {}
channels.open = diagnosticsChannel.channel('undici:websocket:open')
channels.close = diagnosticsChannel.channel('undici:websocket:close')
channels.socketError = diagnosticsChannel.channel('undici:websocket:socket_error')

/** @type {import('crypto')} */
let crypto
try {
  crypto = __nccwpck_require__(6982)
} catch {

}

/**
 * @see https://websockets.spec.whatwg.org/#concept-websocket-establish
 * @param {URL} url
 * @param {string|string[]} protocols
 * @param {import('./websocket').WebSocket} ws
 * @param {(response: any) => void} onEstablish
 * @param {Partial<import('../../types/websocket').WebSocketInit>} options
 */
function establishWebSocketConnection (url, protocols, ws, onEstablish, options) {
  // 1. Let requestURL be a copy of url, with its scheme set to "http", if url’s
  //    scheme is "ws", and to "https" otherwise.
  const requestURL = url

  requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:'

  // 2. Let request be a new request, whose URL is requestURL, client is client,
  //    service-workers mode is "none", referrer is "no-referrer", mode is
  //    "websocket", credentials mode is "include", cache mode is "no-store" ,
  //    and redirect mode is "error".
  const request = makeRequest({
    urlList: [requestURL],
    serviceWorkers: 'none',
    referrer: 'no-referrer',
    mode: 'websocket',
    credentials: 'include',
    cache: 'no-store',
    redirect: 'error'
  })

  // Note: undici extension, allow setting custom headers.
  if (options.headers) {
    const headersList = new Headers(options.headers)[kHeadersList]

    request.headersList = headersList
  }

  // 3. Append (`Upgrade`, `websocket`) to request’s header list.
  // 4. Append (`Connection`, `Upgrade`) to request’s header list.
  // Note: both of these are handled by undici currently.
  // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397

  // 5. Let keyValue be a nonce consisting of a randomly selected
  //    16-byte value that has been forgiving-base64-encoded and
  //    isomorphic encoded.
  const keyValue = crypto.randomBytes(16).toString('base64')

  // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s
  //    header list.
  request.headersList.append('sec-websocket-key', keyValue)

  // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s
  //    header list.
  request.headersList.append('sec-websocket-version', '13')

  // 8. For each protocol in protocols, combine
  //    (`Sec-WebSocket-Protocol`, protocol) in request’s header
  //    list.
  for (const protocol of protocols) {
    request.headersList.append('sec-websocket-protocol', protocol)
  }

  // 9. Let permessageDeflate be a user-agent defined
  //    "permessage-deflate" extension header value.
  // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673
  // TODO: enable once permessage-deflate is supported
  const permessageDeflate = '' // 'permessage-deflate; 15'

  // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to
  //     request’s header list.
  // request.headersList.append('sec-websocket-extensions', permessageDeflate)

  // 11. Fetch request with useParallelQueue set to true, and
  //     processResponse given response being these steps:
  const controller = fetching({
    request,
    useParallelQueue: true,
    dispatcher: options.dispatcher ?? getGlobalDispatcher(),
    processResponse (response) {
      // 1. If response is a network error or its status is not 101,
      //    fail the WebSocket connection.
      if (response.type === 'error' || response.status !== 101) {
        failWebsocketConnection(ws, 'Received network error or non-101 status code.')
        return
      }

      // 2. If protocols is not the empty list and extracting header
      //    list values given `Sec-WebSocket-Protocol` and response’s
      //    header list results in null, failure, or the empty byte
      //    sequence, then fail the WebSocket connection.
      if (protocols.length !== 0 && !response.headersList.get('Sec-WebSocket-Protocol')) {
        failWebsocketConnection(ws, 'Server did not respond with sent protocols.')
        return
      }

      // 3. Follow the requirements stated step 2 to step 6, inclusive,
      //    of the last set of steps in section 4.1 of The WebSocket
      //    Protocol to validate response. This either results in fail
      //    the WebSocket connection or the WebSocket connection is
      //    established.

      // 2. If the response lacks an |Upgrade| header field or the |Upgrade|
      //    header field contains a value that is not an ASCII case-
      //    insensitive match for the value "websocket", the client MUST
      //    _Fail the WebSocket Connection_.
      if (response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {
        failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".')
        return
      }

      // 3. If the response lacks a |Connection| header field or the
      //    |Connection| header field doesn't contain a token that is an
      //    ASCII case-insensitive match for the value "Upgrade", the client
      //    MUST _Fail the WebSocket Connection_.
      if (response.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {
        failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".')
        return
      }

      // 4. If the response lacks a |Sec-WebSocket-Accept| header field or
      //    the |Sec-WebSocket-Accept| contains a value other than the
      //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-
      //    Key| (as a string, not base64-decoded) with the string "258EAFA5-
      //    E914-47DA-95CA-C5AB0DC85B11" but ignoring any leading and
      //    trailing whitespace, the client MUST _Fail the WebSocket
      //    Connection_.
      const secWSAccept = response.headersList.get('Sec-WebSocket-Accept')
      const digest = crypto.createHash('sha1').update(keyValue + uid).digest('base64')
      if (secWSAccept !== digest) {
        failWebsocketConnection(ws, 'Incorrect hash received in Sec-WebSocket-Accept header.')
        return
      }

      // 5. If the response includes a |Sec-WebSocket-Extensions| header
      //    field and this header field indicates the use of an extension
      //    that was not present in the client's handshake (the server has
      //    indicated an extension not requested by the client), the client
      //    MUST _Fail the WebSocket Connection_.  (The parsing of this
      //    header field to determine which extensions are requested is
      //    discussed in Section 9.1.)
      const secExtension = response.headersList.get('Sec-WebSocket-Extensions')

      if (secExtension !== null && secExtension !== permessageDeflate) {
        failWebsocketConnection(ws, 'Received different permessage-deflate than the one set.')
        return
      }

      // 6. If the response includes a |Sec-WebSocket-Protocol| header field
      //    and this header field indicates the use of a subprotocol that was
      //    not present in the client's handshake (the server has indicated a
      //    subprotocol not requested by the client), the client MUST _Fail
      //    the WebSocket Connection_.
      const secProtocol = response.headersList.get('Sec-WebSocket-Protocol')

      if (secProtocol !== null && secProtocol !== request.headersList.get('Sec-WebSocket-Protocol')) {
        failWebsocketConnection(ws, 'Protocol was not set in the opening handshake.')
        return
      }

      response.socket.on('data', onSocketData)
      response.socket.on('close', onSocketClose)
      response.socket.on('error', onSocketError)

      if (channels.open.hasSubscribers) {
        channels.open.publish({
          address: response.socket.address(),
          protocol: secProtocol,
          extensions: secExtension
        })
      }

      onEstablish(response)
    }
  })

  return controller
}

/**
 * @param {Buffer} chunk
 */
function onSocketData (chunk) {
  if (!this.ws[kByteParser].write(chunk)) {
    this.pause()
  }
}

/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
 */
function onSocketClose () {
  const { ws } = this

  // If the TCP connection was closed after the
  // WebSocket closing handshake was completed, the WebSocket connection
  // is said to have been closed _cleanly_.
  const wasClean = ws[kSentClose] && ws[kReceivedClose]

  let code = 1005
  let reason = ''

  const result = ws[kByteParser].closingInfo

  if (result) {
    code = result.code ?? 1005
    reason = result.reason
  } else if (!ws[kSentClose]) {
    // If _The WebSocket
    // Connection is Closed_ and no Close control frame was received by the
    // endpoint (such as could occur if the underlying transport connection
    // is lost), _The WebSocket Connection Close Code_ is considered to be
    // 1006.
    code = 1006
  }

  // 1. Change the ready state to CLOSED (3).
  ws[kReadyState] = states.CLOSED

  // 2. If the user agent was required to fail the WebSocket
  //    connection, or if the WebSocket connection was closed
  //    after being flagged as full, fire an event named error
  //    at the WebSocket object.
  // TODO

  // 3. Fire an event named close at the WebSocket object,
  //    using CloseEvent, with the wasClean attribute
  //    initialized to true if the connection closed cleanly
  //    and false otherwise, the code attribute initialized to
  //    the WebSocket connection close code, and the reason
  //    attribute initialized to the result of applying UTF-8
  //    decode without BOM to the WebSocket connection close
  //    reason.
  fireEvent('close', ws, CloseEvent, {
    wasClean, code, reason
  })

  if (channels.close.hasSubscribers) {
    channels.close.publish({
      websocket: ws,
      code,
      reason
    })
  }
}

function onSocketError (error) {
  const { ws } = this

  ws[kReadyState] = states.CLOSING

  if (channels.socketError.hasSubscribers) {
    channels.socketError.publish(error)
  }

  this.destroy()
}

module.exports = {
  establishWebSocketConnection
}


/***/ }),

/***/ 7875:
/***/ ((module) => {

"use strict";


// This is a Globally Unique Identifier unique used
// to validate that the endpoint accepts websocket
// connections.
// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3
const uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'

/** @type {PropertyDescriptor} */
const staticPropertyDescriptors = {
  enumerable: true,
  writable: false,
  configurable: false
}

const states = {
  CONNECTING: 0,
  OPEN: 1,
  CLOSING: 2,
  CLOSED: 3
}

const opcodes = {
  CONTINUATION: 0x0,
  TEXT: 0x1,
  BINARY: 0x2,
  CLOSE: 0x8,
  PING: 0x9,
  PONG: 0xA
}

const maxUnsigned16Bit = 2 ** 16 - 1 // 65535

const parserStates = {
  INFO: 0,
  PAYLOADLENGTH_16: 2,
  PAYLOADLENGTH_64: 3,
  READ_DATA: 4
}

const emptyBuffer = Buffer.allocUnsafe(0)

module.exports = {
  uid,
  staticPropertyDescriptors,
  states,
  opcodes,
  maxUnsigned16Bit,
  parserStates,
  emptyBuffer
}


/***/ }),

/***/ 8659:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { webidl } = __nccwpck_require__(3476)
const { kEnumerableProperty } = __nccwpck_require__(4606)
const { MessagePort } = __nccwpck_require__(8167)

/**
 * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
 */
class MessageEvent extends Event {
  #eventInit

  constructor (type, eventInitDict = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent constructor' })

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.MessageEventInit(eventInitDict)

    super(type, eventInitDict)

    this.#eventInit = eventInitDict
  }

  get data () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.data
  }

  get origin () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.origin
  }

  get lastEventId () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.lastEventId
  }

  get source () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.source
  }

  get ports () {
    webidl.brandCheck(this, MessageEvent)

    if (!Object.isFrozen(this.#eventInit.ports)) {
      Object.freeze(this.#eventInit.ports)
    }

    return this.#eventInit.ports
  }

  initMessageEvent (
    type,
    bubbles = false,
    cancelable = false,
    data = null,
    origin = '',
    lastEventId = '',
    source = null,
    ports = []
  ) {
    webidl.brandCheck(this, MessageEvent)

    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent.initMessageEvent' })

    return new MessageEvent(type, {
      bubbles, cancelable, data, origin, lastEventId, source, ports
    })
  }
}

/**
 * @see https://websockets.spec.whatwg.org/#the-closeevent-interface
 */
class CloseEvent extends Event {
  #eventInit

  constructor (type, eventInitDict = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'CloseEvent constructor' })

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.CloseEventInit(eventInitDict)

    super(type, eventInitDict)

    this.#eventInit = eventInitDict
  }

  get wasClean () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.wasClean
  }

  get code () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.code
  }

  get reason () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.reason
  }
}

// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface
class ErrorEvent extends Event {
  #eventInit

  constructor (type, eventInitDict) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'ErrorEvent constructor' })

    super(type, eventInitDict)

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {})

    this.#eventInit = eventInitDict
  }

  get message () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.message
  }

  get filename () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.filename
  }

  get lineno () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.lineno
  }

  get colno () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.colno
  }

  get error () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.error
  }
}

Object.defineProperties(MessageEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'MessageEvent',
    configurable: true
  },
  data: kEnumerableProperty,
  origin: kEnumerableProperty,
  lastEventId: kEnumerableProperty,
  source: kEnumerableProperty,
  ports: kEnumerableProperty,
  initMessageEvent: kEnumerableProperty
})

Object.defineProperties(CloseEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'CloseEvent',
    configurable: true
  },
  reason: kEnumerableProperty,
  code: kEnumerableProperty,
  wasClean: kEnumerableProperty
})

Object.defineProperties(ErrorEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'ErrorEvent',
    configurable: true
  },
  message: kEnumerableProperty,
  filename: kEnumerableProperty,
  lineno: kEnumerableProperty,
  colno: kEnumerableProperty,
  error: kEnumerableProperty
})

webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort)

webidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(
  webidl.converters.MessagePort
)

const eventInit = [
  {
    key: 'bubbles',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'cancelable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'composed',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
]

webidl.converters.MessageEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'data',
    converter: webidl.converters.any,
    defaultValue: null
  },
  {
    key: 'origin',
    converter: webidl.converters.USVString,
    defaultValue: ''
  },
  {
    key: 'lastEventId',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'source',
    // Node doesn't implement WindowProxy or ServiceWorker, so the only
    // valid value for source is a MessagePort.
    converter: webidl.nullableConverter(webidl.converters.MessagePort),
    defaultValue: null
  },
  {
    key: 'ports',
    converter: webidl.converters['sequence<MessagePort>'],
    get defaultValue () {
      return []
    }
  }
])

webidl.converters.CloseEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'wasClean',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'code',
    converter: webidl.converters['unsigned short'],
    defaultValue: 0
  },
  {
    key: 'reason',
    converter: webidl.converters.USVString,
    defaultValue: ''
  }
])

webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'message',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'filename',
    converter: webidl.converters.USVString,
    defaultValue: ''
  },
  {
    key: 'lineno',
    converter: webidl.converters['unsigned long'],
    defaultValue: 0
  },
  {
    key: 'colno',
    converter: webidl.converters['unsigned long'],
    defaultValue: 0
  },
  {
    key: 'error',
    converter: webidl.converters.any
  }
])

module.exports = {
  MessageEvent,
  CloseEvent,
  ErrorEvent
}


/***/ }),

/***/ 4391:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { maxUnsigned16Bit } = __nccwpck_require__(7875)

/** @type {import('crypto')} */
let crypto
try {
  crypto = __nccwpck_require__(6982)
} catch {

}

class WebsocketFrameSend {
  /**
   * @param {Buffer|undefined} data
   */
  constructor (data) {
    this.frameData = data
    this.maskKey = crypto.randomBytes(4)
  }

  createFrame (opcode) {
    const bodyLength = this.frameData?.byteLength ?? 0

    /** @type {number} */
    let payloadLength = bodyLength // 0-125
    let offset = 6

    if (bodyLength > maxUnsigned16Bit) {
      offset += 8 // payload length is next 8 bytes
      payloadLength = 127
    } else if (bodyLength > 125) {
      offset += 2 // payload length is next 2 bytes
      payloadLength = 126
    }

    const buffer = Buffer.allocUnsafe(bodyLength + offset)

    // Clear first 2 bytes, everything else is overwritten
    buffer[0] = buffer[1] = 0
    buffer[0] |= 0x80 // FIN
    buffer[0] = (buffer[0] & 0xF0) + opcode // opcode

    /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
    buffer[offset - 4] = this.maskKey[0]
    buffer[offset - 3] = this.maskKey[1]
    buffer[offset - 2] = this.maskKey[2]
    buffer[offset - 1] = this.maskKey[3]

    buffer[1] = payloadLength

    if (payloadLength === 126) {
      buffer.writeUInt16BE(bodyLength, 2)
    } else if (payloadLength === 127) {
      // Clear extended payload length
      buffer[2] = buffer[3] = 0
      buffer.writeUIntBE(bodyLength, 4, 6)
    }

    buffer[1] |= 0x80 // MASK

    // mask body
    for (let i = 0; i < bodyLength; i++) {
      buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4]
    }

    return buffer
  }
}

module.exports = {
  WebsocketFrameSend
}


/***/ }),

/***/ 833:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Writable } = __nccwpck_require__(2203)
const diagnosticsChannel = __nccwpck_require__(1637)
const { parserStates, opcodes, states, emptyBuffer } = __nccwpck_require__(7875)
const { kReadyState, kSentClose, kResponse, kReceivedClose } = __nccwpck_require__(6063)
const { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = __nccwpck_require__(588)
const { WebsocketFrameSend } = __nccwpck_require__(4391)

// This code was influenced by ws released under the MIT license.
// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>
// Copyright (c) 2013 Arnout Kazemier and contributors
// Copyright (c) 2016 Luigi Pinca and contributors

const channels = {}
channels.ping = diagnosticsChannel.channel('undici:websocket:ping')
channels.pong = diagnosticsChannel.channel('undici:websocket:pong')

class ByteParser extends Writable {
  #buffers = []
  #byteOffset = 0

  #state = parserStates.INFO

  #info = {}
  #fragments = []

  constructor (ws) {
    super()

    this.ws = ws
  }

  /**
   * @param {Buffer} chunk
   * @param {() => void} callback
   */
  _write (chunk, _, callback) {
    this.#buffers.push(chunk)
    this.#byteOffset += chunk.length

    this.run(callback)
  }

  /**
   * Runs whenever a new chunk is received.
   * Callback is called whenever there are no more chunks buffering,
   * or not enough bytes are buffered to parse.
   */
  run (callback) {
    while (true) {
      if (this.#state === parserStates.INFO) {
        // If there aren't enough bytes to parse the payload length, etc.
        if (this.#byteOffset < 2) {
          return callback()
        }

        const buffer = this.consume(2)

        this.#info.fin = (buffer[0] & 0x80) !== 0
        this.#info.opcode = buffer[0] & 0x0F

        // If we receive a fragmented message, we use the type of the first
        // frame to parse the full message as binary/text, when it's terminated
        this.#info.originalOpcode ??= this.#info.opcode

        this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION

        if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
          // Only text and binary frames can be fragmented
          failWebsocketConnection(this.ws, 'Invalid frame type was fragmented.')
          return
        }

        const payloadLength = buffer[1] & 0x7F

        if (payloadLength <= 125) {
          this.#info.payloadLength = payloadLength
          this.#state = parserStates.READ_DATA
        } else if (payloadLength === 126) {
          this.#state = parserStates.PAYLOADLENGTH_16
        } else if (payloadLength === 127) {
          this.#state = parserStates.PAYLOADLENGTH_64
        }

        if (this.#info.fragmented && payloadLength > 125) {
          // A fragmented frame can't be fragmented itself
          failWebsocketConnection(this.ws, 'Fragmented frame exceeded 125 bytes.')
          return
        } else if (
          (this.#info.opcode === opcodes.PING ||
            this.#info.opcode === opcodes.PONG ||
            this.#info.opcode === opcodes.CLOSE) &&
          payloadLength > 125
        ) {
          // Control frames can have a payload length of 125 bytes MAX
          failWebsocketConnection(this.ws, 'Payload length for control frame exceeded 125 bytes.')
          return
        } else if (this.#info.opcode === opcodes.CLOSE) {
          if (payloadLength === 1) {
            failWebsocketConnection(this.ws, 'Received close frame with a 1-byte body.')
            return
          }

          const body = this.consume(payloadLength)

          this.#info.closeInfo = this.parseCloseBody(false, body)

          if (!this.ws[kSentClose]) {
            // If an endpoint receives a Close frame and did not previously send a
            // Close frame, the endpoint MUST send a Close frame in response.  (When
            // sending a Close frame in response, the endpoint typically echos the
            // status code it received.)
            const body = Buffer.allocUnsafe(2)
            body.writeUInt16BE(this.#info.closeInfo.code, 0)
            const closeFrame = new WebsocketFrameSend(body)

            this.ws[kResponse].socket.write(
              closeFrame.createFrame(opcodes.CLOSE),
              (err) => {
                if (!err) {
                  this.ws[kSentClose] = true
                }
              }
            )
          }

          // Upon either sending or receiving a Close control frame, it is said
          // that _The WebSocket Closing Handshake is Started_ and that the
          // WebSocket connection is in the CLOSING state.
          this.ws[kReadyState] = states.CLOSING
          this.ws[kReceivedClose] = true

          this.end()

          return
        } else if (this.#info.opcode === opcodes.PING) {
          // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in
          // response, unless it already received a Close frame.
          // A Pong frame sent in response to a Ping frame must have identical
          // "Application data"

          const body = this.consume(payloadLength)

          if (!this.ws[kReceivedClose]) {
            const frame = new WebsocketFrameSend(body)

            this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG))

            if (channels.ping.hasSubscribers) {
              channels.ping.publish({
                payload: body
              })
            }
          }

          this.#state = parserStates.INFO

          if (this.#byteOffset > 0) {
            continue
          } else {
            callback()
            return
          }
        } else if (this.#info.opcode === opcodes.PONG) {
          // A Pong frame MAY be sent unsolicited.  This serves as a
          // unidirectional heartbeat.  A response to an unsolicited Pong frame is
          // not expected.

          const body = this.consume(payloadLength)

          if (channels.pong.hasSubscribers) {
            channels.pong.publish({
              payload: body
            })
          }

          if (this.#byteOffset > 0) {
            continue
          } else {
            callback()
            return
          }
        }
      } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
        if (this.#byteOffset < 2) {
          return callback()
        }

        const buffer = this.consume(2)

        this.#info.payloadLength = buffer.readUInt16BE(0)
        this.#state = parserStates.READ_DATA
      } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
        if (this.#byteOffset < 8) {
          return callback()
        }

        const buffer = this.consume(8)
        const upper = buffer.readUInt32BE(0)

        // 2^31 is the maxinimum bytes an arraybuffer can contain
        // on 32-bit systems. Although, on 64-bit systems, this is
        // 2^53-1 bytes.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length
        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275
        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e
        if (upper > 2 ** 31 - 1) {
          failWebsocketConnection(this.ws, 'Received payload length > 2^31 bytes.')
          return
        }

        const lower = buffer.readUInt32BE(4)

        this.#info.payloadLength = (upper << 8) + lower
        this.#state = parserStates.READ_DATA
      } else if (this.#state === parserStates.READ_DATA) {
        if (this.#byteOffset < this.#info.payloadLength) {
          // If there is still more data in this chunk that needs to be read
          return callback()
        } else if (this.#byteOffset >= this.#info.payloadLength) {
          // If the server sent multiple frames in a single chunk

          const body = this.consume(this.#info.payloadLength)

          this.#fragments.push(body)

          // If the frame is unfragmented, or a fragmented frame was terminated,
          // a message was received
          if (!this.#info.fragmented || (this.#info.fin && this.#info.opcode === opcodes.CONTINUATION)) {
            const fullMessage = Buffer.concat(this.#fragments)

            websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage)

            this.#info = {}
            this.#fragments.length = 0
          }

          this.#state = parserStates.INFO
        }
      }

      if (this.#byteOffset > 0) {
        continue
      } else {
        callback()
        break
      }
    }
  }

  /**
   * Take n bytes from the buffered Buffers
   * @param {number} n
   * @returns {Buffer|null}
   */
  consume (n) {
    if (n > this.#byteOffset) {
      return null
    } else if (n === 0) {
      return emptyBuffer
    }

    if (this.#buffers[0].length === n) {
      this.#byteOffset -= this.#buffers[0].length
      return this.#buffers.shift()
    }

    const buffer = Buffer.allocUnsafe(n)
    let offset = 0

    while (offset !== n) {
      const next = this.#buffers[0]
      const { length } = next

      if (length + offset === n) {
        buffer.set(this.#buffers.shift(), offset)
        break
      } else if (length + offset > n) {
        buffer.set(next.subarray(0, n - offset), offset)
        this.#buffers[0] = next.subarray(n - offset)
        break
      } else {
        buffer.set(this.#buffers.shift(), offset)
        offset += next.length
      }
    }

    this.#byteOffset -= n

    return buffer
  }

  parseCloseBody (onlyCode, data) {
    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5
    /** @type {number|undefined} */
    let code

    if (data.length >= 2) {
      // _The WebSocket Connection Close Code_ is
      // defined as the status code (Section 7.4) contained in the first Close
      // control frame received by the application
      code = data.readUInt16BE(0)
    }

    if (onlyCode) {
      if (!isValidStatusCode(code)) {
        return null
      }

      return { code }
    }

    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6
    /** @type {Buffer} */
    let reason = data.subarray(2)

    // Remove BOM
    if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {
      reason = reason.subarray(3)
    }

    if (code !== undefined && !isValidStatusCode(code)) {
      return null
    }

    try {
      // TODO: optimize this
      reason = new TextDecoder('utf-8', { fatal: true }).decode(reason)
    } catch {
      return null
    }

    return { code, reason }
  }

  get closingInfo () {
    return this.#info.closeInfo
  }
}

module.exports = {
  ByteParser
}


/***/ }),

/***/ 6063:
/***/ ((module) => {

"use strict";


module.exports = {
  kWebSocketURL: Symbol('url'),
  kReadyState: Symbol('ready state'),
  kController: Symbol('controller'),
  kResponse: Symbol('response'),
  kBinaryType: Symbol('binary type'),
  kSentClose: Symbol('sent close'),
  kReceivedClose: Symbol('received close'),
  kByteParser: Symbol('byte parser')
}


/***/ }),

/***/ 588:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = __nccwpck_require__(6063)
const { states, opcodes } = __nccwpck_require__(7875)
const { MessageEvent, ErrorEvent } = __nccwpck_require__(8659)

/* globals Blob */

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isEstablished (ws) {
  // If the server's response is validated as provided for above, it is
  // said that _The WebSocket Connection is Established_ and that the
  // WebSocket Connection is in the OPEN state.
  return ws[kReadyState] === states.OPEN
}

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isClosing (ws) {
  // Upon either sending or receiving a Close control frame, it is said
  // that _The WebSocket Closing Handshake is Started_ and that the
  // WebSocket connection is in the CLOSING state.
  return ws[kReadyState] === states.CLOSING
}

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isClosed (ws) {
  return ws[kReadyState] === states.CLOSED
}

/**
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e
 * @param {EventTarget} target
 * @param {EventInit | undefined} eventInitDict
 */
function fireEvent (e, target, eventConstructor = Event, eventInitDict) {
  // 1. If eventConstructor is not given, then let eventConstructor be Event.

  // 2. Let event be the result of creating an event given eventConstructor,
  //    in the relevant realm of target.
  // 3. Initialize event’s type attribute to e.
  const event = new eventConstructor(e, eventInitDict) // eslint-disable-line new-cap

  // 4. Initialize any other IDL attributes of event as described in the
  //    invocation of this algorithm.

  // 5. Return the result of dispatching event at target, with legacy target
  //    override flag set if set.
  target.dispatchEvent(event)
}

/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @param {import('./websocket').WebSocket} ws
 * @param {number} type Opcode
 * @param {Buffer} data application data
 */
function websocketMessageReceived (ws, type, data) {
  // 1. If ready state is not OPEN (1), then return.
  if (ws[kReadyState] !== states.OPEN) {
    return
  }

  // 2. Let dataForEvent be determined by switching on type and binary type:
  let dataForEvent

  if (type === opcodes.TEXT) {
    // -> type indicates that the data is Text
    //      a new DOMString containing data
    try {
      dataForEvent = new TextDecoder('utf-8', { fatal: true }).decode(data)
    } catch {
      failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.')
      return
    }
  } else if (type === opcodes.BINARY) {
    if (ws[kBinaryType] === 'blob') {
      // -> type indicates that the data is Binary and binary type is "blob"
      //      a new Blob object, created in the relevant Realm of the WebSocket
      //      object, that represents data as its raw data
      dataForEvent = new Blob([data])
    } else {
      // -> type indicates that the data is Binary and binary type is "arraybuffer"
      //      a new ArrayBuffer object, created in the relevant Realm of the
      //      WebSocket object, whose contents are data
      dataForEvent = new Uint8Array(data).buffer
    }
  }

  // 3. Fire an event named message at the WebSocket object, using MessageEvent,
  //    with the origin attribute initialized to the serialization of the WebSocket
  //    object’s url's origin, and the data attribute initialized to dataForEvent.
  fireEvent('message', ws, MessageEvent, {
    origin: ws[kWebSocketURL].origin,
    data: dataForEvent
  })
}

/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455
 * @see https://datatracker.ietf.org/doc/html/rfc2616
 * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
 * @param {string} protocol
 */
function isValidSubprotocol (protocol) {
  // If present, this value indicates one
  // or more comma-separated subprotocol the client wishes to speak,
  // ordered by preference.  The elements that comprise this value
  // MUST be non-empty strings with characters in the range U+0021 to
  // U+007E not including separator characters as defined in
  // [RFC2616] and MUST all be unique strings.
  if (protocol.length === 0) {
    return false
  }

  for (const char of protocol) {
    const code = char.charCodeAt(0)

    if (
      code < 0x21 ||
      code > 0x7E ||
      char === '(' ||
      char === ')' ||
      char === '<' ||
      char === '>' ||
      char === '@' ||
      char === ',' ||
      char === ';' ||
      char === ':' ||
      char === '\\' ||
      char === '"' ||
      char === '/' ||
      char === '[' ||
      char === ']' ||
      char === '?' ||
      char === '=' ||
      char === '{' ||
      char === '}' ||
      code === 32 || // SP
      code === 9 // HT
    ) {
      return false
    }
  }

  return true
}

/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
 * @param {number} code
 */
function isValidStatusCode (code) {
  if (code >= 1000 && code < 1015) {
    return (
      code !== 1004 && // reserved
      code !== 1005 && // "MUST NOT be set as a status code"
      code !== 1006 // "MUST NOT be set as a status code"
    )
  }

  return code >= 3000 && code <= 4999
}

/**
 * @param {import('./websocket').WebSocket} ws
 * @param {string|undefined} reason
 */
function failWebsocketConnection (ws, reason) {
  const { [kController]: controller, [kResponse]: response } = ws

  controller.abort()

  if (response?.socket && !response.socket.destroyed) {
    response.socket.destroy()
  }

  if (reason) {
    fireEvent('error', ws, ErrorEvent, {
      error: new Error(reason)
    })
  }
}

module.exports = {
  isEstablished,
  isClosing,
  isClosed,
  fireEvent,
  isValidSubprotocol,
  isValidStatusCode,
  failWebsocketConnection,
  websocketMessageReceived
}


/***/ }),

/***/ 3853:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { webidl } = __nccwpck_require__(3476)
const { DOMException } = __nccwpck_require__(7536)
const { URLSerializer } = __nccwpck_require__(6960)
const { getGlobalOrigin } = __nccwpck_require__(742)
const { staticPropertyDescriptors, states, opcodes, emptyBuffer } = __nccwpck_require__(7875)
const {
  kWebSocketURL,
  kReadyState,
  kController,
  kBinaryType,
  kResponse,
  kSentClose,
  kByteParser
} = __nccwpck_require__(6063)
const { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = __nccwpck_require__(588)
const { establishWebSocketConnection } = __nccwpck_require__(3760)
const { WebsocketFrameSend } = __nccwpck_require__(4391)
const { ByteParser } = __nccwpck_require__(833)
const { kEnumerableProperty, isBlobLike } = __nccwpck_require__(4606)
const { getGlobalDispatcher } = __nccwpck_require__(9456)
const { types } = __nccwpck_require__(9023)

let experimentalWarned = false

// https://websockets.spec.whatwg.org/#interface-definition
class WebSocket extends EventTarget {
  #events = {
    open: null,
    error: null,
    close: null,
    message: null
  }

  #bufferedAmount = 0
  #protocol = ''
  #extensions = ''

  /**
   * @param {string} url
   * @param {string|string[]} protocols
   */
  constructor (url, protocols = []) {
    super()

    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket constructor' })

    if (!experimentalWarned) {
      experimentalWarned = true
      process.emitWarning('WebSockets are experimental, expect them to change at any time.', {
        code: 'UNDICI-WS'
      })
    }

    const options = webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'](protocols)

    url = webidl.converters.USVString(url)
    protocols = options.protocols

    // 1. Let baseURL be this's relevant settings object's API base URL.
    const baseURL = getGlobalOrigin()

    // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.
    let urlRecord

    try {
      urlRecord = new URL(url, baseURL)
    } catch (e) {
      // 3. If urlRecord is failure, then throw a "SyntaxError" DOMException.
      throw new DOMException(e, 'SyntaxError')
    }

    // 4. If urlRecord’s scheme is "http", then set urlRecord’s scheme to "ws".
    if (urlRecord.protocol === 'http:') {
      urlRecord.protocol = 'ws:'
    } else if (urlRecord.protocol === 'https:') {
      // 5. Otherwise, if urlRecord’s scheme is "https", set urlRecord’s scheme to "wss".
      urlRecord.protocol = 'wss:'
    }

    // 6. If urlRecord’s scheme is not "ws" or "wss", then throw a "SyntaxError" DOMException.
    if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {
      throw new DOMException(
        `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
        'SyntaxError'
      )
    }

    // 7. If urlRecord’s fragment is non-null, then throw a "SyntaxError"
    //    DOMException.
    if (urlRecord.hash || urlRecord.href.endsWith('#')) {
      throw new DOMException('Got fragment', 'SyntaxError')
    }

    // 8. If protocols is a string, set protocols to a sequence consisting
    //    of just that string.
    if (typeof protocols === 'string') {
      protocols = [protocols]
    }

    // 9. If any of the values in protocols occur more than once or otherwise
    //    fail to match the requirements for elements that comprise the value
    //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket
    //    protocol, then throw a "SyntaxError" DOMException.
    if (protocols.length !== new Set(protocols.map(p => p.toLowerCase())).size) {
      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')
    }

    if (protocols.length > 0 && !protocols.every(p => isValidSubprotocol(p))) {
      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')
    }

    // 10. Set this's url to urlRecord.
    this[kWebSocketURL] = new URL(urlRecord.href)

    // 11. Let client be this's relevant settings object.

    // 12. Run this step in parallel:

    //    1. Establish a WebSocket connection given urlRecord, protocols,
    //       and client.
    this[kController] = establishWebSocketConnection(
      urlRecord,
      protocols,
      this,
      (response) => this.#onConnectionEstablished(response),
      options
    )

    // Each WebSocket object has an associated ready state, which is a
    // number representing the state of the connection. Initially it must
    // be CONNECTING (0).
    this[kReadyState] = WebSocket.CONNECTING

    // The extensions attribute must initially return the empty string.

    // The protocol attribute must initially return the empty string.

    // Each WebSocket object has an associated binary type, which is a
    // BinaryType. Initially it must be "blob".
    this[kBinaryType] = 'blob'
  }

  /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-close
   * @param {number|undefined} code
   * @param {string|undefined} reason
   */
  close (code = undefined, reason = undefined) {
    webidl.brandCheck(this, WebSocket)

    if (code !== undefined) {
      code = webidl.converters['unsigned short'](code, { clamp: true })
    }

    if (reason !== undefined) {
      reason = webidl.converters.USVString(reason)
    }

    // 1. If code is present, but is neither an integer equal to 1000 nor an
    //    integer in the range 3000 to 4999, inclusive, throw an
    //    "InvalidAccessError" DOMException.
    if (code !== undefined) {
      if (code !== 1000 && (code < 3000 || code > 4999)) {
        throw new DOMException('invalid code', 'InvalidAccessError')
      }
    }

    let reasonByteLength = 0

    // 2. If reason is present, then run these substeps:
    if (reason !== undefined) {
      // 1. Let reasonBytes be the result of encoding reason.
      // 2. If reasonBytes is longer than 123 bytes, then throw a
      //    "SyntaxError" DOMException.
      reasonByteLength = Buffer.byteLength(reason)

      if (reasonByteLength > 123) {
        throw new DOMException(
          `Reason must be less than 123 bytes; received ${reasonByteLength}`,
          'SyntaxError'
        )
      }
    }

    // 3. Run the first matching steps from the following list:
    if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {
      // If this's ready state is CLOSING (2) or CLOSED (3)
      // Do nothing.
    } else if (!isEstablished(this)) {
      // If the WebSocket connection is not yet established
      // Fail the WebSocket connection and set this's ready state
      // to CLOSING (2).
      failWebsocketConnection(this, 'Connection was closed before it was established.')
      this[kReadyState] = WebSocket.CLOSING
    } else if (!isClosing(this)) {
      // If the WebSocket closing handshake has not yet been started
      // Start the WebSocket closing handshake and set this's ready
      // state to CLOSING (2).
      // - If neither code nor reason is present, the WebSocket Close
      //   message must not have a body.
      // - If code is present, then the status code to use in the
      //   WebSocket Close message must be the integer given by code.
      // - If reason is also present, then reasonBytes must be
      //   provided in the Close message after the status code.

      const frame = new WebsocketFrameSend()

      // If neither code nor reason is present, the WebSocket Close
      // message must not have a body.

      // If code is present, then the status code to use in the
      // WebSocket Close message must be the integer given by code.
      if (code !== undefined && reason === undefined) {
        frame.frameData = Buffer.allocUnsafe(2)
        frame.frameData.writeUInt16BE(code, 0)
      } else if (code !== undefined && reason !== undefined) {
        // If reason is also present, then reasonBytes must be
        // provided in the Close message after the status code.
        frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength)
        frame.frameData.writeUInt16BE(code, 0)
        // the body MAY contain UTF-8-encoded data with value /reason/
        frame.frameData.write(reason, 2, 'utf-8')
      } else {
        frame.frameData = emptyBuffer
      }

      /** @type {import('stream').Duplex} */
      const socket = this[kResponse].socket

      socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
        if (!err) {
          this[kSentClose] = true
        }
      })

      // Upon either sending or receiving a Close control frame, it is said
      // that _The WebSocket Closing Handshake is Started_ and that the
      // WebSocket connection is in the CLOSING state.
      this[kReadyState] = states.CLOSING
    } else {
      // Otherwise
      // Set this's ready state to CLOSING (2).
      this[kReadyState] = WebSocket.CLOSING
    }
  }

  /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-send
   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
   */
  send (data) {
    webidl.brandCheck(this, WebSocket)

    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket.send' })

    data = webidl.converters.WebSocketSendData(data)

    // 1. If this's ready state is CONNECTING, then throw an
    //    "InvalidStateError" DOMException.
    if (this[kReadyState] === WebSocket.CONNECTING) {
      throw new DOMException('Sent before connected.', 'InvalidStateError')
    }

    // 2. Run the appropriate set of steps from the following list:
    // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1
    // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2

    if (!isEstablished(this) || isClosing(this)) {
      return
    }

    /** @type {import('stream').Duplex} */
    const socket = this[kResponse].socket

    // If data is a string
    if (typeof data === 'string') {
      // If the WebSocket connection is established and the WebSocket
      // closing handshake has not yet started, then the user agent
      // must send a WebSocket Message comprised of the data argument
      // using a text frame opcode; if the data cannot be sent, e.g.
      // because it would need to be buffered but the buffer is full,
      // the user agent must flag the WebSocket as full and then close
      // the WebSocket connection. Any invocation of this method with a
      // string argument that does not throw an exception must increase
      // the bufferedAmount attribute by the number of bytes needed to
      // express the argument as UTF-8.

      const value = Buffer.from(data)
      const frame = new WebsocketFrameSend(value)
      const buffer = frame.createFrame(opcodes.TEXT)

      this.#bufferedAmount += value.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= value.byteLength
      })
    } else if (types.isArrayBuffer(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need
      // to be buffered but the buffer is full, the user agent must flag
      // the WebSocket as full and then close the WebSocket connection.
      // The data to be sent is the data stored in the buffer described
      // by the ArrayBuffer object. Any invocation of this method with an
      // ArrayBuffer argument that does not throw an exception must
      // increase the bufferedAmount attribute by the length of the
      // ArrayBuffer in bytes.

      const value = Buffer.from(data)
      const frame = new WebsocketFrameSend(value)
      const buffer = frame.createFrame(opcodes.BINARY)

      this.#bufferedAmount += value.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= value.byteLength
      })
    } else if (ArrayBuffer.isView(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need to
      // be buffered but the buffer is full, the user agent must flag the
      // WebSocket as full and then close the WebSocket connection. The
      // data to be sent is the data stored in the section of the buffer
      // described by the ArrayBuffer object that data references. Any
      // invocation of this method with this kind of argument that does
      // not throw an exception must increase the bufferedAmount attribute
      // by the length of data’s buffer in bytes.

      const ab = Buffer.from(data, data.byteOffset, data.byteLength)

      const frame = new WebsocketFrameSend(ab)
      const buffer = frame.createFrame(opcodes.BINARY)

      this.#bufferedAmount += ab.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= ab.byteLength
      })
    } else if (isBlobLike(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need to
      // be buffered but the buffer is full, the user agent must flag the
      // WebSocket as full and then close the WebSocket connection. The data
      // to be sent is the raw data represented by the Blob object. Any
      // invocation of this method with a Blob argument that does not throw
      // an exception must increase the bufferedAmount attribute by the size
      // of the Blob object’s raw data, in bytes.

      const frame = new WebsocketFrameSend()

      data.arrayBuffer().then((ab) => {
        const value = Buffer.from(ab)
        frame.frameData = value
        const buffer = frame.createFrame(opcodes.BINARY)

        this.#bufferedAmount += value.byteLength
        socket.write(buffer, () => {
          this.#bufferedAmount -= value.byteLength
        })
      })
    }
  }

  get readyState () {
    webidl.brandCheck(this, WebSocket)

    // The readyState getter steps are to return this's ready state.
    return this[kReadyState]
  }

  get bufferedAmount () {
    webidl.brandCheck(this, WebSocket)

    return this.#bufferedAmount
  }

  get url () {
    webidl.brandCheck(this, WebSocket)

    // The url getter steps are to return this's url, serialized.
    return URLSerializer(this[kWebSocketURL])
  }

  get extensions () {
    webidl.brandCheck(this, WebSocket)

    return this.#extensions
  }

  get protocol () {
    webidl.brandCheck(this, WebSocket)

    return this.#protocol
  }

  get onopen () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.open
  }

  set onopen (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.open) {
      this.removeEventListener('open', this.#events.open)
    }

    if (typeof fn === 'function') {
      this.#events.open = fn
      this.addEventListener('open', fn)
    } else {
      this.#events.open = null
    }
  }

  get onerror () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.error
  }

  set onerror (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.error) {
      this.removeEventListener('error', this.#events.error)
    }

    if (typeof fn === 'function') {
      this.#events.error = fn
      this.addEventListener('error', fn)
    } else {
      this.#events.error = null
    }
  }

  get onclose () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.close
  }

  set onclose (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.close) {
      this.removeEventListener('close', this.#events.close)
    }

    if (typeof fn === 'function') {
      this.#events.close = fn
      this.addEventListener('close', fn)
    } else {
      this.#events.close = null
    }
  }

  get onmessage () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.message
  }

  set onmessage (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.message) {
      this.removeEventListener('message', this.#events.message)
    }

    if (typeof fn === 'function') {
      this.#events.message = fn
      this.addEventListener('message', fn)
    } else {
      this.#events.message = null
    }
  }

  get binaryType () {
    webidl.brandCheck(this, WebSocket)

    return this[kBinaryType]
  }

  set binaryType (type) {
    webidl.brandCheck(this, WebSocket)

    if (type !== 'blob' && type !== 'arraybuffer') {
      this[kBinaryType] = 'blob'
    } else {
      this[kBinaryType] = type
    }
  }

  /**
   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
   */
  #onConnectionEstablished (response) {
    // processResponse is called when the "response’s header list has been received and initialized."
    // once this happens, the connection is open
    this[kResponse] = response

    const parser = new ByteParser(this)
    parser.on('drain', function onParserDrain () {
      this.ws[kResponse].socket.resume()
    })

    response.socket.ws = this
    this[kByteParser] = parser

    // 1. Change the ready state to OPEN (1).
    this[kReadyState] = states.OPEN

    // 2. Change the extensions attribute’s value to the extensions in use, if
    //    it is not the null value.
    // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1
    const extensions = response.headersList.get('sec-websocket-extensions')

    if (extensions !== null) {
      this.#extensions = extensions
    }

    // 3. Change the protocol attribute’s value to the subprotocol in use, if
    //    it is not the null value.
    // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9
    const protocol = response.headersList.get('sec-websocket-protocol')

    if (protocol !== null) {
      this.#protocol = protocol
    }

    // 4. Fire an event named open at the WebSocket object.
    fireEvent('open', this)
  }
}

// https://websockets.spec.whatwg.org/#dom-websocket-connecting
WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING
// https://websockets.spec.whatwg.org/#dom-websocket-open
WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN
// https://websockets.spec.whatwg.org/#dom-websocket-closing
WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING
// https://websockets.spec.whatwg.org/#dom-websocket-closed
WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED

Object.defineProperties(WebSocket.prototype, {
  CONNECTING: staticPropertyDescriptors,
  OPEN: staticPropertyDescriptors,
  CLOSING: staticPropertyDescriptors,
  CLOSED: staticPropertyDescriptors,
  url: kEnumerableProperty,
  readyState: kEnumerableProperty,
  bufferedAmount: kEnumerableProperty,
  onopen: kEnumerableProperty,
  onerror: kEnumerableProperty,
  onclose: kEnumerableProperty,
  close: kEnumerableProperty,
  onmessage: kEnumerableProperty,
  binaryType: kEnumerableProperty,
  send: kEnumerableProperty,
  extensions: kEnumerableProperty,
  protocol: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'WebSocket',
    writable: false,
    enumerable: false,
    configurable: true
  }
})

Object.defineProperties(WebSocket, {
  CONNECTING: staticPropertyDescriptors,
  OPEN: staticPropertyDescriptors,
  CLOSING: staticPropertyDescriptors,
  CLOSED: staticPropertyDescriptors
})

webidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(
  webidl.converters.DOMString
)

webidl.converters['DOMString or sequence<DOMString>'] = function (V) {
  if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {
    return webidl.converters['sequence<DOMString>'](V)
  }

  return webidl.converters.DOMString(V)
}

// This implements the propsal made in https://github.com/whatwg/websockets/issues/42
webidl.converters.WebSocketInit = webidl.dictionaryConverter([
  {
    key: 'protocols',
    converter: webidl.converters['DOMString or sequence<DOMString>'],
    get defaultValue () {
      return []
    }
  },
  {
    key: 'dispatcher',
    converter: (V) => V,
    get defaultValue () {
      return getGlobalDispatcher()
    }
  },
  {
    key: 'headers',
    converter: webidl.nullableConverter(webidl.converters.HeadersInit)
  }
])

webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function (V) {
  if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {
    return webidl.converters.WebSocketInit(V)
  }

  return { protocols: webidl.converters['DOMString or sequence<DOMString>'](V) }
}

webidl.converters.WebSocketSendData = function (V) {
  if (webidl.util.Type(V) === 'Object') {
    if (isBlobLike(V)) {
      return webidl.converters.Blob(V, { strict: false })
    }

    if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
      return webidl.converters.BufferSource(V)
    }
  }

  return webidl.converters.USVString(V)
}

module.exports = {
  WebSocket
}


/***/ }),

/***/ 5545:
/***/ ((module) => {

module.exports = eval("require")("supports-color");


/***/ }),

/***/ 2613:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 290:
/***/ ((module) => {

"use strict";
module.exports = require("async_hooks");

/***/ }),

/***/ 181:
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ 5317:
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ 4236:
/***/ ((module) => {

"use strict";
module.exports = require("console");

/***/ }),

/***/ 6982:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 1637:
/***/ ((module) => {

"use strict";
module.exports = require("diagnostics_channel");

/***/ }),

/***/ 4434:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 9896:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 1943:
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ 8611:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 5675:
/***/ ((module) => {

"use strict";
module.exports = require("http2");

/***/ }),

/***/ 5692:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 9278:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 7598:
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ 8474:
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ 7075:
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ 7975:
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ 857:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 6928:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 2987:
/***/ ((module) => {

"use strict";
module.exports = require("perf_hooks");

/***/ }),

/***/ 3480:
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ 2203:
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ 3774:
/***/ ((module) => {

"use strict";
module.exports = require("stream/web");

/***/ }),

/***/ 3193:
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ 3557:
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ 4756:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 2018:
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ 7016:
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ 9023:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 8253:
/***/ ((module) => {

"use strict";
module.exports = require("util/types");

/***/ }),

/***/ 8167:
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ 3106:
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ 6917:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const WritableStream = (__nccwpck_require__(7075).Writable)
const inherits = (__nccwpck_require__(7975).inherits)

const StreamSearch = __nccwpck_require__(2820)

const PartStream = __nccwpck_require__(5341)
const HeaderParser = __nccwpck_require__(6890)

const DASH = 45
const B_ONEDASH = Buffer.from('-')
const B_CRLF = Buffer.from('\r\n')
const EMPTY_FN = function () {}

function Dicer (cfg) {
  if (!(this instanceof Dicer)) { return new Dicer(cfg) }
  WritableStream.call(this, cfg)

  if (!cfg || (!cfg.headerFirst && typeof cfg.boundary !== 'string')) { throw new TypeError('Boundary required') }

  if (typeof cfg.boundary === 'string') { this.setBoundary(cfg.boundary) } else { this._bparser = undefined }

  this._headerFirst = cfg.headerFirst

  this._dashes = 0
  this._parts = 0
  this._finished = false
  this._realFinish = false
  this._isPreamble = true
  this._justMatched = false
  this._firstWrite = true
  this._inHeader = true
  this._part = undefined
  this._cb = undefined
  this._ignoreData = false
  this._partOpts = { highWaterMark: cfg.partHwm }
  this._pause = false

  const self = this
  this._hparser = new HeaderParser(cfg)
  this._hparser.on('header', function (header) {
    self._inHeader = false
    self._part.emit('header', header)
  })
}
inherits(Dicer, WritableStream)

Dicer.prototype.emit = function (ev) {
  if (ev === 'finish' && !this._realFinish) {
    if (!this._finished) {
      const self = this
      process.nextTick(function () {
        self.emit('error', new Error('Unexpected end of multipart data'))
        if (self._part && !self._ignoreData) {
          const type = (self._isPreamble ? 'Preamble' : 'Part')
          self._part.emit('error', new Error(type + ' terminated early due to unexpected end of multipart data'))
          self._part.push(null)
          process.nextTick(function () {
            self._realFinish = true
            self.emit('finish')
            self._realFinish = false
          })
          return
        }
        self._realFinish = true
        self.emit('finish')
        self._realFinish = false
      })
    }
  } else { WritableStream.prototype.emit.apply(this, arguments) }
}

Dicer.prototype._write = function (data, encoding, cb) {
  // ignore unexpected data (e.g. extra trailer data after finished)
  if (!this._hparser && !this._bparser) { return cb() }

  if (this._headerFirst && this._isPreamble) {
    if (!this._part) {
      this._part = new PartStream(this._partOpts)
      if (this.listenerCount('preamble') !== 0) { this.emit('preamble', this._part) } else { this._ignore() }
    }
    const r = this._hparser.push(data)
    if (!this._inHeader && r !== undefined && r < data.length) { data = data.slice(r) } else { return cb() }
  }

  // allows for "easier" testing
  if (this._firstWrite) {
    this._bparser.push(B_CRLF)
    this._firstWrite = false
  }

  this._bparser.push(data)

  if (this._pause) { this._cb = cb } else { cb() }
}

Dicer.prototype.reset = function () {
  this._part = undefined
  this._bparser = undefined
  this._hparser = undefined
}

Dicer.prototype.setBoundary = function (boundary) {
  const self = this
  this._bparser = new StreamSearch('\r\n--' + boundary)
  this._bparser.on('info', function (isMatch, data, start, end) {
    self._oninfo(isMatch, data, start, end)
  })
}

Dicer.prototype._ignore = function () {
  if (this._part && !this._ignoreData) {
    this._ignoreData = true
    this._part.on('error', EMPTY_FN)
    // we must perform some kind of read on the stream even though we are
    // ignoring the data, otherwise node's Readable stream will not emit 'end'
    // after pushing null to the stream
    this._part.resume()
  }
}

Dicer.prototype._oninfo = function (isMatch, data, start, end) {
  let buf; const self = this; let i = 0; let r; let shouldWriteMore = true

  if (!this._part && this._justMatched && data) {
    while (this._dashes < 2 && (start + i) < end) {
      if (data[start + i] === DASH) {
        ++i
        ++this._dashes
      } else {
        if (this._dashes) { buf = B_ONEDASH }
        this._dashes = 0
        break
      }
    }
    if (this._dashes === 2) {
      if ((start + i) < end && this.listenerCount('trailer') !== 0) { this.emit('trailer', data.slice(start + i, end)) }
      this.reset()
      this._finished = true
      // no more parts will be added
      if (self._parts === 0) {
        self._realFinish = true
        self.emit('finish')
        self._realFinish = false
      }
    }
    if (this._dashes) { return }
  }
  if (this._justMatched) { this._justMatched = false }
  if (!this._part) {
    this._part = new PartStream(this._partOpts)
    this._part._read = function (n) {
      self._unpause()
    }
    if (this._isPreamble && this.listenerCount('preamble') !== 0) {
      this.emit('preamble', this._part)
    } else if (this._isPreamble !== true && this.listenerCount('part') !== 0) {
      this.emit('part', this._part)
    } else {
      this._ignore()
    }
    if (!this._isPreamble) { this._inHeader = true }
  }
  if (data && start < end && !this._ignoreData) {
    if (this._isPreamble || !this._inHeader) {
      if (buf) { shouldWriteMore = this._part.push(buf) }
      shouldWriteMore = this._part.push(data.slice(start, end))
      if (!shouldWriteMore) { this._pause = true }
    } else if (!this._isPreamble && this._inHeader) {
      if (buf) { this._hparser.push(buf) }
      r = this._hparser.push(data.slice(start, end))
      if (!this._inHeader && r !== undefined && r < end) { this._oninfo(false, data, start + r, end) }
    }
  }
  if (isMatch) {
    this._hparser.reset()
    if (this._isPreamble) { this._isPreamble = false } else {
      if (start !== end) {
        ++this._parts
        this._part.on('end', function () {
          if (--self._parts === 0) {
            if (self._finished) {
              self._realFinish = true
              self.emit('finish')
              self._realFinish = false
            } else {
              self._unpause()
            }
          }
        })
      }
    }
    this._part.push(null)
    this._part = undefined
    this._ignoreData = false
    this._justMatched = true
    this._dashes = 0
  }
}

Dicer.prototype._unpause = function () {
  if (!this._pause) { return }

  this._pause = false
  if (this._cb) {
    const cb = this._cb
    this._cb = undefined
    cb()
  }
}

module.exports = Dicer


/***/ }),

/***/ 6890:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const EventEmitter = (__nccwpck_require__(8474).EventEmitter)
const inherits = (__nccwpck_require__(7975).inherits)
const getLimit = __nccwpck_require__(1954)

const StreamSearch = __nccwpck_require__(2820)

const B_DCRLF = Buffer.from('\r\n\r\n')
const RE_CRLF = /\r\n/g
const RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/ // eslint-disable-line no-control-regex

function HeaderParser (cfg) {
  EventEmitter.call(this)

  cfg = cfg || {}
  const self = this
  this.nread = 0
  this.maxed = false
  this.npairs = 0
  this.maxHeaderPairs = getLimit(cfg, 'maxHeaderPairs', 2000)
  this.maxHeaderSize = getLimit(cfg, 'maxHeaderSize', 80 * 1024)
  this.buffer = ''
  this.header = {}
  this.finished = false
  this.ss = new StreamSearch(B_DCRLF)
  this.ss.on('info', function (isMatch, data, start, end) {
    if (data && !self.maxed) {
      if (self.nread + end - start >= self.maxHeaderSize) {
        end = self.maxHeaderSize - self.nread + start
        self.nread = self.maxHeaderSize
        self.maxed = true
      } else { self.nread += (end - start) }

      self.buffer += data.toString('binary', start, end)
    }
    if (isMatch) { self._finish() }
  })
}
inherits(HeaderParser, EventEmitter)

HeaderParser.prototype.push = function (data) {
  const r = this.ss.push(data)
  if (this.finished) { return r }
}

HeaderParser.prototype.reset = function () {
  this.finished = false
  this.buffer = ''
  this.header = {}
  this.ss.reset()
}

HeaderParser.prototype._finish = function () {
  if (this.buffer) { this._parseHeader() }
  this.ss.matches = this.ss.maxMatches
  const header = this.header
  this.header = {}
  this.buffer = ''
  this.finished = true
  this.nread = this.npairs = 0
  this.maxed = false
  this.emit('header', header)
}

HeaderParser.prototype._parseHeader = function () {
  if (this.npairs === this.maxHeaderPairs) { return }

  const lines = this.buffer.split(RE_CRLF)
  const len = lines.length
  let m, h

  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    if (lines[i].length === 0) { continue }
    if (lines[i][0] === '\t' || lines[i][0] === ' ') {
      // folded header content
      // RFC2822 says to just remove the CRLF and not the whitespace following
      // it, so we follow the RFC and include the leading whitespace ...
      if (h) {
        this.header[h][this.header[h].length - 1] += lines[i]
        continue
      }
    }

    const posColon = lines[i].indexOf(':')
    if (
      posColon === -1 ||
      posColon === 0
    ) {
      return
    }
    m = RE_HDR.exec(lines[i])
    h = m[1].toLowerCase()
    this.header[h] = this.header[h] || []
    this.header[h].push((m[2] || ''))
    if (++this.npairs === this.maxHeaderPairs) { break }
  }
}

module.exports = HeaderParser


/***/ }),

/***/ 5341:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const inherits = (__nccwpck_require__(7975).inherits)
const ReadableStream = (__nccwpck_require__(7075).Readable)

function PartStream (opts) {
  ReadableStream.call(this, opts)
}
inherits(PartStream, ReadableStream)

PartStream.prototype._read = function (n) {}

module.exports = PartStream


/***/ }),

/***/ 2820:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


/**
 * Copyright Brian White. All rights reserved.
 *
 * @see https://github.com/mscdex/streamsearch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation
 * by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool
 */
const EventEmitter = (__nccwpck_require__(8474).EventEmitter)
const inherits = (__nccwpck_require__(7975).inherits)

function SBMH (needle) {
  if (typeof needle === 'string') {
    needle = Buffer.from(needle)
  }

  if (!Buffer.isBuffer(needle)) {
    throw new TypeError('The needle has to be a String or a Buffer.')
  }

  const needleLength = needle.length

  if (needleLength === 0) {
    throw new Error('The needle cannot be an empty String/Buffer.')
  }

  if (needleLength > 256) {
    throw new Error('The needle cannot have a length bigger than 256.')
  }

  this.maxMatches = Infinity
  this.matches = 0

  this._occ = new Array(256)
    .fill(needleLength) // Initialize occurrence table.
  this._lookbehind_size = 0
  this._needle = needle
  this._bufpos = 0

  this._lookbehind = Buffer.alloc(needleLength)

  // Populate occurrence table with analysis of the needle,
  // ignoring last letter.
  for (var i = 0; i < needleLength - 1; ++i) { // eslint-disable-line no-var
    this._occ[needle[i]] = needleLength - 1 - i
  }
}
inherits(SBMH, EventEmitter)

SBMH.prototype.reset = function () {
  this._lookbehind_size = 0
  this.matches = 0
  this._bufpos = 0
}

SBMH.prototype.push = function (chunk, pos) {
  if (!Buffer.isBuffer(chunk)) {
    chunk = Buffer.from(chunk, 'binary')
  }
  const chlen = chunk.length
  this._bufpos = pos || 0
  let r
  while (r !== chlen && this.matches < this.maxMatches) { r = this._sbmh_feed(chunk) }
  return r
}

SBMH.prototype._sbmh_feed = function (data) {
  const len = data.length
  const needle = this._needle
  const needleLength = needle.length
  const lastNeedleChar = needle[needleLength - 1]

  // Positive: points to a position in `data`
  //           pos == 3 points to data[3]
  // Negative: points to a position in the lookbehind buffer
  //           pos == -2 points to lookbehind[lookbehind_size - 2]
  let pos = -this._lookbehind_size
  let ch

  if (pos < 0) {
    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool
    // search with character lookup code that considers both the
    // lookbehind buffer and the current round's haystack data.
    //
    // Loop until
    //   there is a match.
    // or until
    //   we've moved past the position that requires the
    //   lookbehind buffer. In this case we switch to the
    //   optimized loop.
    // or until
    //   the character to look at lies outside the haystack.
    while (pos < 0 && pos <= len - needleLength) {
      ch = this._sbmh_lookup_char(data, pos + needleLength - 1)

      if (
        ch === lastNeedleChar &&
        this._sbmh_memcmp(data, pos, needleLength - 1)
      ) {
        this._lookbehind_size = 0
        ++this.matches
        this.emit('info', true)

        return (this._bufpos = pos + needleLength)
      }
      pos += this._occ[ch]
    }

    // No match.

    if (pos < 0) {
      // There's too few data for Boyer-Moore-Horspool to run,
      // so let's use a different algorithm to skip as much as
      // we can.
      // Forward pos until
      //   the trailing part of lookbehind + data
      //   looks like the beginning of the needle
      // or until
      //   pos == 0
      while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) { ++pos }
    }

    if (pos >= 0) {
      // Discard lookbehind buffer.
      this.emit('info', false, this._lookbehind, 0, this._lookbehind_size)
      this._lookbehind_size = 0
    } else {
      // Cut off part of the lookbehind buffer that has
      // been processed and append the entire haystack
      // into it.
      const bytesToCutOff = this._lookbehind_size + pos
      if (bytesToCutOff > 0) {
        // The cut off data is guaranteed not to contain the needle.
        this.emit('info', false, this._lookbehind, 0, bytesToCutOff)
      }

      this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff,
        this._lookbehind_size - bytesToCutOff)
      this._lookbehind_size -= bytesToCutOff

      data.copy(this._lookbehind, this._lookbehind_size)
      this._lookbehind_size += len

      this._bufpos = len
      return len
    }
  }

  pos += (pos >= 0) * this._bufpos

  // Lookbehind buffer is now empty. We only need to check if the
  // needle is in the haystack.
  if (data.indexOf(needle, pos) !== -1) {
    pos = data.indexOf(needle, pos)
    ++this.matches
    if (pos > 0) { this.emit('info', true, data, this._bufpos, pos) } else { this.emit('info', true) }

    return (this._bufpos = pos + needleLength)
  } else {
    pos = len - needleLength
  }

  // There was no match. If there's trailing haystack data that we cannot
  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing
  // data is less than the needle size) then match using a modified
  // algorithm that starts matching from the beginning instead of the end.
  // Whatever trailing data is left after running this algorithm is added to
  // the lookbehind buffer.
  while (
    pos < len &&
    (
      data[pos] !== needle[0] ||
      (
        (Buffer.compare(
          data.subarray(pos, pos + len - pos),
          needle.subarray(0, len - pos)
        ) !== 0)
      )
    )
  ) {
    ++pos
  }
  if (pos < len) {
    data.copy(this._lookbehind, 0, pos, pos + (len - pos))
    this._lookbehind_size = len - pos
  }

  // Everything until pos is guaranteed not to contain needle data.
  if (pos > 0) { this.emit('info', false, data, this._bufpos, pos < len ? pos : len) }

  this._bufpos = len
  return len
}

SBMH.prototype._sbmh_lookup_char = function (data, pos) {
  return (pos < 0)
    ? this._lookbehind[this._lookbehind_size + pos]
    : data[pos]
}

SBMH.prototype._sbmh_memcmp = function (data, pos, len) {
  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) { return false }
  }
  return true
}

module.exports = SBMH


/***/ }),

/***/ 9766:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const WritableStream = (__nccwpck_require__(7075).Writable)
const { inherits } = __nccwpck_require__(7975)
const Dicer = __nccwpck_require__(6917)

const MultipartParser = __nccwpck_require__(4945)
const UrlencodedParser = __nccwpck_require__(1724)
const parseParams = __nccwpck_require__(6812)

function Busboy (opts) {
  if (!(this instanceof Busboy)) { return new Busboy(opts) }

  if (typeof opts !== 'object') {
    throw new TypeError('Busboy expected an options-Object.')
  }
  if (typeof opts.headers !== 'object') {
    throw new TypeError('Busboy expected an options-Object with headers-attribute.')
  }
  if (typeof opts.headers['content-type'] !== 'string') {
    throw new TypeError('Missing Content-Type-header.')
  }

  const {
    headers,
    ...streamOptions
  } = opts

  this.opts = {
    autoDestroy: false,
    ...streamOptions
  }
  WritableStream.call(this, this.opts)

  this._done = false
  this._parser = this.getParserByHeaders(headers)
  this._finished = false
}
inherits(Busboy, WritableStream)

Busboy.prototype.emit = function (ev) {
  if (ev === 'finish') {
    if (!this._done) {
      this._parser?.end()
      return
    } else if (this._finished) {
      return
    }
    this._finished = true
  }
  WritableStream.prototype.emit.apply(this, arguments)
}

Busboy.prototype.getParserByHeaders = function (headers) {
  const parsed = parseParams(headers['content-type'])

  const cfg = {
    defCharset: this.opts.defCharset,
    fileHwm: this.opts.fileHwm,
    headers,
    highWaterMark: this.opts.highWaterMark,
    isPartAFile: this.opts.isPartAFile,
    limits: this.opts.limits,
    parsedConType: parsed,
    preservePath: this.opts.preservePath
  }

  if (MultipartParser.detect.test(parsed[0])) {
    return new MultipartParser(this, cfg)
  }
  if (UrlencodedParser.detect.test(parsed[0])) {
    return new UrlencodedParser(this, cfg)
  }
  throw new Error('Unsupported Content-Type.')
}

Busboy.prototype._write = function (chunk, encoding, cb) {
  this._parser.write(chunk, cb)
}

module.exports = Busboy
module.exports["default"] = Busboy
module.exports.Busboy = Busboy

module.exports.Dicer = Dicer


/***/ }),

/***/ 4945:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


// TODO:
//  * support 1 nested multipart level
//    (see second multipart example here:
//     http://www.w3.org/TR/html401/interact/forms.html#didx-multipartform-data)
//  * support limits.fieldNameSize
//     -- this will require modifications to utils.parseParams

const { Readable } = __nccwpck_require__(7075)
const { inherits } = __nccwpck_require__(7975)

const Dicer = __nccwpck_require__(6917)

const parseParams = __nccwpck_require__(6812)
const decodeText = __nccwpck_require__(3772)
const basename = __nccwpck_require__(4935)
const getLimit = __nccwpck_require__(1954)

const RE_BOUNDARY = /^boundary$/i
const RE_FIELD = /^form-data$/i
const RE_CHARSET = /^charset$/i
const RE_FILENAME = /^filename$/i
const RE_NAME = /^name$/i

Multipart.detect = /^multipart\/form-data/i
function Multipart (boy, cfg) {
  let i
  let len
  const self = this
  let boundary
  const limits = cfg.limits
  const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => (contentType === 'application/octet-stream' || fileName !== undefined))
  const parsedConType = cfg.parsedConType || []
  const defCharset = cfg.defCharset || 'utf8'
  const preservePath = cfg.preservePath
  const fileOpts = { highWaterMark: cfg.fileHwm }

  for (i = 0, len = parsedConType.length; i < len; ++i) {
    if (Array.isArray(parsedConType[i]) &&
      RE_BOUNDARY.test(parsedConType[i][0])) {
      boundary = parsedConType[i][1]
      break
    }
  }

  function checkFinished () {
    if (nends === 0 && finished && !boy._done) {
      finished = false
      self.end()
    }
  }

  if (typeof boundary !== 'string') { throw new Error('Multipart: Boundary not found') }

  const fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)
  const fileSizeLimit = getLimit(limits, 'fileSize', Infinity)
  const filesLimit = getLimit(limits, 'files', Infinity)
  const fieldsLimit = getLimit(limits, 'fields', Infinity)
  const partsLimit = getLimit(limits, 'parts', Infinity)
  const headerPairsLimit = getLimit(limits, 'headerPairs', 2000)
  const headerSizeLimit = getLimit(limits, 'headerSize', 80 * 1024)

  let nfiles = 0
  let nfields = 0
  let nends = 0
  let curFile
  let curField
  let finished = false

  this._needDrain = false
  this._pause = false
  this._cb = undefined
  this._nparts = 0
  this._boy = boy

  const parserCfg = {
    boundary,
    maxHeaderPairs: headerPairsLimit,
    maxHeaderSize: headerSizeLimit,
    partHwm: fileOpts.highWaterMark,
    highWaterMark: cfg.highWaterMark
  }

  this.parser = new Dicer(parserCfg)
  this.parser.on('drain', function () {
    self._needDrain = false
    if (self._cb && !self._pause) {
      const cb = self._cb
      self._cb = undefined
      cb()
    }
  }).on('part', function onPart (part) {
    if (++self._nparts > partsLimit) {
      self.parser.removeListener('part', onPart)
      self.parser.on('part', skipPart)
      boy.hitPartsLimit = true
      boy.emit('partsLimit')
      return skipPart(part)
    }

    // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let
    // us emit 'end' early since we know the part has ended if we are already
    // seeing the next part
    if (curField) {
      const field = curField
      field.emit('end')
      field.removeAllListeners('end')
    }

    part.on('header', function (header) {
      let contype
      let fieldname
      let parsed
      let charset
      let encoding
      let filename
      let nsize = 0

      if (header['content-type']) {
        parsed = parseParams(header['content-type'][0])
        if (parsed[0]) {
          contype = parsed[0].toLowerCase()
          for (i = 0, len = parsed.length; i < len; ++i) {
            if (RE_CHARSET.test(parsed[i][0])) {
              charset = parsed[i][1].toLowerCase()
              break
            }
          }
        }
      }

      if (contype === undefined) { contype = 'text/plain' }
      if (charset === undefined) { charset = defCharset }

      if (header['content-disposition']) {
        parsed = parseParams(header['content-disposition'][0])
        if (!RE_FIELD.test(parsed[0])) { return skipPart(part) }
        for (i = 0, len = parsed.length; i < len; ++i) {
          if (RE_NAME.test(parsed[i][0])) {
            fieldname = parsed[i][1]
          } else if (RE_FILENAME.test(parsed[i][0])) {
            filename = parsed[i][1]
            if (!preservePath) { filename = basename(filename) }
          }
        }
      } else { return skipPart(part) }

      if (header['content-transfer-encoding']) { encoding = header['content-transfer-encoding'][0].toLowerCase() } else { encoding = '7bit' }

      let onData,
        onEnd

      if (isPartAFile(fieldname, contype, filename)) {
        // file/binary field
        if (nfiles === filesLimit) {
          if (!boy.hitFilesLimit) {
            boy.hitFilesLimit = true
            boy.emit('filesLimit')
          }
          return skipPart(part)
        }

        ++nfiles

        if (boy.listenerCount('file') === 0) {
          self.parser._ignore()
          return
        }

        ++nends
        const file = new FileStream(fileOpts)
        curFile = file
        file.on('end', function () {
          --nends
          self._pause = false
          checkFinished()
          if (self._cb && !self._needDrain) {
            const cb = self._cb
            self._cb = undefined
            cb()
          }
        })
        file._read = function (n) {
          if (!self._pause) { return }
          self._pause = false
          if (self._cb && !self._needDrain) {
            const cb = self._cb
            self._cb = undefined
            cb()
          }
        }
        boy.emit('file', fieldname, file, filename, encoding, contype)

        onData = function (data) {
          if ((nsize += data.length) > fileSizeLimit) {
            const extralen = fileSizeLimit - nsize + data.length
            if (extralen > 0) { file.push(data.slice(0, extralen)) }
            file.truncated = true
            file.bytesRead = fileSizeLimit
            part.removeAllListeners('data')
            file.emit('limit')
            return
          } else if (!file.push(data)) { self._pause = true }

          file.bytesRead = nsize
        }

        onEnd = function () {
          curFile = undefined
          file.push(null)
        }
      } else {
        // non-file field
        if (nfields === fieldsLimit) {
          if (!boy.hitFieldsLimit) {
            boy.hitFieldsLimit = true
            boy.emit('fieldsLimit')
          }
          return skipPart(part)
        }

        ++nfields
        ++nends
        let buffer = ''
        let truncated = false
        curField = part

        onData = function (data) {
          if ((nsize += data.length) > fieldSizeLimit) {
            const extralen = (fieldSizeLimit - (nsize - data.length))
            buffer += data.toString('binary', 0, extralen)
            truncated = true
            part.removeAllListeners('data')
          } else { buffer += data.toString('binary') }
        }

        onEnd = function () {
          curField = undefined
          if (buffer.length) { buffer = decodeText(buffer, 'binary', charset) }
          boy.emit('field', fieldname, buffer, false, truncated, encoding, contype)
          --nends
          checkFinished()
        }
      }

      /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become
         broken. Streams2/streams3 is a huge black box of confusion, but
         somehow overriding the sync state seems to fix things again (and still
         seems to work for previous node versions).
      */
      part._readableState.sync = false

      part.on('data', onData)
      part.on('end', onEnd)
    }).on('error', function (err) {
      if (curFile) { curFile.emit('error', err) }
    })
  }).on('error', function (err) {
    boy.emit('error', err)
  }).on('finish', function () {
    finished = true
    checkFinished()
  })
}

Multipart.prototype.write = function (chunk, cb) {
  const r = this.parser.write(chunk)
  if (r && !this._pause) {
    cb()
  } else {
    this._needDrain = !r
    this._cb = cb
  }
}

Multipart.prototype.end = function () {
  const self = this

  if (self.parser.writable) {
    self.parser.end()
  } else if (!self._boy._done) {
    process.nextTick(function () {
      self._boy._done = true
      self._boy.emit('finish')
    })
  }
}

function skipPart (part) {
  part.resume()
}

function FileStream (opts) {
  Readable.call(this, opts)

  this.bytesRead = 0

  this.truncated = false
}

inherits(FileStream, Readable)

FileStream.prototype._read = function (n) {}

module.exports = Multipart


/***/ }),

/***/ 1724:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Decoder = __nccwpck_require__(393)
const decodeText = __nccwpck_require__(3772)
const getLimit = __nccwpck_require__(1954)

const RE_CHARSET = /^charset$/i

UrlEncoded.detect = /^application\/x-www-form-urlencoded/i
function UrlEncoded (boy, cfg) {
  const limits = cfg.limits
  const parsedConType = cfg.parsedConType
  this.boy = boy

  this.fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)
  this.fieldNameSizeLimit = getLimit(limits, 'fieldNameSize', 100)
  this.fieldsLimit = getLimit(limits, 'fields', Infinity)

  let charset
  for (var i = 0, len = parsedConType.length; i < len; ++i) { // eslint-disable-line no-var
    if (Array.isArray(parsedConType[i]) &&
        RE_CHARSET.test(parsedConType[i][0])) {
      charset = parsedConType[i][1].toLowerCase()
      break
    }
  }

  if (charset === undefined) { charset = cfg.defCharset || 'utf8' }

  this.decoder = new Decoder()
  this.charset = charset
  this._fields = 0
  this._state = 'key'
  this._checkingBytes = true
  this._bytesKey = 0
  this._bytesVal = 0
  this._key = ''
  this._val = ''
  this._keyTrunc = false
  this._valTrunc = false
  this._hitLimit = false
}

UrlEncoded.prototype.write = function (data, cb) {
  if (this._fields === this.fieldsLimit) {
    if (!this.boy.hitFieldsLimit) {
      this.boy.hitFieldsLimit = true
      this.boy.emit('fieldsLimit')
    }
    return cb()
  }

  let idxeq; let idxamp; let i; let p = 0; const len = data.length

  while (p < len) {
    if (this._state === 'key') {
      idxeq = idxamp = undefined
      for (i = p; i < len; ++i) {
        if (!this._checkingBytes) { ++p }
        if (data[i] === 0x3D/* = */) {
          idxeq = i
          break
        } else if (data[i] === 0x26/* & */) {
          idxamp = i
          break
        }
        if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
          this._hitLimit = true
          break
        } else if (this._checkingBytes) { ++this._bytesKey }
      }

      if (idxeq !== undefined) {
        // key with assignment
        if (idxeq > p) { this._key += this.decoder.write(data.toString('binary', p, idxeq)) }
        this._state = 'val'

        this._hitLimit = false
        this._checkingBytes = true
        this._val = ''
        this._bytesVal = 0
        this._valTrunc = false
        this.decoder.reset()

        p = idxeq + 1
      } else if (idxamp !== undefined) {
        // key with no assignment
        ++this._fields
        let key; const keyTrunc = this._keyTrunc
        if (idxamp > p) { key = (this._key += this.decoder.write(data.toString('binary', p, idxamp))) } else { key = this._key }

        this._hitLimit = false
        this._checkingBytes = true
        this._key = ''
        this._bytesKey = 0
        this._keyTrunc = false
        this.decoder.reset()

        if (key.length) {
          this.boy.emit('field', decodeText(key, 'binary', this.charset),
            '',
            keyTrunc,
            false)
        }

        p = idxamp + 1
        if (this._fields === this.fieldsLimit) { return cb() }
      } else if (this._hitLimit) {
        // we may not have hit the actual limit if there are encoded bytes...
        if (i > p) { this._key += this.decoder.write(data.toString('binary', p, i)) }
        p = i
        if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
          // yep, we actually did hit the limit
          this._checkingBytes = false
          this._keyTrunc = true
        }
      } else {
        if (p < len) { this._key += this.decoder.write(data.toString('binary', p)) }
        p = len
      }
    } else {
      idxamp = undefined
      for (i = p; i < len; ++i) {
        if (!this._checkingBytes) { ++p }
        if (data[i] === 0x26/* & */) {
          idxamp = i
          break
        }
        if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
          this._hitLimit = true
          break
        } else if (this._checkingBytes) { ++this._bytesVal }
      }

      if (idxamp !== undefined) {
        ++this._fields
        if (idxamp > p) { this._val += this.decoder.write(data.toString('binary', p, idxamp)) }
        this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
          decodeText(this._val, 'binary', this.charset),
          this._keyTrunc,
          this._valTrunc)
        this._state = 'key'

        this._hitLimit = false
        this._checkingBytes = true
        this._key = ''
        this._bytesKey = 0
        this._keyTrunc = false
        this.decoder.reset()

        p = idxamp + 1
        if (this._fields === this.fieldsLimit) { return cb() }
      } else if (this._hitLimit) {
        // we may not have hit the actual limit if there are encoded bytes...
        if (i > p) { this._val += this.decoder.write(data.toString('binary', p, i)) }
        p = i
        if ((this._val === '' && this.fieldSizeLimit === 0) ||
            (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
          // yep, we actually did hit the limit
          this._checkingBytes = false
          this._valTrunc = true
        }
      } else {
        if (p < len) { this._val += this.decoder.write(data.toString('binary', p)) }
        p = len
      }
    }
  }
  cb()
}

UrlEncoded.prototype.end = function () {
  if (this.boy._done) { return }

  if (this._state === 'key' && this._key.length > 0) {
    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
      '',
      this._keyTrunc,
      false)
  } else if (this._state === 'val') {
    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
      decodeText(this._val, 'binary', this.charset),
      this._keyTrunc,
      this._valTrunc)
  }
  this.boy._done = true
  this.boy.emit('finish')
}

module.exports = UrlEncoded


/***/ }),

/***/ 393:
/***/ ((module) => {

"use strict";


const RE_PLUS = /\+/g

const HEX = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

function Decoder () {
  this.buffer = undefined
}
Decoder.prototype.write = function (str) {
  // Replace '+' with ' ' before decoding
  str = str.replace(RE_PLUS, ' ')
  let res = ''
  let i = 0; let p = 0; const len = str.length
  for (; i < len; ++i) {
    if (this.buffer !== undefined) {
      if (!HEX[str.charCodeAt(i)]) {
        res += '%' + this.buffer
        this.buffer = undefined
        --i // retry character
      } else {
        this.buffer += str[i]
        ++p
        if (this.buffer.length === 2) {
          res += String.fromCharCode(parseInt(this.buffer, 16))
          this.buffer = undefined
        }
      }
    } else if (str[i] === '%') {
      if (i > p) {
        res += str.substring(p, i)
        p = i
      }
      this.buffer = ''
      ++p
    }
  }
  if (p < len && this.buffer === undefined) { res += str.substring(p) }
  return res
}
Decoder.prototype.reset = function () {
  this.buffer = undefined
}

module.exports = Decoder


/***/ }),

/***/ 4935:
/***/ ((module) => {

"use strict";


module.exports = function basename (path) {
  if (typeof path !== 'string') { return '' }
  for (var i = path.length - 1; i >= 0; --i) { // eslint-disable-line no-var
    switch (path.charCodeAt(i)) {
      case 0x2F: // '/'
      case 0x5C: // '\'
        path = path.slice(i + 1)
        return (path === '..' || path === '.' ? '' : path)
    }
  }
  return (path === '..' || path === '.' ? '' : path)
}


/***/ }),

/***/ 3772:
/***/ (function(module) {

"use strict";


// Node has always utf-8
const utf8Decoder = new TextDecoder('utf-8')
const textDecoders = new Map([
  ['utf-8', utf8Decoder],
  ['utf8', utf8Decoder]
])

function getDecoder (charset) {
  let lc
  while (true) {
    switch (charset) {
      case 'utf-8':
      case 'utf8':
        return decoders.utf8
      case 'latin1':
      case 'ascii': // TODO: Make these a separate, strict decoder?
      case 'us-ascii':
      case 'iso-8859-1':
      case 'iso8859-1':
      case 'iso88591':
      case 'iso_8859-1':
      case 'windows-1252':
      case 'iso_8859-1:1987':
      case 'cp1252':
      case 'x-cp1252':
        return decoders.latin1
      case 'utf16le':
      case 'utf-16le':
      case 'ucs2':
      case 'ucs-2':
        return decoders.utf16le
      case 'base64':
        return decoders.base64
      default:
        if (lc === undefined) {
          lc = true
          charset = charset.toLowerCase()
          continue
        }
        return decoders.other.bind(charset)
    }
  }
}

const decoders = {
  utf8: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.utf8Slice(0, data.length)
  },

  latin1: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      return data
    }
    return data.latin1Slice(0, data.length)
  },

  utf16le: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.ucs2Slice(0, data.length)
  },

  base64: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.base64Slice(0, data.length)
  },

  other: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }

    if (textDecoders.has(this.toString())) {
      try {
        return textDecoders.get(this).decode(data)
      } catch {}
    }
    return typeof data === 'string'
      ? data
      : data.toString()
  }
}

function decodeText (text, sourceEncoding, destEncoding) {
  if (text) {
    return getDecoder(destEncoding)(text, sourceEncoding)
  }
  return text
}

module.exports = decodeText


/***/ }),

/***/ 1954:
/***/ ((module) => {

"use strict";


module.exports = function getLimit (limits, name, defaultLimit) {
  if (
    !limits ||
    limits[name] === undefined ||
    limits[name] === null
  ) { return defaultLimit }

  if (
    typeof limits[name] !== 'number' ||
    isNaN(limits[name])
  ) { throw new TypeError('Limit ' + name + ' is not a valid number') }

  return limits[name]
}


/***/ }),

/***/ 6812:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
/* eslint-disable object-property-newline */


const decodeText = __nccwpck_require__(3772)

const RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g

const EncodedLookup = {
  '%00': '\x00', '%01': '\x01', '%02': '\x02', '%03': '\x03', '%04': '\x04',
  '%05': '\x05', '%06': '\x06', '%07': '\x07', '%08': '\x08', '%09': '\x09',
  '%0a': '\x0a', '%0A': '\x0a', '%0b': '\x0b', '%0B': '\x0b', '%0c': '\x0c',
  '%0C': '\x0c', '%0d': '\x0d', '%0D': '\x0d', '%0e': '\x0e', '%0E': '\x0e',
  '%0f': '\x0f', '%0F': '\x0f', '%10': '\x10', '%11': '\x11', '%12': '\x12',
  '%13': '\x13', '%14': '\x14', '%15': '\x15', '%16': '\x16', '%17': '\x17',
  '%18': '\x18', '%19': '\x19', '%1a': '\x1a', '%1A': '\x1a', '%1b': '\x1b',
  '%1B': '\x1b', '%1c': '\x1c', '%1C': '\x1c', '%1d': '\x1d', '%1D': '\x1d',
  '%1e': '\x1e', '%1E': '\x1e', '%1f': '\x1f', '%1F': '\x1f', '%20': '\x20',
  '%21': '\x21', '%22': '\x22', '%23': '\x23', '%24': '\x24', '%25': '\x25',
  '%26': '\x26', '%27': '\x27', '%28': '\x28', '%29': '\x29', '%2a': '\x2a',
  '%2A': '\x2a', '%2b': '\x2b', '%2B': '\x2b', '%2c': '\x2c', '%2C': '\x2c',
  '%2d': '\x2d', '%2D': '\x2d', '%2e': '\x2e', '%2E': '\x2e', '%2f': '\x2f',
  '%2F': '\x2f', '%30': '\x30', '%31': '\x31', '%32': '\x32', '%33': '\x33',
  '%34': '\x34', '%35': '\x35', '%36': '\x36', '%37': '\x37', '%38': '\x38',
  '%39': '\x39', '%3a': '\x3a', '%3A': '\x3a', '%3b': '\x3b', '%3B': '\x3b',
  '%3c': '\x3c', '%3C': '\x3c', '%3d': '\x3d', '%3D': '\x3d', '%3e': '\x3e',
  '%3E': '\x3e', '%3f': '\x3f', '%3F': '\x3f', '%40': '\x40', '%41': '\x41',
  '%42': '\x42', '%43': '\x43', '%44': '\x44', '%45': '\x45', '%46': '\x46',
  '%47': '\x47', '%48': '\x48', '%49': '\x49', '%4a': '\x4a', '%4A': '\x4a',
  '%4b': '\x4b', '%4B': '\x4b', '%4c': '\x4c', '%4C': '\x4c', '%4d': '\x4d',
  '%4D': '\x4d', '%4e': '\x4e', '%4E': '\x4e', '%4f': '\x4f', '%4F': '\x4f',
  '%50': '\x50', '%51': '\x51', '%52': '\x52', '%53': '\x53', '%54': '\x54',
  '%55': '\x55', '%56': '\x56', '%57': '\x57', '%58': '\x58', '%59': '\x59',
  '%5a': '\x5a', '%5A': '\x5a', '%5b': '\x5b', '%5B': '\x5b', '%5c': '\x5c',
  '%5C': '\x5c', '%5d': '\x5d', '%5D': '\x5d', '%5e': '\x5e', '%5E': '\x5e',
  '%5f': '\x5f', '%5F': '\x5f', '%60': '\x60', '%61': '\x61', '%62': '\x62',
  '%63': '\x63', '%64': '\x64', '%65': '\x65', '%66': '\x66', '%67': '\x67',
  '%68': '\x68', '%69': '\x69', '%6a': '\x6a', '%6A': '\x6a', '%6b': '\x6b',
  '%6B': '\x6b', '%6c': '\x6c', '%6C': '\x6c', '%6d': '\x6d', '%6D': '\x6d',
  '%6e': '\x6e', '%6E': '\x6e', '%6f': '\x6f', '%6F': '\x6f', '%70': '\x70',
  '%71': '\x71', '%72': '\x72', '%73': '\x73', '%74': '\x74', '%75': '\x75',
  '%76': '\x76', '%77': '\x77', '%78': '\x78', '%79': '\x79', '%7a': '\x7a',
  '%7A': '\x7a', '%7b': '\x7b', '%7B': '\x7b', '%7c': '\x7c', '%7C': '\x7c',
  '%7d': '\x7d', '%7D': '\x7d', '%7e': '\x7e', '%7E': '\x7e', '%7f': '\x7f',
  '%7F': '\x7f', '%80': '\x80', '%81': '\x81', '%82': '\x82', '%83': '\x83',
  '%84': '\x84', '%85': '\x85', '%86': '\x86', '%87': '\x87', '%88': '\x88',
  '%89': '\x89', '%8a': '\x8a', '%8A': '\x8a', '%8b': '\x8b', '%8B': '\x8b',
  '%8c': '\x8c', '%8C': '\x8c', '%8d': '\x8d', '%8D': '\x8d', '%8e': '\x8e',
  '%8E': '\x8e', '%8f': '\x8f', '%8F': '\x8f', '%90': '\x90', '%91': '\x91',
  '%92': '\x92', '%93': '\x93', '%94': '\x94', '%95': '\x95', '%96': '\x96',
  '%97': '\x97', '%98': '\x98', '%99': '\x99', '%9a': '\x9a', '%9A': '\x9a',
  '%9b': '\x9b', '%9B': '\x9b', '%9c': '\x9c', '%9C': '\x9c', '%9d': '\x9d',
  '%9D': '\x9d', '%9e': '\x9e', '%9E': '\x9e', '%9f': '\x9f', '%9F': '\x9f',
  '%a0': '\xa0', '%A0': '\xa0', '%a1': '\xa1', '%A1': '\xa1', '%a2': '\xa2',
  '%A2': '\xa2', '%a3': '\xa3', '%A3': '\xa3', '%a4': '\xa4', '%A4': '\xa4',
  '%a5': '\xa5', '%A5': '\xa5', '%a6': '\xa6', '%A6': '\xa6', '%a7': '\xa7',
  '%A7': '\xa7', '%a8': '\xa8', '%A8': '\xa8', '%a9': '\xa9', '%A9': '\xa9',
  '%aa': '\xaa', '%Aa': '\xaa', '%aA': '\xaa', '%AA': '\xaa', '%ab': '\xab',
  '%Ab': '\xab', '%aB': '\xab', '%AB': '\xab', '%ac': '\xac', '%Ac': '\xac',
  '%aC': '\xac', '%AC': '\xac', '%ad': '\xad', '%Ad': '\xad', '%aD': '\xad',
  '%AD': '\xad', '%ae': '\xae', '%Ae': '\xae', '%aE': '\xae', '%AE': '\xae',
  '%af': '\xaf', '%Af': '\xaf', '%aF': '\xaf', '%AF': '\xaf', '%b0': '\xb0',
  '%B0': '\xb0', '%b1': '\xb1', '%B1': '\xb1', '%b2': '\xb2', '%B2': '\xb2',
  '%b3': '\xb3', '%B3': '\xb3', '%b4': '\xb4', '%B4': '\xb4', '%b5': '\xb5',
  '%B5': '\xb5', '%b6': '\xb6', '%B6': '\xb6', '%b7': '\xb7', '%B7': '\xb7',
  '%b8': '\xb8', '%B8': '\xb8', '%b9': '\xb9', '%B9': '\xb9', '%ba': '\xba',
  '%Ba': '\xba', '%bA': '\xba', '%BA': '\xba', '%bb': '\xbb', '%Bb': '\xbb',
  '%bB': '\xbb', '%BB': '\xbb', '%bc': '\xbc', '%Bc': '\xbc', '%bC': '\xbc',
  '%BC': '\xbc', '%bd': '\xbd', '%Bd': '\xbd', '%bD': '\xbd', '%BD': '\xbd',
  '%be': '\xbe', '%Be': '\xbe', '%bE': '\xbe', '%BE': '\xbe', '%bf': '\xbf',
  '%Bf': '\xbf', '%bF': '\xbf', '%BF': '\xbf', '%c0': '\xc0', '%C0': '\xc0',
  '%c1': '\xc1', '%C1': '\xc1', '%c2': '\xc2', '%C2': '\xc2', '%c3': '\xc3',
  '%C3': '\xc3', '%c4': '\xc4', '%C4': '\xc4', '%c5': '\xc5', '%C5': '\xc5',
  '%c6': '\xc6', '%C6': '\xc6', '%c7': '\xc7', '%C7': '\xc7', '%c8': '\xc8',
  '%C8': '\xc8', '%c9': '\xc9', '%C9': '\xc9', '%ca': '\xca', '%Ca': '\xca',
  '%cA': '\xca', '%CA': '\xca', '%cb': '\xcb', '%Cb': '\xcb', '%cB': '\xcb',
  '%CB': '\xcb', '%cc': '\xcc', '%Cc': '\xcc', '%cC': '\xcc', '%CC': '\xcc',
  '%cd': '\xcd', '%Cd': '\xcd', '%cD': '\xcd', '%CD': '\xcd', '%ce': '\xce',
  '%Ce': '\xce', '%cE': '\xce', '%CE': '\xce', '%cf': '\xcf', '%Cf': '\xcf',
  '%cF': '\xcf', '%CF': '\xcf', '%d0': '\xd0', '%D0': '\xd0', '%d1': '\xd1',
  '%D1': '\xd1', '%d2': '\xd2', '%D2': '\xd2', '%d3': '\xd3', '%D3': '\xd3',
  '%d4': '\xd4', '%D4': '\xd4', '%d5': '\xd5', '%D5': '\xd5', '%d6': '\xd6',
  '%D6': '\xd6', '%d7': '\xd7', '%D7': '\xd7', '%d8': '\xd8', '%D8': '\xd8',
  '%d9': '\xd9', '%D9': '\xd9', '%da': '\xda', '%Da': '\xda', '%dA': '\xda',
  '%DA': '\xda', '%db': '\xdb', '%Db': '\xdb', '%dB': '\xdb', '%DB': '\xdb',
  '%dc': '\xdc', '%Dc': '\xdc', '%dC': '\xdc', '%DC': '\xdc', '%dd': '\xdd',
  '%Dd': '\xdd', '%dD': '\xdd', '%DD': '\xdd', '%de': '\xde', '%De': '\xde',
  '%dE': '\xde', '%DE': '\xde', '%df': '\xdf', '%Df': '\xdf', '%dF': '\xdf',
  '%DF': '\xdf', '%e0': '\xe0', '%E0': '\xe0', '%e1': '\xe1', '%E1': '\xe1',
  '%e2': '\xe2', '%E2': '\xe2', '%e3': '\xe3', '%E3': '\xe3', '%e4': '\xe4',
  '%E4': '\xe4', '%e5': '\xe5', '%E5': '\xe5', '%e6': '\xe6', '%E6': '\xe6',
  '%e7': '\xe7', '%E7': '\xe7', '%e8': '\xe8', '%E8': '\xe8', '%e9': '\xe9',
  '%E9': '\xe9', '%ea': '\xea', '%Ea': '\xea', '%eA': '\xea', '%EA': '\xea',
  '%eb': '\xeb', '%Eb': '\xeb', '%eB': '\xeb', '%EB': '\xeb', '%ec': '\xec',
  '%Ec': '\xec', '%eC': '\xec', '%EC': '\xec', '%ed': '\xed', '%Ed': '\xed',
  '%eD': '\xed', '%ED': '\xed', '%ee': '\xee', '%Ee': '\xee', '%eE': '\xee',
  '%EE': '\xee', '%ef': '\xef', '%Ef': '\xef', '%eF': '\xef', '%EF': '\xef',
  '%f0': '\xf0', '%F0': '\xf0', '%f1': '\xf1', '%F1': '\xf1', '%f2': '\xf2',
  '%F2': '\xf2', '%f3': '\xf3', '%F3': '\xf3', '%f4': '\xf4', '%F4': '\xf4',
  '%f5': '\xf5', '%F5': '\xf5', '%f6': '\xf6', '%F6': '\xf6', '%f7': '\xf7',
  '%F7': '\xf7', '%f8': '\xf8', '%F8': '\xf8', '%f9': '\xf9', '%F9': '\xf9',
  '%fa': '\xfa', '%Fa': '\xfa', '%fA': '\xfa', '%FA': '\xfa', '%fb': '\xfb',
  '%Fb': '\xfb', '%fB': '\xfb', '%FB': '\xfb', '%fc': '\xfc', '%Fc': '\xfc',
  '%fC': '\xfc', '%FC': '\xfc', '%fd': '\xfd', '%Fd': '\xfd', '%fD': '\xfd',
  '%FD': '\xfd', '%fe': '\xfe', '%Fe': '\xfe', '%fE': '\xfe', '%FE': '\xfe',
  '%ff': '\xff', '%Ff': '\xff', '%fF': '\xff', '%FF': '\xff'
}

function encodedReplacer (match) {
  return EncodedLookup[match]
}

const STATE_KEY = 0
const STATE_VALUE = 1
const STATE_CHARSET = 2
const STATE_LANG = 3

function parseParams (str) {
  const res = []
  let state = STATE_KEY
  let charset = ''
  let inquote = false
  let escaping = false
  let p = 0
  let tmp = ''
  const len = str.length

  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    const char = str[i]
    if (char === '\\' && inquote) {
      if (escaping) { escaping = false } else {
        escaping = true
        continue
      }
    } else if (char === '"') {
      if (!escaping) {
        if (inquote) {
          inquote = false
          state = STATE_KEY
        } else { inquote = true }
        continue
      } else { escaping = false }
    } else {
      if (escaping && inquote) { tmp += '\\' }
      escaping = false
      if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
        if (state === STATE_CHARSET) {
          state = STATE_LANG
          charset = tmp.substring(1)
        } else { state = STATE_VALUE }
        tmp = ''
        continue
      } else if (state === STATE_KEY &&
        (char === '*' || char === '=') &&
        res.length) {
        state = char === '*'
          ? STATE_CHARSET
          : STATE_VALUE
        res[p] = [tmp, undefined]
        tmp = ''
        continue
      } else if (!inquote && char === ';') {
        state = STATE_KEY
        if (charset) {
          if (tmp.length) {
            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),
              'binary',
              charset)
          }
          charset = ''
        } else if (tmp.length) {
          tmp = decodeText(tmp, 'binary', 'utf8')
        }
        if (res[p] === undefined) { res[p] = tmp } else { res[p][1] = tmp }
        tmp = ''
        ++p
        continue
      } else if (!inquote && (char === ' ' || char === '\t')) { continue }
    }
    tmp += char
  }
  if (charset && tmp.length) {
    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),
      'binary',
      charset)
  } else if (tmp) {
    tmp = decodeText(tmp, 'binary', 'utf8')
  }

  if (res[p] === undefined) {
    if (tmp) { res[p] = tmp }
  } else { res[p][1] = tmp }

  return res
}

module.exports = parseParams


/***/ }),

/***/ 9947:
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__nccwpck_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__nccwpck_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__nccwpck_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__nccwpck_require__.o(definition, key) && !__nccwpck_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__nccwpck_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__nccwpck_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__nccwpck_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// NAMESPACE OBJECT: ./src/cache/cache.ts
var cache_namespaceObject = {};
__nccwpck_require__.r(cache_namespaceObject);
__nccwpck_require__.d(cache_namespaceObject, {
  ReserveCacheError: () => (ReserveCacheError),
  ValidationError: () => (ValidationError),
  isFeatureAvailable: () => (isFeatureAvailable),
  restoreCache: () => (restoreCache),
  saveCache: () => (cache_saveCache)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/core.js
var core = __nccwpck_require__(9999);
// EXTERNAL MODULE: ./node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js
var exec = __nccwpck_require__(8872);
// EXTERNAL MODULE: ./node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io.js
var io = __nccwpck_require__(3357);
// EXTERNAL MODULE: external "fs"
var external_fs_ = __nccwpck_require__(9896);
var external_fs_default = /*#__PURE__*/__nccwpck_require__.n(external_fs_);
// EXTERNAL MODULE: external "path"
var external_path_ = __nccwpck_require__(6928);
var external_path_default = /*#__PURE__*/__nccwpck_require__.n(external_path_);
// EXTERNAL MODULE: ./node_modules/.pnpm/@actions+glob@0.5.0/node_modules/@actions/glob/lib/glob.js
var glob = __nccwpck_require__(8505);
// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __nccwpck_require__(6982);
var external_crypto_default = /*#__PURE__*/__nccwpck_require__.n(external_crypto_);
// EXTERNAL MODULE: external "fs/promises"
var promises_ = __nccwpck_require__(1943);
var promises_default = /*#__PURE__*/__nccwpck_require__.n(promises_);
// EXTERNAL MODULE: external "os"
var external_os_ = __nccwpck_require__(857);
var external_os_default = /*#__PURE__*/__nccwpck_require__.n(external_os_);
;// CONCATENATED MODULE: ./node_modules/.pnpm/smol-toml@1.3.4/node_modules/smol-toml/dist/error.js
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
function getLineColFromPtr(string, ptr) {
    let lines = string.slice(0, ptr).split(/\r\n|\n|\r/g);
    return [lines.length, lines.pop().length + 1];
}
function makeCodeBlock(string, line, column) {
    let lines = string.split(/\r\n|\n|\r/g);
    let codeblock = '';
    let numberLen = (Math.log10(line + 1) | 0) + 1;
    for (let i = line - 1; i <= line + 1; i++) {
        let l = lines[i - 1];
        if (!l)
            continue;
        codeblock += i.toString().padEnd(numberLen, ' ');
        codeblock += ':  ';
        codeblock += l;
        codeblock += '\n';
        if (i === line) {
            codeblock += ' '.repeat(numberLen + column + 2);
            codeblock += '^\n';
        }
    }
    return codeblock;
}
class TomlError extends Error {
    line;
    column;
    codeblock;
    constructor(message, options) {
        const [line, column] = getLineColFromPtr(options.toml, options.ptr);
        const codeblock = makeCodeBlock(options.toml, line, column);
        super(`Invalid TOML document: ${message}\n\n${codeblock}`, options);
        this.line = line;
        this.column = column;
        this.codeblock = codeblock;
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/smol-toml@1.3.4/node_modules/smol-toml/dist/util.js
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

function indexOfNewline(str, start = 0, end = str.length) {
    let idx = str.indexOf('\n', start);
    if (str[idx - 1] === '\r')
        idx--;
    return idx <= end ? idx : -1;
}
function skipComment(str, ptr) {
    for (let i = ptr; i < str.length; i++) {
        let c = str[i];
        if (c === '\n')
            return i;
        if (c === '\r' && str[i + 1] === '\n')
            return i + 1;
        if ((c < '\x20' && c !== '\t') || c === '\x7f') {
            throw new TomlError('control characters are not allowed in comments', {
                toml: str,
                ptr: ptr,
            });
        }
    }
    return str.length;
}
function skipVoid(str, ptr, banNewLines, banComments) {
    let c;
    while ((c = str[ptr]) === ' ' || c === '\t' || (!banNewLines && (c === '\n' || c === '\r' && str[ptr + 1] === '\n')))
        ptr++;
    return banComments || c !== '#'
        ? ptr
        : skipVoid(str, skipComment(str, ptr), banNewLines);
}
function skipUntil(str, ptr, sep, end, banNewLines = false) {
    if (!end) {
        ptr = indexOfNewline(str, ptr);
        return ptr < 0 ? str.length : ptr;
    }
    for (let i = ptr; i < str.length; i++) {
        let c = str[i];
        if (c === '#') {
            i = indexOfNewline(str, i);
        }
        else if (c === sep) {
            return i + 1;
        }
        else if (c === end || (banNewLines && (c === '\n' || (c === '\r' && str[i + 1] === '\n')))) {
            return i;
        }
    }
    throw new TomlError('cannot find end of structure', {
        toml: str,
        ptr: ptr
    });
}
function getStringEnd(str, seek) {
    let first = str[seek];
    let target = first === str[seek + 1] && str[seek + 1] === str[seek + 2]
        ? str.slice(seek, seek + 3)
        : first;
    seek += target.length - 1;
    do
        seek = str.indexOf(target, ++seek);
    while (seek > -1 && first !== "'" && str[seek - 1] === '\\' && (str[seek - 2] !== '\\' || str[seek - 3] === '\\'));
    if (seek > -1) {
        seek += target.length;
        if (target.length > 1) {
            if (str[seek] === first)
                seek++;
            if (str[seek] === first)
                seek++;
        }
    }
    return seek;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/smol-toml@1.3.4/node_modules/smol-toml/dist/date.js
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
let DATE_TIME_RE = /^(\d{4}-\d{2}-\d{2})?[T ]?(?:(\d{2}):\d{2}:\d{2}(?:\.\d+)?)?(Z|[-+]\d{2}:\d{2})?$/i;
class TomlDate extends Date {
    #hasDate = false;
    #hasTime = false;
    #offset = null;
    constructor(date) {
        let hasDate = true;
        let hasTime = true;
        let offset = 'Z';
        if (typeof date === 'string') {
            let match = date.match(DATE_TIME_RE);
            if (match) {
                if (!match[1]) {
                    hasDate = false;
                    date = `0000-01-01T${date}`;
                }
                hasTime = !!match[2];
                // Make sure to use T instead of a space. Breaks in case of extreme values otherwise.
                hasTime && date[10] === ' ' && (date = date.replace(' ', 'T'));
                // Do not allow rollover hours.
                if (match[2] && +match[2] > 23) {
                    date = '';
                }
                else {
                    offset = match[3] || null;
                    date = date.toUpperCase();
                    if (!offset && hasTime)
                        date += 'Z';
                }
            }
            else {
                date = '';
            }
        }
        super(date);
        if (!isNaN(this.getTime())) {
            this.#hasDate = hasDate;
            this.#hasTime = hasTime;
            this.#offset = offset;
        }
    }
    isDateTime() {
        return this.#hasDate && this.#hasTime;
    }
    isLocal() {
        return !this.#hasDate || !this.#hasTime || !this.#offset;
    }
    isDate() {
        return this.#hasDate && !this.#hasTime;
    }
    isTime() {
        return this.#hasTime && !this.#hasDate;
    }
    isValid() {
        return this.#hasDate || this.#hasTime;
    }
    toISOString() {
        let iso = super.toISOString();
        // Local Date
        if (this.isDate())
            return iso.slice(0, 10);
        // Local Time
        if (this.isTime())
            return iso.slice(11, 23);
        // Local DateTime
        if (this.#offset === null)
            return iso.slice(0, -1);
        // Offset DateTime
        if (this.#offset === 'Z')
            return iso;
        // This part is quite annoying: JS strips the original timezone from the ISO string representation
        // Instead of using a "modified" date and "Z", we restore the representation "as authored"
        let offset = (+(this.#offset.slice(1, 3)) * 60) + +(this.#offset.slice(4, 6));
        offset = this.#offset[0] === '-' ? offset : -offset;
        let offsetDate = new Date(this.getTime() - (offset * 60e3));
        return offsetDate.toISOString().slice(0, -1) + this.#offset;
    }
    static wrapAsOffsetDateTime(jsDate, offset = 'Z') {
        let date = new TomlDate(jsDate);
        date.#offset = offset;
        return date;
    }
    static wrapAsLocalDateTime(jsDate) {
        let date = new TomlDate(jsDate);
        date.#offset = null;
        return date;
    }
    static wrapAsLocalDate(jsDate) {
        let date = new TomlDate(jsDate);
        date.#hasTime = false;
        date.#offset = null;
        return date;
    }
    static wrapAsLocalTime(jsDate) {
        let date = new TomlDate(jsDate);
        date.#hasDate = false;
        date.#offset = null;
        return date;
    }
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/smol-toml@1.3.4/node_modules/smol-toml/dist/primitive.js
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



let INT_REGEX = /^((0x[0-9a-fA-F](_?[0-9a-fA-F])*)|(([+-]|0[ob])?\d(_?\d)*))$/;
let FLOAT_REGEX = /^[+-]?\d(_?\d)*(\.\d(_?\d)*)?([eE][+-]?\d(_?\d)*)?$/;
let LEADING_ZERO = /^[+-]?0[0-9_]/;
let ESCAPE_REGEX = /^[0-9a-f]{4,8}$/i;
let ESC_MAP = {
    b: '\b',
    t: '\t',
    n: '\n',
    f: '\f',
    r: '\r',
    '"': '"',
    '\\': '\\',
};
function parseString(str, ptr = 0, endPtr = str.length) {
    let isLiteral = str[ptr] === "'";
    let isMultiline = str[ptr++] === str[ptr] && str[ptr] === str[ptr + 1];
    if (isMultiline) {
        endPtr -= 2;
        if (str[ptr += 2] === '\r')
            ptr++;
        if (str[ptr] === '\n')
            ptr++;
    }
    let tmp = 0;
    let isEscape;
    let parsed = '';
    let sliceStart = ptr;
    while (ptr < endPtr - 1) {
        let c = str[ptr++];
        if (c === '\n' || (c === '\r' && str[ptr] === '\n')) {
            if (!isMultiline) {
                throw new TomlError('newlines are not allowed in strings', {
                    toml: str,
                    ptr: ptr - 1
                });
            }
        }
        else if ((c < '\x20' && c !== '\t') || c === '\x7f') {
            throw new TomlError('control characters are not allowed in strings', {
                toml: str,
                ptr: ptr - 1
            });
        }
        if (isEscape) {
            isEscape = false;
            if (c === 'u' || c === 'U') {
                // Unicode escape
                let code = str.slice(ptr, (ptr += (c === 'u' ? 4 : 8)));
                if (!ESCAPE_REGEX.test(code)) {
                    throw new TomlError('invalid unicode escape', {
                        toml: str,
                        ptr: tmp
                    });
                }
                try {
                    parsed += String.fromCodePoint(parseInt(code, 16));
                }
                catch {
                    throw new TomlError('invalid unicode escape', {
                        toml: str,
                        ptr: tmp
                    });
                }
            }
            else if (isMultiline && (c === '\n' || c === ' ' || c === '\t' || c === '\r')) {
                // Multiline escape
                ptr = skipVoid(str, ptr - 1, true);
                if (str[ptr] !== '\n' && str[ptr] !== '\r') {
                    throw new TomlError('invalid escape: only line-ending whitespace may be escaped', {
                        toml: str,
                        ptr: tmp
                    });
                }
                ptr = skipVoid(str, ptr);
            }
            else if (c in ESC_MAP) {
                // Classic escape
                parsed += ESC_MAP[c];
            }
            else {
                throw new TomlError('unrecognized escape sequence', {
                    toml: str,
                    ptr: tmp
                });
            }
            sliceStart = ptr;
        }
        else if (!isLiteral && c === '\\') {
            tmp = ptr - 1;
            isEscape = true;
            parsed += str.slice(sliceStart, tmp);
        }
    }
    return parsed + str.slice(sliceStart, endPtr - 1);
}
function parseValue(value, toml, ptr) {
    // Constant values
    if (value === 'true')
        return true;
    if (value === 'false')
        return false;
    if (value === '-inf')
        return -Infinity;
    if (value === 'inf' || value === '+inf')
        return Infinity;
    if (value === 'nan' || value === '+nan' || value === '-nan')
        return NaN;
    if (value === '-0')
        return 0; // Avoid FP representation of -0
    // Numbers
    let isInt;
    if ((isInt = INT_REGEX.test(value)) || FLOAT_REGEX.test(value)) {
        if (LEADING_ZERO.test(value)) {
            throw new TomlError('leading zeroes are not allowed', {
                toml: toml,
                ptr: ptr
            });
        }
        let numeric = +(value.replace(/_/g, ''));
        if (isNaN(numeric)) {
            throw new TomlError('invalid number', {
                toml: toml,
                ptr: ptr
            });
        }
        if (isInt && !Number.isSafeInteger(numeric)) {
            throw new TomlError('integer value cannot be represented losslessly', {
                toml: toml,
                ptr: ptr
            });
        }
        return numeric;
    }
    let date = new TomlDate(value);
    if (!date.isValid()) {
        throw new TomlError('invalid value', {
            toml: toml,
            ptr: ptr
        });
    }
    return date;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/smol-toml@1.3.4/node_modules/smol-toml/dist/extract.js
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */




function sliceAndTrimEndOf(str, startPtr, endPtr, allowNewLines) {
    let value = str.slice(startPtr, endPtr);
    let commentIdx = value.indexOf('#');
    if (commentIdx > -1) {
        // The call to skipComment allows to "validate" the comment
        // (absence of control characters)
        skipComment(str, commentIdx);
        value = value.slice(0, commentIdx);
    }
    let trimmed = value.trimEnd();
    if (!allowNewLines) {
        let newlineIdx = value.indexOf('\n', trimmed.length);
        if (newlineIdx > -1) {
            throw new TomlError('newlines are not allowed in inline tables', {
                toml: str,
                ptr: startPtr + newlineIdx
            });
        }
    }
    return [trimmed, commentIdx];
}
function extractValue(str, ptr, end, depth = -1) {
    if (depth === 0) {
        throw new TomlError('document contains excessively nested structures. aborting.', {
            toml: str,
            ptr: ptr
        });
    }
    let c = str[ptr];
    if (c === '[' || c === '{') {
        let [value, endPtr] = c === '['
            ? parseArray(str, ptr, depth)
            : parseInlineTable(str, ptr, depth);
        let newPtr = end ? skipUntil(str, endPtr, ',', end) : endPtr;
        if (endPtr - newPtr && end === '}') {
            let nextNewLine = indexOfNewline(str, endPtr, newPtr);
            if (nextNewLine > -1) {
                throw new TomlError('newlines are not allowed in inline tables', {
                    toml: str,
                    ptr: nextNewLine
                });
            }
        }
        return [value, newPtr];
    }
    let endPtr;
    if (c === '"' || c === "'") {
        endPtr = getStringEnd(str, ptr);
        let parsed = parseString(str, ptr, endPtr);
        if (end) {
            endPtr = skipVoid(str, endPtr, end !== ']');
            if (str[endPtr] && str[endPtr] !== ',' && str[endPtr] !== end && str[endPtr] !== '\n' && str[endPtr] !== '\r') {
                throw new TomlError('unexpected character encountered', {
                    toml: str,
                    ptr: endPtr,
                });
            }
            endPtr += (+(str[endPtr] === ','));
        }
        return [parsed, endPtr];
    }
    endPtr = skipUntil(str, ptr, ',', end);
    let slice = sliceAndTrimEndOf(str, ptr, endPtr - (+(str[endPtr - 1] === ',')), end === ']');
    if (!slice[0]) {
        throw new TomlError('incomplete key-value declaration: no value specified', {
            toml: str,
            ptr: ptr
        });
    }
    if (end && slice[1] > -1) {
        endPtr = skipVoid(str, ptr + slice[1]);
        endPtr += +(str[endPtr] === ',');
    }
    return [
        parseValue(slice[0], str, ptr),
        endPtr,
    ];
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/smol-toml@1.3.4/node_modules/smol-toml/dist/struct.js
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */




let KEY_PART_RE = /^[a-zA-Z0-9-_]+[ \t]*$/;
function parseKey(str, ptr, end = '=') {
    let dot = ptr - 1;
    let parsed = [];
    let endPtr = str.indexOf(end, ptr);
    if (endPtr < 0) {
        throw new TomlError('incomplete key-value: cannot find end of key', {
            toml: str,
            ptr: ptr
        });
    }
    do {
        let c = str[ptr = ++dot];
        // If it's whitespace, ignore
        if (c !== ' ' && c !== '\t') {
            // If it's a string
            if (c === '"' || c === "'") {
                if (c === str[ptr + 1] && c === str[ptr + 2]) {
                    throw new TomlError('multiline strings are not allowed in keys', {
                        toml: str,
                        ptr: ptr,
                    });
                }
                let eos = getStringEnd(str, ptr);
                if (eos < 0) {
                    throw new TomlError('unfinished string encountered', {
                        toml: str,
                        ptr: ptr,
                    });
                }
                dot = str.indexOf('.', eos);
                let strEnd = str.slice(eos, dot < 0 || dot > endPtr ? endPtr : dot);
                let newLine = indexOfNewline(strEnd);
                if (newLine > -1) {
                    throw new TomlError('newlines are not allowed in keys', {
                        toml: str,
                        ptr: ptr + dot + newLine,
                    });
                }
                if (strEnd.trimStart()) {
                    throw new TomlError('found extra tokens after the string part', {
                        toml: str,
                        ptr: eos,
                    });
                }
                if (endPtr < eos) {
                    endPtr = str.indexOf(end, eos);
                    if (endPtr < 0) {
                        throw new TomlError('incomplete key-value: cannot find end of key', {
                            toml: str,
                            ptr: ptr,
                        });
                    }
                }
                parsed.push(parseString(str, ptr, eos));
            }
            else {
                // Normal raw key part consumption and validation
                dot = str.indexOf('.', ptr);
                let part = str.slice(ptr, dot < 0 || dot > endPtr ? endPtr : dot);
                if (!KEY_PART_RE.test(part)) {
                    throw new TomlError('only letter, numbers, dashes and underscores are allowed in keys', {
                        toml: str,
                        ptr: ptr,
                    });
                }
                parsed.push(part.trimEnd());
            }
        }
        // Until there's no more dot
    } while (dot + 1 && dot < endPtr);
    return [parsed, skipVoid(str, endPtr + 1, true, true)];
}
function parseInlineTable(str, ptr, depth = -1) {
    let res = {};
    let seen = new Set();
    let c;
    let comma = 0;
    ptr++;
    while ((c = str[ptr++]) !== '}' && c) {
        if (c === '\n') {
            throw new TomlError('newlines are not allowed in inline tables', {
                toml: str,
                ptr: ptr - 1
            });
        }
        else if (c === '#') {
            throw new TomlError('inline tables cannot contain comments', {
                toml: str,
                ptr: ptr - 1
            });
        }
        else if (c === ',') {
            throw new TomlError('expected key-value, found comma', {
                toml: str,
                ptr: ptr - 1
            });
        }
        else if (c !== ' ' && c !== '\t') {
            let k;
            let t = res;
            let hasOwn = false;
            let [key, keyEndPtr] = parseKey(str, ptr - 1);
            for (let i = 0; i < key.length; i++) {
                if (i)
                    t = hasOwn ? t[k] : (t[k] = {});
                k = key[i];
                if ((hasOwn = Object.hasOwn(t, k)) && (typeof t[k] !== 'object' || seen.has(t[k]))) {
                    throw new TomlError('trying to redefine an already defined value', {
                        toml: str,
                        ptr: ptr
                    });
                }
                if (!hasOwn && k === '__proto__') {
                    Object.defineProperty(t, k, { enumerable: true, configurable: true, writable: true });
                }
            }
            if (hasOwn) {
                throw new TomlError('trying to redefine an already defined value', {
                    toml: str,
                    ptr: ptr
                });
            }
            let [value, valueEndPtr] = extractValue(str, keyEndPtr, '}', depth - 1);
            seen.add(value);
            t[k] = value;
            ptr = valueEndPtr;
            comma = str[ptr - 1] === ',' ? ptr - 1 : 0;
        }
    }
    if (comma) {
        throw new TomlError('trailing commas are not allowed in inline tables', {
            toml: str,
            ptr: comma
        });
    }
    if (!c) {
        throw new TomlError('unfinished table encountered', {
            toml: str,
            ptr: ptr
        });
    }
    return [res, ptr];
}
function parseArray(str, ptr, depth = -1) {
    let res = [];
    let c;
    ptr++;
    while ((c = str[ptr++]) !== ']' && c) {
        if (c === ',') {
            throw new TomlError('expected value, found comma', {
                toml: str,
                ptr: ptr - 1
            });
        }
        else if (c === '#')
            ptr = skipComment(str, ptr);
        else if (c !== ' ' && c !== '\t' && c !== '\n' && c !== '\r') {
            let e = extractValue(str, ptr - 1, ']', depth - 1);
            res.push(e[0]);
            ptr = e[1];
        }
    }
    if (!c) {
        throw new TomlError('unfinished array encountered', {
            toml: str,
            ptr: ptr
        });
    }
    return [res, ptr];
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/smol-toml@1.3.4/node_modules/smol-toml/dist/parse.js
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */




function peekTable(key, table, meta, type) {
    let t = table;
    let m = meta;
    let k;
    let hasOwn = false;
    let state;
    for (let i = 0; i < key.length; i++) {
        if (i) {
            t = hasOwn ? t[k] : (t[k] = {});
            m = (state = m[k]).c;
            if (type === 0 /* Type.DOTTED */ && (state.t === 1 /* Type.EXPLICIT */ || state.t === 2 /* Type.ARRAY */)) {
                return null;
            }
            if (state.t === 2 /* Type.ARRAY */) {
                let l = t.length - 1;
                t = t[l];
                m = m[l].c;
            }
        }
        k = key[i];
        if ((hasOwn = Object.hasOwn(t, k)) && m[k]?.t === 0 /* Type.DOTTED */ && m[k]?.d) {
            return null;
        }
        if (!hasOwn) {
            if (k === '__proto__') {
                Object.defineProperty(t, k, { enumerable: true, configurable: true, writable: true });
                Object.defineProperty(m, k, { enumerable: true, configurable: true, writable: true });
            }
            m[k] = {
                t: i < key.length - 1 && type === 2 /* Type.ARRAY */
                    ? 3 /* Type.ARRAY_DOTTED */
                    : type,
                d: false,
                i: 0,
                c: {},
            };
        }
    }
    state = m[k];
    if (state.t !== type && !(type === 1 /* Type.EXPLICIT */ && state.t === 3 /* Type.ARRAY_DOTTED */)) {
        // Bad key type!
        return null;
    }
    if (type === 2 /* Type.ARRAY */) {
        if (!state.d) {
            state.d = true;
            t[k] = [];
        }
        t[k].push(t = {});
        state.c[state.i++] = (state = { t: 1 /* Type.EXPLICIT */, d: false, i: 0, c: {} });
    }
    if (state.d) {
        // Redefining a table!
        return null;
    }
    state.d = true;
    if (type === 1 /* Type.EXPLICIT */) {
        t = hasOwn ? t[k] : (t[k] = {});
    }
    else if (type === 0 /* Type.DOTTED */ && hasOwn) {
        return null;
    }
    return [k, t, state.c];
}
function parse(toml, opts) {
    let maxDepth = opts?.maxDepth ?? 1000;
    let res = {};
    let meta = {};
    let tbl = res;
    let m = meta;
    for (let ptr = skipVoid(toml, 0); ptr < toml.length;) {
        if (toml[ptr] === '[') {
            let isTableArray = toml[++ptr] === '[';
            let k = parseKey(toml, ptr += +isTableArray, ']');
            if (isTableArray) {
                if (toml[k[1] - 1] !== ']') {
                    throw new TomlError('expected end of table declaration', {
                        toml: toml,
                        ptr: k[1] - 1,
                    });
                }
                k[1]++;
            }
            let p = peekTable(k[0], res, meta, isTableArray ? 2 /* Type.ARRAY */ : 1 /* Type.EXPLICIT */);
            if (!p) {
                throw new TomlError('trying to redefine an already defined table or value', {
                    toml: toml,
                    ptr: ptr,
                });
            }
            m = p[2];
            tbl = p[1];
            ptr = k[1];
        }
        else {
            let k = parseKey(toml, ptr);
            let p = peekTable(k[0], tbl, m, 0 /* Type.DOTTED */);
            if (!p) {
                throw new TomlError('trying to redefine an already defined table or value', {
                    toml: toml,
                    ptr: ptr,
                });
            }
            let v = extractValue(toml, k[1], void 0, maxDepth);
            p[1][p[0]] = v[0];
            ptr = v[1];
        }
        ptr = skipVoid(toml, ptr, true);
        if (toml[ptr] && toml[ptr] !== '\n' && toml[ptr] !== '\r') {
            throw new TomlError('each key-value declaration must be followed by an end-of-line', {
                toml: toml,
                ptr: ptr
            });
        }
        ptr = skipVoid(toml, ptr);
    }
    return res;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/smol-toml@1.3.4/node_modules/smol-toml/dist/stringify.js
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
let BARE_KEY = /^[a-z0-9-_]+$/i;
function extendedTypeOf(obj) {
    let type = typeof obj;
    if (type === 'object') {
        if (Array.isArray(obj))
            return 'array';
        if (obj instanceof Date)
            return 'date';
    }
    return type;
}
function isArrayOfTables(obj) {
    for (let i = 0; i < obj.length; i++) {
        if (extendedTypeOf(obj[i]) !== 'object')
            return false;
    }
    return obj.length != 0;
}
function formatString(s) {
    return JSON.stringify(s).replace(/\x7f/g, '\\u007f');
}
function stringifyValue(val, type, depth) {
    if (depth === 0) {
        throw new Error("Could not stringify the object: maximum object depth exceeded");
    }
    if (type === 'number') {
        if (isNaN(val))
            return 'nan';
        if (val === Infinity)
            return 'inf';
        if (val === -Infinity)
            return '-inf';
        return val.toString();
    }
    if (type === 'bigint' || type === 'boolean') {
        return val.toString();
    }
    if (type === 'string') {
        return formatString(val);
    }
    if (type === 'date') {
        if (isNaN(val.getTime())) {
            throw new TypeError('cannot serialize invalid date');
        }
        return val.toISOString();
    }
    if (type === 'object') {
        return stringifyInlineTable(val, depth);
    }
    if (type === 'array') {
        return stringifyArray(val, depth);
    }
}
function stringifyInlineTable(obj, depth) {
    let keys = Object.keys(obj);
    if (keys.length === 0)
        return '{}';
    let res = '{ ';
    for (let i = 0; i < keys.length; i++) {
        let k = keys[i];
        if (i)
            res += ', ';
        res += BARE_KEY.test(k) ? k : formatString(k);
        res += ' = ';
        res += stringifyValue(obj[k], extendedTypeOf(obj[k]), depth - 1);
    }
    return res + ' }';
}
function stringifyArray(array, depth) {
    if (array.length === 0)
        return '[]';
    let res = '[ ';
    for (let i = 0; i < array.length; i++) {
        if (i)
            res += ', ';
        if (array[i] === null || array[i] === void 0) {
            throw new TypeError('arrays cannot contain null or undefined values');
        }
        res += stringifyValue(array[i], extendedTypeOf(array[i]), depth - 1);
    }
    return res + ' ]';
}
function stringifyArrayTable(array, key, depth) {
    if (depth === 0) {
        throw new Error("Could not stringify the object: maximum object depth exceeded");
    }
    let res = '';
    for (let i = 0; i < array.length; i++) {
        res += `[[${key}]]\n`;
        res += stringifyTable(array[i], key, depth);
        res += '\n\n';
    }
    return res;
}
function stringifyTable(obj, prefix, depth) {
    if (depth === 0) {
        throw new Error("Could not stringify the object: maximum object depth exceeded");
    }
    let preamble = '';
    let tables = '';
    let keys = Object.keys(obj);
    for (let i = 0; i < keys.length; i++) {
        let k = keys[i];
        if (obj[k] !== null && obj[k] !== void 0) {
            let type = extendedTypeOf(obj[k]);
            if (type === 'symbol' || type === 'function') {
                throw new TypeError(`cannot serialize values of type '${type}'`);
            }
            let key = BARE_KEY.test(k) ? k : formatString(k);
            if (type === 'array' && isArrayOfTables(obj[k])) {
                tables += stringifyArrayTable(obj[k], prefix ? `${prefix}.${key}` : key, depth - 1);
            }
            else if (type === 'object') {
                let tblKey = prefix ? `${prefix}.${key}` : key;
                tables += `[${tblKey}]\n`;
                tables += stringifyTable(obj[k], tblKey, depth - 1);
                tables += '\n\n';
            }
            else {
                preamble += key;
                preamble += ' = ';
                preamble += stringifyValue(obj[k], type, depth);
                preamble += '\n';
            }
        }
    }
    return `${preamble}\n${tables}`.trim();
}
function stringify(obj, opts) {
    if (extendedTypeOf(obj) !== 'object') {
        throw new TypeError('stringify can only be called with an object');
    }
    let maxDepth = opts?.maxDepth ?? 1000;
    return stringifyTable(obj, '', maxDepth);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/smol-toml@1.3.4/node_modules/smol-toml/dist/index.js
/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */




/* harmony default export */ const dist = ({ parse: parse, stringify: stringify, TomlDate: TomlDate, TomlError: TomlError });


// EXTERNAL MODULE: ./node_modules/.pnpm/semver@7.7.1/node_modules/semver/index.js
var semver = __nccwpck_require__(989);
// EXTERNAL MODULE: external "util"
var external_util_ = __nccwpck_require__(9023);
;// CONCATENATED MODULE: ./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm/native.js

/* harmony default export */ const esm_native = ({ randomUUID: external_crypto_.randomUUID });

;// CONCATENATED MODULE: ./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm/rng.js

const rnds8Pool = new Uint8Array(256);
let poolPtr = rnds8Pool.length;
function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
        (0,external_crypto_.randomFillSync)(rnds8Pool);
        poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, (poolPtr += 16));
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm/stringify.js

const byteToHex = [];
for (let i = 0; i < 256; ++i) {
    byteToHex.push((i + 0x100).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
    return (byteToHex[arr[offset + 0]] +
        byteToHex[arr[offset + 1]] +
        byteToHex[arr[offset + 2]] +
        byteToHex[arr[offset + 3]] +
        '-' +
        byteToHex[arr[offset + 4]] +
        byteToHex[arr[offset + 5]] +
        '-' +
        byteToHex[arr[offset + 6]] +
        byteToHex[arr[offset + 7]] +
        '-' +
        byteToHex[arr[offset + 8]] +
        byteToHex[arr[offset + 9]] +
        '-' +
        byteToHex[arr[offset + 10]] +
        byteToHex[arr[offset + 11]] +
        byteToHex[arr[offset + 12]] +
        byteToHex[arr[offset + 13]] +
        byteToHex[arr[offset + 14]] +
        byteToHex[arr[offset + 15]]).toLowerCase();
}
function stringify_stringify(arr, offset = 0) {
    const uuid = unsafeStringify(arr, offset);
    if (!validate(uuid)) {
        throw TypeError('Stringified UUID is invalid');
    }
    return uuid;
}
/* harmony default export */ const esm_stringify = ((/* unused pure expression or super */ null && (stringify_stringify)));

;// CONCATENATED MODULE: ./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm/v4.js



function v4(options, buf, offset) {
    if (esm_native.randomUUID && !buf && !options) {
        return esm_native.randomUUID();
    }
    options = options || {};
    const rnds = options.random ?? options.rng?.() ?? rng();
    if (rnds.length < 16) {
        throw new Error('Random bytes length must be >= 16');
    }
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;
    if (buf) {
        offset = offset || 0;
        if (offset < 0 || offset + 16 > buf.length) {
            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
        }
        for (let i = 0; i < 16; ++i) {
            buf[offset + i] = rnds[i];
        }
        return buf;
    }
    return unsafeStringify(rnds);
}
/* harmony default export */ const esm_v4 = (v4);

;// CONCATENATED MODULE: ./src/cache/internal/constants.ts
// https://github.com/actions/toolkit/blob/main/packages/cache/src/cache.ts
// 6c4e082c181a51609197e536ef5255a0c9baeef7
var CacheFilename;
(function (CacheFilename) {
    CacheFilename["Gzip"] = "cache.tgz";
    CacheFilename["Zstd"] = "cache.tzst";
})(CacheFilename || (CacheFilename = {}));
var CompressionMethod;
(function (CompressionMethod) {
    CompressionMethod["Gzip"] = "gzip";
    // Long range mode was added to zstd in v1.3.2.
    // This enum is for earlier version of zstd that does not have --long support
    CompressionMethod["ZstdWithoutLong"] = "zstd-without-long";
    CompressionMethod["Zstd"] = "zstd";
})(CompressionMethod || (CompressionMethod = {}));
var ArchiveToolType;
(function (ArchiveToolType) {
    ArchiveToolType["GNU"] = "gnu";
    ArchiveToolType["BSD"] = "bsd";
})(ArchiveToolType || (ArchiveToolType = {}));
// The default number of retry attempts.
const DefaultRetryAttempts = 2;
// The default delay in milliseconds between retry attempts.
const DefaultRetryDelay = 5000;
// Socket timeout in milliseconds during download.  If no traffic is received
// over the socket during this period, the socket is destroyed and the download
// is aborted.
const SocketTimeout = 5000;
// The default path of GNUtar on hosted Windows runners
const GnuTarPathOnWindows = `${process.env['PROGRAMFILES']}\\Git\\usr\\bin\\tar.exe`;
// The default path of BSDtar on hosted Windows runners
const SystemTarPathOnWindows = `${process.env['SYSTEMDRIVE']}\\Windows\\System32\\tar.exe`;
const TarFilename = 'cache.tar';
const ManifestFilename = 'manifest.txt';

;// CONCATENATED MODULE: ./src/cache/internal/cacheUtils.ts
// https://github.com/actions/toolkit/blob/main/packages/cache/src/cache.ts
// 6c4e082c181a51609197e536ef5255a0c9baeef7










// From https://github.com/actions/toolkit/blob/main/packages/tool-cache/src/tool-cache.ts#L23
async function createTempDirectory() {
    const IS_WINDOWS = process.platform === 'win32';
    let tempDirectory = process.env['RUNNER_TEMP'] || '';
    if (!tempDirectory) {
        let baseLocation;
        if (IS_WINDOWS) {
            // On Windows use the USERPROFILE env variable
            baseLocation = process.env['USERPROFILE'] || 'C:\\';
        }
        else {
            if (process.platform === 'darwin') {
                baseLocation = '/Users';
            }
            else {
                baseLocation = '/home';
            }
        }
        tempDirectory = external_path_.join(baseLocation, 'actions', 'temp');
    }
    const dest = external_path_.join(tempDirectory, esm_v4());
    await io.mkdirP(dest);
    return dest;
}
function getArchiveFileSizeInBytes(filePath) {
    return external_fs_.statSync(filePath).size;
}
async function resolvePaths(patterns) {
    const paths = [];
    const workspace = process.env['GITHUB_WORKSPACE'] ?? process.cwd();
    const globber = await glob.create(patterns.join('\n'), {
        implicitDescendants: false
    });
    for await (const file of globber.globGenerator()) {
        const relativeFile = external_path_.relative(workspace, file)
            .replace(new RegExp(`\\${external_path_.sep}`, 'g'), '/');
        core.debug(`Matched: ${relativeFile}`);
        // Paths are made relative so the tar entries are all relative to the root of the workspace.
        if (relativeFile === '') {
            // path.relative returns empty string if workspace and file are equal
            paths.push('.');
        }
        else {
            paths.push(`${relativeFile}`);
        }
    }
    return paths;
}
async function unlinkFile(filePath) {
    return external_util_.promisify(external_fs_.unlink)(filePath);
}
async function getVersion(app, additionalArgs = []) {
    let versionOutput = '';
    additionalArgs.push('--version');
    core.debug(`Checking ${app} ${additionalArgs.join(' ')}`);
    try {
        await exec.exec(`${app}`, additionalArgs, {
            ignoreReturnCode: true,
            silent: true,
            listeners: {
                stdout: (data) => (versionOutput += data.toString()),
                stderr: (data) => (versionOutput += data.toString())
            }
        });
    }
    catch (err) {
        core.debug(err.message);
    }
    versionOutput = versionOutput.trim();
    core.debug(versionOutput);
    return versionOutput;
}
// Use zstandard if possible to maximize cache performance
async function getCompressionMethod() {
    const versionOutput = await getVersion('zstd', ['--quiet']);
    const version = semver.clean(versionOutput);
    core.debug(`zstd version: ${version}`);
    if (versionOutput === '') {
        return CompressionMethod.Gzip;
    }
    else {
        return CompressionMethod.ZstdWithoutLong;
    }
}
function getCacheFileName(compressionMethod) {
    return compressionMethod === CompressionMethod.Gzip
        ? CacheFilename.Gzip
        : CacheFilename.Zstd;
}
async function getGnuTarPathOnWindows() {
    if (external_fs_.existsSync(GnuTarPathOnWindows)) {
        return GnuTarPathOnWindows;
    }
    const versionOutput = await getVersion('tar');
    return versionOutput.toLowerCase().includes('gnu tar') ? io.which('tar') : '';
}
function assertDefined(name, value) {
    if (value === undefined) {
        throw Error(`Expected ${name} but value was undefiend`);
    }
    return value;
}
function isGhes() {
    const ghUrl = new URL(process.env['GITHUB_SERVER_URL'] || 'https://github.com');
    const hostname = ghUrl.hostname.trimEnd().toUpperCase();
    const isGitHubHost = hostname === 'GITHUB.COM';
    const isGheHost = hostname.endsWith('.GHE.COM') || hostname.endsWith('.GHE.LOCALHOST');
    return !isGitHubHost && !isGheHost;
}

// EXTERNAL MODULE: ./node_modules/.pnpm/@volcengine+tos-sdk@2.7.4/node_modules/@volcengine/tos-sdk/dist/index.js
var tos_sdk_dist = __nccwpck_require__(7516);
;// CONCATENATED MODULE: ./src/cache/internal/objectstorageClient.ts
// https://github.com/actions/toolkit/blob/main/packages/cache/src/cache.ts
// 6c4e082c181a51609197e536ef5255a0c9baeef7




const versionSalt = "1.0";
const bucket = process.env["BUCKET_NAME"];
const repo = process.env["GITHUB_REPOSITORY"];
function createObjectStorageClient() {
    const endpoint = process.env["ENDPOINT"];
    const opts = endpoint
        ? { endpoint: endpoint, secure: false }
        : { secure: true };
    return new tos_sdk_dist.TosClient({
        accessKeyId: process.env["ACCESS_KEY"],
        accessKeySecret: process.env["SECRET_KEY"],
        region: process.env["REGION"],
        ...opts
    });
}
function getCacheVersion(paths, compressionMethod, enableCrossOsArchive = false) {
    // don't pass changes upstream
    const components = paths.slice();
    // Add compression method to cache version to restore
    // compressed cache as per compression method
    if (compressionMethod) {
        components.push(compressionMethod);
    }
    // Only check for windows platforms if enableCrossOsArchive is false
    if (process.platform === "win32" && !enableCrossOsArchive) {
        components.push("windows-only");
    }
    // Add salt to cache version to support breaking changes in cache entry
    components.push(versionSalt);
    return external_crypto_.createHash("sha256")
        .update(components.join("|"))
        .digest("hex");
}
async function getPrimaryKeyCacheEntry(client, version, primaryKey) {
    const objectKey = `caches/${repo}/${primaryKey}`;
    try {
        await client.headObject({
            bucket: bucket,
            key: objectKey
        });
        const entry = {
            cacheKey: primaryKey,
            cacheVersion: version,
            objectKey: objectKey
        };
        return entry;
    }
    catch (error) {
        if (error instanceof tos_sdk_dist.TosServerError && error.statusCode === 404) {
            console.warn(`Unable to find cache with primary key: ${objectKey}.`);
        }
        return null;
    }
}
async function getRestoreKeysCacheEntry(client, version, restoreKeys) {
    for (const key of restoreKeys) {
        const prefix = `caches/${repo}/${key}`;
        try {
            const { data } = await client.listObjectsType2({
                bucket: bucket,
                prefix: prefix,
                maxKeys: 100
            });
            if (data.Contents.length == 0) {
                console.warn(`Unable to find cache with restore key ${prefix}.`);
                continue;
            }
            let index = 0;
            let latestModifiedTime = new Date(data.Contents[index].LastModified).getTime();
            for (let i = 1; i < data.Contents.length; i++) {
                const modifiedTime = new Date(data.Contents[i].LastModified).getTime();
                if (modifiedTime > latestModifiedTime) {
                    index = i;
                    latestModifiedTime = modifiedTime;
                }
            }
            const matchedKey = data.Contents[index].Key;
            const entry = {
                cacheKey: matchedKey,
                cacheVersion: version,
                objectKey: matchedKey
            };
            return entry;
        }
        catch (error) {
            console.warn(`an error occurred when trying to find cache with restore key ${prefix}`);
            handleError(error);
        }
    }
    return null;
}
async function getCacheEntry(keys, paths, options) {
    const client = createObjectStorageClient();
    const version = getCacheVersion(paths, options?.compressionMethod, options?.enableCrossOsArchive);
    let entry = await getPrimaryKeyCacheEntry(client, version, keys[0]);
    if (entry) {
        return entry;
    }
    entry = await getRestoreKeysCacheEntry(client, version, keys.slice(1));
    if (entry) {
        return entry;
    }
    entry = {
        cacheVersion: version
    };
    console.warn(`Failed to find cache that matches keys: ${keys}`);
    return entry;
}
async function downloadCache(objectKey, archivePath, 
// @ts-ignore
options) {
    const client = createObjectStorageClient();
    await client.getObjectToFile({
        bucket: bucket,
        key: objectKey,
        filePath: archivePath
    });
}
function handleError(error) {
    if (error instanceof tos_sdk_dist.TosClientError) {
        console.log("Client Err Msg:", error.message);
        console.log("Client Err Stack:", error.stack);
    }
    else if (error instanceof tos_sdk_dist.TosServerError) {
        console.log("Request ID:", error.requestId);
        console.log("Response Status Code:", error.statusCode);
        console.log("Response Header:", error.headers);
        console.log("Response Err Code:", error.code);
        console.log("Response Err Msg:", error.message);
    }
    else {
        console.log("unexpected exception, message: ", error);
    }
}
async function uploadFile(client, cacheId, archivePath, 
// @ts-ignore
options) {
    try {
        const objectName = `caches/${repo}/${cacheId}`;
        await client.putObjectFromFile({
            bucket: bucket,
            key: objectName,
            filePath: archivePath
        });
    }
    catch (error) {
        handleError(error);
    }
}
async function saveCache(cacheId, archivePath, options) {
    const client = createObjectStorageClient();
    core.debug("Upload cache");
    await uploadFile(client, cacheId, archivePath, options);
    // Commit Cache
    core.debug("Commiting cache");
    const cacheSize = getArchiveFileSizeInBytes(archivePath);
    core.info(`Cache Size: ~${Math.round(cacheSize / (1024 * 1024))} MB (${cacheSize} B)`);
    core.info("Cache saved successfully");
}

;// CONCATENATED MODULE: ./src/cache/internal/tar.ts
// https://github.com/actions/toolkit/blob/main/packages/cache/src/cache.ts
// 6c4e082c181a51609197e536ef5255a0c9baeef7






const IS_WINDOWS = process.platform === 'win32';
// Returns tar path and type: BSD or GNU
async function getTarPath() {
    switch (process.platform) {
        case 'win32': {
            const gnuTar = await getGnuTarPathOnWindows();
            const systemTar = SystemTarPathOnWindows;
            if (gnuTar) {
                // Use GNUtar as default on windows
                return { path: gnuTar, type: ArchiveToolType.GNU };
            }
            else if ((0,external_fs_.existsSync)(systemTar)) {
                return { path: systemTar, type: ArchiveToolType.BSD };
            }
            break;
        }
        case 'darwin': {
            const gnuTar = await io.which('gtar', false);
            if (gnuTar) {
                // fix permission denied errors when extracting BSD tar archive with GNU tar - https://github.com/actions/cache/issues/527
                return { path: gnuTar, type: ArchiveToolType.GNU };
            }
            else {
                return {
                    path: await io.which('tar', true),
                    type: ArchiveToolType.BSD
                };
            }
        }
        default:
            break;
    }
    // Default assumption is GNU tar is present in path
    return {
        path: await io.which('tar', true),
        type: ArchiveToolType.GNU
    };
}
// Return arguments for tar as per tarPath, compressionMethod, method type and os
async function getTarArgs(tarPath, compressionMethod, type, archivePath = '') {
    const args = [`"${tarPath.path}"`];
    const cacheFileName = getCacheFileName(compressionMethod);
    const tarFile = 'cache.tar';
    const workingDirectory = getWorkingDirectory();
    // Speficic args for BSD tar on windows for workaround
    const BSD_TAR_ZSTD = tarPath.type === ArchiveToolType.BSD &&
        compressionMethod !== CompressionMethod.Gzip &&
        IS_WINDOWS;
    // Method specific args
    switch (type) {
        case 'create':
            args.push('--posix', '-cf', BSD_TAR_ZSTD
                ? tarFile
                : cacheFileName.replace(new RegExp(`\\${external_path_.sep}`, 'g'), '/'), '--exclude', BSD_TAR_ZSTD
                ? tarFile
                : cacheFileName.replace(new RegExp(`\\${external_path_.sep}`, 'g'), '/'), '-P', '-C', workingDirectory.replace(new RegExp(`\\${external_path_.sep}`, 'g'), '/'), '--files-from', ManifestFilename);
            break;
        case 'extract':
            args.push('-xf', BSD_TAR_ZSTD
                ? tarFile
                : archivePath.replace(new RegExp(`\\${external_path_.sep}`, 'g'), '/'), '-P', '-C', workingDirectory.replace(new RegExp(`\\${external_path_.sep}`, 'g'), '/'));
            break;
        case 'list':
            args.push('-tf', BSD_TAR_ZSTD
                ? tarFile
                : archivePath.replace(new RegExp(`\\${external_path_.sep}`, 'g'), '/'), '-P');
            break;
    }
    // Platform specific args
    if (tarPath.type === ArchiveToolType.GNU) {
        switch (process.platform) {
            case 'win32':
                args.push('--force-local');
                break;
            case 'darwin':
                args.push('--delay-directory-restore');
                break;
        }
    }
    return args;
}
// Returns commands to run tar and compression program
async function getCommands(compressionMethod, type, archivePath = '') {
    let args;
    const tarPath = await getTarPath();
    const tarArgs = await getTarArgs(tarPath, compressionMethod, type, archivePath);
    const compressionArgs = type !== 'create'
        ? await getDecompressionProgram(tarPath, compressionMethod, archivePath)
        : await getCompressionProgram(tarPath, compressionMethod);
    const BSD_TAR_ZSTD = tarPath.type === ArchiveToolType.BSD &&
        compressionMethod !== CompressionMethod.Gzip &&
        IS_WINDOWS;
    if (BSD_TAR_ZSTD && type !== 'create') {
        args = [[...compressionArgs].join(' '), [...tarArgs].join(' ')];
    }
    else {
        args = [[...tarArgs].join(' '), [...compressionArgs].join(' ')];
    }
    if (BSD_TAR_ZSTD) {
        return args;
    }
    return [args.join(' ')];
}
function getWorkingDirectory() {
    return process.env['GITHUB_WORKSPACE'] ?? process.cwd();
}
// Common function for extractTar and listTar to get the compression method
async function getDecompressionProgram(tarPath, compressionMethod, archivePath) {
    // -d: Decompress.
    // unzstd is equivalent to 'zstd -d'
    // --long=#: Enables long distance matching with # bits. Maximum is 30 (1GB) on 32-bit OS and 31 (2GB) on 64-bit.
    // Using 30 here because we also support 32-bit self-hosted runners.
    const BSD_TAR_ZSTD = tarPath.type === ArchiveToolType.BSD &&
        compressionMethod !== CompressionMethod.Gzip &&
        IS_WINDOWS;
    switch (compressionMethod) {
        case CompressionMethod.Zstd:
            return BSD_TAR_ZSTD
                ? [
                    'zstd -d --long=30 --force -o',
                    TarFilename,
                    archivePath.replace(new RegExp(`\\${external_path_.sep}`, 'g'), '/')
                ]
                : [
                    '--use-compress-program',
                    IS_WINDOWS ? '"zstd -d --long=30"' : 'unzstd --long=30'
                ];
        case CompressionMethod.ZstdWithoutLong:
            return BSD_TAR_ZSTD
                ? [
                    'zstd -d --force -o',
                    TarFilename,
                    archivePath.replace(new RegExp(`\\${external_path_.sep}`, 'g'), '/')
                ]
                : ['--use-compress-program', IS_WINDOWS ? '"zstd -d"' : 'unzstd'];
        default:
            return ['-z'];
    }
}
// Used for creating the archive
// -T#: Compress using # working thread. If # is 0, attempt to detect and use the number of physical CPU cores.
// zstdmt is equivalent to 'zstd -T0'
// --long=#: Enables long distance matching with # bits. Maximum is 30 (1GB) on 32-bit OS and 31 (2GB) on 64-bit.
// Using 30 here because we also support 32-bit self-hosted runners.
// Long range mode is added to zstd in v1.3.2 release, so we will not use --long in older version of zstd.
async function getCompressionProgram(tarPath, compressionMethod) {
    const cacheFileName = getCacheFileName(compressionMethod);
    const BSD_TAR_ZSTD = tarPath.type === ArchiveToolType.BSD &&
        compressionMethod !== CompressionMethod.Gzip &&
        IS_WINDOWS;
    switch (compressionMethod) {
        case CompressionMethod.Zstd:
            return BSD_TAR_ZSTD
                ? [
                    'zstd -T0 --long=30 --force -o',
                    cacheFileName.replace(new RegExp(`\\${external_path_.sep}`, 'g'), '/'),
                    TarFilename
                ]
                : [
                    '--use-compress-program',
                    IS_WINDOWS ? '"zstd -T0 --long=30"' : 'zstdmt --long=30'
                ];
        case CompressionMethod.ZstdWithoutLong:
            return BSD_TAR_ZSTD
                ? [
                    'zstd -T0 --force -o',
                    cacheFileName.replace(new RegExp(`\\${external_path_.sep}`, 'g'), '/'),
                    TarFilename
                ]
                : ['--use-compress-program', IS_WINDOWS ? '"zstd -T0"' : 'zstdmt'];
        default:
            return ['-z'];
    }
}
// Executes all commands as separate processes
async function execCommands(commands, cwd) {
    for (const command of commands) {
        try {
            await (0,exec.exec)(command, undefined, {
                cwd,
                env: { ...process.env, MSYS: 'winsymlinks:nativestrict' }
            });
        }
        catch (error) {
            throw new Error(`${command.split(' ')[0]} failed with error: ${error?.message}`);
        }
    }
}
// List the contents of a tar
async function listTar(archivePath, compressionMethod) {
    const commands = await getCommands(compressionMethod, 'list', archivePath);
    await execCommands(commands);
}
// Extract a tar
async function extractTar(archivePath, compressionMethod) {
    // Create directory to extract tar into
    const workingDirectory = getWorkingDirectory();
    await io.mkdirP(workingDirectory);
    const commands = await getCommands(compressionMethod, 'extract', archivePath);
    await execCommands(commands);
}
// Create a tar
async function createTar(archiveFolder, sourceDirectories, compressionMethod) {
    // Write source directories to manifest.txt to avoid command length limits
    (0,external_fs_.writeFileSync)(external_path_.join(archiveFolder, ManifestFilename), sourceDirectories.join('\n'));
    const commands = await getCommands(compressionMethod, 'create');
    await execCommands(commands, archiveFolder);
}

;// CONCATENATED MODULE: ./src/cache/cache.ts
// https://github.com/actions/toolkit/blob/main/packages/cache/src/cache.ts
// 6c4e082c181a51609197e536ef5255a0c9baeef7





class ValidationError extends Error {
    constructor(message) {
        super(message);
        this.name = 'ValidationError';
        Object.setPrototypeOf(this, ValidationError.prototype);
    }
}
class ReserveCacheError extends Error {
    constructor(message) {
        super(message);
        this.name = 'ReserveCacheError';
        Object.setPrototypeOf(this, ReserveCacheError.prototype);
    }
}
function checkPaths(paths) {
    if (!paths || paths.length === 0) {
        throw new ValidationError(`Path Validation Error: At least one directory or file path is required`);
    }
}
function checkKey(key) {
    if (key.length > 512) {
        throw new ValidationError(`Key Validation Error: ${key} cannot be larger than 512 characters.`);
    }
    const regex = /^[^,]*$/;
    if (!regex.test(key)) {
        throw new ValidationError(`Key Validation Error: ${key} cannot contain commas.`);
    }
}
/**
 * isFeatureAvailable to check the presence of Actions cache service
 *
 * @returns boolean return true if Actions cache service feature is available, otherwise false
 */
function isFeatureAvailable() {
    return !!process.env['ACTIONS_CACHE_URL'];
}
/**
 * Restores cache from keys
 *
 * @param paths a list of file paths to restore from the cache
 * @param primaryKey an explicit key for restoring the cache
 * @param restoreKeys an optional ordered list of keys to use for restoring the cache if no cache hit occurred for key
 * @param downloadOptions cache download options
 * @param enableCrossOsArchive an optional boolean enabled to restore on windows any cache created on any platform
 * @returns string returns the key for the cache hit, otherwise returns undefined
 */
async function restoreCache(paths, primaryKey, restoreKeys, options, enableCrossOsArchive = false) {
    checkPaths(paths);
    restoreKeys = restoreKeys || [];
    const keys = [primaryKey, ...restoreKeys];
    core.debug('Resolved Keys:');
    core.debug(JSON.stringify(keys));
    if (keys.length > 10) {
        throw new ValidationError(`Key Validation Error: Keys are limited to a maximum of 10.`);
    }
    for (const key of keys) {
        checkKey(key);
    }
    const compressionMethod = await getCompressionMethod();
    let archivePath = '';
    try {
        // path are needed to compute version
        const cacheEntry = await getCacheEntry(keys, paths, {
            compressionMethod,
            enableCrossOsArchive
        });
        if (!cacheEntry?.objectKey) {
            // Cache not found
            return undefined;
        }
        if (options?.lookupOnly) {
            core.info('Lookup only - skipping download');
            return cacheEntry.cacheKey;
        }
        archivePath = external_path_.join(await createTempDirectory(), getCacheFileName(compressionMethod));
        core.debug(`Archive Path: ${archivePath}`);
        // Download the cache from the cache entry
        await downloadCache(cacheEntry.objectKey, archivePath, options);
        if (core.isDebug()) {
            await listTar(archivePath, compressionMethod);
        }
        const archiveFileSize = getArchiveFileSizeInBytes(archivePath);
        core.info(`Cache Size: ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B)`);
        await extractTar(archivePath, compressionMethod);
        core.info('Cache restored successfully');
        return cacheEntry.cacheKey;
    }
    catch (error) {
        const typedError = error;
        if (typedError.name === ValidationError.name) {
            throw error;
        }
        else {
            // Supress all non-validation cache related errors because caching should be optional
            core.warning(`Failed to restore: ${error.message}`);
        }
    }
    finally {
        // Try to delete the archive to save space
        try {
            await unlinkFile(archivePath);
        }
        catch (error) {
            core.debug(`Failed to delete archive: ${error}`);
        }
    }
    return undefined;
}
/**
 * Saves a list of files with the specified key
 *
 * @param paths a list of file paths to be cached
 * @param key an explicit key for restoring the cache
 * @param options cache upload options
 * @returns number returns cacheId if the cache was saved successfully and throws an error if save fails
 */
async function cache_saveCache(paths, key, options) {
    checkPaths(paths);
    checkKey(key);
    const compressionMethod = await getCompressionMethod();
    let cacheId = key;
    const cachePaths = await resolvePaths(paths);
    core.debug('Cache Paths:');
    core.debug(`${JSON.stringify(cachePaths)}`);
    if (cachePaths.length === 0) {
        throw new Error(`Path Validation Error: Path(s) specified in the action for caching do(es) not exist, hence no cache is being saved.`);
    }
    const archiveFolder = await createTempDirectory();
    const archivePath = external_path_.join(archiveFolder, getCacheFileName(compressionMethod));
    core.debug(`Archive Path: ${archivePath}`);
    try {
        await createTar(archiveFolder, cachePaths, compressionMethod);
        if (core.isDebug()) {
            await listTar(archivePath, compressionMethod);
        }
        const fileSizeLimit = 10 * 1024 * 1024 * 1024; // 10GB per repo limit
        const archiveFileSize = getArchiveFileSizeInBytes(archivePath);
        core.debug(`File Size: ${archiveFileSize}`);
        // For GHES, this check will take place in ReserveCache API with enterprise file size limit
        if (archiveFileSize > fileSizeLimit && !isGhes()) {
            throw new Error(`Cache size of ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B) is over the 10GB limit, not saving cache.`);
        }
        core.debug(`Saving Cache (ID: ${cacheId})`);
        await saveCache(cacheId, archivePath, options);
    }
    catch (error) {
        const typedError = error;
        if (typedError.name === ValidationError.name) {
            throw error;
        }
        else if (typedError.name === ReserveCacheError.name) {
            core.info(`Failed to save: ${typedError.message}`);
        }
        else {
            core.warning(`Failed to save: ${typedError.message}`);
        }
    }
    finally {
        // Try to delete the archive to save space
        try {
            await unlinkFile(archivePath);
        }
        catch (error) {
            core.debug(`Failed to delete archive: ${error}`);
        }
    }
    return cacheId;
}

;// CONCATENATED MODULE: ./src/utils.ts




function reportError(e) {
    const { commandFailed } = e;
    if (commandFailed) {
        core.error(`Command failed: ${commandFailed.command}`);
        core.error(commandFailed.stderr);
    }
    else {
        core.error(`${e.stack}`);
    }
}
async function getCmdOutput(cmd, args = [], options = {}) {
    let stdout = "";
    let stderr = "";
    try {
        await exec.exec(cmd, args, {
            silent: true,
            listeners: {
                stdout(data) {
                    stdout += data.toString();
                },
                stderr(data) {
                    stderr += data.toString();
                },
            },
            ...options,
        });
    }
    catch (e) {
        e.commandFailed = {
            command: `${cmd} ${args.join(" ")}`,
            stderr,
        };
        throw e;
    }
    return stdout;
}
function getCacheProvider() {
    return {
        name: "lynx-cache",
        // @ts-ignore
        cache: cache_namespaceObject,
    };
}
async function exists(path) {
    try {
        await external_fs_default().promises.access(path);
        return true;
    }
    catch {
        return false;
    }
}

;// CONCATENATED MODULE: ./src/workspace.ts



const SAVE_TARGETS = new Set(["lib", "proc-macro"]);
class Workspace {
    constructor(root, target) {
        this.root = root;
        this.target = target;
    }
    async getPackages(filter, ...extraArgs) {
        let packages = [];
        try {
            core.debug(`collecting metadata for "${this.root}"`);
            const meta = JSON.parse(await getCmdOutput("cargo", ["metadata", "--all-features", "--format-version", "1", ...extraArgs], {
                cwd: this.root,
            }));
            core.debug(`workspace "${this.root}" has ${meta.packages.length} packages`);
            for (const pkg of meta.packages.filter(filter)) {
                const targets = pkg.targets.filter((t) => t.kind.some((kind) => SAVE_TARGETS.has(kind))).map((t) => t.name);
                packages.push({ name: pkg.name, version: pkg.version, targets, path: external_path_default().dirname(pkg.manifest_path) });
            }
        }
        catch (err) {
            console.error(err);
        }
        return packages;
    }
    async getPackagesOutsideWorkspaceRoot() {
        return await this.getPackages((pkg) => !pkg.manifest_path.startsWith(this.root));
    }
    async getWorkspaceMembers() {
        return await this.getPackages((_) => true, "--no-deps");
    }
}

;// CONCATENATED MODULE: ./src/config.ts











const HOME = external_os_default().homedir();
const CARGO_HOME = process.env.CARGO_HOME || external_path_default().join(HOME, ".cargo");
const STATE_CONFIG = "RUST_CACHE_CONFIG";
const HASH_LENGTH = 8;
class CacheConfig {
    constructor() {
        /** All the paths we want to cache */
        this.cachePaths = [];
        /** The primary cache key */
        this.cacheKey = "";
        /** The secondary (restore) key that only contains the prefix and environment */
        this.restoreKey = "";
        /** Whether to cache CARGO_HOME/.bin */
        this.cacheBin = true;
        /** The workspace configurations */
        this.workspaces = [];
        /** The cargo binaries present during main step */
        this.cargoBins = [];
        /** The prefix portion of the cache key */
        this.keyPrefix = "";
        /** The rust version considered for the cache key */
        this.keyRust = "";
        /** The environment variables considered for the cache key */
        this.keyEnvs = [];
        /** The files considered for the cache key */
        this.keyFiles = [];
    }
    /**
     * Constructs a [`CacheConfig`] with all the paths and keys.
     *
     * This will read the action `input`s, and read and persist `state` as necessary.
     */
    static async new() {
        const self = new CacheConfig();
        // Construct key prefix:
        // This uses either the `shared-key` input,
        // or the `key` input combined with the `job` key.
        let key = core.getInput("prefix-key") || "v0-rust";
        const sharedKey = core.getInput("shared-key");
        if (sharedKey) {
            key += `-${sharedKey}`;
        }
        else {
            const inputKey = core.getInput("key");
            if (inputKey) {
                key += `-${inputKey}`;
            }
            const job = process.env.GITHUB_JOB;
            if (job) {
                key += `-${job}`;
            }
        }
        // Add runner OS and CPU architecture to the key to avoid cross-contamination of cache
        const runnerOS = external_os_default().type();
        const runnerArch = external_os_default().arch();
        key += `-${runnerOS}-${runnerArch}`;
        self.keyPrefix = key;
        // Construct environment portion of the key:
        // This consists of a hash that considers the rust version
        // as well as all the environment variables as given by a default list
        // and the `env-vars` input.
        // The env vars are sorted, matched by prefix and hashed into the
        // resulting environment hash.
        let hasher = external_crypto_default().createHash("sha1");
        const rustVersion = await getRustVersion();
        let keyRust = `${rustVersion.release} ${rustVersion.host}`;
        hasher.update(keyRust);
        hasher.update(rustVersion["commit-hash"]);
        keyRust += ` (${rustVersion["commit-hash"]})`;
        self.keyRust = keyRust;
        // these prefixes should cover most of the compiler / rust / cargo keys
        const envPrefixes = ["CARGO", "CC", "CFLAGS", "CXX", "CMAKE", "RUST"];
        envPrefixes.push(...core.getInput("env-vars").split(/\s+/).filter(Boolean));
        // sort the available env vars so we have a more stable hash
        const keyEnvs = [];
        const envKeys = Object.keys(process.env);
        envKeys.sort((a, b) => a.localeCompare(b));
        for (const key of envKeys) {
            const value = process.env[key];
            if (envPrefixes.some((prefix) => key.startsWith(prefix)) && value) {
                hasher.update(`${key}=${value}`);
                keyEnvs.push(key);
            }
        }
        self.keyEnvs = keyEnvs;
        key += `-${digest(hasher)}`;
        self.restoreKey = key;
        // Construct the lockfiles portion of the key:
        // This considers all the files found via globbing for various manifests
        // and lockfiles.
        self.cacheBin = core.getInput("cache-bin").toLowerCase() == "true";
        // Constructs the workspace config and paths to restore:
        // The workspaces are given using a `$workspace -> $target` syntax.
        const workspaces = [];
        const workspacesInput = core.getInput("workspaces") || ".";
        for (const workspace of workspacesInput.trim().split("\n")) {
            let [root, target = "target"] = workspace.split("->").map((s) => s.trim());
            root = external_path_default().resolve(root);
            target = external_path_default().join(root, target);
            workspaces.push(new Workspace(root, target));
        }
        self.workspaces = workspaces;
        let keyFiles = await globFiles(".cargo/config.toml\nrust-toolchain\nrust-toolchain.toml");
        const parsedKeyFiles = []; // keyFiles that are parsed, pre-processed and hashed
        hasher = external_crypto_default().createHash("sha1");
        for (const workspace of workspaces) {
            const root = workspace.root;
            keyFiles.push(...(await globFiles(`${root}/**/.cargo/config.toml\n${root}/**/rust-toolchain\n${root}/**/rust-toolchain.toml`)));
            const workspaceMembers = await workspace.getWorkspaceMembers();
            const cargo_manifests = sort_and_uniq(workspaceMembers.map((member) => external_path_default().join(member.path, "Cargo.toml")));
            for (const cargo_manifest of cargo_manifests) {
                try {
                    const content = await promises_default().readFile(cargo_manifest, { encoding: "utf8" });
                    // Use any since TomlPrimitive is not exposed
                    const parsed = parse(content);
                    if ("package" in parsed) {
                        const pack = parsed.package;
                        if ("version" in pack) {
                            pack["version"] = "0.0.0";
                        }
                    }
                    for (const prefix of ["", "build-", "dev-"]) {
                        const section_name = `${prefix}dependencies`;
                        if (!(section_name in parsed)) {
                            continue;
                        }
                        const deps = parsed[section_name];
                        for (const key of Object.keys(deps)) {
                            const dep = deps[key];
                            try {
                                if ("path" in dep) {
                                    dep.version = "0.0.0";
                                    dep.path = "";
                                }
                            }
                            catch (_e) {
                                // Not an object, probably a string (version),
                                // continue.
                                continue;
                            }
                        }
                    }
                    hasher.update(JSON.stringify(parsed));
                    parsedKeyFiles.push(cargo_manifest);
                }
                catch (e) {
                    // Fallback to caching them as regular file
                    core.warning(`Error parsing Cargo.toml manifest, fallback to caching entire file: ${e}`);
                    keyFiles.push(cargo_manifest);
                }
            }
            const cargo_lock = external_path_default().join(workspace.root, "Cargo.lock");
            if (await exists(cargo_lock)) {
                try {
                    const content = await promises_default().readFile(cargo_lock, { encoding: "utf8" });
                    const parsed = parse(content);
                    if ((parsed.version !== 3 && parsed.version !== 4) || !("package" in parsed)) {
                        // Fallback to caching them as regular file since this action
                        // can only handle Cargo.lock format version 3
                        core.warning("Unsupported Cargo.lock format, fallback to caching entire file");
                        keyFiles.push(cargo_lock);
                        continue;
                    }
                    // Package without `[[package]].source` and `[[package]].checksum`
                    // are the one with `path = "..."` to crates within the workspace.
                    const packages = parsed.package.filter((p) => "source" in p || "checksum" in p);
                    hasher.update(JSON.stringify(packages));
                    parsedKeyFiles.push(cargo_lock);
                }
                catch (e) {
                    // Fallback to caching them as regular file
                    core.warning(`Error parsing Cargo.lock manifest, fallback to caching entire file: ${e}`);
                    keyFiles.push(cargo_lock);
                }
            }
        }
        keyFiles = sort_and_uniq(keyFiles);
        for (const file of keyFiles) {
            for await (const chunk of external_fs_default().createReadStream(file)) {
                hasher.update(chunk);
            }
        }
        let lockHash = digest(hasher);
        keyFiles.push(...parsedKeyFiles);
        self.keyFiles = sort_and_uniq(keyFiles);
        key += `-${lockHash}`;
        self.cacheKey = key;
        self.cachePaths = [external_path_default().join(CARGO_HOME, "registry"), external_path_default().join(CARGO_HOME, "git")];
        if (self.cacheBin) {
            self.cachePaths = [
                external_path_default().join(CARGO_HOME, "bin"),
                external_path_default().join(CARGO_HOME, ".crates.toml"),
                external_path_default().join(CARGO_HOME, ".crates2.json"),
                ...self.cachePaths,
            ];
        }
        const cacheTargets = core.getInput("cache-targets").toLowerCase() || "true";
        if (cacheTargets === "true") {
            self.cachePaths.push(...workspaces.map((ws) => ws.target));
        }
        const cacheDirectories = core.getInput("cache-directories");
        for (const dir of cacheDirectories.trim().split(/\s+/).filter(Boolean)) {
            self.cachePaths.push(dir);
        }
        const bins = await getCargoBins();
        self.cargoBins = Array.from(bins.values());
        return self;
    }
    /**
     * Reads and returns the cache config from the action `state`.
     *
     * @throws {Error} if the state is not present.
     * @returns {CacheConfig} the configuration.
     * @see {@link CacheConfig#saveState}
     * @see {@link CacheConfig#new}
     */
    static fromState() {
        const source = core.getState(STATE_CONFIG);
        if (!source) {
            throw new Error("Cache configuration not found in state");
        }
        const self = new CacheConfig();
        Object.assign(self, JSON.parse(source));
        self.workspaces = self.workspaces.map((w) => new Workspace(w.root, w.target));
        return self;
    }
    /**
     * Prints the configuration to the action log.
     */
    printInfo(cacheProvider) {
        core.startGroup("Cache Configuration");
        core.info(`Cache Provider:`);
        core.info(`    ${cacheProvider.name}`);
        core.info(`Workspaces:`);
        for (const workspace of this.workspaces) {
            core.info(`    ${workspace.root}`);
        }
        core.info(`Cache Paths:`);
        for (const path of this.cachePaths) {
            core.info(`    ${path}`);
        }
        core.info(`Restore Key:`);
        core.info(`    ${this.restoreKey}`);
        core.info(`Cache Key:`);
        core.info(`    ${this.cacheKey}`);
        core.info(`.. Prefix:`);
        core.info(`  - ${this.keyPrefix}`);
        core.info(`.. Environment considered:`);
        core.info(`  - Rust Version: ${this.keyRust}`);
        for (const env of this.keyEnvs) {
            core.info(`  - ${env}`);
        }
        core.info(`.. Lockfiles considered:`);
        for (const file of this.keyFiles) {
            core.info(`  - ${file}`);
        }
        core.endGroup();
    }
    /**
     * Saves the configuration to the state store.
     * This is used to restore the configuration in the post action.
     */
    saveState() {
        core.saveState(STATE_CONFIG, this);
    }
}
/**
 * Checks if the cache is up to date.
 *
 * @returns `true` if the cache is up to date, `false` otherwise.
 */
function isCacheUpToDate() {
    return core.getState(STATE_CONFIG) === "";
}
/**
 * Returns a hex digest of the given hasher truncated to `HASH_LENGTH`.
 *
 * @param hasher The hasher to digest.
 * @returns The hex digest.
 */
function digest(hasher) {
    return hasher.digest("hex").substring(0, HASH_LENGTH);
}
async function getRustVersion() {
    const stdout = await getCmdOutput("rustc", ["-vV"]);
    let splits = stdout
        .split(/[\n\r]+/)
        .filter(Boolean)
        .map((s) => s.split(":").map((s) => s.trim()))
        .filter((s) => s.length === 2);
    return Object.fromEntries(splits);
}
async function globFiles(pattern) {
    const globber = await glob.create(pattern, {
        followSymbolicLinks: false,
    });
    // fs.statSync resolve the symbolic link and returns stat for the
    // file it pointed to, so isFile would make sure the resolved
    // file is actually a regular file.
    return (await globber.glob()).filter((file) => external_fs_default().statSync(file).isFile());
}
function sort_and_uniq(a) {
    return a
        .sort((a, b) => a.localeCompare(b))
        .reduce((accumulator, currentValue) => {
        const len = accumulator.length;
        // If accumulator is empty or its last element != currentValue
        // Since array is already sorted, elements with the same value
        // are grouped together to be continugous in space.
        //
        // If currentValue != last element, then it must be unique.
        if (len == 0 || accumulator[len - 1].localeCompare(currentValue) != 0) {
            accumulator.push(currentValue);
        }
        return accumulator;
    }, []);
}

;// CONCATENATED MODULE: ./src/cleanup.ts






async function cleanTargetDir(targetDir, packages, checkTimestamp = false) {
    core.debug(`cleaning target directory "${targetDir}"`);
    // remove all *files* from the profile directory
    let dir = await external_fs_default().promises.opendir(targetDir);
    for await (const dirent of dir) {
        if (dirent.isDirectory()) {
            let dirName = external_path_default().join(dir.path, dirent.name);
            // is it a profile dir, or a nested target dir?
            let isNestedTarget = (await exists(external_path_default().join(dirName, "CACHEDIR.TAG"))) || (await exists(external_path_default().join(dirName, ".rustc_info.json")));
            try {
                if (isNestedTarget) {
                    await cleanTargetDir(dirName, packages, checkTimestamp);
                }
                else {
                    await cleanProfileTarget(dirName, packages, checkTimestamp);
                }
            }
            catch { }
        }
        else if (dirent.name !== "CACHEDIR.TAG") {
            await rm(dir.path, dirent);
        }
    }
}
async function cleanProfileTarget(profileDir, packages, checkTimestamp = false) {
    core.debug(`cleaning profile directory "${profileDir}"`);
    // Quite a few testing utility crates store compilation artifacts as nested
    // workspaces under `target/tests`. Notably, `target/tests/target` and
    // `target/tests/trybuild`.
    if (external_path_default().basename(profileDir) === "tests") {
        try {
            // https://github.com/vertexclique/kaos/blob/9876f6c890339741cc5be4b7cb9df72baa5a6d79/src/cargo.rs#L25
            // https://github.com/eupn/macrotest/blob/c4151a5f9f545942f4971980b5d264ebcd0b1d11/src/cargo.rs#L27
            cleanTargetDir(external_path_default().join(profileDir, "target"), packages, checkTimestamp);
        }
        catch { }
        try {
            // https://github.com/dtolnay/trybuild/blob/eec8ca6cb9b8f53d0caf1aa499d99df52cae8b40/src/cargo.rs#L50
            cleanTargetDir(external_path_default().join(profileDir, "trybuild"), packages, checkTimestamp);
        }
        catch { }
        // Delete everything else.
        await rmExcept(profileDir, new Set(["target", "trybuild"]), checkTimestamp);
        return;
    }
    let keepProfile = new Set(["build", ".fingerprint", "deps"]);
    await rmExcept(profileDir, keepProfile);
    const keepPkg = new Set(packages.map((p) => p.name));
    await rmExcept(external_path_default().join(profileDir, "build"), keepPkg, checkTimestamp);
    await rmExcept(external_path_default().join(profileDir, ".fingerprint"), keepPkg, checkTimestamp);
    const keepDeps = new Set(packages.flatMap((p) => {
        const names = [];
        for (const n of [p.name, ...p.targets]) {
            const name = n.replace(/-/g, "_");
            names.push(name, `lib${name}`);
        }
        return names;
    }));
    await rmExcept(external_path_default().join(profileDir, "deps"), keepDeps, checkTimestamp);
}
async function getCargoBins() {
    const bins = new Set();
    try {
        const { installs } = JSON.parse(await external_fs_default().promises.readFile(external_path_default().join(CARGO_HOME, ".crates2.json"), "utf8"));
        for (const pkg of Object.values(installs)) {
            for (const bin of pkg.bins) {
                bins.add(bin);
            }
        }
    }
    catch { }
    return bins;
}
/**
 * Clean the cargo bin directory, removing the binaries that existed
 * when the action started, as they were not created by the build.
 *
 * @param oldBins The binaries that existed when the action started.
 */
async function cleanBin(oldBins) {
    const bins = await getCargoBins();
    for (const bin of oldBins) {
        bins.delete(bin);
    }
    const dir = await external_fs_default().promises.opendir(external_path_default().join(CARGO_HOME, "bin"));
    for await (const dirent of dir) {
        if (dirent.isFile() && !bins.has(dirent.name)) {
            await rm(dir.path, dirent);
        }
    }
}
async function cleanRegistry(packages, crates = true) {
    // remove `.cargo/credentials.toml`
    try {
        const credentials = external_path_default().join(CARGO_HOME, ".cargo", "credentials.toml");
        core.debug(`deleting "${credentials}"`);
        await external_fs_default().promises.unlink(credentials);
    }
    catch { }
    // `.cargo/registry/index`
    let pkgSet = new Set(packages.map((p) => p.name));
    const indexDir = await external_fs_default().promises.opendir(external_path_default().join(CARGO_HOME, "registry", "index"));
    for await (const dirent of indexDir) {
        if (dirent.isDirectory()) {
            // eg `.cargo/registry/index/github.com-1ecc6299db9ec823`
            // or `.cargo/registry/index/index.crates.io-e139d0d48fed7772`
            const dirPath = external_path_default().join(indexDir.path, dirent.name);
            // for a git registry, we can remove `.cache`, as cargo will recreate it from git
            if (await exists(external_path_default().join(dirPath, ".git"))) {
                await rmRF(external_path_default().join(dirPath, ".cache"));
            }
            else {
                await cleanRegistryIndexCache(dirPath, pkgSet);
            }
        }
    }
    if (!crates) {
        core.debug("skipping registry cache and src cleanup");
        return;
    }
    // `.cargo/registry/src`
    // Cargo usually re-creates these from the `.crate` cache below,
    // but for some reason that does not work for `-sys` crates that check timestamps
    // to decide if rebuilds are necessary.
    pkgSet = new Set(packages.filter((p) => p.name.endsWith("-sys")).map((p) => `${p.name}-${p.version}`));
    const srcDir = await external_fs_default().promises.opendir(external_path_default().join(CARGO_HOME, "registry", "src"));
    for await (const dirent of srcDir) {
        if (dirent.isDirectory()) {
            // eg `.cargo/registry/src/github.com-1ecc6299db9ec823`
            // or `.cargo/registry/src/index.crates.io-e139d0d48fed7772`
            const dir = await external_fs_default().promises.opendir(external_path_default().join(srcDir.path, dirent.name));
            for await (const dirent of dir) {
                if (dirent.isDirectory() && !pkgSet.has(dirent.name)) {
                    await rmRF(external_path_default().join(dir.path, dirent.name));
                }
            }
        }
    }
    // `.cargo/registry/cache`
    pkgSet = new Set(packages.map((p) => `${p.name}-${p.version}.crate`));
    const cacheDir = await external_fs_default().promises.opendir(external_path_default().join(CARGO_HOME, "registry", "cache"));
    for await (const dirent of cacheDir) {
        if (dirent.isDirectory()) {
            // eg `.cargo/registry/cache/github.com-1ecc6299db9ec823`
            // or `.cargo/registry/cache/index.crates.io-e139d0d48fed7772`
            const dir = await external_fs_default().promises.opendir(external_path_default().join(cacheDir.path, dirent.name));
            for await (const dirent of dir) {
                // here we check that the downloaded `.crate` matches one from our dependencies
                if (dirent.isFile() && !pkgSet.has(dirent.name)) {
                    await rm(dir.path, dirent);
                }
            }
        }
    }
}
/// Recursively walks and cleans the index `.cache`
async function cleanRegistryIndexCache(dirName, keepPkg) {
    let dirIsEmpty = true;
    const cacheDir = await external_fs_default().promises.opendir(dirName);
    for await (const dirent of cacheDir) {
        if (dirent.isDirectory()) {
            if (await cleanRegistryIndexCache(external_path_default().join(dirName, dirent.name), keepPkg)) {
                await rm(dirName, dirent);
            }
            else {
                dirIsEmpty && (dirIsEmpty = false);
            }
        }
        else {
            if (keepPkg.has(dirent.name)) {
                dirIsEmpty && (dirIsEmpty = false);
            }
            else {
                await rm(dirName, dirent);
            }
        }
    }
    return dirIsEmpty;
}
async function cleanGit(packages) {
    const coPath = external_path_default().join(CARGO_HOME, "git", "checkouts");
    const dbPath = external_path_default().join(CARGO_HOME, "git", "db");
    const repos = new Map();
    for (const p of packages) {
        if (!p.path.startsWith(coPath)) {
            continue;
        }
        const [repo, ref] = p.path.slice(coPath.length + 1).split((external_path_default()).sep);
        const refs = repos.get(repo);
        if (refs) {
            refs.add(ref);
        }
        else {
            repos.set(repo, new Set([ref]));
        }
    }
    // we have to keep both the clone, and the checkout, removing either will
    // trigger a rebuild
    // clean the db
    try {
        let dir = await external_fs_default().promises.opendir(dbPath);
        for await (const dirent of dir) {
            if (!repos.has(dirent.name)) {
                await rm(dir.path, dirent);
            }
        }
    }
    catch { }
    // clean the checkouts
    try {
        let dir = await external_fs_default().promises.opendir(coPath);
        for await (const dirent of dir) {
            const refs = repos.get(dirent.name);
            if (!refs) {
                await rm(dir.path, dirent);
                continue;
            }
            if (!dirent.isDirectory()) {
                continue;
            }
            const refsDir = await external_fs_default().promises.opendir(external_path_default().join(dir.path, dirent.name));
            for await (const dirent of refsDir) {
                if (!refs.has(dirent.name)) {
                    await rm(refsDir.path, dirent);
                }
            }
        }
    }
    catch { }
}
const ONE_WEEK = 7 * 24 * 3600 * 1000;
/**
 * Removes all files or directories in `dirName` matching some criteria.
 *
 * When the `checkTimestamp` flag is set, this will also remove anything older
 * than one week.
 *
 * Otherwise, it will remove everything that does not match any string in the
 * `keepPrefix` set.
 * The matching strips and trailing `-$hash` suffix.
 */
async function rmExcept(dirName, keepPrefix, checkTimestamp = false) {
    const dir = await external_fs_default().promises.opendir(dirName);
    for await (const dirent of dir) {
        if (checkTimestamp) {
            const fileName = external_path_default().join(dir.path, dirent.name);
            const { mtime } = await external_fs_default().promises.stat(fileName);
            const isOutdated = Date.now() - mtime.getTime() > ONE_WEEK;
            if (isOutdated) {
                await rm(dir.path, dirent);
            }
            return;
        }
        let name = dirent.name;
        // strip the trailing hash
        const idx = name.lastIndexOf("-");
        if (idx !== -1) {
            name = name.slice(0, idx);
        }
        if (!keepPrefix.has(name)) {
            await rm(dir.path, dirent);
        }
    }
}
async function rm(parent, dirent) {
    try {
        const fileName = external_path_default().join(parent, dirent.name);
        core.debug(`deleting "${fileName}"`);
        if (dirent.isFile()) {
            await external_fs_default().promises.unlink(fileName);
        }
        else if (dirent.isDirectory()) {
            await io.rmRF(fileName);
        }
    }
    catch { }
}
async function rmRF(dirName) {
    core.debug(`deleting "${dirName}"`);
    await io.rmRF(dirName);
}

;// CONCATENATED MODULE: ./src/save.ts





process.on("uncaughtException", (e) => {
    core.error(e.message);
    if (e.stack) {
        core.error(e.stack);
    }
});
async function run() {
    const cacheProvider = getCacheProvider();
    const save = core.getInput("save-if").toLowerCase() || "true";
    if (!(cacheProvider.cache.isFeatureAvailable() && save === "true")) {
        return;
    }
    try {
        if (isCacheUpToDate()) {
            core.info(`Cache up-to-date.`);
            return;
        }
        const config = CacheConfig.fromState();
        config.printInfo(cacheProvider);
        core.info("");
        // TODO: remove this once https://github.com/actions/toolkit/pull/553 lands
        if (process.env["RUNNER_OS"] == "macOS") {
            await macOsWorkaround();
        }
        const allPackages = [];
        for (const workspace of config.workspaces) {
            const packages = await workspace.getPackagesOutsideWorkspaceRoot();
            allPackages.push(...packages);
            try {
                core.info(`... Cleaning ${workspace.target} ...`);
                await cleanTargetDir(workspace.target, packages);
            }
            catch (e) {
                core.debug(`${e.stack}`);
            }
        }
        try {
            const crates = core.getInput("cache-all-crates").toLowerCase() || "false";
            core.info(`... Cleaning cargo registry (cache-all-crates: ${crates}) ...`);
            await cleanRegistry(allPackages, crates !== "true");
        }
        catch (e) {
            core.debug(`${e.stack}`);
        }
        if (config.cacheBin) {
            try {
                core.info(`... Cleaning cargo/bin ...`);
                await cleanBin(config.cargoBins);
            }
            catch (e) {
                core.debug(`${e.stack}`);
            }
        }
        try {
            core.info(`... Cleaning cargo git cache ...`);
            await cleanGit(allPackages);
        }
        catch (e) {
            core.debug(`${e.stack}`);
        }
        core.info(`... Saving cache ...`);
        // Pass a copy of cachePaths to avoid mutating the original array as reported by:
        // https://github.com/actions/toolkit/pull/1378
        // TODO: remove this once the underlying bug is fixed.
        await cacheProvider.cache.saveCache(config.cachePaths.slice(), config.cacheKey);
    }
    catch (e) {
        reportError(e);
    }
    process.exit();
}
run();
async function macOsWorkaround() {
    try {
        // Workaround for https://github.com/actions/cache/issues/403
        // Also see https://github.com/rust-lang/cargo/issues/8603
        await exec.exec("sudo", ["/usr/sbin/purge"], { silent: true });
    }
    catch { }
}

})();

module.exports = __webpack_exports__;
/******/ })()
;